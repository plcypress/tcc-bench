Command: /itch/common/crepos/tcc-scripts/tidy-braces.sh
Directory: /itch/common/crepos/cu-to-rtu/c/nettle-3.9
----------------------------------------

Enabled checks:
    clang-analyzer-apiModeling.Errno
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.TrustReturnsNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.BitwiseShift
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DereferenceModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.NewArraySize
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.ArrayDelete
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PlacementNew
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtrModeling
    clang-analyzer-cplusplus.StringChecker
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.core.EnumCastOutOfRange
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-optin.taint.GenericTaint
    clang-analyzer-optin.taint.TaintPropagation
    clang-analyzer-optin.taint.TaintedAlloc
    clang-analyzer-optin.taint.TaintedDiv
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.ArrayBound
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.MmapWriteExec
    clang-analyzer-security.PointerSub
    clang-analyzer-security.PutenvStackArray
    clang-analyzer-security.SetgidSetuidOrder
    clang-analyzer-security.cert.env.InvalidPtr
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.BlockInCriticalSection
    clang-analyzer-unix.Chroot
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Errno
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.StdCLibraryFunctions
    clang-analyzer-unix.Stream
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NotNullTerminated
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    clang-analyzer-webkit.NoUncountedMemberChecker
    clang-analyzer-webkit.RefCntblBaseVirtualDtor
    clang-analyzer-webkit.UncountedLambdaCapturesChecker
    readability-braces-around-statements

Running clang-tidy for 277 files out of 277 in compilation database ...
[  1/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpomyet71y.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-encrypt.c
[  2/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp36htufz0.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cast128-meta.c
[  3/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp78_sw68r.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-set-decrypt-key.c
[  4/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp6k5kpcys.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-camellia256-meta.c
[  5/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp8c2c7vh0.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha224.c
[  6/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpfpg_ormz.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-384-meta.c
[  7/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpmdz5exrp.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia-table.c
[  8/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp6d61py9m.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gosthash94-meta.c
[  9/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpmrvnkrin.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-aes192.c
[ 10/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpyji8aite.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ccm-aes192.c
[ 11/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpcmgc89dx.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-set-decrypt-key.c
[ 12/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1rqc0wh4.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md5.c
[1mmd5.c:59:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   59 |   memcpy(ctx->state, iv, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd5.c:59:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   59 |   memcpy(ctx->state, iv, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd5.c:71:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   71 |   MD_UPDATE(ctx, length, data, COMPRESS, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mmd5.c:71:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   71 |   MD_UPDATE(ctx, length, data, COMPRESS, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mmd5.c:83:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   83 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1mmd5.c:83:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   83 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m6 warnings generated.

[ 13/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpdjjg19rt.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/poly1305-aes.c
[1mpoly1305-aes.c:56:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   56 |   memcpy (ctx->nonce, nonce, POLY1305_AES_NONCE_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1mpoly1305-aes.c:56:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   56 |   memcpy (ctx->nonce, nonce, POLY1305_AES_NONCE_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1mpoly1305-aes.c:78:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   78 |       memset (ctx->block + ctx->index + 1,[0m
      | [0;1;32m      ^~~~~~
[0m[1mpoly1305-aes.c:78:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   78 |       memset (ctx->block + ctx->index + 1,[0m
      | [0;1;32m      ^~~~~~
[0m[1mpoly1305-aes.c:86:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   86 |   memcpy (digest, s.b, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mpoly1305-aes.c:86:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   86 |   memcpy (digest, s.b, length);[0m
      | [0;1;32m  ^~~~~~
[0m3 warnings generated.

[ 14/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp4y7vqwt7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha1-compress.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1msha1-compress.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha1-compress.s.
Found compiler error(s).

[ 15/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpwiw92kzn.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/buffer-init.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 16/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp8nyhsvo7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc.c
[1mcbc.c:59:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   59 |       memcpy(iv, dst, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcbc.c:59:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   59 |       memcpy(iv, dst, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcbc.c:74:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   74 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   75 |     return;[0m
      | [0;1;32m           
[0m[1mcbc.c:85:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   85 |       memcpy(iv, src + length - block_size, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcbc.c:85:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   85 |       memcpy(iv, src + length - block_size, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcbc.c:103:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  103 |       if (length <= CBC_BUFFER_LIMIT)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  104 |         buffer_size = length;[0m
  105 |       else[0m
      | [0;32m      } 
[0m[1mcbc.c:105:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  105 |       else[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  106 |         buffer_size[0m
  107 |           = CBC_BUFFER_LIMIT - (CBC_BUFFER_LIMIT % block_size);[0m
      | [0;1;32m                                                               
[0m[1mcbc.c:115:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  115 |           memcpy(initial_iv, iv, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcbc.c:115:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  115 |           memcpy(initial_iv, iv, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcbc.c:116:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  116 |           memcpy(iv, dst + buffer_size - block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcbc.c:116:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  116 |           memcpy(iv, dst + buffer_size - block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcbc.c:123:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  123 |       memcpy(initial_iv, iv, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcbc.c:123:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  123 |       memcpy(initial_iv, iv, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcbc.c:125:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  125 |       memcpy(iv, dst + length - block_size, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcbc.c:125:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  125 |       memcpy(iv, dst + length - block_size, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m11 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 17/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpyp8zjswo.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/nist-keywrap.c
[1mnist-keywrap.c:65:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   65 |   memcpy (R, cleartext, (ciphertext_length - 8));[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:65:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   65 |   memcpy (R, cleartext, (ciphertext_length - 8));[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:66:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   66 |   memcpy (A.b, iv, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:66:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   66 |   memcpy (A.b, iv, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:74:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   74 |           memcpy (I.b + 8, R + (i * 8), 8);[0m
      | [0;1;32m          ^~~~~~
[0m[1mnist-keywrap.c:74:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   74 |           memcpy (I.b + 8, R + (i * 8), 8);[0m
      | [0;1;32m          ^~~~~~
[0m[1mnist-keywrap.c:83:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   83 |           memcpy (R + (i * 8), B.b + 8, 8);[0m
      | [0;1;32m          ^~~~~~
[0m[1mnist-keywrap.c:83:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   83 |           memcpy (R + (i * 8), B.b + 8, 8);[0m
      | [0;1;32m          ^~~~~~
[0m[1mnist-keywrap.c:87:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   87 |   memcpy (ciphertext, A.b, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:87:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   87 |   memcpy (ciphertext, A.b, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:107:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  107 |   memcpy (A.b, ciphertext, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:107:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  107 |   memcpy (A.b, ciphertext, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:108:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  108 |   memcpy (R, ciphertext + 8, cleartext_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:108:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  108 |   memcpy (R, ciphertext + 8, cleartext_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mnist-keywrap.c:116:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  116 |           memcpy (I.b + 8, R + (i * 8), 8);[0m
      | [0;1;32m          ^~~~~~
[0m[1mnist-keywrap.c:116:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  116 |           memcpy (I.b + 8, R + (i * 8), 8);[0m
      | [0;1;32m          ^~~~~~
[0m[1mnist-keywrap.c:123:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  123 |           memcpy (R + (i * 8), B.b + 8, 8);[0m
      | [0;1;32m          ^~~~~~
[0m[1mnist-keywrap.c:123:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  123 |           memcpy (R + (i * 8), B.b + 8, 8);[0m
      | [0;1;32m          ^~~~~~
[0m11 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 18/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmptl0197y8.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/serpent-encrypt.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mserpent-encrypt.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/serpent-encrypt.s.
Found compiler error(s).

[ 19/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp8q6xgbdq.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-decrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1maes128-decrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-decrypt-2.s.
Found compiler error(s).

[ 20/277][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpah5w0sjx.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-sm4-meta.c
[ 21/277][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpe16ihu1w.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia128-crypt.c
[ 22/277][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1fn6caze.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/pbkdf2-hmac-gosthash94.c
[ 23/277][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpc8w520_d.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/chacha-set-nonce.c
[ 24/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpevggkf2z.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/poly1305-blocks.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mpoly1305-blocks.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/poly1305-blocks.s.
Found compiler error(s).

[ 25/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbu2k6ame.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-encrypt.c
[1maes-encrypt.c:52:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   52 |     default: abort();[0m
      | [0;1;32m             ^      
[0m      | [0;32m             {      ;} 
[0m[1maes-encrypt.c:54:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   54 |       aes128_encrypt(&ctx->u.ctx128, length, dst, src);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   55 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:52:24: [0m[0;1;36mnote: [0mexpanded from macro 'aes128_encrypt'[0m
   52 | #define aes128_encrypt nettle_aes128_encrypt[0m
      | [0;1;32m                       ^
[0m[1maes-encrypt.c:57:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   57 |       aes192_encrypt(&ctx->u.ctx192, length, dst, src);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   58 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:57:24: [0m[0;1;36mnote: [0mexpanded from macro 'aes192_encrypt'[0m
   57 | #define aes192_encrypt nettle_aes192_encrypt[0m
      | [0;1;32m                       ^
[0m[1maes-encrypt.c:60:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   60 |       aes256_encrypt(&ctx->u.ctx256, length, dst, src);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   61 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:62:24: [0m[0;1;36mnote: [0mexpanded from macro 'aes256_encrypt'[0m
   62 | #define aes256_encrypt nettle_aes256_encrypt[0m
      | [0;1;32m                       ^
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 26/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpu88uk1a9.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base16-encode.c
[1mbase16-encode.c:63:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   63 |   for (i = 0; i<length; i++, dst += 2)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m   64 |     base16_encode_single(dst, src[i]);[0m
      | [0;1;32m                                      
[0m1 warning generated.

[ 27/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpvo5fnb7i.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cfb.c
[1mcfb.c:76:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |   if (p != iv)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   77 |     memcpy(iv, p, block_size);[0m
      | [0;1;32m                              
[0m[1mcfb.c:77:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   77 |     memcpy(iv, p, block_size);[0m
      | [0;1;32m    ^~~~~~
[0m[1mcfb.c:77:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   77 |     memcpy(iv, p, block_size);[0m
      | [0;1;32m    ^~~~~~
[0m[1mcfb.c:107:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  107 |           memcpy(iv, src + length - block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:107:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  107 |           memcpy(iv, src + length - block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:151:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  151 |           memcpy(iv, dst + part - block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:151:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  151 |           memcpy(iv, dst + part - block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:180:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  180 |   memcpy(buffer, iv, block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:180:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  180 |   memcpy(buffer, iv, block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:188:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  188 |           memcpy(buffer, buffer + block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:188:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  188 |           memcpy(buffer, buffer + block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:198:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  198 |   memcpy(iv, buffer + pos, block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:198:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  198 |   memcpy(iv, buffer + pos, block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:213:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  213 |   memcpy(buffer, iv, block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:213:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  213 |   memcpy(buffer, iv, block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:214:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  214 |   memcpy(buffer + block_size, src,[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:214:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  214 |   memcpy(buffer + block_size, src,[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:220:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  220 |       for (i = 0; i < length && i < block_size; i++)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  221 |         f(ctx, block_size, outbuf + i, buffer + i);[0m
      | [0;1;32m                                                   
[0m[1mcfb.c:231:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  231 |           memcpy(buffer, buffer + block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:231:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  231 |           memcpy(buffer, buffer + block_size, block_size);[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:232:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  232 |           memcpy(buffer + block_size, src,[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:232:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  232 |           memcpy(buffer + block_size, src,[0m
      | [0;1;32m          ^~~~~~
[0m[1mcfb.c:237:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  237 |   memcpy(iv, buffer + i, block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcfb.c:237:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  237 |   memcpy(iv, buffer + i, block_size);[0m
      | [0;1;32m  ^~~~~~
[0m15 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 28/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp49m7lzid.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cmac.c
[1mcmac.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |   memset(&ctx->X, 0, sizeof(ctx->X));[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac.c:67:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   67 |   memset(&ctx->X, 0, sizeof(ctx->X));[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac.c:85:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   85 |       memcpy(&ctx->block.b[ctx->index], msg, len);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac.c:85:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   85 |       memcpy(&ctx->block.b[ctx->index], msg, len);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac.c:114:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  114 |   memcpy(ctx->block.b, msg, msg_len);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac.c:114:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  114 |   memcpy(ctx->block.b, msg, msg_len);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac.c:129:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  129 |       memset(ctx->block.b + ctx->index + 1, 0, 16 - 1 - ctx->index);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac.c:129:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  129 |       memset(ctx->block.b + ctx->index + 1, 0, 16 - 1 - ctx->index);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac.c:148:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  148 |       memcpy(dst, ctx->block.b, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac.c:148:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  148 |       memcpy(dst, ctx->block.b, length);[0m
      | [0;1;32m      ^~~~~~
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 29/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpodnt433b.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-set-encrypt-key.c
[ 30/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpjvundgqq.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/pbkdf2-hmac-sha1.c
[ 31/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpqf_6zz6o.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cmac-aes128-meta.c
[ 32/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpqd68id3e.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md2-meta.c
[ 33/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmppqwzvt6u.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-aes192-meta.c
[ 34/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpk1lp653b.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha512.c
[ 35/277][1.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpyr9b64ik.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes128-encrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mcbc-aes128-encrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes128-encrypt-2.s.
Found compiler error(s).

[ 36/277][1.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp8_cmoj6_.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-decrypt.c
[1maes-decrypt.c:49:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   49 |     default: abort();[0m
      | [0;1;32m             ^      
[0m      | [0;32m             {      ;} 
[0m[1maes-decrypt.c:51:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   51 |       aes128_decrypt(&ctx->u.ctx128, length, dst, src);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   52 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:53:24: [0m[0;1;36mnote: [0mexpanded from macro 'aes128_decrypt'[0m
   53 | #define aes128_decrypt nettle_aes128_decrypt[0m
      | [0;1;32m                       ^
[0m[1maes-decrypt.c:54:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   54 |       aes192_decrypt(&ctx->u.ctx192, length, dst, src);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   55 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:58:24: [0m[0;1;36mnote: [0mexpanded from macro 'aes192_decrypt'[0m
   58 | #define aes192_decrypt nettle_aes192_decrypt[0m
      | [0;1;32m                       ^
[0m[1maes-decrypt.c:57:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   57 |       aes256_decrypt(&ctx->u.ctx256, length, dst, src);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   58 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:63:24: [0m[0;1;36mnote: [0mexpanded from macro 'aes256_decrypt'[0m
   63 | #define aes256_decrypt nettle_aes256_decrypt[0m
      | [0;1;32m                       ^
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 37/277][1.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmph55s9ry1.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/serpent-decrypt.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mserpent-decrypt.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/serpent-decrypt.s.
Found compiler error(s).

[ 38/277][2.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpa7x0uj98.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-permute.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1msha3-permute.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-permute.s.
Found compiler error(s).

[ 39/277][2.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpzb9rf5ob.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-decrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1maes256-decrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-decrypt-2.s.
Found compiler error(s).

[ 40/277][2.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2cxx3ezo.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/nettle-meta-armors.c
[ 41/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpc7vn6s3e.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/examples/base16dec.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 42/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpplsr4klh.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/realloc.c
[1mrealloc.c:47:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   47 |   if (length > 0)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   48 |     return realloc(p, length);[0m
      | [0;1;32m                              
[0m[1mrealloc.c:62:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   62 |           fprintf(stderr, "Virtual memory exhausted.\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mrealloc.c:62:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   62 |           fprintf(stderr, "Virtual memory exhausted.\n");[0m
      | [0;1;32m          ^~~~~~~
[0m4 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 43/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpr4diixmp.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ocb-aes128.c
[ 44/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1djns7ut.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-aes128-meta.c
[ 45/277][3.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbx8c9jx2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/poly1305-update.c
[1mpoly1305-update.c:63:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   63 |       MD_FILL_OR_RETURN_INDEX (POLY1305_BLOCK_SIZE, block, index,[0m
      | [0;1;32m      ^
[0m[1m./md-internal.h:63:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_FILL_OR_RETURN_INDEX'[0m
   63 |         memcpy(block + (index), (data), (length));                      \[0m
      | [0;1;32m        ^~~~~~
[0m[1mpoly1305-update.c:63:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   63 |       MD_FILL_OR_RETURN_INDEX (POLY1305_BLOCK_SIZE, block, index,[0m
      | [0;1;32m      ^
[0m[1m./md-internal.h:63:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_FILL_OR_RETURN_INDEX'[0m
   63 |         memcpy(block + (index), (data), (length));                      \[0m
      | [0;1;32m        ^~~~~~
[0m[1mpoly1305-update.c:76:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   76 |   memcpy (block, m, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mpoly1305-update.c:76:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   76 |   memcpy (block, m, length);[0m
      | [0;1;32m  ^~~~~~
[0m3 warnings generated.

[ 46/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp5zw15nv7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha512-meta.c
[ 47/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmplg3u7954.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base16-meta.c
[ 48/277][3.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmppip5dop4.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-set-key-internal.c
[1maes-set-key-internal.c:59:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   59 |   for (i=0, rp = rcon; i<nk; i++)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m   60 |     subkeys[i] = LE_READ_UINT32(key + i*4);[0m
      | [0;1;32m                                           
[0m[1maes-set-key-internal.c:65:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   65 |       if (i % nk == 0)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   66 |         t = SUBBYTE(ROTL32(24, t), aes_sbox) ^ *rp++;[0m
   67 | [0m
   68 |       else if (nk > 6 && (i%nk) == 4)[0m
      | [0;32m      } 
[0m[1maes-set-key-internal.c:68:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |       else if (nk > 6 && (i%nk) == 4)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   69 |         t = SUBBYTE(t, aes_sbox);[0m
      | [0;1;32m                                 
[0m3 warnings generated.

[ 49/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpzy8wyd33.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/write-be32.c
[1mwrite-be32.c:53:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |   for (i = 0; i < words; i++, dst += 4)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   54 |     WRITE_UINT32(dst, src[i]);[0m
      | [0;1;32m                              
[0m[1mwrite-be32.c:66:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   66 |           abort();[0m
      | [0;1;32m          ^      
[0m      | [0;32m          {      ;} 
[0m[1mwrite-be32.c:68:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   68 |           dst[--j] = (word >> 8) & 0xff;[0m
      | [0;1;32m          ^                            
[0m      | [0;32m          {                            ;} 
[0m[1mwrite-be32.c:71:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   71 |           dst[--j] = (word >> 16) & 0xff;[0m
      | [0;1;32m          ^                             
[0m      | [0;32m          {                             ;} 
[0m[1mwrite-be32.c:74:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   74 |           dst[--j] = (word >> 24) & 0xff;[0m
      | [0;1;32m          ^                             
[0m      | [0;32m          {                             ;} 
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 50/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp9gam89jo.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-512.c
[1msha3-512.c:49:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   49 |   memset (ctx, 0, offsetof (struct sha3_512_ctx, block));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha3-512.c:49:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   49 |   memset (ctx, 0, offsetof (struct sha3_512_ctx, block));[0m
      | [0;1;32m  ^~~~~~
[0m1 warning generated.

[ 51/277][1.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpm__jmy9q.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3.c
[1msha3.c:75:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   75 |           memcpy (block + pos, data, length);[0m
      | [0;1;32m          ^~~~~~
[0m[1msha3.c:75:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   75 |           memcpy (block + pos, data, length);[0m
      | [0;1;32m          ^~~~~~
[0m[1msha3.c:80:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   80 |           memcpy (block + pos, data, left);[0m
      | [0;1;32m          ^~~~~~
[0m[1msha3.c:80:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   80 |           memcpy (block + pos, data, left);[0m
      | [0;1;32m          ^~~~~~
[0m[1msha3.c:86:73: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   86 |   for (; length >= block_size; length -= block_size, data += block_size)[0m
      | [0;1;32m                                                                        ^
[0m      | [0;32m                                                                         {
[0m   87 |     sha3_absorb (state, block_size, data);[0m
      | [0;1;32m                                          
[0m[1msha3.c:89:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   89 |   memcpy (block, data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1msha3.c:89:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   89 |   memcpy (block, data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1msha3.c:100:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  100 |   memset (block + pos, 0, block_size - pos);[0m
      | [0;1;32m  ^~~~~~
[0m[1msha3.c:100:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  100 |   memset (block + pos, 0, block_size - pos);[0m
      | [0;1;32m  ^~~~~~
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 52/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmptv4ca6jk.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tools/misc.c
[1mmisc.c:68:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   68 |       fprintf(stderr, "Virtual memory exhausted.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mmisc.c:68:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   68 |       fprintf(stderr, "Virtual memory exhausted.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 53/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpipna7ph8.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sm3-meta.c
[ 54/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpjov9w_u8.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cmac-aes256-meta.c
[ 55/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp4v1zarja.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-nh-n.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mumac-nh-n.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-nh-n.s.
Found compiler error(s).

[ 56/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1wyjyyzd.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cpuid.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mcpuid.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cpuid.s.
Found compiler error(s).

[ 57/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_20x9x4l.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hkdf.c
[1mhkdf.c:69:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   69 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   70 |     return;[0m
      | [0;1;32m           
[0m[1mhkdf.c:76:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |       if (length <= digest_size)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   77 |         break;[0m
      | [0;1;32m              
[0m2 warnings generated.

[ 58/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp5kwntaib.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-256.c
[1msha3-256.c:49:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   49 |   memset (ctx, 0, offsetof (struct sha3_256_ctx, block));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha3-256.c:49:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   49 |   memset (ctx, 0, offsetof (struct sha3_256_ctx, block));[0m
      | [0;1;32m  ^~~~~~
[0m1 warning generated.

[ 59/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_7q18ajs.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia128-set-decrypt-key.c
[ 60/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpxkfr52qg.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/nettle-meta-aeads.c
[ 61/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp226vl54l.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes128-encrypt.c
[ 62/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2erhq469.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/pbkdf2-hmac-sha512.c
[ 63/277][0.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp35bio94s.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-meta.c
[ 64/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp8d8wpfk3.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-invert-internal.c
[1maes-invert-internal.c:148:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  148 |            i += 4, j -= 4)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  149 |         for (k = 0; k<4; k++)[0m
  150 |           SWAP(dst[i+k], dst[j+k]);[0m
      | [0;1;32m                                   
[0m[1maes-invert-internal.c:149:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |         for (k = 0; k<4; k++)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  150 |           SWAP(dst[i+k], dst[j+k]);[0m
      | [0;1;32m                                   
[0m[1maes-invert-internal.c:156:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  156 |       for (i = 0; i <= rounds * 4; i += 4)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  157 |         for (k = 0; k < 4; k++)[0m
  158 |           dst[i+k] = src[rounds * 4 - i + k];[0m
      | [0;1;32m                                             
[0m[1maes-invert-internal.c:157:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  157 |         for (k = 0; k < 4; k++)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  158 |           dst[i+k] = src[rounds * 4 - i + k];[0m
      | [0;1;32m                                             
[0m[1maes-invert-internal.c:162:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  162 |   for (i = 4; i < 4 * rounds; i++)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  163 |     MIX_COLUMN (mtable, dst[i]);[0m
      | [0;1;32m                                
[0m5 warnings generated.

[ 65/277][0.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp52f3ljbl.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cmac-aes128.c
[ 66/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpdwr3hvte.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ripemd160.c
[1mripemd160.c:169:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  169 |   memcpy(ctx->state, iv, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mripemd160.c:169:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  169 |   memcpy(ctx->state, iv, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mripemd160.c:182:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  182 |   MD_UPDATE(ctx, length, data, COMPRESS, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mripemd160.c:182:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  182 |   MD_UPDATE(ctx, length, data, COMPRESS, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mripemd160.c:192:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  192 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1mripemd160.c:192:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  192 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m6 warnings generated.

[ 67/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmptoguawoh.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha1.c
[1msha1.c:64:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   64 |   memcpy(ctx->state, iv, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha1.c:64:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   64 |   memcpy(ctx->state, iv, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha1.c:77:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   77 |   MD_UPDATE (ctx, length, data, COMPRESS, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1msha1.c:77:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   77 |   MD_UPDATE (ctx, length, data, COMPRESS, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1msha1.c:89:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   89 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1msha1.c:89:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   89 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m8 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 68/277][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp02aoovfq.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha224-meta.c
[ 69/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpdtsmkpt5.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes192-encrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mcbc-aes192-encrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes192-encrypt-2.s.
Found compiler error(s).

[ 70/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpg4y7b7hu.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-aes256-meta.c
[ 71/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpx_o5u0me.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/poly1305-internal.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mpoly1305-internal.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/poly1305-internal.s.
Found compiler error(s).

[ 72/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp4wzwppcy.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md5-meta.c
[ 73/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpjq_rqs7m.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/nettle-lookup-hash.c
[1mnettle-lookup-hash.c:46:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   46 |   for (i = 0; _nettle_hashes[i]; i++)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   47 |     if (!strcmp (name, _nettle_hashes[i]->name))[0m
   48 |       return _nettle_hashes[i];[0m
      | [0;1;32m                               
[0m[1mnettle-lookup-hash.c:47:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   47 |     if (!strcmp (name, _nettle_hashes[i]->name))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m   48 |       return _nettle_hashes[i];[0m
      | [0;1;32m                               
[0m4 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 74/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpl475phwt.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha256-compress-n-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1msha256-compress-n-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha256-compress-n-2.s.
Found compiler error(s).

[ 75/277][1.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmppnd7x8xj.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-384.c
[1msha3-384.c:49:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   49 |   memset (ctx, 0, offsetof (struct sha3_384_ctx, block));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha3-384.c:49:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   49 |   memset (ctx, 0, offsetof (struct sha3_384_ctx, block));[0m
      | [0;1;32m  ^~~~~~
[0m1 warning generated.

[ 76/277][1.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpk3hvngyx.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/arctwo-meta.c
[ 77/277][1.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmphhbg6nud.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-aes.c
[ 78/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp4s437o5v.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ccm-aes128.c
[ 79/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpj3uqm746.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha256-meta.c
[ 80/277][4.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmprf9shrm8.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-poly64.c
[1mumac-poly64.c:59:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   59 |   if (pl < ph)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   60 |     pl += UMAC_P64_OFFSET;[0m
      | [0;1;32m                          
[0m[1mumac-poly64.c:71:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   71 |       if (y == 0)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   72 |         y = UMAC_P64 - 1;[0m
   73 |       else[0m
      | [0;32m      } 
[0m[1mumac-poly64.c:73:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |       else[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m   74 |         y--;[0m
      | [0;1;32m            
[0m[1mumac-poly64.c:79:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   79 |   if (y < m)[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   80 |     y += UMAC_P64_OFFSET;[0m
      | [0;1;32m                         
[0m4 warnings generated.

[ 81/277][9.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpz40xybt9.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ripemd160-compress.c
[1mripemd160-compress.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |   memcpy(x, data, sizeof(x));[0m
      | [0;1;32m  ^~~~~~
[0m[1mripemd160-compress.c:67:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   67 |   memcpy(x, data, sizeof(x));[0m
      | [0;1;32m  ^~~~~~
[0m1 warning generated.

[ 82/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp3zwj053i.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha512-224-meta.c
[ 83/277][5.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_fu0au7i.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tools/nettle-pbkdf2.c
[1mnettle-pbkdf2.c:56:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   56 |   fprintf(f, "Usage: nettle-pbkdf2 [OPTIONS] SALT\n"[0m
      | [0;1;32m  ^~~~~~~
[0m[1mnettle-pbkdf2.c:56:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   56 |   fprintf(f, "Usage: nettle-pbkdf2 [OPTIONS] SALT\n"[0m
      | [0;1;32m  ^~~~~~~
[0m[1mnettle-pbkdf2.c:97:71: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |   while ( (c = getopt_long(argc, argv, "Vl:i:", options, NULL)) != -1)[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m[1mnettle-pbkdf2.c:101:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  101 |         abort();[0m
      | [0;1;32m        ^      
[0m      | [0;32m        {      ;} 
[0m[1mnettle-pbkdf2.c:103:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  103 |         usage (stderr);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  104 |         return EXIT_FAILURE;[0m
      | [0;1;32m                           
[0m      | [0;32m                           ;} 
[0m[1mnettle-pbkdf2.c:106:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  106 |         usage (stdout);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  107 |         return EXIT_SUCCESS;[0m
      | [0;1;32m                           
[0m      | [0;32m                           ;} 
[0m[1mnettle-pbkdf2.c:109:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  109 |         printf("nettle-pbkdf2 (" PACKAGE_STRING ")\n");[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  110 |         return EXIT_SUCCESS;[0m
      | [0;1;32m                           
[0m      | [0;32m                           ;} 
[0m[1mnettle-pbkdf2.c:112:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  112 |         {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  113 |           int arg;[0m
  114 |           arg = atoi (optarg);[0m
  115 |           if (arg <= 0)[0m
  116 |             die ("Invalid length argument: `%s'\n", optarg);[0m
  117 | [0m
  118 |           output_length = arg;[0m
  119 |         }[0m
  120 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mnettle-pbkdf2.c:115:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  115 |           if (arg <= 0)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  116 |             die ("Invalid length argument: `%s'\n", optarg);[0m
      | [0;1;32m                                                            
[0m[1mnettle-pbkdf2.c:122:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  122 |         {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  123 |           int arg;[0m
  124 |           arg = atoi (optarg);[0m
  125 |           if (arg <= 0)[0m
  126 |             die ("Invalid iteration count: `%s'\n", optarg);[0m
  127 |           iterations = arg;[0m
  128 |         }[0m
  129 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mnettle-pbkdf2.c:125:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  125 |           if (arg <= 0)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  126 |             die ("Invalid iteration count: `%s'\n", optarg);[0m
      | [0;1;32m                                                            
[0m[1mnettle-pbkdf2.c:131:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  131 |         raw = 1;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  132 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mnettle-pbkdf2.c:134:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  134 |         hex_salt = 1;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  135 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mnettle-pbkdf2.c:147:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  147 |   if (!salt)[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  148 |     die ("strdup failed: Virtual memory exhausted.\n");[0m
      | [0;1;32m                                                       
[0m[1mnettle-pbkdf2.c:160:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |           || !base16_decode_final (&base16))[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  161 |         die ("Invalid salt (expecting hex encoding).\n");[0m
      | [0;1;32m                                                         
[0m[1mnettle-pbkdf2.c:165:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  165 |   if (password_length == sizeof(password))[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  166 |     die ("Password input too long. Current limit is %d characters.\n",[0m
  167 |          (int) sizeof(password) - 1);[0m
      | [0;1;32m                                     
[0m[1mnettle-pbkdf2.c:168:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  168 |   if (ferror (stdin))[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  169 |     die ("Reading password input failed: %s.\n", strerror (errno));[0m
      | [0;1;32m                                                                   
[0m[1mnettle-pbkdf2.c:178:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  178 |   if (raw)[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  179 |     fwrite (output, output_length, 1, stdout);[0m
  180 |   else[0m
      | [0;32m  } 
[0m[1mnettle-pbkdf2.c:196:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  196 |   if (fflush(stdout) != 0 )[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  197 |     die("Write failed: %s\n", STRERROR(errno));[0m
      | [0;1;32m                                               
[0m21 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 84/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp8gsrcxfs.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha512-meta.c
[ 85/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2fcwdtp9.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-512-meta.c
[ 86/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpqlw50yms.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-256-meta.c
[ 87/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpyjsypt_v.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha384-meta.c
[ 88/277][1.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_627m93h.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-set-decrypt-key.c
[1maes-set-decrypt-key.c:52:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   52 |     default: abort();[0m
      | [0;1;32m             ^      
[0m      | [0;32m             {      ;} 
[0m[1maes-set-decrypt-key.c:54:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   54 |       aes128_invert_key(&dst->u.ctx128, &src->u.ctx128);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   55 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:51:27: [0m[0;1;36mnote: [0mexpanded from macro 'aes128_invert_key'[0m
   51 | #define aes128_invert_key nettle_aes128_invert_key[0m
      | [0;1;32m                          ^
[0m[1maes-set-decrypt-key.c:57:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   57 |       aes192_invert_key(&dst->u.ctx192, &src->u.ctx192);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   58 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:56:27: [0m[0;1;36mnote: [0mexpanded from macro 'aes192_invert_key'[0m
   56 | #define aes192_invert_key nettle_aes192_invert_key[0m
      | [0;1;32m                          ^
[0m[1maes-set-decrypt-key.c:60:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   60 |       aes256_invert_key(&dst->u.ctx256, &src->u.ctx256);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   61 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:61:27: [0m[0;1;36mnote: [0mexpanded from macro 'aes256_invert_key'[0m
   61 | #define aes256_invert_key nettle_aes256_invert_key[0m
      | [0;1;32m                          ^
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 89/277][3.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmprznfkwpm.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md4.c
[1mmd4.c:70:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   70 |   memcpy(ctx->state, iv, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd4.c:70:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   70 |   memcpy(ctx->state, iv, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd4.c:81:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   81 |   MD_UPDATE(ctx, length, data, md4_compress, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mmd4.c:81:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   81 |   MD_UPDATE(ctx, length, data, md4_compress, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mmd4.c:95:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   95 |   MD_PAD(ctx, 8, md4_compress);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1mmd4.c:95:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   95 |   MD_PAD(ctx, 8, md4_compress);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1mmd4.c:96:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |   for (i = 0; i < MD4_DATA_LENGTH - 2; i++)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m   97 |     data[i] = LE_READ_UINT32(ctx->block + 4*i);[0m
      | [0;1;32m                                               
[0m[1mmd4.c:193:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  193 |   for (i = 0; i<16; i++, block += 4)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  194 |     data[i] = LE_READ_UINT32(block);[0m
      | [0;1;32m                                    
[0m8 warnings generated.

[ 90/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpjz40f4ep.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/getopt1.c
[ 91/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpybocvkeg.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-encrypt-internal.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1maes-encrypt-internal.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-encrypt-internal.s.
Found compiler error(s).

[ 92/277][3.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpdkugyybg.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/blowfish.c
[1mblowfish.c:404:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  404 |   for (j = 0; j < 4; j++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  405 |     for (i = 0; i < 256; i += 2)[0m
  406 |       {[0m
  407 |         _nettle_blowfish_encround (ctx, &datal, &datar);[0m
  408 |         ctx->s[j][i] = datal;[0m
  409 |         ctx->s[j][i + 1] = datar;[0m
  410 |     }[0m
      | [0;1;32m     
[0m[1mblowfish.c:421:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  421 |               || (ctx->s[3][i] == ctx->s[3][j]))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  422 |             return 0;[0m
      | [0;1;32m                     
[0m2 warnings generated.

[ 93/277][1.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp7tim8awb.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/examples/base16enc.c
[1mbase16enc.c:82:7: [0m[0;1;35mwarning: [0m[1mPotential out of bound access to 'result' with tainted index [clang-analyzer-security.ArrayBound][0m
   82 |       result[encoded_bytes++] = '\n';[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mbase16enc.c:68:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
   68 |   for (;;)[0m
      | [0;1;32m  ^
[0m[1mbase16enc.c:77:16: [0m[0;1;36mnote: [0mTaint originated here[0m
   77 |       nbytes = fread(buffer,1,CHUNK_SIZE,stdin);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mbase16enc.c:77:16: [0m[0;1;36mnote: [0mTaint propagated to the return value[0m
   77 |       nbytes = fread(buffer,1,CHUNK_SIZE,stdin);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mbase16enc.c:77:16: [0m[0;1;36mnote: [0mAssuming that 'fread' fails[0m
   77 |       nbytes = fread(buffer,1,CHUNK_SIZE,stdin);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mbase16enc.c:82:7: [0m[0;1;36mnote: [0mAccess of 'result' with a tainted index that may be too large[0m
   82 |       result[encoded_bytes++] = '\n';[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 94/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp73yubrx0.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-encrypt.c
[ 95/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpf37tyf68.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base64url-encode.c
[ 96/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpkqzhvwbk.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha512-256-meta.c
[ 97/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmppb6gy98d.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/nettle-meta-macs.c
[ 98/277][1.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpdp7o0xue.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sm3-meta.c
[ 99/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp6k89sidq.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/xts-aes256.c
[100/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpua8nzili.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/memxor.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mmemxor.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/memxor.s.
Found compiler error(s).

[101/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp5u12sj2p.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/siv-gcm-aes128.c
[102/277][1.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpjghz3rtw.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac.c
[1mhmac.c:78:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   78 |   memset(pad, OPAD, hash->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:78:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   78 |   memset(pad, OPAD, hash->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:83:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   83 |   memset(pad, IPAD, hash->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:83:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   83 |   memset(pad, IPAD, hash->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:88:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   88 |   memcpy(state, inner, hash->context_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:88:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   88 |   memcpy(state, inner, hash->context_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:109:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  109 |   memcpy(state, outer, hash->context_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:109:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  109 |   memcpy(state, outer, hash->context_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:114:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  114 |   memcpy(state, inner, hash->context_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mhmac.c:114:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  114 |   memcpy(state, inner, hash->context_size);[0m
      | [0;1;32m  ^~~~~~
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[103/277][7.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp82kgdl2f.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/streebog.c
[1mstreebog.c:1206:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1206 |   for (i = 0; i < 8; i++, input += 8)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m 1207 |     M[i] = LE_READ_UINT64(input);[0m
      | [0;1;32m                                 
[0m[1mstreebog.c:1216:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1216 |           if (ctx->count[i] != 0)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m 1217 |             break;[0m
      | [0;1;32m                  
[0m[1mstreebog.c:1243:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1243 |   while (i < 64)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m 1244 |     ctx->block[i++] = 0;[0m
      | [0;1;32m                        
[0m[1mstreebog.c:1256:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1256 |   memset(ctx->state, 0, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1256:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1256 |   memset(ctx->state, 0, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1257:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1257 |   memset(ctx->count, 0, sizeof(ctx->count));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1257:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1257 |   memset(ctx->count, 0, sizeof(ctx->count));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1258:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1258 |   memset(ctx->sigma, 0, sizeof(ctx->sigma));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1258:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1258 |   memset(ctx->sigma, 0, sizeof(ctx->sigma));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1268:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1268 |   MD_UPDATE (ctx, length, data, COMPRESS, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mstreebog.c:1268:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1268 |   MD_UPDATE (ctx, length, data, COMPRESS, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mstreebog.c:1297:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1297 |   memset(ctx->state, 1, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1297:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1297 |   memset(ctx->state, 1, sizeof(ctx->state));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1298:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1298 |   memset(ctx->count, 0, sizeof(ctx->count));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1298:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1298 |   memset(ctx->count, 0, sizeof(ctx->count));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1299:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1299 |   memset(ctx->sigma, 0, sizeof(ctx->sigma));[0m
      | [0;1;32m  ^~~~~~
[0m[1mstreebog.c:1299:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1299 |   memset(ctx->sigma, 0, sizeof(ctx->sigma));[0m
      | [0;1;32m  ^~~~~~
[0m14 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[104/277][3.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpw94g03y2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac96.c
[1mumac96.c:51:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   51 |   memset (ctx->nonce, 0, sizeof(ctx->nonce));[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac96.c:51:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   51 |   memset (ctx->nonce, 0, sizeof(ctx->nonce));[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac96.c:65:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   65 |   memcpy (ctx->nonce, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac96.c:65:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   65 |   memcpy (ctx->nonce, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac96.c:66:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   66 |   memset (ctx->nonce + nonce_length, 0, AES_BLOCK_SIZE - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac96.c:66:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   66 |   memset (ctx->nonce + nonce_length, 0, AES_BLOCK_SIZE - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac96.c:84:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   84 |   MD_UPDATE (ctx, length, data, UMAC96_BLOCK, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mumac96.c:84:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   84 |   MD_UPDATE (ctx, length, data, UMAC96_BLOCK, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mumac96.c:103:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  103 |       memset (ctx->block + ctx->index, 0, pad);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac96.c:103:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  103 |       memset (ctx->block + ctx->index, 0, pad);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac96.c:119:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  119 |   for (i = 0; i < 3; i++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  120 |     tag[i] ^= ctx->l3_key2[i] ^ _nettle_umac_l3 (ctx->l3_key1 + 8*i,[0m
  121 |                                                  ctx->l2_state + 2*i);[0m
      | [0;1;32m                                                                      
[0m[1mumac96.c:123:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  123 |   memcpy (digest, tag, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac96.c:123:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  123 |   memcpy (digest, tag, length);[0m
      | [0;1;32m  ^~~~~~
[0m9 warnings generated.

[105/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpw3r9e0ql.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-l3.c
[1mumac-l3.c:79:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   79 |   for (i = y = 0; i < 4; i++, w >>= 16)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   80 |     y += (w & 0xffff) * k[3-i];[0m
      | [0;1;32m                               
[0m1 warning generated.

[106/277][1.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpqhrd56w1.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/siv-cmac-aes256.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[107/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp0vw89t15.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/version.c
[108/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmppzdaprhc.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-decrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1maes192-decrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-decrypt-2.s.
Found compiler error(s).

[109/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpurtt5ru1.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/chacha-set-key.c
[1mchacha-set-key.c:60:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   60 |   memcpy (ctx->state, sigma, sizeof(sigma));[0m
      | [0;1;32m  ^~~~~~
[0m[1mchacha-set-key.c:60:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   60 |   memcpy (ctx->state, sigma, sizeof(sigma));[0m
      | [0;1;32m  ^~~~~~
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[110/277][4.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmppx3ga5p6.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/twofish.c
[1mtwofish.c:160:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |       if (a & 1) result ^= shift;[0m
      | [0;1;32m                ^                
[0m      | [0;32m                 {
[0m[1mtwofish.c:163:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  163 |       if (shift & 0x100) shift ^= p;[0m
      | [0;1;32m                        ^           
[0m      | [0;32m                         {
[0m[1mtwofish.c:193:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  193 |   for (i = 0; i < 4; i++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  194 |     s |=  ((  gf_multiply(0x4D, m1,       rs_matrix[i][0])[0m
  195 |             ^ gf_multiply(0x4D, m1 >> 8,  rs_matrix[i][1])[0m
  196 |             ^ gf_multiply(0x4D, m1 >> 16, rs_matrix[i][2])[0m
  197 |             ^ gf_multiply(0x4D, m1 >> 24, rs_matrix[i][3])[0m
  198 |             ^ gf_multiply(0x4D, m2,       rs_matrix[i][4])[0m
  199 |             ^ gf_multiply(0x4D, m2 >> 8,  rs_matrix[i][5])[0m
  200 |             ^ gf_multiply(0x4D, m2 >> 16, rs_matrix[i][6])[0m
  201 |             ^ gf_multiply(0x4D, m2 >> 24, rs_matrix[i][7])) << (i*8));[0m
      | [0;1;32m                                                                      
[0m[1mtwofish.c:295:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  295 |   memset(key_copy, 0, 32);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtwofish.c:295:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  295 |   memset(key_copy, 0, 32);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtwofish.c:296:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  296 |   memcpy(key_copy, key, keysize);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtwofish.c:296:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  296 |   memcpy(key_copy, key, keysize);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtwofish.c:298:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  298 |   for (i = 0; i<8; i++)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  299 |     m[i] = LE_READ_UINT32(key_copy + i*4);[0m
      | [0;1;32m                                          
[0m[1mtwofish.c:301:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  301 |   if (keysize <= 16)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  302 |     k = 2;[0m
  303 |   else if (keysize <= 24)[0m
      | [0;32m  } 
[0m[1mtwofish.c:303:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  303 |   else if (keysize <= 24)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  304 |     k = 3;[0m
  305 |   else[0m
      | [0;32m  } 
[0m[1mtwofish.c:305:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  305 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m  306 |     k = 4;[0m
      | [0;1;32m          
[0m[1mtwofish.c:322:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  322 |   for (i = 0; i < k; i++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  323 |     s[k-1-i] = compute_s(m[2*i], m[2*i+1]);[0m
      | [0;1;32m                                           
[0m[1mtwofish.c:325:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  325 |   for (i = 0; i < 4; i++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  326 |     for (j = 0; j < 256; j++)[0m
  327 |       context->s_box[i][j] = h_byte(k, i, j,[0m
  328 |                                     s[0] >> (i*8),[0m
  329 |                                     s[1] >> (i*8),[0m
  330 |                                     s[2] >> (i*8),[0m
  331 |                                     s[3] >> (i*8));[0m
      | [0;1;32m                                                   
[0m[1mtwofish.c:326:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  326 |     for (j = 0; j < 256; j++)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  327 |       context->s_box[i][j] = h_byte(k, i, j,[0m
  328 |                                     s[0] >> (i*8),[0m
  329 |                                     s[1] >> (i*8),[0m
  330 |                                     s[2] >> (i*8),[0m
  331 |                                     s[3] >> (i*8));[0m
      | [0;1;32m                                                   
[0m[1mtwofish.c:376:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  376 |       for (i = 0; i<4; i++, plaintext += 4)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  377 |         words[i] = LE_READ_UINT32(plaintext);[0m
      | [0;1;32m                                             
[0m[1mtwofish.c:415:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  415 |       for (i = 0; i<4; i++, ciphertext += 4)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  416 |         LE_WRITE_UINT32(ciphertext, words[i]);[0m
      | [0;1;32m                                              
[0m[1mtwofish.c:447:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  447 |       for (i = 0; i<4; i++, ciphertext += 4)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  448 |         words[i] = LE_READ_UINT32(ciphertext);[0m
      | [0;1;32m                                              
[0m[1mtwofish.c:486:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  486 |       for (i = 0; i<4; i++, plaintext += 4)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  487 |         LE_WRITE_UINT32(plaintext, words[i]);[0m
      | [0;1;32m                                             
[0m16 warnings generated.

[111/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmplrk3qppn.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-meta.c
[112/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpcwspqjw2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia256-crypt.c
[113/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp3dnv3_rt.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-camellia256.c
[114/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp4jjba6c0.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/des3.c
[1mdes3.c:51:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |   for (i = 0; i<3; i++, key += DES_KEY_SIZE)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m   52 |     if (!des_set_key(&ctx->des[i], key))[0m
   53 |       is_good = 0;[0m
      | [0;1;32m                  
[0m[1mdes3.c:52:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   52 |     if (!des_set_key(&ctx->des[i], key))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m   53 |       is_good = 0;[0m
      | [0;1;32m                  
[0m2 warnings generated.

[115/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpgz_uvaao.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/testsuite/sha1-huge-test.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[116/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_za14fp2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-ripemd160.c
[117/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpm75l5us_.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-nh.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mumac-nh.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-nh.s.
Found compiler error(s).

[118/277][1.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmppur54kxr.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/getopt.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[119/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpzhk8vr3z.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/write-le64.c
[1mwrite-le64.c:51:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |   for (i = 0; i < words; i++, dst += 8)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   52 |     LE_WRITE_UINT64(dst, src[i]);[0m
      | [0;1;32m                                 
[0m1 warning generated.

[120/277][1.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpj7aqv1bz.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/examples/base64enc.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[121/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpff9g0cgy.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ghash-update.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mghash-update.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ghash-update.s.
Found compiler error(s).

[122/277][1.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpjhfx5y3a.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/write-le32.c
[1mwrite-le32.c:53:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |   for (i = 0; i < words; i++, dst += 4)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   54 |     LE_WRITE_UINT32(dst, src[i]);[0m
      | [0;1;32m                                 
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[123/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp7gu196m6.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ccm-aes256.c
[124/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbcosn5qh.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/chacha-core-internal.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mchacha-core-internal.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/chacha-core-internal.s.
Found compiler error(s).

[125/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpwe2uqw83.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/balloon-sha384.c
[126/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpjl9oqiam.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-camellia128-meta.c
[127/277][3.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpkf_vgw6l.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac128.c
[1mumac128.c:51:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   51 |   memset (ctx->nonce, 0, sizeof(ctx->nonce));[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac128.c:51:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   51 |   memset (ctx->nonce, 0, sizeof(ctx->nonce));[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac128.c:65:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   65 |   memcpy (ctx->nonce, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac128.c:65:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   65 |   memcpy (ctx->nonce, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac128.c:66:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   66 |   memset (ctx->nonce + nonce_length, 0, AES_BLOCK_SIZE - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac128.c:66:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   66 |   memset (ctx->nonce + nonce_length, 0, AES_BLOCK_SIZE - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac128.c:85:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   85 |   MD_UPDATE (ctx, length, data, UMAC128_BLOCK, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mumac128.c:85:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   85 |   MD_UPDATE (ctx, length, data, UMAC128_BLOCK, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mumac128.c:104:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  104 |       memset (ctx->block + ctx->index, 0, pad);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac128.c:104:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  104 |       memset (ctx->block + ctx->index, 0, pad);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac128.c:121:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  121 |   for (i = 0; i < 4; i++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  122 |     tag[i] ^= ctx->l3_key2[i] ^ _nettle_umac_l3 (ctx->l3_key1 + 8*i,[0m
  123 |                                                  ctx->l2_state + 2*i);[0m
      | [0;1;32m                                                                      
[0m[1mumac128.c:125:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  125 |   memcpy (digest, tag, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac128.c:125:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  125 |   memcpy (digest, tag, length);[0m
      | [0;1;32m  ^~~~~~
[0m9 warnings generated.

[128/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp8ouc0c8b.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia192-meta.c
[129/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpduvv9_l5.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-set-encrypt-key.c
[130/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpr8ryb7z0.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sm4-meta.c
[131/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2ce9eyz2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-encrypt.c
[132/277][2.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp5can0gik.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/memeql-sec.c
[1mmemeql-sec.c:47:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   47 |   for (i = diff = 0; i < n; i++)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   48 |     diff |= (ap[i] ^ bp[i]);[0m
      | [0;1;32m                            
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[133/277][2.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1hd1su40.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ghash-set-key.c
[1mghash-set-key.c:90:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |   for (i = 1; i < 64; i++)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   91 |     block16_mulx_ghash(&ctx->h[2*(i ^ INDEX_PERMUTE)], &ctx->h[2*((i-1) ^ INDEX_PERMUTE)]);[0m
      | [0;1;32m                                                                                           
[0m[1mghash-set-key.c:94:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   94 |   for (i = 1; i < 64; i++)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   95 |     block16_mulx_ghash(&ctx->h[2*(i ^ INDEX_PERMUTE)+1], &ctx->h[2*((i-1) ^ INDEX_PERMUTE)+1]);[0m
      | [0;1;32m                                                                                               
[0m4 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[134/277][2.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpig1jdqse.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/siv-cmac-aes128.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[135/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpisrvbp62.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes256-encrypt.c
[136/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpn3tdouny.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-sm4.c
[137/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpgw1cfe15.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base64url-meta.c
[138/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpoee260j1.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia256-set-decrypt-key.c
[139/277][8.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpe6zgtexz.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/yarrow256.c
[1myarrow256.c:97:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   97 |   memset(ctx->counter, 0, sizeof(ctx->counter));[0m
      | [0;1;32m  ^~~~~~
[0m[1myarrow256.c:97:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   97 |   memset(ctx->counter, 0, sizeof(ctx->counter));[0m
      | [0;1;32m  ^~~~~~
[0m[1myarrow256.c:140:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  140 |       if (++ctx->counter[i])[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  141 |         break;[0m
      | [0;1;32m              
[0m[1myarrow256.c:151:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  151 |   memcpy(v0, digest, SHA256_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1myarrow256.c:151:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  151 |   memcpy(v0, digest, SHA256_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1myarrow256.c:205:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  205 |   memset(ctx->counter, 0, sizeof(ctx->counter));[0m
      | [0;1;32m  ^~~~~~
[0m[1myarrow256.c:205:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  205 |   memset(ctx->counter, 0, sizeof(ctx->counter));[0m
      | [0;1;32m  ^~~~~~
[0m[1myarrow256.c:209:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  209 |   for (i = 0; i<ctx->nsources; i++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  210 |     ctx->sources[i].estimate[YARROW_FAST] = 0;[0m
      | [0;1;32m                                              
[0m[1myarrow256.c:232:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  232 |   for (i = 0; i<ctx->nsources; i++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  233 |     ctx->sources[i].estimate[YARROW_SLOW] = 0;[0m
      | [0;1;32m                                              
[0m[1myarrow256.c:246:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  246 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  247 |     /* Nothing happens */[0m
  248 |     return 0;[0m
      | [0;1;32m             
[0m[1myarrow256.c:252:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  252 |   if (!ctx->seeded)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  253 |     /* While seeding, use the slow pool */[0m
  254 |     current = YARROW_SLOW;[0m
  255 |   else[0m
      | [0;32m  } 
[0m[1myarrow256.c:266:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  266 |       if (entropy > YARROW_MAX_ENTROPY)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  267 |         entropy = YARROW_MAX_ENTROPY;[0m
      | [0;1;32m                                     
[0m[1myarrow256.c:270:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  270 |            && (entropy > YARROW_MULTIPLIER * length) )[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m  271 |         entropy = YARROW_MULTIPLIER * length;[0m
      | [0;1;32m                                             
[0m[1myarrow256.c:274:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  274 |       if (entropy > YARROW_MAX_ENTROPY)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  275 |         entropy = YARROW_MAX_ENTROPY;[0m
      | [0;1;32m                                     
[0m[1myarrow256.c:290:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  290 |       if (source->estimate[YARROW_FAST] >= YARROW_FAST_THRESHOLD)[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  291 |         {[0m
  292 |           yarrow256_fast_reseed(ctx);[0m
  293 |           return 1;[0m
  294 |         }[0m
  295 |       else[0m
  296 |         return 0;[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1myarrow256.c:295:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  295 |       else[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  296 |         return 0;[0m
      | [0;1;32m                 
[0m[1myarrow256.c:305:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  305 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  306 |           return 0;[0m
      | [0;1;32m                   
[0m[1myarrow256.c:309:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  309 |       abort();[0m
      | [0;1;32m      ^      
[0m      | [0;32m      {      ;} 
[0m[1myarrow256.c:319:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  319 |   for (i = 0; i < sizeof(key); i+= AES_BLOCK_SIZE)[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  320 |     yarrow_generate_block(ctx, key + i);[0m
      | [0;1;32m                                        
[0m[1myarrow256.c:342:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  342 |       memcpy(dst, buffer, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1myarrow256.c:342:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  342 |       memcpy(dst, buffer, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1myarrow256.c:361:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  361 |   for (i = k = 0; i < ctx->nsources; i++)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  362 |     if (ctx->sources[i].estimate[YARROW_SLOW] >= YARROW_SLOW_THRESHOLD)[0m
  363 |       k++;[0m
      | [0;1;32m          
[0m[1myarrow256.c:362:72: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  362 |     if (ctx->sources[i].estimate[YARROW_SLOW] >= YARROW_SLOW_THRESHOLD)[0m
      | [0;1;32m                                                                       ^
[0m      | [0;32m                                                                        {
[0m  363 |       k++;[0m
      | [0;1;32m          
[0m21 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[140/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbxom_zc2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md5-compat.c
[141/277][10.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp71s67hv5.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/des.c
[1mdes.c:79:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   79 |   for (i = 0; i<length; i++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   80 |     if (!PARITY(key[i]))[0m
   81 |       return 0;[0m
      | [0;1;32m               
[0m[1mdes.c:80:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   80 |     if (!PARITY(key[i]))[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m   81 |       return 0;[0m
      | [0;1;32m               
[0m[1mdes.c:91:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   91 |   for (i = 0; i<length; i++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   92 |     dst[i] = src[i] ^ PARITY(src[i]) ^ 1;[0m
      | [0;1;32m                                         
[0m[1mdes.c:178:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  178 |   if (hash > 25)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  179 |     return 0;[0m
      | [0;1;32m             
[0m[1mdes.c:184:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  184 |       || k1 != candidate[1])[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  185 |     return 0;[0m
      | [0;1;32m             
[0m[1mdes.c:188:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  188 |        || (key[3] >> 1) != k1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  189 |     return 0;[0m
      | [0;1;32m             
[0m[1mdes.c:194:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  194 |       || k1 != candidate[3])[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  195 |     return 0;[0m
      | [0;1;32m             
[0m[1mdes.c:197:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  197 |        || (key[7] >> 1) != k1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  198 |     return 0;[0m
      | [0;1;32m             
[0m8 warnings generated.

[142/277][3.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpzmwljvvq.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/eax.c
[1meax.c:50:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   50 |   memset (state->b, 0, EAX_BLOCK_SIZE - 1);[0m
      | [0;1;32m  ^~~~~~
[0m[1meax.c:50:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   50 |   memset (state->b, 0, EAX_BLOCK_SIZE - 1);[0m
      | [0;1;32m  ^~~~~~
[0m[1meax.c:103:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  103 |   memcpy (eax->ctr.b, eax->omac_nonce.b, EAX_BLOCK_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1meax.c:103:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  103 |   memcpy (eax->ctr.b, eax->omac_nonce.b, EAX_BLOCK_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m4 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[143/277][1.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpwph9pxk_.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md2.c
[1mmd2.c:90:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   90 |   memcpy(ctx->X + 16, data, MD2_BLOCK_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd2.c:90:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   90 |   memcpy(ctx->X + 16, data, MD2_BLOCK_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd2.c:104:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  104 |       for (j = 0; j < 3 * MD2_BLOCK_SIZE; j++)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  105 |         t = (ctx->X[j] ^= S[t]);[0m
      | [0;1;32m                                
[0m[1mmd2.c:112:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  112 |   memset(ctx, 0, sizeof(*ctx));[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd2.c:112:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  112 |   memset(ctx, 0, sizeof(*ctx));[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd2.c:120:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  120 |   MD_UPDATE(ctx, length, data, md2_transform, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mmd2.c:120:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  120 |   MD_UPDATE(ctx, length, data, md2_transform, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mmd2.c:133:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  133 |   memset(ctx->block + ctx->index, left, left);[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd2.c:133:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  133 |   memset(ctx->block + ctx->index, left, left);[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd2.c:137:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  137 |   memcpy(digest, ctx->X, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mmd2.c:137:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  137 |   memcpy(digest, ctx->X, length);[0m
      | [0;1;32m  ^~~~~~
[0m8 warnings generated.

[144/277][2.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp5r4wwrim.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha256.c
[1msha256.c:94:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   94 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha256.c:94:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   94 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha256.c:111:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  111 |       MD_FILL_OR_RETURN (ctx, length, data);[0m
      | [0;1;32m      ^
[0m[1m./md-internal.h:49:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_FILL_OR_RETURN'[0m
   49 |         memcpy((ctx)->block + (ctx)->index, (data), (length));  \[0m
      | [0;1;32m        ^~~~~~
[0m[1msha256.c:111:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  111 |       MD_FILL_OR_RETURN (ctx, length, data);[0m
      | [0;1;32m      ^
[0m[1m./md-internal.h:49:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_FILL_OR_RETURN'[0m
   49 |         memcpy((ctx)->block + (ctx)->index, (data), (length));  \[0m
      | [0;1;32m        ^~~~~~
[0m[1msha256.c:121:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  121 |   memcpy (ctx->block, data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1msha256.c:121:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  121 |   memcpy (ctx->block, data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1msha256.c:134:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  134 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1msha256.c:134:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  134 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1msha256.c:169:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  169 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha256.c:169:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  169 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m9 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[145/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp13vq_z44.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sm3.c
[146/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpabo8i4su.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-decrypt-internal.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1maes-decrypt-internal.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-decrypt-internal.s.
Found compiler error(s).

[147/277][1.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmplo667lkh.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/chacha-poly1305.c
[1mchacha-poly1305.c:86:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   86 |   memcpy (ctx->s.b, u.subkey + 16, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mchacha-poly1305.c:86:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   86 |   memcpy (ctx->s.b, u.subkey + 16, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mchacha-poly1305.c:109:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  109 |       memset (ctx->block + ctx->index, 0,[0m
      | [0;1;32m      ^~~~~~
[0m[1mchacha-poly1305.c:109:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  109 |       memset (ctx->block + ctx->index, 0,[0m
      | [0;1;32m      ^~~~~~
[0m[1mchacha-poly1305.c:129:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  129 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  130 |     return;[0m
      | [0;1;32m           
[0m[1mchacha-poly1305.c:144:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  144 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  145 |     return;[0m
      | [0;1;32m           
[0m[1mchacha-poly1305.c:168:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  168 |   memcpy (digest, &ctx->s.b, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mchacha-poly1305.c:168:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  168 |   memcpy (digest, &ctx->s.b, length);[0m
      | [0;1;32m  ^~~~~~
[0m5 warnings generated.

[148/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp4dqan99m.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-decrypt.c
[149/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpds01i80f.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-256-set-key.c
[150/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmphxz2smwa.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-md5-meta.c
[151/277][1.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpir4eixfj.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/memxor-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mmemxor-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/memxor-2.s.
Found compiler error(s).

[152/277][1.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpb5zocubd.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-crypt.c
[1msalsa20-crypt.c:53:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   54 |     return;[0m
      | [0;1;32m           
[0m1 warning generated.

[153/277][3.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp7vsk7ds7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/siv-cmac.c
[1msiv-cmac.c:93:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   93 |       memcpy (pad.b, pdata, plength);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-cmac.c:93:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   93 |       memcpy (pad.b, pdata, plength);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-cmac.c:95:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |       if (plength + 1 < 16)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   96 |         memset (&pad.b[plength + 1], 0, 16 - plength - 1);[0m
      | [0;1;32m                                                          
[0m[1msiv-cmac.c:96:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   96 |         memset (&pad.b[plength + 1], 0, 16 - plength - 1);[0m
      | [0;1;32m        ^~~~~~
[0m[1msiv-cmac.c:96:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   96 |         memset (&pad.b[plength + 1], 0, 16 - plength - 1);[0m
      | [0;1;32m        ^~~~~~
[0m[1msiv-cmac.c:132:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  132 |   memcpy (dst, siv.b, SIV_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1msiv-cmac.c:132:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  132 |   memcpy (dst, siv.b, SIV_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1msiv-cmac.c:152:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  152 |   memcpy (ctr.b, src, SIV_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1msiv-cmac.c:152:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  152 |   memcpy (ctr.b, src, SIV_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[154/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2g0ehdlx.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia-invert-key.c
[1mcamellia-invert-key.c:48:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   48 |   if (dst == src)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   49 |     for (i = 0; i < nkeys - 1 - i; i++)[0m
   50 |         SWAP (dst[i], dst[nkeys - 1- i]);[0m
   51 |   else[0m
      | [0;32m  } 
[0m[1mcamellia-invert-key.c:49:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   49 |     for (i = 0; i < nkeys - 1 - i; i++)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   50 |         SWAP (dst[i], dst[nkeys - 1- i]);[0m
      | [0;1;32m                                         
[0m[1mcamellia-invert-key.c:51:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m   52 |     for (i = 0; i < nkeys; i++)[0m
   53 |       dst[i] = src[nkeys - 1 - i];[0m
      | [0;1;32m                                  
[0m[1mcamellia-invert-key.c:52:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   52 |     for (i = 0; i < nkeys; i++)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m   53 |       dst[i] = src[nkeys - 1 - i];[0m
      | [0;1;32m                                  
[0m4 warnings generated.

[155/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpgx_7hvml.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-decrypt.c
[156/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp36ijtbzw.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha384.c
[157/277][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp9lynqqmn.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/yarrow_key_event.c
[1myarrow_key_event.c:48:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   48 |   for (i = 0; i < YARROW_KEY_EVENT_BUFFER; i++)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m   49 |     ctx->chars[i] = 0;  [0m
[1myarrow_key_event.c:62:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   62 |       if ( (time - ctx->previous) >= 256)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m   63 |         entropy++;[0m
      | [0;1;32m                  
[0m[1myarrow_key_event.c:67:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   67 |   if (!key)[0m
      | [0;1;32m           ^
[0m      | [0;32m            {
[0m   68 |     return entropy;[0m
      | [0;1;32m                   
[0m[1myarrow_key_event.c:70:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   70 |   for (i = 0; i < YARROW_KEY_EVENT_BUFFER; i++)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m   71 |     if (key == ctx->chars[i])[0m
   72 |       /* This is a recent character. Ignore it. */[0m
   73 |       return entropy;[0m
      | [0;1;32m                     
[0m[1myarrow_key_event.c:71:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   71 |     if (key == ctx->chars[i])[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   72 |       /* This is a recent character. Ignore it. */[0m
   73 |       return entropy;[0m
      | [0;1;32m                     
[0m[1myarrow_key_event.c:77:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   77 |   if (ctx->chars[ctx->index])[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   78 |     entropy++;[0m
      | [0;1;32m              
[0m6 warnings generated.

[158/277][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp7jo5en9y.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base16-decode.c
[1mbase16-decode.c:75:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   75 |   if (usrc >= 0x80)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m   76 |     return -1;[0m
      | [0;1;32m              
[0m[1mbase16-decode.c:82:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   82 |       return -1;[0m
      | [0;1;32m      ^        
[0m      | [0;32m      {        ;} 
[0m[1mbase16-decode.c:84:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   84 |       return 0;[0m
      | [0;1;32m      ^       
[0m      | [0;32m      {       ;} 
[0m[1mbase16-decode.c:114:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  114 |   for (i = done = 0; i<src_length; i++)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  115 |     switch(base16_decode_single(ctx, dst + done, src[i]))[0m
  116 |       {[0m
  117 |       case -1:[0m
  118 |         return 0;[0m
  119 |       case 1:[0m
  120 |         done++;[0m
  121 |         /* Fall through */[0m
  122 |       case 0:[0m
  123 |         break;[0m
  124 |       default:[0m
  125 |         abort();[0m
  126 |       }[0m
      | [0;1;32m       
[0m[1mbase16-decode.c:118:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  118 |         return 0;[0m
      | [0;1;32m        ^       
[0m      | [0;32m        {       ;} 
[0m[1mbase16-decode.c:120:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  120 |         done++;[0m
      | [0;1;32m        ^     
[0m      | [0;32m        {     ;} 
[0m[1mbase16-decode.c:123:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  123 |         break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1mbase16-decode.c:125:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  125 |         abort();[0m
      | [0;1;32m        ^      
[0m      | [0;32m        {      ;} 
[0m11 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[159/277][1.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_qgdjurx.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-set-encrypt-key.c
[1maes-set-encrypt-key.c:49:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   49 |     default: abort();[0m
      | [0;1;32m             ^      
[0m      | [0;32m             {      ;} 
[0m[1maes-set-encrypt-key.c:51:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   51 |       aes128_set_encrypt_key(&ctx->u.ctx128, key);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   52 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:49:32: [0m[0;1;36mnote: [0mexpanded from macro 'aes128_set_encrypt_key'[0m
   49 | #define aes128_set_encrypt_key nettle_aes128_set_encrypt_key[0m
      | [0;1;32m                               ^
[0m[1maes-set-encrypt-key.c:54:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   54 |       aes192_set_encrypt_key(&ctx->u.ctx192, key);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   55 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:54:32: [0m[0;1;36mnote: [0mexpanded from macro 'aes192_set_encrypt_key'[0m
   54 | #define aes192_set_encrypt_key nettle_aes192_set_encrypt_key[0m
      | [0;1;32m                               ^
[0m[1maes-set-encrypt-key.c:57:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   57 |       aes256_set_encrypt_key(&ctx->u.ctx256, key);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   58 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./aes.h:59:32: [0m[0;1;36mnote: [0mexpanded from macro 'aes256_set_encrypt_key'[0m
   59 | #define aes256_set_encrypt_key nettle_aes256_set_encrypt_key[0m
      | [0;1;32m                               ^
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[160/277][1.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmphgzqx3dy.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/examples/timing.c
[1mtiming.c:70:63: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   70 |   if (clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &cgt_start) < 0)[0m
      | [0;1;32m                                                              ^
[0m      | [0;32m                                                               {
[0m   71 |     die("clock_gettime failed: %s\n", strerror(errno));[0m
      | [0;1;32m                                                       
[0m[1mtiming.c:78:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |   if (clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &end) < 0)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m   79 |     die("clock_gettime failed: %s\n", strerror(errno));[0m
      | [0;1;32m                                                       
[0m[1mtiming.c:114:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  114 |       fprintf(stderr, "clock_gettime not working, falling back to clock\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtiming.c:114:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  114 |       fprintf(stderr, "clock_gettime not working, falling back to clock\n");[0m
      | [0;1;32m      ^~~~~~~
[0m5 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[161/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp9gbymkno.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/eax-aes128-meta.c
[162/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbs8uvh72.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ripemd160-meta.c
[163/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpu535qqew.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha224-meta.c
[164/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmprddqsrws.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/buffer.c
[1mbuffer.c:55:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   55 |       if (!buffer->realloc)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   56 |         return 0;[0m
      | [0;1;32m                 
[0m[1mbuffer.c:60:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   60 |       if (!p)[0m
      | [0;1;32m             ^
[0m      | [0;32m              {
[0m   61 |         return 0;[0m
      | [0;1;32m                 
[0m[1mbuffer.c:95:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |   if (buffer->realloc)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   96 |     buffer->realloc(buffer->realloc_ctx, buffer->contents, 0);[0m
      | [0;1;32m                                                              
[0m[1mbuffer.c:115:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  115 |   if (!nettle_buffer_grow(buffer, length))[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  116 |     return NULL;[0m
      | [0;1;32m                
[0m[1mbuffer.c:130:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  130 |       memcpy(p, data, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mbuffer.c:130:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  130 |       memcpy(p, data, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mbuffer.c:133:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  133 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m  134 |     return 0;[0m
      | [0;1;32m             
[0m8 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[165/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp641pxoxy.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-encrypt-table.c
[166/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpkvhr5bt7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-encrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1maes128-encrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes128-encrypt-2.s.
Found compiler error(s).

[167/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpnz70y2wt.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/siv-ghash-set-key.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[168/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpwzm1xylq.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/nettle-meta-ciphers.c
[169/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbkhwnjyo.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-gosthash94.c
[170/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2_miwjt_.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-decrypt.c
[171/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpcodmobv1.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha256.c
[172/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp0212aljc.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-2core.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1msalsa20-2core.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-2core.s.
Found compiler error(s).

[173/277][4.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp8_z_0ox5.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac64.c
[1mumac64.c:51:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   51 |   memset (ctx->nonce, 0, sizeof(ctx->nonce));[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac64.c:51:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   51 |   memset (ctx->nonce, 0, sizeof(ctx->nonce));[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac64.c:66:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   66 |   memcpy (ctx->nonce, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac64.c:66:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   66 |   memcpy (ctx->nonce, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac64.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |   memset (ctx->nonce + nonce_length, 0, AES_BLOCK_SIZE - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac64.c:67:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   67 |   memset (ctx->nonce + nonce_length, 0, AES_BLOCK_SIZE - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac64.c:86:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   86 |   MD_UPDATE (ctx, length, data, UMAC64_BLOCK, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mumac64.c:86:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   86 |   MD_UPDATE (ctx, length, data, UMAC64_BLOCK, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mumac64.c:105:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  105 |       memset (ctx->block + ctx->index, 0, pad);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac64.c:105:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  105 |       memset (ctx->block + ctx->index, 0, pad);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac64.c:130:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |       if (ctx->nonce[i] == 0 && i > 0)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  131 |         INCREMENT (i, ctx->nonce);[0m
      | [0;1;32m                                  
[0m[1mumac64.c:139:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  139 |   memcpy (digest, tag, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac64.c:139:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  139 |   memcpy (digest, tag, length);[0m
      | [0;1;32m  ^~~~~~
[0m9 warnings generated.

[174/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp25xewz7k.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-streebog.c
[175/277][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpykbft8pi.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/balloon-sha512.c
[176/277][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmprrpj5of1.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md4-meta.c
[177/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp5xx8iysy.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-md5.c
[178/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpiy5e2yf3.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-encrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1maes192-encrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-encrypt-2.s.
Found compiler error(s).

[179/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp9m7hxbhz.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cmac-aes256.c
[180/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2q4_88gb.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/memxor3.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mmemxor3.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/memxor3.s.
Found compiler error(s).

[181/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpwyjh51h7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha256-compress-n.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1msha256-compress-n.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha256-compress-n.s.
Found compiler error(s).

[182/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpadn1elcn.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-aes128.c
[183/277][0.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpp_c01qqa.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha1-meta.c
[184/277][1.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpfzzu6wqw.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia-absorb.c
[185/277][0.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_f_6qkzg.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-224-meta.c
[186/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpehw1blgh.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/pbkdf2.c
[1mpbkdf2.c:63:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   63 |   if (length == 0)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m   64 |     return;[0m
      | [0;1;32m           
[0m[1mpbkdf2.c:94:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   94 |           memcpy (dst, T, length);[0m
      | [0;1;32m          ^~~~~~
[0m[1mpbkdf2.c:94:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   94 |           memcpy (dst, T, length);[0m
      | [0;1;32m          ^~~~~~
[0m[1mpbkdf2.c:97:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   97 |       memcpy (dst, T, digest_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mpbkdf2.c:97:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   97 |       memcpy (dst, T, digest_size);[0m
      | [0;1;32m      ^~~~~~
[0m5 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[187/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpv3aqoib3.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-core-internal.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1msalsa20-core-internal.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-core-internal.s.
Found compiler error(s).

[188/277][1.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpli3oo3hp.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-128-set-key.c
[189/277][21.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpx46ix9b0.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-poly128.c
[1mumac-poly128.c:115:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  115 |       if (y[1] > 0)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  116 |         y[1]--;[0m
  117 |       else if (y[0] > 0)[0m
      | [0;32m      } 
[0m1 warning generated.

[190/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp74wxxz8h.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/eax-aes128.c
[191/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp73veahbf.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/chacha-poly1305-meta.c
[192/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpdjxux_hl.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/shake256.c
[193/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1rhtzqy6.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-set-decrypt-key.c
[194/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpvnchrtdi.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cnd-memcpy.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[195/277][2.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmphue2w2m9.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tools/nettle-lfib-stream.c
[1mnettle-lfib-stream.c:52:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   52 |   fprintf(stderr, "Usage: lfib-stream [SEED]\n");[0m
      | [0;1;32m  ^~~~~~~
[0m[1mnettle-lfib-stream.c:52:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   52 |   fprintf(stderr, "Usage: lfib-stream [SEED]\n");[0m
      | [0;1;32m  ^~~~~~~
[0m[1mnettle-lfib-stream.c:61:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |   if (argc == 1)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   62 |     seed = time(NULL);[0m
   63 | [0m
   64 |   else if (argc == 2)[0m
      | [0;32m  } 
[0m[1mnettle-lfib-stream.c:87:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   87 |           || fflush(stdout) < 0)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   88 |         return EXIT_FAILURE;[0m
      | [0;1;32m                            
[0m5 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[196/277][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpab07pi40.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-l2.c
[1mumac-l2.c:74:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   74 |   if (count == 0)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   75 |     memcpy (prev, m, n * sizeof(*m));[0m
   76 |   else if (count == 1)[0m
      | [0;32m  } 
[0m[1mumac-l2.c:75:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   75 |     memcpy (prev, m, n * sizeof(*m));[0m
      | [0;1;32m    ^~~~~~
[0m[1mumac-l2.c:75:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   75 |     memcpy (prev, m, n * sizeof(*m));[0m
      | [0;1;32m    ^~~~~~
[0m[1mumac-l2.c:76:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |   else if (count == 1)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   77 |     for (i = 0; i < n; i++, key += 6)[0m
   78 |       {[0m
   79 |         uint64_t y = _nettle_umac_poly64 (key[0], key[1], 1, prev[i]);[0m
   80 |         state[2*i+1] = _nettle_umac_poly64 (key[0], key[1], y, m[i]);[0m
   81 |       }[0m
   82 |   else if (count < UMAC_POLY64_BLOCKS)[0m
      | [0;32m  } 
[0m[1mumac-l2.c:82:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |   else if (count < UMAC_POLY64_BLOCKS)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m   83 |     for (i = 0; i < n; i++, key += 6)[0m
   84 |       state[2*i+1] = _nettle_umac_poly64 (key[0], key[1], state[2*i+1], m[i]);[0m
   85 |   else if (count % 2 == 0)[0m
      | [0;32m  } 
[0m[1mumac-l2.c:83:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   83 |     for (i = 0; i < n; i++, key += 6)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   84 |       state[2*i+1] = _nettle_umac_poly64 (key[0], key[1], state[2*i+1], m[i]);[0m
      | [0;1;32m                                                                              
[0m[1mumac-l2.c:87:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   87 |       if (count == UMAC_POLY64_BLOCKS)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m   88 |         for (i = 0, key += 2; i < n; i++, key += 6)[0m
   89 |           {[0m
   90 |             uint64_t y = state[2*i+1];[0m
   91 |             if (y >= UMAC_P64)[0m
   92 |               y -= UMAC_P64;[0m
   93 |             state[2*i] = 0;[0m
   94 |             state[2*i+1] = 1;[0m
   95 | [0m
   96 |             _nettle_umac_poly128 (key, state + 2*i, 0, y);[0m
   97 |           }[0m
      | [0;1;32m           
[0m[1mumac-l2.c:91:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   91 |             if (y >= UMAC_P64)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   92 |               y -= UMAC_P64;[0m
      | [0;1;32m                            
[0m[1mumac-l2.c:98:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   98 |       memcpy (prev, m, n * sizeof(*m));[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac-l2.c:98:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   98 |       memcpy (prev, m, n * sizeof(*m));[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac-l2.c:100:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  100 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m  101 |     for (i = 0, key += 2; i < n; i++, key += 6)[0m
  102 |       _nettle_umac_poly128 (key, state + 2*i, prev[i], m[i]);[0m
      | [0;1;32m                                                             
[0m[1mumac-l2.c:101:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  101 |     for (i = 0, key += 2; i < n; i++, key += 6)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  102 |       _nettle_umac_poly128 (key, state + 2*i, prev[i], m[i]);[0m
      | [0;1;32m                                                             
[0m[1mumac-l2.c:113:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  113 |   if (count == 1)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  114 |     for (i = 0; i < n; i++)[0m
  115 |       {[0m
  116 |         *state++ = 0;[0m
  117 |         *state++ = *prev++;[0m
  118 |       }[0m
  119 |   else if (count <= UMAC_POLY64_BLOCKS)[0m
      | [0;32m  } 
[0m[1mumac-l2.c:119:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  119 |   else if (count <= UMAC_POLY64_BLOCKS)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  120 |     for (i = 0; i < n; i++)[0m
  121 |       {[0m
  122 |         uint64_t y;[0m
  123 |         *state++ = 0;[0m
  124 | [0m
  125 |         y = *state;[0m
  126 |         if (y >= UMAC_P64)[0m
  127 |           y -= UMAC_P64;[0m
  128 |         *state++ = y;[0m
  129 |       }[0m
  130 |   else[0m
      | [0;32m  } 
[0m[1mumac-l2.c:126:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  126 |         if (y >= UMAC_P64)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  127 |           y -= UMAC_P64;[0m
      | [0;1;32m                        
[0m[1mumac-l2.c:133:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  133 |       if (count % 2 == 1)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  134 |         for (i = 0, key += 2; i < n; i++, key += 6)[0m
  135 |           _nettle_umac_poly128 (key, state + 2*i, prev[i], pad);[0m
  136 |       else[0m
      | [0;32m      } 
[0m[1mumac-l2.c:134:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  134 |         for (i = 0, key += 2; i < n; i++, key += 6)[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  135 |           _nettle_umac_poly128 (key, state + 2*i, prev[i], pad);[0m
      | [0;1;32m                                                                
[0m[1mumac-l2.c:136:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  136 |       else[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  137 |         for (i = 0, key += 2; i < n; i++, key += 6)[0m
  138 |           _nettle_umac_poly128 (key, state + 2*i, pad, 0);[0m
      | [0;1;32m                                                          
[0m[1mumac-l2.c:137:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  137 |         for (i = 0, key += 2; i < n; i++, key += 6)[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  138 |           _nettle_umac_poly128 (key, state + 2*i, pad, 0);[0m
      | [0;1;32m                                                          
[0m[1mumac-l2.c:149:19: [0m[0;1;35mwarning: [0m[1mAlthough the value stored to 'yl' is used in the enclosing expression, the value is never actually read from 'yl' [clang-analyzer-deadcode.DeadStores][0m
  149 |               state[1] = yl -= UMAC_P128_LO;[0m
      | [0;1;32m                         ^
[0m[1mumac-l2.c:149:19: [0m[0;1;36mnote: [0mAlthough the value stored to 'yl' is used in the enclosing expression, the value is never actually read from 'yl'[0m
18 warnings generated.

[197/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2t4g7nwd.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/balloon-sha256.c
[198/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpqlkc7qbg.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cmac-des3.c
[199/277][20.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpwub5h_8t.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ccm.c
[1mccm.c:93:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   93 |     if (ctx->blength) f(cipher, CCM_BLOCK_SIZE, ctx->tag.b, ctx->tag.b);[0m
      | [0;1;32m                     ^                                                  
[0m      | [0;32m                      {
[0m[1mccm.c:109:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  109 |   memcpy(&iv[CCM_OFFSET_NONCE], nonce, noncelen);[0m
      | [0;1;32m  ^~~~~~
[0m[1mccm.c:109:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  109 |   memcpy(&iv[CCM_OFFSET_NONCE], nonce, noncelen);[0m
      | [0;1;32m  ^~~~~~
[0m[1mccm.c:178:13: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'ctx.tag.b' [clang-analyzer-security.ArrayBound][0m
  178 |     memxor(&ctx->tag.b[ctx->blength], data, CCM_BLOCK_SIZE - ctx->blength);[0m
      | [0;1;32m            ^
[0m[1mccm.c:258:3: [0m[0;1;36mnote: [0mCalling 'nettle_ccm_update'[0m
  258 |   ccm_update(&ctx, cipher, f, alength, adata);[0m
      | [0;1;32m  ^
[0m[1m./ccm.h:56:20: [0m[0;1;36mnote: [0mexpanded from macro 'ccm_update'[0m
   56 | #define ccm_update nettle_ccm_update[0m
      | [0;1;32m                   ^
[0m[1mccm.c:170:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  170 |   if ((ctx->blength + length) < CCM_BLOCK_SIZE) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mccm.c:170:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  170 |   if ((ctx->blength + length) < CCM_BLOCK_SIZE) {[0m
      | [0;1;32m  ^
[0m[1mccm.c:177:12: [0m[0;1;36mnote: [0mField 'blength' is not equal to 0[0m
  177 |   if (ctx->blength) {[0m
      | [0;1;32m           ^
[0m[1mccm.c:177:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  177 |   if (ctx->blength) {[0m
      | [0;1;32m  ^
[0m[1mccm.c:178:13: [0m[0;1;36mnote: [0mAccess of 'ctx.tag.b' at an overflowing index, while it holds only 16 'unsigned char' elements[0m
  178 |     memxor(&ctx->tag.b[ctx->blength], data, CCM_BLOCK_SIZE - ctx->blength);[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mccm.c:192:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  192 |   if (ctx->blength) memxor(&ctx->tag.b, data, ctx->blength);[0m
      | [0;1;32m                   ^                                        
[0m      | [0;32m                    {
[0m[1mccm.c:229:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  229 |   while (i < CCM_BLOCK_SIZE)  ctx->ctr.b[i++] = 0;[0m
      | [0;1;32m                            ^                     
[0m      | [0;32m                             {
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[200/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpokitpp8s.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base64-meta.c
[201/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpnuf4ryr2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/siv-gcm-aes256.c
[202/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmphjxz9t84.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia-crypt-internal.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mcamellia-crypt-internal.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia-crypt-internal.s.
Found compiler error(s).

[203/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpjsqmtywn.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha1.c
[204/277][19.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpqglyqnkn.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sm3.c
[1msm3.c:203:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  203 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msm3.c:203:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  203 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msm3.c:218:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  218 |   MD_UPDATE(ctx, length, data, COMPRESS, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1msm3.c:218:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  218 |   MD_UPDATE(ctx, length, data, COMPRESS, ctx->count++);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1msm3.c:230:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  230 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1msm3.c:230:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  230 |   MD_PAD(ctx, 8, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m6 warnings generated.

[205/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpfv7du2ns.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia128-meta.c
[206/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmphj63ovsk.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/serpent-meta.c
[207/277][2.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp0hqs245w.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/examples/base64dec.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[208/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpqi3htzf9.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-ripemd160-meta.c
[209/277][8.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpgc8_32j7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/siv-gcm.c
[1msiv-gcm.c:62:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   62 |   memcpy (block.b + 4, nonce, MIN(nlength, SIV_GCM_NONCE_SIZE));[0m
      | [0;1;32m  ^~~~~~
[0m[1msiv-gcm.c:62:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   62 |   memcpy (block.b + 4, nonce, MIN(nlength, SIV_GCM_NONCE_SIZE));[0m
      | [0;1;32m  ^~~~~~
[0m[1msiv-gcm.c:77:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   77 |       memcpy (encryption_key + i, out.b, 8);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-gcm.c:77:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   77 |       memcpy (encryption_key + i, out.b, 8);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-gcm.c:92:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   92 |       memcpy(buffer->b + 4, ctr + 4, SIV_GCM_BLOCK_SIZE - 4);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-gcm.c:92:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   92 |       memcpy(buffer->b + 4, ctr + 4, SIV_GCM_BLOCK_SIZE - 4);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-gcm.c:116:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  116 |       memset (block + length, 0, SIV_GCM_BLOCK_SIZE - length);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-gcm.c:116:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  116 |       memset (block + length, 0, SIV_GCM_BLOCK_SIZE - length);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-gcm.c:117:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  117 |       memcpy (block, data, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-gcm.c:117:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  117 |       memcpy (block, data, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1msiv-gcm.c:185:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  185 |   memcpy (ctr, tag, SIV_GCM_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1msiv-gcm.c:185:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  185 |   memcpy (ctr, tag, SIV_GCM_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1msiv-gcm.c:210:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  210 |   memcpy (state.b, src + mlength, SIV_GCM_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1msiv-gcm.c:210:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  210 |   memcpy (state.b, src + mlength, SIV_GCM_DIGEST_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m9 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[210/277][6.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp0_ae8as5.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base64-encode.c
[1mbase64-encode.c:59:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   59 |           *--out = '=';[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m   60 |           *--out = ENCODE(alphabet, (in[0] << 4));[0m
   61 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1mbase64-encode.c:64:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   64 |           *--out = ENCODE(alphabet, (in[1] << 2));[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m   65 |           *--out = ENCODE(alphabet, ((in[0] << 4) | (in[1] >> 4)));[0m
   66 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1mbase64-encode.c:69:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   69 |           abort();[0m
      | [0;1;32m          ^      
[0m      | [0;32m          {      ;} 
[0m[1mbase64-encode.c:192:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  192 |       for (; bits < 6; bits += 2)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  193 |         dst[done++] = '=';[0m
      | [0;1;32m                          
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[211/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpa5jsmns3.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-set-encrypt-key.c
[212/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpw2b1k2wc.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-set-nonce.c
[213/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp78eijje2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/xts-aes128.c
[214/277][1.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpi2a_6769.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-set-key.c
[1msalsa20-set-key.c:57:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   57 |       salsa20_128_set_key (ctx, key);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   58 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./salsa20.h:46:29: [0m[0;1;36mnote: [0mexpanded from macro 'salsa20_128_set_key'[0m
   46 | #define salsa20_128_set_key nettle_salsa20_128_set_key[0m
      | [0;1;32m                            ^
[0m[1msalsa20-set-key.c:60:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   60 |       salsa20_256_set_key (ctx, key);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   61 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1m./salsa20.h:47:29: [0m[0;1;36mnote: [0mexpanded from macro 'salsa20_256_set_key'[0m
   47 | #define salsa20_256_set_key nettle_salsa20_256_set_key[0m
      | [0;1;32m                            ^
[0m[1msalsa20-set-key.c:63:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   63 |       abort();[0m
      | [0;1;32m      ^      
[0m      | [0;32m      {      ;} 
[0m5 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[215/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpgc0f515v.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-encrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1maes256-encrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes256-encrypt-2.s.
Found compiler error(s).

[216/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpj7yt6jno.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha1-compress-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1msha1-compress-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha1-compress-2.s.
Found compiler error(s).

[217/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp5i6iw_w4.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia256-meta.c
[218/277][25.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmph_8w127s.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/blowfish-bcrypt.c
[1mblowfish-bcrypt.c:158:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  158 |   for (i = 0; i < n; i++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  159 |     x[i] = nettle_bswap32 (x[i]);[0m
      | [0;1;32m                                 
[0m[1mblowfish-bcrypt.c:223:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  223 |       if (j)[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  224 |         sign |= tmp[1] & 0x80;[0m
      | [0;1;32m                              
[0m[1mblowfish-bcrypt.c:225:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  225 |       if (n--)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  226 |         ptr++;[0m
  227 |       else[0m
      | [0;32m      } 
[0m[1mblowfish-bcrypt.c:227:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  227 |       else[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  228 |         ptr = key, n = lenkey;[0m
      | [0;1;32m                              
[0m[1mblowfish-bcrypt.c:287:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  287 |   if (lenscheme < 2)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  288 |     return 0;[0m
      | [0;1;32m             
[0m[1mblowfish-bcrypt.c:290:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  290 |   if (lenscheme >= 3 && *scheme++ != '$')[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  291 |     return 0;[0m
      | [0;1;32m             
[0m[1mblowfish-bcrypt.c:292:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  292 |   if (*scheme++ != '2')[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  293 |     return 0;[0m
      | [0;1;32m             
[0m[1mblowfish-bcrypt.c:297:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  297 |       return 0;[0m
      | [0;1;32m      ^       
[0m      | [0;32m      {       ;} 
[0m[1mblowfish-bcrypt.c:298:15: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  298 |     case 'a': safety = 0x10000;[0m
      | [0;1;32m              ^
[0m      | [0;32m              {
[0m  299 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mblowfish-bcrypt.c:300:15: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  300 |     case 'x': bug = 1;[0m
      | [0;1;32m              ^
[0m      | [0;32m              {
[0m  301 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mblowfish-bcrypt.c:307:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  307 |     if (*scheme++ != '$')[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  308 |       return 0;[0m
      | [0;1;32m               
[0m[1mblowfish-bcrypt.c:312:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  312 |         if (c > 9)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  313 |           return 0;[0m
      | [0;1;32m                   
[0m[1mblowfish-bcrypt.c:316:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  316 |         if (c > 9)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  317 |           return 0;[0m
      | [0;1;32m                   
[0m[1mblowfish-bcrypt.c:319:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  319 |       } else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  320 |         scheme += 2;[0m
      | [0;1;32m                    
[0m[1mblowfish-bcrypt.c:321:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  321 |       if (lenscheme >= CRYPTPLEN && *scheme++ != '$')[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m  322 |         return 0;[0m
      | [0;1;32m                 
[0m[1mblowfish-bcrypt.c:332:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  332 |          || saltlen != BLOWFISH_BCRYPT_BINSALT_SIZE)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  333 |           return 0;[0m
      | [0;1;32m                   
[0m[1mblowfish-bcrypt.c:338:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  338 |   if (salt)[0m
      | [0;1;32m           ^
[0m      | [0;32m            {
[0m  339 |     memcpy(data.binary.salt, salt, BLOWFISH_BCRYPT_BINSALT_SIZE);[0m
  340 |   else if (lenscheme < HASHOFFSET)[0m
      | [0;32m  } 
[0m[1mblowfish-bcrypt.c:339:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  339 |     memcpy(data.binary.salt, salt, BLOWFISH_BCRYPT_BINSALT_SIZE);[0m
      | [0;1;32m    ^~~~~~
[0m[1mblowfish-bcrypt.c:339:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  339 |     memcpy(data.binary.salt, salt, BLOWFISH_BCRYPT_BINSALT_SIZE);[0m
      | [0;1;32m    ^~~~~~
[0m[1mblowfish-bcrypt.c:340:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  340 |   else if (lenscheme < HASHOFFSET)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  341 |     return 0;[0m
      | [0;1;32m             
[0m[1mblowfish-bcrypt.c:342:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  342 |   memcpy(psalt, data.binary.salt, BLOWFISH_BCRYPT_BINSALT_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1mblowfish-bcrypt.c:342:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  342 |   memcpy(psalt, data.binary.salt, BLOWFISH_BCRYPT_BINSALT_SIZE);[0m
      | [0;1;32m  ^~~~~~
[0m[1mblowfish-bcrypt.c:345:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  345 |   if (log2rounds < minlog2rounds || log2rounds > 31)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  346 |     return 0;[0m
      | [0;1;32m             
[0m[1mblowfish-bcrypt.c:350:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  350 |   memcpy(data.ctx.s, _nettle_blowfish_initial_ctx.s, sizeof(data.ctx.s));[0m
      | [0;1;32m  ^~~~~~
[0m[1mblowfish-bcrypt.c:350:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  350 |   memcpy(data.ctx.s, _nettle_blowfish_initial_ctx.s, sizeof(data.ctx.s));[0m
      | [0;1;32m  ^~~~~~
[0m[1mblowfish-bcrypt.c:406:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  406 |       if (done)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  407 |         break;[0m
      | [0;1;32m              
[0m[1mblowfish-bcrypt.c:430:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  430 |     do[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m  431 |       _nettle_blowfish_encround(&data.ctx, &L, &R);[0m
  432 |     while (--count);[0m
      | [0;32m    } 
[0m[1mblowfish-bcrypt.c:502:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  502 |   memcpy(bufs, test_scheme, sizeof(test_scheme) - 1);[0m
      | [0;1;32m  ^~~~~~
[0m[1mblowfish-bcrypt.c:502:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  502 |   memcpy(bufs, test_scheme, sizeof(test_scheme) - 1);[0m
      | [0;1;32m  ^~~~~~
[0m[1mblowfish-bcrypt.c:504:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  504 |   if (cscheme)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  505 |     test_hash = test_hashes[(bufs[2] = cscheme) == 'x'];[0m
      | [0;1;32m                                                        
[0m28 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[219/277][3.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpx2wthjnh.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/examples/io.c
[1mio.c:58:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   58 |       fprintf(stderr, "Virtual memory exhausted.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mio.c:58:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   58 |       fprintf(stderr, "Virtual memory exhausted.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mio.c:97:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |       if (max_size && size > max_size)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m   98 |         size = max_size;[0m
      | [0;1;32m                        
[0m[1mio.c:120:8: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  120 |               fprintf (stderr, "Reading `%s' failed: %s\n",[0m
      | [0;1;32m              ^~~~~~~
[0m[1mio.c:120:8: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  120 |               fprintf (stderr, "Reading `%s' failed: %s\n",[0m
      | [0;1;32m              ^~~~~~~
[0m[1mio.c:125:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  125 |           if (done == 0)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  126 |             /* Treat empty file as error */[0m
  127 |             goto fail;[0m
      | [0;1;32m                      
[0m[1mio.c:132:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  132 |       if (size == max_size)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  133 |         break;[0m
      | [0;1;32m              
[0m[1mio.c:159:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  159 |   if (!f)[0m
      | [0;1;32m         ^
[0m      | [0;32m          {
[0m  160 |     return 0;[0m
      | [0;1;32m             
[0m[1mio.c:172:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  172 |   if (name)[0m
      | [0;1;32m           ^
[0m      | [0;32m            {
[0m  173 |     length = read_file(name, 0, &buffer);[0m
  174 |   else[0m
      | [0;32m  } 
[0m[1mio.c:174:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  174 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m  175 |     length = read_file(RANDOM_DEVICE, 20, &buffer);[0m
      | [0;1;32m                                                   
[0m[1mio.c:177:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  177 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  178 |     return 0;[0m
      | [0;1;32m             
[0m[1mio.c:194:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  194 |       if (ferror(f))[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  195 |         return 0;[0m
      | [0;1;32m                 
[0m[1mio.c:198:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  198 |       if (feof(f))[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  199 |         return 1;[0m
      | [0;1;32m                 
[0m13 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[220/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmprak2o612.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/balloon-sha1.c
[221/277][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp3h8dh6sl.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/nettle-internal.c
[1mnettle-internal.c:164:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  164 |   CBC_SET_IV(ctx, iv);[0m
      | [0;1;32m  ^
[0m[1m./cbc.h:66:31: [0m[0;1;36mnote: [0mexpanded from macro 'CBC_SET_IV'[0m
   66 | #define CBC_SET_IV(ctx, data) \[0m
      | [0;1;32m                              ^
[0m   67 | memcpy((ctx)->iv, (data), sizeof((ctx)->iv))[0m
      | [0;1;32m~~~~~~
[0m[1mnettle-internal.c:164:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  164 |   CBC_SET_IV(ctx, iv);[0m
      | [0;1;32m  ^
[0m[1m./cbc.h:66:31: [0m[0;1;36mnote: [0mexpanded from macro 'CBC_SET_IV'[0m
   66 | #define CBC_SET_IV(ctx, data) \[0m
      | [0;1;32m                              ^
[0m   67 | memcpy((ctx)->iv, (data), sizeof((ctx)->iv))[0m
      | [0;1;32m~~~~~~
[0m[1mnettle-internal.c:197:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  197 |   CBC_SET_IV(ctx, iv);[0m
      | [0;1;32m  ^
[0m[1m./cbc.h:66:31: [0m[0;1;36mnote: [0mexpanded from macro 'CBC_SET_IV'[0m
   66 | #define CBC_SET_IV(ctx, data) \[0m
      | [0;1;32m                              ^
[0m   67 | memcpy((ctx)->iv, (data), sizeof((ctx)->iv))[0m
      | [0;1;32m~~~~~~
[0m[1mnettle-internal.c:197:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  197 |   CBC_SET_IV(ctx, iv);[0m
      | [0;1;32m  ^
[0m[1m./cbc.h:66:31: [0m[0;1;36mnote: [0mexpanded from macro 'CBC_SET_IV'[0m
   66 | #define CBC_SET_IV(ctx, data) \[0m
      | [0;1;32m                              ^
[0m   67 | memcpy((ctx)->iv, (data), sizeof((ctx)->iv))[0m
      | [0;1;32m~~~~~~
[0m[1mnettle-internal.c:229:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  229 |   CBC_SET_IV(ctx, iv);[0m
      | [0;1;32m  ^
[0m[1m./cbc.h:66:31: [0m[0;1;36mnote: [0mexpanded from macro 'CBC_SET_IV'[0m
   66 | #define CBC_SET_IV(ctx, data) \[0m
      | [0;1;32m                              ^
[0m   67 | memcpy((ctx)->iv, (data), sizeof((ctx)->iv))[0m
      | [0;1;32m~~~~~~
[0m[1mnettle-internal.c:229:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  229 |   CBC_SET_IV(ctx, iv);[0m
      | [0;1;32m  ^
[0m[1m./cbc.h:66:31: [0m[0;1;36mnote: [0mexpanded from macro 'CBC_SET_IV'[0m
   66 | #define CBC_SET_IV(ctx, data) \[0m
      | [0;1;32m                              ^
[0m   67 | memcpy((ctx)->iv, (data), sizeof((ctx)->iv))[0m
      | [0;1;32m~~~~~~
[0m5 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[222/277][19.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpk8pusb9b.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gosthash94.c
[1mgosthash94.c:55:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   55 |     memset (ctx, 0, sizeof (struct gosthash94_ctx));[0m
      | [0;1;32m    ^~~~~~
[0m[1mgosthash94.c:55:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   55 |     memset (ctx, 0, sizeof (struct gosthash94_ctx));[0m
      | [0;1;32m    ^~~~~~
[0m[1mgosthash94.c:72:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   72 |     memcpy (u, ctx->hash, sizeof (u));[0m
      | [0;1;32m    ^~~~~~
[0m[1mgosthash94.c:72:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   72 |     memcpy (u, ctx->hash, sizeof (u));[0m
      | [0;1;32m    ^~~~~~
[0m[1mgosthash94.c:73:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   73 |     memcpy (v, block, sizeof (v));[0m
      | [0;1;32m    ^~~~~~
[0m[1mgosthash94.c:73:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   73 |     memcpy (v, block, sizeof (v));[0m
      | [0;1;32m    ^~~~~~
[0m[1mgosthash94.c:125:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  125 |                 if (i == 6)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  126 |                     break;[0m
      | [0;1;32m                          
[0m[1mgosthash94.c:301:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  301 |     MD_UPDATE(ctx, length, msg, COMPRESS, ctx->count++);[0m
      | [0;1;32m    ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mgosthash94.c:301:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  301 |     MD_UPDATE(ctx, length, msg, COMPRESS, ctx->count++);[0m
      | [0;1;32m    ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mgosthash94.c:354:11: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  354 |           memset (ctx->block + ctx->index, 0, GOSTHASH94_BLOCK_SIZE - ctx->index);[0m
      | [0;1;32m          ^~~~~~
[0m[1mgosthash94.c:354:11: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  354 |           memset (ctx->block + ctx->index, 0, GOSTHASH94_BLOCK_SIZE - ctx->index);[0m
      | [0;1;32m          ^~~~~~
[0m[1mgosthash94.c:361:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  361 |     memset (msg32 + 2, 0, sizeof (uint32_t) * 6);[0m
      | [0;1;32m    ^~~~~~
[0m[1mgosthash94.c:361:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  361 |     memset (msg32 + 2, 0, sizeof (uint32_t) * 6);[0m
      | [0;1;32m    ^~~~~~
[0m9 warnings generated.

[223/277][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpt_gmgc_j.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-camellia128.c
[224/277][1.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmplev2d2rp.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/knuth-lfib.c
[1mknuth-lfib.c:73:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |       ss <<= 1;  if (ss >= MM) ss -= (MM-2);[0m
      | [0;1;32m                              ^             
[0m      | [0;32m                               {
[0m[1mknuth-lfib.c:75:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   75 |   for (;j< 2*KK-1; j++)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   76 |     x[j] = 0;[0m
      | [0;1;32m             
[0m[1mknuth-lfib.c:83:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   83 |       for (j = KK-1; j>0; j--)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   84 |         x[j+j] = x[j];[0m
      | [0;1;32m                      
[0m[1mknuth-lfib.c:85:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |       for (j = 2*KK-2; j > KK-LL; j-= 2)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m   86 |         x[2*KK-1-j] = x[j] & ~1;[0m
      | [0;1;32m                                
[0m[1mknuth-lfib.c:87:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   87 |       for (j = 2*KK-2; j>=KK; j--)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m   88 |         if (x[j] & 1)[0m
   89 |           {[0m
   90 |             x[j-(KK-LL)] = (x[j - (KK-LL)] - x[j]) & (MM-1);[0m
   91 |             x[j-KK] = (x[j-KK] - x[j]) & (MM-1);[0m
   92 |           }[0m
      | [0;1;32m           
[0m[1mknuth-lfib.c:95:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |           for (j=KK; j>0; j--)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   96 |             x[j] = x[j-1];[0m
      | [0;1;32m                          
[0m[1mknuth-lfib.c:98:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   98 |           if (x[KK] & 1)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m   99 |             x[LL] = (x[LL] - x[KK]) & (MM-1);[0m
      | [0;1;32m                                             
[0m[1mknuth-lfib.c:101:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  101 |       if (ss)[0m
      | [0;1;32m             ^
[0m      | [0;32m              {
[0m  102 |         ss >>= 1;[0m
  103 |       else[0m
      | [0;32m      } 
[0m[1mknuth-lfib.c:103:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  103 |       else[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  104 |         t--;[0m
      | [0;1;32m            
[0m[1mknuth-lfib.c:106:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  106 |   for (j=0; j<LL; j++)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  107 |     ctx->x[j+KK-LL] = x[j];[0m
      | [0;1;32m                           
[0m[1mknuth-lfib.c:108:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  108 |   for (; j<KK; j++)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  109 |     ctx->x[j-LL] = x[j];[0m
      | [0;1;32m                        
[0m[1mknuth-lfib.c:137:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  137 |   for (i = 0; i<n; i++)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  138 |     a[i] = knuth_lfib_get(ctx);[0m
      | [0;1;32m                               
[0m[1mknuth-lfib.c:166:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  166 |           *dst++ = value & 0xff;[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  167 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1mknuth-lfib.c:169:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  169 |           WRITE_UINT16(dst, value);[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  170 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1m./macros.h:90:30: [0m[0;1;36mnote: [0mexpanded from macro 'WRITE_UINT16'[0m
   90 | #define WRITE_UINT16(p, i)                      \[0m
      | [0;1;32m                                                ^
[0m[1mknuth-lfib.c:172:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  172 |           abort();[0m
      | [0;1;32m          ^      
[0m      | [0;32m          {      ;} 
[0m17 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[225/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpztb6n9_s.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha384-meta.c
[226/277][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_hmxl8kv.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes256-encrypt-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mcbc-aes256-encrypt-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes256-encrypt-2.s.
Found compiler error(s).

[227/277][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpnyw5o60j.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ghash-update-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mghash-update-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ghash-update-2.s.
Found compiler error(s).

[228/277][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpf6dqieh7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/chacha-crypt.c
[1mchacha-crypt.c:164:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  164 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  165 |     return;[0m
      | [0;1;32m           
[0m[1mchacha-crypt.c:281:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  281 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  282 |     return;[0m
      | [0;1;32m           
[0m4 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[229/277][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp5hsbhynv.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha1-meta.c
[230/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpczjepblm.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20-crypt-internal.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[231/277][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpkg_73y4o.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/arcfour.c
[1marcfour.c:54:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   54 |   for (i = 0; i<256; i++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m   55 |     ctx->S[i] = i;[0m
      | [0;1;32m                  
[0m1 warning generated.

[232/277][1.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpv_nuwvcl.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/arctwo.c
[1marctwo.c:198:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  198 |   for (i = 0; i < length; i++)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  199 |     S[i] = key[i];[0m
      | [0;1;32m                  
[0m[1marctwo.c:202:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  202 |   for (i = length; i < ARCTWO_MAX_KEY_SIZE; i++)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  203 |     S[i] = arctwo_sbox[(S[i - length] + S[i - 1]) & 255];[0m
      | [0;1;32m                                                         
[0m[1marctwo.c:223:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  223 |   for (i = 0; i < 64; i++)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  224 |     ctx->S[i] = LE_READ_UINT16(S + i * 2);[0m
      | [0;1;32m                                          
[0m3 warnings generated.

[233/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpvh1uhtf2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes192-meta.c
[234/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpicz84y4t.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/pbkdf2-hmac-sha256.c
[235/277][17.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpngpbxmva.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cast128.c
[1mcast128.c:244:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  244 |       w = READ_UINT32 (key + length - 4);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  245 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mcast128.c:247:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  247 |       w = READ_UINT24 (key + length - 3) << 8;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  248 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mcast128.c:250:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  250 |       w = READ_UINT16 (key + length - 2) << 16;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  251 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mcast128.c:253:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  253 |       w = (uint32_t) key[length - 1] << 24;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  254 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[236/277][0.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1nr1ee84.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-sha256-meta.c
[237/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp9pvuz6p1.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha3-224.c
[1msha3-224.c:49:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   49 |   memset (ctx, 0, offsetof (struct sha3_224_ctx, block));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha3-224.c:49:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   49 |   memset (ctx, 0, offsetof (struct sha3_224_ctx, block));[0m
      | [0;1;32m  ^~~~~~
[0m1 warning generated.

[238/277][1.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbzj4y6v_.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/siv-ghash-update.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[239/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpmjcbk6pw.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/salsa20r12-crypt.c
[1msalsa20r12-crypt.c:53:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   54 |     return;[0m
      | [0;1;32m           
[0m1 warning generated.

[240/277][1.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmplvk2rato.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gost28147.c
[241/277][0.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpqcoasrbk.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha512-compress.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1msha512-compress.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha512-compress.s.
Found compiler error(s).

[242/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpwu_vhp_8.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/hmac-streebog-meta.c
[243/277][0.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpl2tty_if.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base64url-decode.c
[244/277][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpxjyl9nfg.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/aes-decrypt-table.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[245/277][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpmf0jzfpm.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ctr16.c
[1mctr16.c:92:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   92 |           if (length - i < CTR_BUFFER_LIMIT)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m   93 |             goto done;[0m
      | [0;1;32m                      
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[246/277][0.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpexjjyzd7.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/streebog-meta.c
[247/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpmxj40_ou.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ghash-set-key-2.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mghash-set-key-2.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ghash-set-key-2.s.
Found compiler error(s).

[248/277][2.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpkb8x8bnf.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac32.c
[1mumac32.c:51:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   51 |   memset (ctx->nonce, 0, sizeof(ctx->nonce));[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac32.c:51:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   51 |   memset (ctx->nonce, 0, sizeof(ctx->nonce));[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac32.c:66:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   66 |   memcpy (ctx->nonce, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac32.c:66:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   66 |   memcpy (ctx->nonce, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac32.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |   memset (ctx->nonce + nonce_length, 0, AES_BLOCK_SIZE - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac32.c:67:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   67 |   memset (ctx->nonce + nonce_length, 0, AES_BLOCK_SIZE - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac32.c:85:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   85 |   MD_UPDATE (ctx, length, data, UMAC32_BLOCK, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mumac32.c:85:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   85 |   MD_UPDATE (ctx, length, data, UMAC32_BLOCK, (void)0);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1mumac32.c:103:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  103 |       memset (ctx->block + ctx->index, 0, pad);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac32.c:103:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  103 |       memset (ctx->block + ctx->index, 0, pad);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac32.c:128:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  128 |       if (ctx->nonce[i] == 0 && i > 0)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  129 |         INCREMENT (i, ctx->nonce);[0m
      | [0;1;32m                                  
[0m[1mumac32.c:134:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  134 |   memcpy (digest, &pad, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mumac32.c:134:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  134 |   memcpy (digest, &pad, length);[0m
      | [0;1;32m  ^~~~~~
[0m9 warnings generated.

[249/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpn5rdvck2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/base64-decode.c
[1mbase64-decode.c:85:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |       if (ctx->padding)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   86 |         return -1;[0m
      | [0;1;32m                  
[0m[1mbase64-decode.c:97:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |       else return 0;[0m
      | [0;1;32m          ^         
[0m      | [0;32m           {
[0m[1mbase64-decode.c:100:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  100 |       return -1;[0m
      | [0;1;32m      ^        
[0m      | [0;32m      {        ;} 
[0m[1mbase64-decode.c:103:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  103 |       return 0;[0m
      | [0;1;32m      ^       
[0m      | [0;32m      {       ;} 
[0m[1mbase64-decode.c:107:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  107 |       if (!ctx->bits || ctx->padding > 2)[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  108 |         return -1;[0m
  109 |       [0m
  110 |       if (ctx->word & ( (1<<ctx->bits) - 1))[0m
  111 |         /* We shouldn't have any leftover bits */[0m
  112 |         return -1;[0m
  113 | [0m
  114 |       ctx->padding++;[0m
  115 |       ctx->bits -= 2;[0m
  116 |       return 0;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1mbase64-decode.c:107:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  107 |       if (!ctx->bits || ctx->padding > 2)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  108 |         return -1;[0m
      | [0;1;32m                  
[0m[1mbase64-decode.c:110:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |       if (ctx->word & ( (1<<ctx->bits) - 1))[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  111 |         /* We shouldn't have any leftover bits */[0m
  112 |         return -1;[0m
      | [0;1;32m                  
[0m[1mbase64-decode.c:130:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |   for (i = 0, done = 0; i<src_length; i++)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  131 |     switch(base64_decode_single(ctx, dst + done, src[i]))[0m
  132 |       {[0m
  133 |       case -1:[0m
  134 |         return 0;[0m
  135 |       case 1:[0m
  136 |         done++;[0m
  137 |         /* Fall through */[0m
  138 |       case 0:[0m
  139 |         break;[0m
  140 |       default:[0m
  141 |         abort();[0m
  142 |       }[0m
      | [0;1;32m       
[0m[1mbase64-decode.c:134:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  134 |         return 0;[0m
      | [0;1;32m        ^       
[0m      | [0;32m        {       ;} 
[0m[1mbase64-decode.c:136:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  136 |         done++;[0m
      | [0;1;32m        ^     
[0m      | [0;32m        {     ;} 
[0m[1mbase64-decode.c:139:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  139 |         break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1mbase64-decode.c:141:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  141 |         abort();[0m
      | [0;1;32m        ^      
[0m      | [0;32m        {      ;} 
[0m15 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[250/277][0.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpuvzht0bc.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cmac-des3-meta.c
[251/277][0.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmph1e259yw.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm-aes256.c
[252/277][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpo7585wyx.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md5-compress.s
[0;1;31merror: [0m[1munable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-D HAVE_CONFIG_H' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I .' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-I /usr/lib/llvm-18/lib/clang/18/include' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-O2' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-W' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wall' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wbad-function-cast' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-declarations' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wmissing-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wnested-externs' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wno-sign-compare' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wpointer-arith' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-Wstrict-prototypes' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-fpic' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-g' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1margument unused during compilation: '-ggdb3' [clang-diagnostic-unused-command-line-argument][0m
[0;1;35mwarning: [0m[1mmd5-compress.s: 'assembler' input unused [clang-diagnostic-unused-command-line-argument][0m
Error while processing /itch/common/crepos/cu-to-rtu/c/nettle-3.9/md5-compress.s.
Found compiler error(s).

[253/277][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmppp2_x4rx.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cmac64.c
[1mcmac64.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |   memset(&ctx->X, 0, sizeof(ctx->X));[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac64.c:67:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   67 |   memset(&ctx->X, 0, sizeof(ctx->X));[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac64.c:85:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   85 |       memcpy(&ctx->block.b[ctx->index], msg, len);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac64.c:85:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   85 |       memcpy(&ctx->block.b[ctx->index], msg, len);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac64.c:114:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  114 |   memcpy(ctx->block.b, msg, msg_len);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac64.c:114:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  114 |   memcpy(ctx->block.b, msg, msg_len);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac64.c:125:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  125 |   memset(ctx->block.b+ctx->index, 0, sizeof(ctx->block.b)-ctx->index);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac64.c:125:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  125 |   memset(ctx->block.b+ctx->index, 0, sizeof(ctx->block.b)-ctx->index);[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac64.c:148:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  148 |       memcpy(dst, ctx->block.b, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac64.c:148:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  148 |       memcpy(dst, ctx->block.b, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mcmac64.c:152:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  152 |   memset(&ctx->X, 0, sizeof(ctx->X));[0m
      | [0;1;32m  ^~~~~~
[0m[1mcmac64.c:152:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  152 |   memset(&ctx->X, 0, sizeof(ctx->X));[0m
      | [0;1;32m  ^~~~~~
[0m8 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[254/277][0.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmprlcceovc.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/pbkdf2-hmac-sha384.c
[255/277][0.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp_0vdlujz.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/twofish-meta.c
[256/277][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp10gby4a_.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/nettle-meta-hashes.c
[257/277][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1u30mj_2.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/cbc-aes192-encrypt.c
[258/277][1.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmph8xhrte_.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/xts.c
[1mxts.c:56:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   56 |   if (length < XTS_BLOCK_SIZE)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   57 |     memset(dst, '\0', length);[0m
      | [0;1;32m                              
[0m[1mxts.c:57:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   57 |     memset(dst, '\0', length);[0m
      | [0;1;32m    ^~~~~~
[0m[1mxts.c:57:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   57 |     memset(dst, '\0', length);[0m
      | [0;1;32m    ^~~~~~
[0m[1mxts.c:85:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |       if (length > XTS_BLOCK_SIZE)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m   86 |           block16_mulx_le(&T, &T);[0m
      | [0;1;32m                                  
[0m[1mxts.c:115:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  115 |       memcpy(dst, S.b, length);                 /* S_1 -> C(n) */[0m
      | [0;1;32m      ^~~~~~
[0m[1mxts.c:115:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  115 |       memcpy(dst, S.b, length);                 /* S_1 -> C(n) */[0m
      | [0;1;32m      ^~~~~~
[0m[1mxts.c:140:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  140 |       if (length > XTS_BLOCK_SIZE)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  141 |           block16_mulx_le(&T, &T);[0m
      | [0;1;32m                                  
[0m[1mxts.c:171:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  171 |       memcpy(dst, S.b, length);                 /* S_1 -> P(n) */[0m
      | [0;1;32m      ^~~~~~
[0m[1mxts.c:171:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  171 |       memcpy(dst, S.b, length);                 /* S_1 -> P(n) */[0m
      | [0;1;32m      ^~~~~~
[0m8 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[259/277][4.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpudnsai28.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/examples/nettle-openssl.c
5 warnings generated.
Suppressed 5 warnings (5 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[260/277][5.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbvi4bw3e.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia256-set-encrypt-key.c
[261/277][2.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmplm8cr3z0.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/gcm.c
[1mgcm.c:86:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   86 |       memcpy (block.b, data, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mgcm.c:86:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   86 |       memcpy (block.b, data, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mgcm.c:113:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  113 |       memcpy (ctx->iv.b, iv, GCM_BLOCK_SIZE - 4);[0m
      | [0;1;32m      ^~~~~~
[0m[1mgcm.c:113:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  113 |       memcpy (ctx->iv.b, iv, GCM_BLOCK_SIZE - 4);[0m
      | [0;1;32m      ^~~~~~
[0m[1mgcm.c:244:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  244 |   memcpy (digest, buffer.b, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mgcm.c:244:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  244 |   memcpy (digest, buffer.b, length);[0m
      | [0;1;32m  ^~~~~~
[0m5 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[262/277][2.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp2jbnzx64.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/camellia128-set-encrypt-key.c
[263/277][3.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmph6qshn2u.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tools/parse.c
[1mparse.c:84:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   84 |   if (parser->input->token != token)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m   85 |     die("Syntax error.\n");[0m
      | [0;1;32m                           
[0m[1mparse.c:108:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  108 |           if (parser->level == parser->transport)[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m[1mparse.c:108:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  108 |           if (parser->level == parser->transport)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  109 |             die("Unmatched end of list in transport encoded data.\n");[0m
      | [0;1;32m                                                                      
[0m[1mparse.c:112:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |           if (!parser->level)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  113 |             die("Unmatched end of list.\n");[0m
      | [0;1;32m                                            
[0m[1mparse.c:130:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  130 |           if (parser->level > 1)[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  131 |             die("Unexpected end of file.\n");[0m
  132 | [0m
  133 |           token->type = SEXP_EOF;[0m
  134 |           return;[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1mparse.c:130:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |           if (parser->level > 1)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  131 |             die("Unexpected end of file.\n");[0m
      | [0;1;32m                                             
[0m[1mparse.c:137:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  137 |           parser->level++;[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  138 |           token->type = SEXP_LIST_START;[0m
  139 |           return;[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1mparse.c:142:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  142 |           sexp_check_token(parser, SEXP_STRING, &token->display);[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  143 |           sexp_check_token(parser, SEXP_DISPLAY_END, &token->display);[0m
  144 |           sexp_check_token(parser, SEXP_STRING, &token->string);[0m
  145 | [0m
  146 |           token->type = SEXP_DISPLAY;[0m
  147 |           goto check_transport_end;[0m
      | [0;1;32m                                  
[0m      | [0;32m                                  ;} 
[0m[1mparse.c:150:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  150 |           token->type = SEXP_STRING;[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  151 |           goto check_transport_end;[0m
      | [0;1;32m                                  
[0m      | [0;32m                                  ;} 
[0m[1mparse.c:154:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  154 |           token->type = SEXP_COMMENT;[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  155 |           return;[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1mparse.c:158:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  158 |           if (parser->mode == SEXP_CANONICAL)[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  159 |             die("Base64 not allowed in canonical mode.\n");[0m
  160 |           parser->level++;[0m
  161 |           parser->transport = parser->level;[0m
  162 | [0m
  163 |           continue;[0m
      | [0;1;32m                  
[0m      | [0;32m                  ;} 
[0m[1mparse.c:158:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  158 |           if (parser->mode == SEXP_CANONICAL)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  159 |             die("Base64 not allowed in canonical mode.\n");[0m
      | [0;1;32m                                                           
[0m[1mparse.c:166:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  166 |           die("Unexpected end of transport encoding.\n");[0m
      | [0;1;32m          ^                                             
[0m      | [0;32m          {                                             ;} 
[0m[1mparse.c:169:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  169 |           die("Unexpected end of display tag.\n");[0m
      | [0;1;32m          ^                                      
[0m      | [0;32m          {                                      ;} 
[0m[1mparse.c:173:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  173 |           abort();[0m
      | [0;1;32m          ^      
[0m      | [0;32m          {      ;} 
[0m17 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[264/277][5.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp6d_v9xea.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sha512.c
[1msha512.c:138:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  138 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha512.c:138:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  138 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha512.c:151:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  151 |   MD_UPDATE (ctx, length, data, COMPRESS, MD_INCR(ctx));[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1msha512.c:151:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  151 |   MD_UPDATE (ctx, length, data, COMPRESS, MD_INCR(ctx));[0m
      | [0;1;32m  ^
[0m[1m./macros.h:189:6: [0m[0;1;36mnote: [0mexpanded from macro 'MD_UPDATE'[0m
  189 |             memcpy((ctx)->block + (ctx)->index, (data), (length));      \[0m
      | [0;1;32m            ^~~~~~
[0m[1msha512.c:167:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  167 |   MD_PAD(ctx, 16, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1msha512.c:167:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  167 |   MD_PAD(ctx, 16, COMPRESS);[0m
      | [0;1;32m  ^
[0m[1m./macros.h:235:2: [0m[0;1;36mnote: [0mexpanded from macro 'MD_PAD'[0m
  235 |         memset((ctx)->block + __md_i, 0, sizeof((ctx)->block) - __md_i); \[0m
      | [0;1;32m        ^~~~~~
[0m[1msha512.c:183:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  183 |   for (i = 0; i < words; i++, digest += 8)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  184 |     WRITE_UINT64(digest, ctx->state[i]);[0m
      | [0;1;32m                                        
[0m[1msha512.c:230:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  230 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha512.c:230:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  230 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha512.c:263:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  263 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha512.c:263:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  263 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha512.c:296:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  296 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m[1msha512.c:296:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  296 |   memcpy(ctx->state, H0, sizeof(H0));[0m
      | [0;1;32m  ^~~~~~
[0m12 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[265/277][5.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp3ib81cqf.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/sm4.c
[266/277][12.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpa1aalge9.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/serpent-set-key.c
[1mserpent-set-key.c:305:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  305 |   for (i = 0; key_length >= 4; key_length -=4, key += 4)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  306 |     w[i++] = LE_READ_UINT32(key);[0m
      | [0;1;32m                                 
[0m[1mserpent-set-key.c:314:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  314 |       while (key_length > 0)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  315 |         pad = pad << 8 | key[--key_length];[0m
      | [0;1;32m                                           
[0m[1mserpent-set-key.c:319:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  319 |       while (i < 8)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  320 |         w[i++] = 0;[0m
      | [0;1;32m                   
[0m[1mserpent-set-key.c:348:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  348 |       if (k == 132)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  349 |         break;[0m
      | [0;1;32m              
[0m4 warnings generated.

[267/277][9.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpybakl6f3.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/umac-set-key.c
[1mumac-set-key.c:59:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   59 |       memcpy (dst, block, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mumac-set-key.c:59:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   59 |       memcpy (dst, block, length);[0m
      | [0;1;32m      ^~~~~~
[0m1 warning generated.

[268/277][16.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpxgix2j6z.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tools/nettle-hash.c
[1mnettle-hash.c:58:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   58 |   for (i = 0; (alg = nettle_hashes[i]); i++)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m   59 |     printf ("%10s %d (%d, %d)\n",[0m
   60 |             alg->name, alg->digest_size, alg->block_size, alg->context_size);[0m
      | [0;1;32m                                                                             
[0m[1mnettle-hash.c:71:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   71 |       if (ferror(f))[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   72 |         return 0;[0m
      | [0;1;32m                 
[0m[1mnettle-hash.c:75:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   75 |       if (feof(f))[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m   76 |         return 1;[0m
      | [0;1;32m                 
[0m[1mnettle-hash.c:101:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  101 |   if (raw)[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  102 |     fwrite (digest, digest_length, 1, stdout);[0m
  103 | [0m
  104 |   else[0m
      | [0;32m  } 
[0m[1mnettle-hash.c:127:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  127 |   fprintf(f, "Usage: nettle-hash -a ALGORITHM [OPTIONS] [FILE ...]\n"[0m
      | [0;1;32m  ^~~~~~~
[0m[1mnettle-hash.c:127:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  127 |   fprintf(f, "Usage: nettle-hash -a ALGORITHM [OPTIONS] [FILE ...]\n"[0m
      | [0;1;32m  ^~~~~~~
[0m[1mnettle-hash.c:163:71: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  163 |   while ( (c = getopt_long(argc, argv, "Va:l:", options, NULL)) != -1)[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m[1mnettle-hash.c:167:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  167 |         abort();[0m
      | [0;1;32m        ^      
[0m      | [0;32m        {      ;} 
[0m[1mnettle-hash.c:169:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  169 |         usage (stderr);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  170 |         return EXIT_FAILURE;[0m
      | [0;1;32m                           
[0m      | [0;32m                           ;} 
[0m[1mnettle-hash.c:172:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  172 |         usage (stdout);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  173 |         return EXIT_SUCCESS;[0m
      | [0;1;32m                           
[0m      | [0;32m                           ;} 
[0m[1mnettle-hash.c:175:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  175 |         printf("nettle-hash (" PACKAGE_STRING ")\n");[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  176 |         return EXIT_SUCCESS;[0m
      | [0;1;32m                           
[0m      | [0;32m                           ;} 
[0m[1mnettle-hash.c:178:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  178 |         alg_name = optarg;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  179 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mnettle-hash.c:181:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  181 |         {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  182 |           int arg;[0m
  183 |           arg = atoi (optarg);[0m
  184 |           if (arg <= 0)[0m
  185 |             die ("Invalid length argument: `%s'\n", optarg);[0m
  186 |           length = arg;[0m
  187 |         }[0m
  188 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mnettle-hash.c:184:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  184 |           if (arg <= 0)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  185 |             die ("Invalid length argument: `%s'\n", optarg);[0m
      | [0;1;32m                                                            
[0m[1mnettle-hash.c:190:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  190 |         raw = 1;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  191 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mnettle-hash.c:193:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  193 |         list_algorithms();[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  194 |         return EXIT_SUCCESS;[0m
      | [0;1;32m                           
[0m      | [0;32m                           ;} 
[0m[1mnettle-hash.c:197:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  197 |   if (!alg_name)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  198 |     die("Algorithm argument (-a option) is mandatory.\n"[0m
  199 |         "See nettle-hash --help for further information.\n");[0m
      | [0;1;32m                                                             
[0m[1mnettle-hash.c:202:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  202 |   if (!alg)[0m
      | [0;1;32m           ^
[0m      | [0;32m            {
[0m  203 |     die("Hash algorithm `%s' not supported or .\n"[0m
  204 |         "Use nettle-hash --list to list available algorithms.\n",[0m
  205 |         alg_name);[0m
      | [0;1;32m                  
[0m[1mnettle-hash.c:207:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  207 |   if (length == 0)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  208 |     length = alg->digest_size;[0m
  209 |   else if (length > alg->digest_size)[0m
      | [0;32m  } 
[0m[1mnettle-hash.c:209:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  209 |   else if (length > alg->digest_size)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  210 |     die ("Length argument %d too large for selected algorithm.\n",[0m
  211 |          length);[0m
      | [0;1;32m                 
[0m[1mnettle-hash.c:216:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  216 |   if (argc == 0)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  217 |     digest_file (alg, length, raw, stdin);[0m
  218 |   else[0m
      | [0;32m  } 
[0m[1mnettle-hash.c:224:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  224 |           if (!f)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  225 |             die ("Cannot open `%s': %s\n", argv[i], STRERROR(errno));[0m
      | [0;1;32m                                                                     
[0m[1mnettle-hash.c:227:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  227 |           if (!digest_file (alg, length, raw, f))[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  228 |             die("Reading `%s' failed: %s\n", argv[i], STRERROR(errno));[0m
      | [0;1;32m                                                                       
[0m[1mnettle-hash.c:232:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  232 |   if (fflush(stdout) != 0 )[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  233 |     die("Write failed: %s\n", STRERROR(errno));[0m
      | [0;1;32m                                               
[0m26 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[269/277][17.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp1mr_odqr.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ctr.c
[1mctr.c:57:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   57 |       memcpy (buffer + i, ctr, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mctr.c:57:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   57 |       memcpy (buffer + i, ctr, block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mctr.c:100:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  100 |       if (!++lo)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  101 |         hi = __builtin_bswap64(__builtin_bswap64(hi) + 1);[0m
      | [0;1;32m                                                          
[0m[1mctr.c:149:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |       if (length < block_size)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  150 |         buffer_size = block_size;[0m
  151 |       else if (length <= CTR_BUFFER_LIMIT)[0m
      | [0;32m      } 
[0m[1mctr.c:151:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  151 |       else if (length <= CTR_BUFFER_LIMIT)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  152 |         buffer_size = length;[0m
  153 |       else[0m
      | [0;32m      } 
[0m[1mctr.c:153:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  153 |       else[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  154 |         buffer_size = CTR_BUFFER_LIMIT;[0m
      | [0;1;32m                                       
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[270/277][25.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpghz7qja_.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tools/output.c
[1moutput.c:74:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   74 |   if (putc(c, output->f) < 0)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   75 |     die("Write failed: %s\n", strerror(errno));[0m
      | [0;1;32m                                               
[0m[1moutput.c:85:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |   if (output->soft_newline)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   86 |     output->soft_newline = 0;[0m
   87 |   else[0m
      | [0;32m  } 
[0m[1moutput.c:94:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   94 |       for(i = 0; i < indent; i++)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m   95 |         sexp_put_raw_char(output, ' ');[0m
      | [0;1;32m                                       
[0m[1moutput.c:130:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |               && output->pos >= (output->coding_indent + 10))[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m  131 |             sexp_put_newline(output, output->coding_indent);[0m
      | [0;1;32m                                                            
[0m[1moutput.c:136:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  136 |   else if (output->hash)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  137 |     output->hash->update(output->ctx, 1, &c);[0m
  138 |   else[0m
      | [0;32m  } 
[0m[1moutput.c:138:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  138 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m  139 |     sexp_put_raw_char(output, c);[0m
      | [0;1;32m                                 
[0m[1moutput.c:148:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  148 |   for (i = 0; i<length; i++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  149 |     sexp_put_char(output, data[i]);[0m
      | [0;1;32m                                   
[0m[1moutput.c:161:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  161 |       if (next > length)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  162 |         break;[0m
      | [0;1;32m              
[0m[1moutput.c:166:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  166 |   for (; digit; length %= digit, digit /= 10)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  167 |     sexp_put_char(output, '0' + length / digit);[0m
      | [0;1;32m                                                
[0m[1moutput.c:204:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  204 |   if (!string->size)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  205 |     sexp_put_data(output, 2,[0m
  206 |                   (const uint8_t *) ((mode == SEXP_ADVANCED) ? "\"\"": "0:"));[0m
  207 | [0m
  208 |   else if (mode == SEXP_ADVANCED)[0m
      | [0;32m  } 
[0m[1moutput.c:224:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  224 |           if (token & !TOKEN_CHAR(c))[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  225 |             token = 0;[0m
      | [0;1;32m                      
[0m[1moutput.c:229:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  229 |               if (c >= 0x7f)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  230 |                 quote_friendly = 0;[0m
  231 |               else if (c < CONTROL_SIZE && !escape_names[c])[0m
      | [0;32m              } 
[0m[1moutput.c:231:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  231 |               else if (c < CONTROL_SIZE && !escape_names[c])[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m  232 |                 quote_friendly = 0;[0m
      | [0;1;32m                                   
[0m[1moutput.c:236:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  236 |       if (token)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  237 |         sexp_put_data(output, string->size, string->contents);[0m
  238 | [0m
  239 |       else if (quote_friendly)[0m
      | [0;32m      } 
[0m[1moutput.c:250:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  250 |               if (c == '\\' || c == '"')[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  251 |                 escape = 1;[0m
  252 |               else if (c < CONTROL_SIZE)[0m
      | [0;32m              } 
[0m[1moutput.c:258:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  258 |               if (escape)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  259 |                 sexp_put_char(output, '\\');[0m
      | [0;1;32m                                            
[0m18 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[271/277][22.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpydzhh3bc.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/ocb.c
[1mocb.c:51:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |   if (offset == 0)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m   52 |     return u0;[0m
      | [0;1;32m              
[0m[1mocb.c:72:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   72 |   if (i & 1)[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   73 |     block16_xor (offset, &key->L[2]);[0m
   74 |   else[0m
      | [0;32m  } 
[0m[1mocb.c:79:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   79 |       for (i >>= 1; !(i&1); i >>= 1)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m   80 |         block16_mulx_be (&diff, &diff);[0m
      | [0;1;32m                                       
[0m[1mocb.c:89:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   89 |   memcpy (block->b, data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mocb.c:89:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   89 |   memcpy (block->b, data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mocb.c:91:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   91 |   memset (block->b + length + 1, 0, OCB_BLOCK_SIZE - 1 - length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mocb.c:91:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   91 |   memset (block->b + length + 1, 0, OCB_BLOCK_SIZE - 1 - length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mocb.c:110:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  110 |   memset (top.b + 1, 0, 15 - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mocb.c:110:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  110 |   memset (top.b + 1, 0, 15 - nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mocb.c:112:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  112 |   memcpy (top.b + 16 - nonce_length, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mocb.c:112:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  112 |   memcpy (top.b + 16 - nonce_length, nonce, nonce_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mocb.c:140:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  140 |   if (count & 1)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  141 |     prev = offset;[0m
  142 |   else[0m
      | [0;32m  } 
[0m[1mocb.c:160:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |       for (i = count >> 1; !(i&1); i >>= 1)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  161 |         block16_mulx_be (&o[0], &o[0]);[0m
      | [0;1;32m                                       
[0m[1mocb.c:185:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  185 |   if (ctx->data_count == 0)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  186 |     ctx->offset.u64[0] = ctx->offset.u64[1] = 0;[0m
      | [0;1;32m                                                
[0m[1mocb.c:200:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  200 |       for (i = 0; i < blocks; i++)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  201 |         block16_xor(&ctx->sum, &block[i]);[0m
      | [0;1;32m                                          
[0m[1mocb.c:289:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  289 |       for (i = initial; i > 0; i--)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  290 |         edge_word = (edge_word << 8) + *src++;[0m
      | [0;1;32m                                              
[0m[1mocb.c:305:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  305 |       for (i = 8 - initial, src += 8; i > 0; i--)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  306 |         edge_word = (edge_word << 8) + *src++;[0m
      | [0;1;32m                                              
[0m[1mocb.c:327:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  327 |   if (ctx->message_count == 0)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  328 |     ctx->offset = ctx->initial;[0m
      | [0;1;32m                               
[0m[1mocb.c:360:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  360 |   if (ctx->message_count == 0)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  361 |     ctx->offset = ctx->initial;[0m
      | [0;1;32m                               
[0m17 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[272/277][31.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpknrh1mmr.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/balloon.c
[1mballoon.c:65:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   65 |   if (a && a_len)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   66 |     update(ctx, a_len, a);[0m
      | [0;1;32m                          
[0m[1mballoon.c:67:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   67 |   if (b && b_len)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   68 |     update(ctx, b_len, b);[0m
      | [0;1;32m                          
[0m[1mballoon.c:119:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  119 |   for (i = 1; i < s_cost; ++i)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  120 |     hash(hash_ctx, update, digest, digest_size,[0m
  121 |          cnt++, BS, buf + (i - 1) * BS, 0, NULL, buf + i * BS);[0m
      | [0;1;32m                                                               
[0m[1mballoon.c:142:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  142 |   memcpy(dst, buf + (s_cost - 1) * BS, BS);[0m
      | [0;1;32m  ^~~~~~
[0m[1mballoon.c:142:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  142 |   memcpy(dst, buf + (s_cost - 1) * BS, BS);[0m
      | [0;1;32m  ^~~~~~
[0m4 warnings generated.

[273/277][71.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp3ic7eg6v.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/testsuite/testutils.c
[1mtestutils.c:35:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   35 |       fprintf(stderr, "Virtual memory exhausted.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:35:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   35 |       fprintf(stderr, "Virtual memory exhausted.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:71:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   71 |   memcpy (s->data, data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:71:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   71 |   memcpy (s->data, data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:84:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   84 |   ASSERT (base16_decode_update (&ctx, &s->length, s->data,[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:84:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   84 |   ASSERT (base16_decode_update (&ctx, &s->length, s->data,[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:86:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   86 |   ASSERT (base16_decode_final (&ctx));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:86:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   86 |   ASSERT (base16_decode_final (&ctx));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:107:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  107 |           break;[0m
      | [0;1;32m          ^    
[0m      | [0;32m          {    ;} 
[0m[1mtestutils.c:109:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  109 |           printf("\n");[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  110 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1mtestutils.c:112:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  112 |           printf(" ");[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  113 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1mtestutils.c:127:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  127 |       if (argc == 2 && !strcmp(argv[1], "-v"))[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  128 |         verbose = 1;[0m
  129 |       else[0m
      | [0;32m      } 
[0m[1mtestutils.c:131:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  131 |           fprintf(stderr, "Invalid argument `%s', only accepted option is `-v'.\n",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:131:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  131 |           fprintf(stderr, "Invalid argument `%s', only accepted option is `-v'.\n",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:152:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  152 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:152:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  152 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:155:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  155 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:155:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  155 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:161:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  161 |       fprintf(stderr, "Encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:161:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  161 |       fprintf(stderr, "Encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:163:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  163 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:163:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  163 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:165:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  165 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:165:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  165 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:167:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  167 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:167:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  167 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:175:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  175 |       fprintf(stderr, "Decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:175:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  175 |       fprintf(stderr, "Decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:177:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  177 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:177:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  177 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:179:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  179 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:179:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  179 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:181:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  181 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:181:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  181 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:201:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  201 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:201:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  201 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:204:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  204 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:204:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  204 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:205:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  205 |   ASSERT (iiv->length == cipher->block_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:205:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  205 |   ASSERT (iiv->length == cipher->block_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:209:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  209 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:209:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  209 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:217:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  217 |       fprintf(stderr, "CBC encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:217:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  217 |       fprintf(stderr, "CBC encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:219:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  219 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:219:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  219 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:221:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  221 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:221:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  221 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:223:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  223 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:223:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  223 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:227:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  227 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:227:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  227 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:235:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  235 |       fprintf(stderr, "CBC decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:235:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  235 |       fprintf(stderr, "CBC decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:237:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  237 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:237:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  237 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:239:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  239 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:239:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  239 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:241:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  241 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:241:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  241 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:262:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  262 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:262:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  262 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:265:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  265 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:265:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  265 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:266:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  266 |   ASSERT (iiv->length == cipher->block_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:266:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  266 |   ASSERT (iiv->length == cipher->block_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:272:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  272 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:272:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  272 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:280:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  280 |       fprintf(stderr, "CFB encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:280:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  280 |       fprintf(stderr, "CFB encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:282:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  282 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:282:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  282 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:284:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  284 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:284:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  284 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:286:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  286 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:286:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  286 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:290:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  290 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:290:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  290 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:298:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  298 |       fprintf(stderr, "CFB decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:298:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  298 |       fprintf(stderr, "CFB decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:300:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  300 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:300:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  300 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:302:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  302 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:302:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  302 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:304:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  304 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:304:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  304 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:308:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  308 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:308:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  308 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:309:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  309 |   memcpy(data, cleartext->data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:309:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  309 |   memcpy(data, cleartext->data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:317:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  317 |       fprintf(stderr, "CFB inplace encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:317:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  317 |       fprintf(stderr, "CFB inplace encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:319:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  319 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:319:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  319 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:321:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  321 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:321:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  321 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:323:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  323 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:323:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  323 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:327:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  327 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:327:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  327 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:335:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  335 |       fprintf(stderr, "CFB inplace decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:335:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  335 |       fprintf(stderr, "CFB inplace decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:337:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  337 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:337:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  337 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:339:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  339 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:339:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  339 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:341:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  341 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:341:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  341 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:349:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  349 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:349:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  349 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:357:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  357 |       fprintf(stderr, "CFB encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:357:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  357 |       fprintf(stderr, "CFB encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:359:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  359 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:359:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  359 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:361:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  361 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:361:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  361 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:363:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  363 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:363:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  363 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:367:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  367 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:367:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  367 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:375:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  375 |       fprintf(stderr, "CFB decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:375:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  375 |       fprintf(stderr, "CFB decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:377:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  377 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:377:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  377 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:379:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  379 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:379:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  379 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:381:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  381 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:381:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  381 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:385:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  385 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:385:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  385 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:386:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  386 |   memcpy(data, cleartext->data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:386:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  386 |   memcpy(data, cleartext->data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:394:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  394 |       fprintf(stderr, "CFB inplace encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:394:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  394 |       fprintf(stderr, "CFB inplace encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:396:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  396 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:396:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  396 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:398:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  398 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:398:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  398 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:400:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  400 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:400:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  400 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:404:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  404 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:404:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  404 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:412:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  412 |       fprintf(stderr, "CFB inplace decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:412:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  412 |       fprintf(stderr, "CFB inplace decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:414:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  414 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:414:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  414 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:416:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  416 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:416:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  416 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:418:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  418 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:418:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  418 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:441:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  441 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:441:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  441 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:444:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  444 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:444:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  444 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:445:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  445 |   ASSERT (iiv->length == cipher->block_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:445:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  445 |   ASSERT (iiv->length == cipher->block_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:455:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  455 |       memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:455:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  455 |       memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:457:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  457 |       memset(data, 0x17, length + 1);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:457:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  457 |       memset(data, 0x17, length + 1);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:470:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  470 |           fprintf(stderr, "CFB8 encrypt failed, block size %lu:\nInput:",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:470:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  470 |           fprintf(stderr, "CFB8 encrypt failed, block size %lu:\nInput:",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:473:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  473 |           fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:473:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  473 |           fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:475:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  475 |           fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:475:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  475 |           fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:477:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  477 |           fprintf(stderr, "\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:477:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  477 |           fprintf(stderr, "\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:480:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  480 |       ASSERT (data[length] == 0x17);[0m
      | [0;1;32m      ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:480:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  480 |       ASSERT (data[length] == 0x17);[0m
      | [0;1;32m      ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:483:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  483 |       memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:483:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  483 |       memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:485:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  485 |       memset(data2, 0x17, length + 1);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:485:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  485 |       memset(data2, 0x17, length + 1);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:498:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  498 |           fprintf(stderr, "CFB8 decrypt failed, block size %lu:\nInput:",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:498:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  498 |           fprintf(stderr, "CFB8 decrypt failed, block size %lu:\nInput:",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:501:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  501 |           fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:501:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  501 |           fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:503:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  503 |           fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:503:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  503 |           fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:505:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  505 |           fprintf(stderr, "\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:505:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  505 |           fprintf(stderr, "\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:508:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  508 |       ASSERT (data[length] == 0x17);[0m
      | [0;1;32m      ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:508:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  508 |       ASSERT (data[length] == 0x17);[0m
      | [0;1;32m      ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:512:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  512 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:512:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  512 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:513:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  513 |   memcpy(data, cleartext->data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:513:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  513 |   memcpy(data, cleartext->data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:521:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  521 |       fprintf(stderr, "CFB8 inplace encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:521:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  521 |       fprintf(stderr, "CFB8 inplace encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:523:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  523 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:523:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  523 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:525:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  525 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:525:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  525 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:527:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  527 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:527:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  527 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:531:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  531 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:531:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  531 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:539:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  539 |       fprintf(stderr, "CFB8 inplace decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:539:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  539 |       fprintf(stderr, "CFB8 inplace decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:541:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  541 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:541:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  541 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:543:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  543 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:543:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  543 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:545:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  545 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:545:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  545 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:553:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  553 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:553:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  553 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:561:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  561 |       fprintf(stderr, "CFB8 encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:561:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  561 |       fprintf(stderr, "CFB8 encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:563:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  563 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:563:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  563 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:565:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  565 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:565:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  565 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:567:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  567 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:567:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  567 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:571:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  571 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:571:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  571 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:579:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  579 |       fprintf(stderr, "CFB8 decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:579:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  579 |       fprintf(stderr, "CFB8 decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:581:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  581 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:581:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  581 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:583:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  583 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:583:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  583 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:585:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  585 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:585:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  585 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:589:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  589 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:589:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  589 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:590:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  590 |   memcpy(data, cleartext->data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:590:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  590 |   memcpy(data, cleartext->data, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:598:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  598 |       fprintf(stderr, "CFB8 inplace encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:598:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  598 |       fprintf(stderr, "CFB8 inplace encrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:600:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  600 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:600:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  600 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:602:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  602 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:602:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  602 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:604:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  604 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:604:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  604 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:608:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  608 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:608:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  608 |   memcpy(iv, iiv->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:616:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  616 |       fprintf(stderr, "CFB8 inplace decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:616:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  616 |       fprintf(stderr, "CFB8 inplace decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:618:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  618 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:618:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  618 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:620:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  620 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:620:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  620 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:622:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  622 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:622:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  622 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:647:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  647 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:647:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  647 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:650:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  650 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:650:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  650 |   ASSERT (key->length == cipher->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:651:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  651 |   ASSERT (ictr->length == cipher->block_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:651:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  651 |   ASSERT (ictr->length == cipher->block_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:655:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  655 |   ASSERT (nblocks < 0x100);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:655:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  655 |   ASSERT (nblocks < 0x100);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:657:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  657 |   memcpy (octr, ictr->data, cipher->block_size - 1);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:657:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  657 |   memcpy (octr, ictr->data, cipher->block_size - 1);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:661:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  661 |   if (low >= 0x100)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  662 |     INCREMENT (cipher->block_size - 1, octr);[0m
      | [0;1;32m                                             
[0m[1mtestutils.c:670:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  670 |       memcpy(ctr, ictr->data, cipher->block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:670:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  670 |       memcpy(ctr, ictr->data, cipher->block_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:671:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  671 |       memset(data, 17, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:671:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  671 |       memset(data, 17, length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:680:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  680 |           fprintf(stderr, "CTR encrypt failed (length %d of %d):\nInput:",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:680:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  680 |           fprintf(stderr, "CTR encrypt failed (length %d of %d):\nInput:",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:683:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  683 |           fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:683:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  683 |           fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:685:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  685 |           fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:685:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  685 |           fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:687:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  687 |           fprintf(stderr, "\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:687:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  687 |           fprintf(stderr, "\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:692:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  692 |   ASSERT (MEMEQ (cipher->block_size, ctr, octr));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:692:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  692 |   ASSERT (MEMEQ (cipher->block_size, ctr, octr));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:694:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  694 |   memcpy(ctr, ictr->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:694:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  694 |   memcpy(ctr, ictr->data, cipher->block_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:702:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  702 |       fprintf(stderr, "CTR decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:702:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  702 |       fprintf(stderr, "CTR decrypt failed:\nInput:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:704:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  704 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:704:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  704 |       fprintf(stderr, "\nOutput: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:706:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  706 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:706:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  706 |       fprintf(stderr, "\nExpected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:708:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  708 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:708:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  708 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:712:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  712 |   ASSERT (MEMEQ (cipher->block_size, ctr, octr));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:712:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  712 |   ASSERT (MEMEQ (cipher->block_size, ctr, octr));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:805:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  805 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:805:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  805 |   ASSERT (cleartext->length == ciphertext->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:806:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  806 |   ASSERT (key->length == aead->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:806:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  806 |   ASSERT (key->length == aead->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:807:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  807 |   ASSERT(aead->block_size > 0);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:807:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  807 |   ASSERT(aead->block_size > 0);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:818:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  818 |       memcpy (in + in_align, cleartext->data, cleartext->length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:818:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  818 |       memcpy (in + in_align, cleartext->data, cleartext->length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:824:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  824 |           if (set_nonce)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  825 |               set_nonce (ctx, nonce->length, nonce->data);[0m
  826 |           else[0m
      | [0;32m          } 
[0m[1mtestutils.c:831:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  831 |           if (aead->update && authtext->length)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  832 |             aead->update(ctx, authtext->length, authtext->data);[0m
      | [0;1;32m                                                                
[0m[1mtestutils.c:834:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  834 |           if (offset > 0)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  835 |             aead->encrypt(ctx, offset, out + out_align, in + in_align);[0m
      | [0;1;32m                                                                       
[0m[1mtestutils.c:837:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  837 |           if (offset < cleartext->length)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  838 |             aead->encrypt(ctx, cleartext->length - offset,[0m
  839 |                           out + out_align + offset, in + in_align + offset);[0m
      | [0;1;32m                                                                            
[0m[1mtestutils.c:843:8: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  843 |               fprintf(stderr, "aead->encrypt failed (offset = %u):\nclear: ",[0m
      | [0;1;32m              ^~~~~~~
[0m[1mtestutils.c:843:8: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  843 |               fprintf(stderr, "aead->encrypt failed (offset = %u):\nclear: ",[0m
      | [0;1;32m              ^~~~~~~
[0m[1mtestutils.c:846:8: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  846 |               fprintf(stderr, "  got: ");[0m
      | [0;1;32m              ^~~~~~~
[0m[1mtestutils.c:846:8: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  846 |               fprintf(stderr, "  got: ");[0m
      | [0;1;32m              ^~~~~~~
[0m[1mtestutils.c:848:8: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  848 |               fprintf(stderr, "  exp: ");[0m
      | [0;1;32m              ^~~~~~~
[0m[1mtestutils.c:848:8: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  848 |               fprintf(stderr, "  exp: ");[0m
      | [0;1;32m              ^~~~~~~
[0m[1mtestutils.c:854:8: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  854 |               ASSERT (digest->length <= aead->digest_size);[0m
      | [0;1;32m              ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:854:8: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  854 |               ASSERT (digest->length <= aead->digest_size);[0m
      | [0;1;32m              ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:855:8: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  855 |               memset(buffer, 0, aead->digest_size);[0m
      | [0;1;32m              ^~~~~~
[0m[1mtestutils.c:855:8: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  855 |               memset(buffer, 0, aead->digest_size);[0m
      | [0;1;32m              ^~~~~~
[0m[1mtestutils.c:859:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  859 |                   fprintf(stderr, "aead->digest failed (offset = %u):\n  got: ",[0m
      | [0;1;32m                  ^~~~~~~
[0m[1mtestutils.c:859:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  859 |                   fprintf(stderr, "aead->digest failed (offset = %u):\n  got: ",[0m
      | [0;1;32m                  ^~~~~~~
[0m[1mtestutils.c:862:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  862 |                   fprintf(stderr, "  exp: ");[0m
      | [0;1;32m                  ^~~~~~~
[0m[1mtestutils.c:862:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  862 |                   fprintf(stderr, "  exp: ");[0m
      | [0;1;32m                  ^~~~~~~
[0m[1mtestutils.c:867:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  867 |           else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  868 |             ASSERT(!aead->digest);[0m
      | [0;1;32m                                  
[0m[1mtestutils.c:868:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  868 |             ASSERT(!aead->digest);[0m
      | [0;1;32m            ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:868:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  868 |             ASSERT(!aead->digest);[0m
      | [0;1;32m            ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:875:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  875 |               if (set_nonce)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  876 |                 set_nonce (ctx, nonce->length, nonce->data);[0m
  877 |               else[0m
      | [0;32m              } 
[0m[1mtestutils.c:883:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  883 |               if (aead->update && authtext->length)[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  884 |                 aead->update(ctx, authtext->length, authtext->data);[0m
      | [0;1;32m                                                                    
[0m[1mtestutils.c:886:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  886 |               if (offset > 0)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  887 |                 aead->decrypt (ctx, offset, out + out_align, out + out_align);[0m
      | [0;1;32m                                                                              
[0m[1mtestutils.c:889:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  889 |               if (offset < cleartext->length)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  890 |                 aead->decrypt(ctx, cleartext->length - offset,[0m
  891 |                               out + out_align + offset, out + out_align + offset);[0m
      | [0;1;32m                                                                                  
[0m[1mtestutils.c:893:8: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  893 |               ASSERT(MEMEQ(cleartext->length, out + out_align, cleartext->data));[0m
      | [0;1;32m              ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:893:8: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  893 |               ASSERT(MEMEQ(cleartext->length, out + out_align, cleartext->data));[0m
      | [0;1;32m              ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:897:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  897 |                   memset(buffer, 0, aead->digest_size);[0m
      | [0;1;32m                  ^~~~~~
[0m[1mtestutils.c:897:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  897 |                   memset(buffer, 0, aead->digest_size);[0m
      | [0;1;32m                  ^~~~~~
[0m[1mtestutils.c:899:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  899 |                   ASSERT(MEMEQ(digest->length, buffer, digest->data));[0m
      | [0;1;32m                  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:899:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  899 |                   ASSERT(MEMEQ(digest->length, buffer, digest->data));[0m
      | [0;1;32m                  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:925:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  925 |   ASSERT (key->length == aead->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:925:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  925 |   ASSERT (key->length == aead->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:926:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  926 |   ASSERT (cipher->length > clear->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:926:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  926 |   ASSERT (cipher->length > clear->length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:927:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  927 |   ASSERT (cipher->length - clear->length == aead->digest_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:927:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  927 |   ASSERT (cipher->length - clear->length == aead->digest_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:937:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  937 |       fprintf(stderr, "aead->encrypt (message) failed:\n  got: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:937:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  937 |       fprintf(stderr, "aead->encrypt (message) failed:\n  got: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:939:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  939 |       fprintf (stderr, "  exp: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:939:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  939 |       fprintf (stderr, "  exp: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:945:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  945 |       fprintf (stderr, "aead->encrypt (message) wrote too much.\n ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:945:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  945 |       fprintf (stderr, "aead->encrypt (message) wrote too much.\n ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:950:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  950 |   memset (buf, 0xae, clear->length + 1);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:950:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  950 |   memset (buf, 0xae, clear->length + 1);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:958:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  958 |       fprintf (stderr, "decrypting valid ciphertext failed:\n  ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:958:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  958 |       fprintf (stderr, "decrypting valid ciphertext failed:\n  ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:963:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  963 |       fprintf(stderr, "aead->decrypt (message) failed:\n  got: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:963:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  963 |       fprintf(stderr, "aead->decrypt (message) failed:\n  got: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:965:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  965 |       fprintf (stderr, "  exp: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:965:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  965 |       fprintf (stderr, "  exp: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:977:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  977 |       fprintf (stderr, "Invalid message (truncated) not rejected\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:977:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  977 |       fprintf (stderr, "Invalid message (truncated) not rejected\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:980:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  980 |   memcpy (copy, cipher->data, cipher->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:980:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  980 |   memcpy (copy, cipher->data, cipher->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:987:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  987 |       fprintf (stderr, "Invalid message (first byte modified) not rejected\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:987:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  987 |       fprintf (stderr, "Invalid message (first byte modified) not rejected\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:991:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  991 |   memcpy (copy, cipher->data, cipher->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:991:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  991 |   memcpy (copy, cipher->data, cipher->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:998:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  998 |       fprintf (stderr, "Invalid message (last byte modified) not rejected\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:998:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  998 |       fprintf (stderr, "Invalid message (last byte modified) not rejected\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1008:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1008 |       fprintf (stderr, "Invalid adata not rejected\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1008:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1008 |       fprintf (stderr, "Invalid adata not rejected\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1018:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1018 |       memcpy (buf, clear->data, clear->length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:1018:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1018 |       memcpy (buf, clear->data, clear->length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:1025:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1025 |           fprintf(stderr, "aead->encrypt (in-place message) failed:\n  got: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1025:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1025 |           fprintf(stderr, "aead->encrypt (in-place message) failed:\n  got: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1027:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1027 |           fprintf (stderr, "  exp: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1027:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1027 |           fprintf (stderr, "  exp: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1033:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1033 |           fprintf (stderr, "aead->encrypt (in-place message) wrote too much.\n ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1033:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1033 |           fprintf (stderr, "aead->encrypt (in-place message) wrote too much.\n ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1043:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1043 |           fprintf (stderr, "in-place decrypting valid ciphertext failed:\n  ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1043:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1043 |           fprintf (stderr, "in-place decrypting valid ciphertext failed:\n  ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1048:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1048 |           fprintf(stderr, "aead->decrypt (in-place message) failed:\n  got: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1048:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1048 |           fprintf(stderr, "aead->decrypt (in-place message) failed:\n  got: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1050:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1050 |           fprintf (stderr, "  exp: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1050:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1050 |           fprintf (stderr, "  exp: ");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1071:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1071 |   if (hash->digest_size)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m 1072 |     ASSERT (digest->length == hash->digest_size);[0m
      | [0;1;32m                                                 
[0m[1mtestutils.c:1072:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1072 |     ASSERT (digest->length == hash->digest_size);[0m
      | [0;1;32m    ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1072:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1072 |     ASSERT (digest->length == hash->digest_size);[0m
      | [0;1;32m    ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1080:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1080 |       fprintf(stdout, "\nGot:\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1080:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1080 |       fprintf(stdout, "\nGot:\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1082:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1082 |       fprintf(stdout, "\nExpected:\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1082:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1082 |       fprintf(stdout, "\nExpected:\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1087:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1087 |   memset(buffer, 0, digest->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:1087:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1087 |   memset(buffer, 0, digest->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:1090:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1090 |   ASSERT(digest->length > 0);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1090:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1090 |   ASSERT(digest->length > 0);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1093:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1093 |   ASSERT(MEMEQ(digest->length - 1, digest->data, buffer));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1093:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1093 |   ASSERT(MEMEQ(digest->length - 1, digest->data, buffer));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1095:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1095 |   ASSERT(buffer[digest->length - 1] == 0);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1095:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1095 |   ASSERT(buffer[digest->length - 1] == 0);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1100:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1100 |       memset (input, 0, msg->length + 16);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:1100:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1100 |       memset (input, 0, msg->length + 16);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:1101:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1101 |       memcpy (input + offset, msg->data, msg->length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:1101:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1101 |       memcpy (input + offset, msg->data, msg->length);[0m
      | [0;1;32m      ^~~~~~
[0m[1mtestutils.c:1106:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1106 |           fprintf(stdout, "hash input address: %p\nGot:\n", input + offset);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1106:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1106 |           fprintf(stdout, "hash input address: %p\nGot:\n", input + offset);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1108:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1108 |           fprintf(stdout, "\nExpected:\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1108:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1108 |           fprintf(stdout, "\nExpected:\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mtestutils.c:1129:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1129 |   ASSERT (digest->length == hash->digest_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1129:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1129 |   ASSERT (digest->length == hash->digest_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1131:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1131 |   memset(data, c, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:1131:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1131 |   memset(data, c, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:1137:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1137 |       if (i % (count / 50) == 0)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m 1138 |         fprintf (stderr, ".");[0m
      | [0;1;32m                              
[0m[1mtestutils.c:1138:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1138 |         fprintf (stderr, ".");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1138:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1138 |         fprintf (stderr, ".");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1140:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1140 |   fprintf (stderr, "\n");[0m
      | [0;1;32m  ^~~~~~~
[0m[1mtestutils.c:1140:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1140 |   fprintf (stderr, "\n");[0m
      | [0;1;32m  ^~~~~~~
[0m[1mtestutils.c:1146:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1146 |   ASSERT (MEMEQ(hash->digest_size, digest->data, buffer));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1146:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1146 |   ASSERT (MEMEQ(hash->digest_size, digest->data, buffer));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1163:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1163 |   ASSERT (digest->length <= mac->digest_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1163:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1163 |   ASSERT (digest->length <= mac->digest_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1164:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1164 |   ASSERT (key->length == mac->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1164:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1164 |   ASSERT (key->length == mac->key_size);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1171:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1171 |       fprintf (stderr, "test_mac failed, msg: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1171:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1171 |       fprintf (stderr, "test_mac failed, msg: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1173:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1173 |       fprintf(stderr, "Output:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1173:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1173 |       fprintf(stderr, "Output:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1175:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1175 |       fprintf(stderr, "Expected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1175:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1175 |       fprintf(stderr, "Expected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1177:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1177 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1177:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1177 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1186:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1186 |       fprintf (stderr, "test_mac: failed on re-use, msg: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1186:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1186 |       fprintf (stderr, "test_mac: failed on re-use, msg: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1188:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1188 |       fprintf(stderr, "Output:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1188:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1188 |       fprintf(stderr, "Output:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1190:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1190 |       fprintf(stderr, "Expected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1190:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1190 |       fprintf(stderr, "Expected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1192:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1192 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1192:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1192 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1198:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1198 |   for (i=0;i<msg->length;i++)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m 1199 |     mac->update (ctx, 1, msg->data+i);[0m
      | [0;1;32m                                      
[0m[1mtestutils.c:1203:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1203 |       fprintf (stderr, "cmac_hash failed on byte-by-byte, msg: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1203:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1203 |       fprintf (stderr, "cmac_hash failed on byte-by-byte, msg: ");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1205:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1205 |       fprintf(stderr, "Output:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1205:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1205 |       fprintf(stderr, "Output:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1207:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1207 |       fprintf(stderr, "Expected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1207:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1207 |       fprintf(stderr, "Expected:");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1209:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1209 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1209:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1209 |       fprintf(stderr, "\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mtestutils.c:1229:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1229 |   ASSERT(ascii_length[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1229:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1229 |   ASSERT(ascii_length[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1231:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1231 |   ASSERT(data_length <= armor->decode_length(ascii_length));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1231:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1231 |   ASSERT(data_length <= armor->decode_length(ascii_length));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1233:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1233 |   memset(buffer, 0x33, 1 + ascii_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:1233:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1233 |   memset(buffer, 0x33, 1 + ascii_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:1234:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1234 |   memset(check, 0x55, 1 + data_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:1234:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1234 |   memset(check, 0x55, 1 + data_length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mtestutils.c:1240:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1240 |   ASSERT(done == ascii_length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1240:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1240 |   ASSERT(done == ascii_length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1242:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1242 |   ASSERT (MEMEQ(ascii_length, buffer, ascii));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1242:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1242 |   ASSERT (MEMEQ(ascii_length, buffer, ascii));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1243:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1243 |   ASSERT (0x33 == buffer[strlen(ascii)]);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1243:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1243 |   ASSERT (0x33 == buffer[strlen(ascii)]);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1248:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1248 |   ASSERT(armor->decode_update(decode, &done, check, ascii_length, buffer));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1248:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1248 |   ASSERT(armor->decode_update(decode, &done, check, ascii_length, buffer));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1249:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1249 |   ASSERT(done == data_length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1249:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1249 |   ASSERT(done == data_length);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1250:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1250 |   ASSERT(armor->decode_final(decode));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1250:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1250 |   ASSERT(armor->decode_final(decode));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1252:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1252 |   ASSERT (MEMEQ(data_length, check, data));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1252:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1252 |   ASSERT (MEMEQ(data_length, check, data));[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1253:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1253 |   ASSERT (0x55 == check[data_length]);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtestutils.c:1253:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1253 |   ASSERT (0x55 == check[data_length]);[0m
      | [0;1;32m  ^
[0m[1m./testutils.h:338:2: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
  338 |         fprintf(stderr, "Assert failed: %s:%d: %s\n", \[0m
      | [0;1;32m        ^~~~~~~
[0m482 warnings generated.
Suppressed 245 warnings (245 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[274/277][100.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmp4hbg9rh0.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tools/input.c
[1minput.c:57:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   57 |       if (ferror(input->f))[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   58 |         die("Read error: %s\n", strerror(errno));[0m
      | [0;1;32m                                                 
[0m[1minput.c:72:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   72 |   if (input->coding)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m[1minput.c:78:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |         if (input->ctype == SEXP_EOF_CHAR)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m   79 |           die("Unexpected end of file in coded data.\n");[0m
      | [0;1;32m                                                         
[0m[1minput.c:93:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   93 |                                           1, (const char*) &input->c))[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m   94 |           die("Invalid coded data.\n");[0m
      | [0;1;32m                                       
[0m[1minput.c:96:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |         if (done)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   97 |           return;[0m
      | [0;1;32m                 
[0m[1minput.c:99:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   99 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m  100 |     sexp_get_raw_char(input);[0m
      | [0;1;32m                             
[0m[1minput.c:107:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  107 |   if (input->ctype != SEXP_NORMAL_CHAR)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  108 |     die("Unexpected end of file.\n");[0m
      | [0;1;32m                                     
[0m[1minput.c:119:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  119 |   if (!NETTLE_BUFFER_PUTC(string, input->c))[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  120 |     die("Virtual memory exhasuted.\n");[0m
      | [0;1;32m                                       
[0m[1minput.c:140:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  140 |   if (!input->coding->decode_final(&input->state))[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  141 |     die("Invalid coded data.\n");[0m
      | [0;1;32m                                 
[0m[1minput.c:156:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  156 |       return 1;[0m
      | [0;1;32m      ^       
[0m      | [0;32m      {       ;} 
[0m[1minput.c:158:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  158 |       return 0;[0m
      | [0;1;32m      ^       
[0m      | [0;32m      {       ;} 
[0m[1minput.c:160:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  160 |       sexp_next_char(input);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m[1minput.c:164:12: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  164 |         case 'b': input->c = '\b'; return 1;[0m
      | [0;1;32m                  ^                        
[0m      | [0;32m                  {                        ;} 
[0m[1minput.c:165:12: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  165 |         case 't': input->c = '\t'; return 1;[0m
      | [0;1;32m                  ^                        
[0m      | [0;32m                  {                        ;} 
[0m[1minput.c:166:12: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  166 |         case 'n': input->c = '\n'; return 1;[0m
      | [0;1;32m                  ^                        
[0m      | [0;32m                  {                        ;} 
[0m[1minput.c:167:12: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  167 |         case 'f': input->c = '\f'; return 1;[0m
      | [0;1;32m                  ^                        
[0m      | [0;32m                  {                        ;} 
[0m[1minput.c:168:12: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  168 |         case 'r': input->c = '\r'; return 1;[0m
      | [0;1;32m                  ^                        
[0m      | [0;32m                  {                        ;} 
[0m[1minput.c:169:13: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  169 |         case '\\': input->c = '\\'; return 1;[0m
      | [0;1;32m                   ^                        
[0m      | [0;32m                   {                        ;} 
[0m[1minput.c:175:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  175 |           if (sexp_next_char(input) == '\r')[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  176 |             sexp_next_char(input);[0m
  177 | [0m
  178 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1minput.c:175:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  175 |           if (sexp_next_char(input) == '\r')[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  176 |             sexp_next_char(input);[0m
      | [0;1;32m                                  
[0m[1minput.c:180:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  180 |           if (sexp_next_char(input) == '\n')[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  181 |             sexp_next_char(input);[0m
  182 | [0m
  183 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1minput.c:180:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  180 |           if (sexp_next_char(input) == '\n')[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  181 |             sexp_next_char(input);[0m
      | [0;1;32m                                  
[0m[1minput.c:196:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  196 |   if (!TOKEN_CHAR(input->c))[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  197 |     die("Invalid token.\n");[0m
      | [0;1;32m                            
[0m[1minput.c:219:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  219 |       while (sexp_get_quoted_char(input))[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  220 |         sexp_push_char(input, string);[0m
  221 |       [0m
  222 |       sexp_get_char(input);[0m
  223 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1minput.c:219:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  219 |       while (sexp_get_quoted_char(input))[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  220 |         sexp_push_char(input, string);[0m
      | [0;1;32m                                      
[0m[1minput.c:226:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  226 |       sexp_input_start_coding(input, &nettle_base16, '#');[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  227 |       goto decode;[0m
      | [0;1;32m                 
[0m      | [0;32m                 ;} 
[0m[1minput.c:230:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  230 |       sexp_input_start_coding(input, &nettle_base64, '|');[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m[1minput.c:239:8: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  239 |               sexp_push_char(input, string);[0m
      | [0;1;32m              ^
[0m      | [0;32m              {
[0m  240 |               break;[0m
      | [0;1;32m                   
[0m      | [0;32m                   ;} 
[0m[1minput.c:242:8: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  242 |               die("Unexpected end of file in coded string.\n");[0m
      | [0;1;32m              ^                                               
[0m      | [0;32m              {                                               ;} 
[0m[1minput.c:244:8: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  244 |               sexp_input_end_coding(input);[0m
      | [0;1;32m              ^
[0m      | [0;32m              {
[0m  245 |               sexp_get_char(input);[0m
  246 |               return;[0m
      | [0;1;32m                    
[0m      | [0;32m                    ;} 
[0m[1minput.c:253:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  253 |       sexp_get_token_string(input, string);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  254 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1minput.c:269:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  269 |   if (!length)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  270 |     /* There must be no more digits */[0m
  271 |     sexp_next_char(input);[0m
  272 | [0m
  273 |   else[0m
      | [0;32m  } 
[0m[1minput.c:281:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  281 |           if (input->c < '0' || input->c > '9')[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  282 |             break;[0m
      | [0;1;32m                  
[0m[1minput.c:289:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  289 |   if (input->c == ':')[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  290 |     /* Verbatim */[0m
  291 |     for (; length; length--)[0m
  292 |       {[0m
  293 |         sexp_next_char(input);[0m
  294 |         sexp_push_char(input, string);[0m
  295 |       }[0m
  296 | [0m
  297 |   else if (mode != SEXP_ADVANCED)[0m
      | [0;32m  } 
[0m[1minput.c:297:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  297 |   else if (mode != SEXP_ADVANCED)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  298 |     die("Encountered advanced string in canonical mode.\n");[0m
  299 | [0m
  300 |   else[0m
      | [0;32m  } 
[0m[1minput.c:300:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  300 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m[1minput.c:304:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  304 |         for (; length; length--)[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  305 |           if (sexp_get_quoted_char(input))[0m
  306 |             sexp_push_char(input, string);[0m
  307 |           else[0m
  308 |             die("Unexpected end of string.\n");[0m
  309 |       [0m
  310 |         if (sexp_get_quoted_char(input))[0m
  311 |           die("Quoted string longer than expected.\n");[0m
  312 | [0m
  313 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1minput.c:304:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  304 |         for (; length; length--)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  305 |           if (sexp_get_quoted_char(input))[0m
  306 |             sexp_push_char(input, string);[0m
  307 |           else[0m
  308 |             die("Unexpected end of string.\n");[0m
      | [0;1;32m                                               
[0m[1minput.c:305:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  305 |           if (sexp_get_quoted_char(input))[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  306 |             sexp_push_char(input, string);[0m
  307 |           else[0m
      | [0;32m          } 
[0m[1minput.c:307:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  307 |           else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  308 |             die("Unexpected end of string.\n");[0m
      | [0;1;32m                                               
[0m[1minput.c:310:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  310 |         if (sexp_get_quoted_char(input))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  311 |           die("Quoted string longer than expected.\n");[0m
      | [0;1;32m                                                       
[0m[1minput.c:316:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  316 |         sexp_input_start_coding(input, &nettle_base16, '#');[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  317 |         goto decode;[0m
      | [0;1;32m                   
[0m      | [0;32m                   ;} 
[0m[1minput.c:320:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  320 |         sexp_input_start_coding(input, &nettle_base64, '|');[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  321 | [0m
  322 |       decode:[0m
  323 |         for (; length; length--)[0m
  324 |           {[0m
  325 |             sexp_next_char(input);[0m
  326 |             sexp_push_char(input, string);[0m
  327 |           }[0m
  328 |         sexp_get_char(input);[0m
  329 |         if (input->ctype != SEXP_END_CHAR)[0m
  330 |           die("Coded string too long.\n");[0m
  331 | [0m
  332 |         sexp_input_end_coding(input);[0m
  333 |       [0m
  334 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1minput.c:329:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  329 |         if (input->ctype != SEXP_END_CHAR)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  330 |           die("Coded string too long.\n");[0m
      | [0;1;32m                                          
[0m[1minput.c:337:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  337 |         die("Invalid string.\n");[0m
      | [0;1;32m        ^                       
[0m      | [0;32m        {                       ;} 
[0m[1minput.c:371:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  371 |   for(;;)[0m
      | [0;1;32m         ^
[0m      | [0;32m          {
[0m[1minput.c:375:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  375 |         input->token = SEXP_EOF;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  376 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1minput.c:379:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  379 |         input->token = SEXP_CODING_END;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  380 |         sexp_input_end_coding(input);[0m
  381 |         sexp_get_char(input);[0m
  382 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1minput.c:385:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  385 |         switch(input->c)[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m[1minput.c:390:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  390 |             return;[0m
      | [0;1;32m            ^     
[0m      | [0;32m            {     ;} 
[0m[1minput.c:393:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  393 |             input->token = SEXP_LIST_START;[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  394 |             sexp_get_char(input);[0m
  395 |             return;[0m
      | [0;1;32m                  
[0m      | [0;32m                  ;} 
[0m[1minput.c:398:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  398 |             input->token = SEXP_LIST_END;[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  399 |             sexp_get_char(input);[0m
  400 |             return;[0m
      | [0;1;32m                  
[0m      | [0;32m                  ;} 
[0m[1minput.c:403:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  403 |             input->token = SEXP_DISPLAY_START;[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  404 |             sexp_get_char(input);[0m
  405 |             return;[0m
      | [0;1;32m                  
[0m      | [0;32m                  ;} 
[0m[1minput.c:408:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  408 |             input->token = SEXP_DISPLAY_END;[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  409 |             sexp_get_char(input);[0m
  410 |             return;[0m
      | [0;1;32m                  
[0m      | [0;32m                  ;} 
[0m[1minput.c:413:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  413 |             if (mode == SEXP_CANONICAL)[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  414 |               die("Unexpected transport data in canonical mode.\n");[0m
  415 |             [0m
  416 |             sexp_input_start_coding(input, &nettle_base64, '}');[0m
  417 |             sexp_get_char(input);[0m
  418 | [0m
  419 |             input->token = SEXP_TRANSPORT_START;[0m
  420 |             [0m
  421 |             return;[0m
      | [0;1;32m                  
[0m      | [0;32m                  ;} 
[0m[1minput.c:413:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  413 |             if (mode == SEXP_CANONICAL)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  414 |               die("Unexpected transport data in canonical mode.\n");[0m
      | [0;1;32m                                                                    
[0m[1minput.c:427:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  427 |             if (mode == SEXP_CANONICAL)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  428 |               die("Whitespace encountered in canonical mode.\n");[0m
      | [0;1;32m                                                                 
[0m[1minput.c:430:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  430 |             sexp_get_char(input);[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  431 |             break;[0m
      | [0;1;32m                 
[0m      | [0;32m                 ;} 
[0m[1minput.c:434:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  434 |             if (mode == SEXP_CANONICAL)[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  435 |               die("Comment encountered in canonical mode.\n");[0m
  436 | [0m
  437 |             sexp_get_comment(input, string);[0m
  438 |             return;[0m
      | [0;1;32m                  
[0m      | [0;32m                  ;} 
[0m[1minput.c:434:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  434 |             if (mode == SEXP_CANONICAL)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  435 |               die("Comment encountered in canonical mode.\n");[0m
      | [0;1;32m                                                              
[0m[1minput.c:442:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  442 |             if (mode != SEXP_ADVANCED)[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  443 |               die("Encountered advanced string in canonical mode.\n");[0m
  444 | [0m
  445 |             sexp_get_string(input, string);[0m
  446 |             return;[0m
      | [0;1;32m                  
[0m      | [0;32m                  ;} 
[0m[1minput.c:442:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  442 |             if (mode != SEXP_ADVANCED)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  443 |               die("Encountered advanced string in canonical mode.\n");[0m
      | [0;1;32m                                                                      
[0m64 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[275/277][93.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpcdnqote8.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/examples/nettle-benchmark.c
[1mnettle-benchmark.c:144:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  144 |       for (i = 0; i < ncalls; i++)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  145 |         f(arg);[0m
      | [0;1;32m               
[0m[1mnettle-benchmark.c:147:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  147 |       if (elapsed > BENCH_INTERVAL)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  148 |         break;[0m
  149 |       else if (elapsed < BENCH_INTERVAL / 10)[0m
      | [0;32m      } 
[0m[1mnettle-benchmark.c:149:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |       else if (elapsed < BENCH_INTERVAL / 10)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  150 |         ncalls *= 10;[0m
  151 |       else[0m
      | [0;32m      } 
[0m[1mnettle-benchmark.c:151:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  151 |       else[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  152 |         ncalls *= 2;[0m
      | [0;1;32m                    
[0m[1mnettle-benchmark.c:274:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  274 |       if (j*j < i)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  275 |         j++;[0m
      | [0;1;32m            
[0m[1mnettle-benchmark.c:285:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  285 |   for (i = 0; i<length; i++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  286 |     key[i] = i;[0m
      | [0;1;32m               
[0m[1mnettle-benchmark.c:294:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  294 |   for (i = 0; i<length; i++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  295 |     nonce[i] = 3*i;[0m
      | [0;1;32m                   
[0m[1mnettle-benchmark.c:316:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  316 |       if (block_size > 0)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  317 |         printf(" %12.2f", time * frequency * block_size / BENCH_BLOCK);[0m
      | [0;1;32m                                                                       
[0m[1mnettle-benchmark.c:326:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  326 |   if (!p)[0m
      | [0;1;32m         ^
[0m      | [0;32m          {
[0m  327 |     die("Virtual memory exhausted.\n");[0m
      | [0;1;32m                                       
[0m[1mnettle-benchmark.c:616:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  616 |   for (i = 0; prefix[i]; i++)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  617 |     if (prefix[i] != s[i])[0m
  618 |       return 0;[0m
      | [0;1;32m               
[0m[1mnettle-benchmark.c:617:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  617 |     if (prefix[i] != s[i])[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  618 |       return 0;[0m
      | [0;1;32m               
[0m[1mnettle-benchmark.c:684:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  684 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:684:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  684 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:701:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  701 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:701:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  701 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:708:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  708 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:708:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  708 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:725:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  725 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:725:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  725 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:732:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  732 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:732:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  732 |         memset(iv, 0, cipher->block_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mnettle-benchmark.c:756:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  756 |   if (aead->set_nonce)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  757 |     init_nonce (aead->nonce_size, nonce);[0m
      | [0;1;32m                                         
[0m[1mnettle-benchmark.c:768:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  768 |     if (aead->set_nonce)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  769 |       aead->set_nonce (ctx, nonce);[0m
      | [0;1;32m                                   
[0m[1mnettle-benchmark.c:784:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  784 |       if (aead->set_nonce)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  785 |         aead->set_nonce (ctx, nonce);[0m
      | [0;1;32m                                     
[0m[1mnettle-benchmark.c:800:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  800 |       if (aead->set_nonce)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  801 |         aead->set_nonce (ctx, nonce);[0m
      | [0;1;32m                                     
[0m[1mnettle-benchmark.c:818:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  818 |   if (a < b)[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  819 |     return -1;[0m
  820 |   else if (a > b)[0m
      | [0;32m  } 
[0m[1mnettle-benchmark.c:820:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  820 |   else if (a > b)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  821 |     return 1;[0m
  822 |   else[0m
      | [0;32m  } 
[0m[1mnettle-benchmark.c:822:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  822 |   else[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m  823 |     return 0;[0m
      | [0;1;32m             
[0m[1mnettle-benchmark.c:978:68: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  978 |   while ( (c = getopt_long(argc, argv, "f:", options, NULL)) != -1)[0m
      | [0;1;32m                                                                   ^
[0m      | [0;32m                                                                    {
[0m[1mnettle-benchmark.c:982:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  982 |         frequency = atof(optarg);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  983 |         if (frequency > 0.0)[0m
  984 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1mnettle-benchmark.c:983:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  983 |         if (frequency > 0.0)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  984 |           break;[0m
      | [0;1;32m                
[0m[1mnettle-benchmark.c:988:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  988 |         printf("Usage: nettle-benchmark [-f clock frequency] [alg...]\n");[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  989 |         return EXIT_SUCCESS;[0m
      | [0;1;32m                           
[0m      | [0;32m                           ;} 
[0m[1mnettle-benchmark.c:992:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  992 |         return EXIT_FAILURE;[0m
      | [0;1;32m        ^                  
[0m      | [0;32m        {                  ;} 
[0m[1mnettle-benchmark.c:995:2: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  995 |         abort();[0m
      | [0;1;32m        ^      
[0m      | [0;32m        {      ;} 
[0m[1mnettle-benchmark.c:1017:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1017 |       for (i = 0; hashes[i]; i++)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m 1018 |         if (!alg || strstr(hashes[i]->name, alg))[0m
 1019 |           time_hash(hashes[i]);[0m
      | [0;1;32m                               
[0m[1mnettle-benchmark.c:1018:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1018 |         if (!alg || strstr(hashes[i]->name, alg))[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m 1019 |           time_hash(hashes[i]);[0m
      | [0;1;32m                               
[0m[1mnettle-benchmark.c:1021:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1021 |       if (!alg || strstr ("umac", alg))[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m 1022 |         time_umac();[0m
      | [0;1;32m                    
[0m[1mnettle-benchmark.c:1024:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1024 |       if (!alg || strstr ("cmac", alg))[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m 1025 |         time_cmac();[0m
      | [0;1;32m                    
[0m[1mnettle-benchmark.c:1027:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1027 |       if (!alg || strstr ("poly1305-aes", alg))[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m 1028 |         time_poly1305_aes();[0m
      | [0;1;32m                            
[0m[1mnettle-benchmark.c:1030:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1030 |       for (i = 0; ciphers[i]; i++)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m 1031 |         if (!alg || strstr(ciphers[i]->name, alg))[0m
 1032 |           time_cipher(ciphers[i]);[0m
      | [0;1;32m                                  
[0m[1mnettle-benchmark.c:1031:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1031 |         if (!alg || strstr(ciphers[i]->name, alg))[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m 1032 |           time_cipher(ciphers[i]);[0m
      | [0;1;32m                                  
[0m[1mnettle-benchmark.c:1034:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1034 |       for (i = 0; aeads[i]; i++)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m 1035 |         if (!alg || strstr(aeads[i]->name, alg))[0m
 1036 |           time_aead(aeads[i]);[0m
      | [0;1;32m                              
[0m[1mnettle-benchmark.c:1035:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1035 |         if (!alg || strstr(aeads[i]->name, alg))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m 1036 |           time_aead(aeads[i]);[0m
      | [0;1;32m                              
[0m[1mnettle-benchmark.c:1038:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1038 |       if (!alg || strstr ("hmac-md5", alg))[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m 1039 |         time_hmac_md5();[0m
      | [0;1;32m                        
[0m[1mnettle-benchmark.c:1041:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1041 |       if (!alg || strstr ("hmac-sha1", alg))[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m 1042 |         time_hmac_sha1();[0m
      | [0;1;32m                         
[0m[1mnettle-benchmark.c:1044:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1044 |       if (!alg || strstr ("hmac-sha256", alg))[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m 1045 |         time_hmac_sha256();[0m
      | [0;1;32m                           
[0m[1mnettle-benchmark.c:1047:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1047 |       if (!alg || strstr ("hmac-sha512", alg))[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m 1048 |         time_hmac_sha512();[0m
      | [0;1;32m                           
[0m44 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[276/277][89.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmpbzggl8p6.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tools/sexp-conv.c
[1msexp-conv.c:85:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |   else switch(token->type)[0m
      | [0;1;32m      ^
[0m      | [0;32m       {
[0m[1msexp-conv.c:88:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   88 |       die("Unmatched end of list.\n");[0m
      | [0;1;32m      ^                              
[0m      | [0;32m      {                              ;} 
[0m[1msexp-conv.c:90:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   90 |       die("Unexpected end of file.\n");[0m
      | [0;1;32m      ^                               
[0m      | [0;32m      {                               ;} 
[0m[1msexp-conv.c:92:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   92 |       die("Unexpected end of coding.\n");[0m
      | [0;1;32m      ^                                 
[0m      | [0;32m      {                                 ;} 
[0m[1msexp-conv.c:111:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  111 |                     if (token->type == SEXP_COMMENT)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                    {
[0m  112 |                       {[0m
  113 |                         indent = output->pos;[0m
  114 |                         /* Disable the indentation setup for next item */[0m
  115 |                         item++;[0m
  116 |                       }[0m
  117 |                     break;[0m
      | [0;1;32m                         
[0m      | [0;32m                         ;} 
[0m[1msexp-conv.c:120:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  120 |                     sexp_put_char(output, ' ');[0m
      | [0;1;32m                    ^
[0m      | [0;32m                    {
[0m  121 |                     indent = output->pos;[0m
  122 |                     break;[0m
      | [0;1;32m                         
[0m      | [0;32m                         ;} 
[0m[1msexp-conv.c:125:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  125 |                     sexp_put_newline(output, indent);[0m
      | [0;1;32m                    ^
[0m      | [0;32m                    {
[0m  126 |                     break;[0m
      | [0;1;32m                         
[0m      | [0;32m                         ;} 
[0m[1msexp-conv.c:138:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  138 |       sexp_put_string(output, mode_out, &token->string);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  139 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msexp-conv.c:142:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  142 |       sexp_put_char(output, '[');[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  143 |       sexp_put_string(output, mode_out, &token->display);[0m
  144 |       sexp_put_char(output, ']');[0m
  145 |       sexp_put_string(output, mode_out, &token->string);      [0m
  146 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msexp-conv.c:149:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  149 |       if (mode_out == SEXP_ADVANCED)[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  150 |         {[0m
  151 |           sexp_put_data(output, token->string.size, token->string.contents);[0m
  152 |           sexp_put_soft_newline(output, indent);[0m
  153 |         }[0m
  154 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msexp-conv.c:157:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  157 |       abort();[0m
      | [0;1;32m      ^      
[0m      | [0;32m      {      ;} 
[0m[1msexp-conv.c:270:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  270 |           abort();[0m
      | [0;1;32m          ^      
[0m      | [0;32m          {      ;} 
[0m[1msexp-conv.c:273:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  273 |           if (optind != argc)[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  274 |             die("sexp-conv: Command line takes no arguments, only options.\n");[0m
  275 |           return;[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1msexp-conv.c:273:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  273 |           if (optind != argc)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  274 |             die("sexp-conv: Command line takes no arguments, only options.\n");[0m
      | [0;1;32m                                                                               
[0m[1msexp-conv.c:278:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  278 |           exit(EXIT_FAILURE);[0m
      | [0;1;32m          ^                 
[0m      | [0;32m          {                 ;} 
[0m[1msexp-conv.c:287:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  287 |             if (!*optarg || *end || width < 0)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  288 |               die("sexp-conv: Invalid width `%s'.\n", optarg);[0m
      | [0;1;32m                                                              
[0m[1msexp-conv.c:294:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  294 |           if (o->hash)[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  295 |             werror("sexp-conv: Combining --hash and -s usually makes no sense.\n");[0m
  296 |           if (match_argument(optarg, "advanced"))[0m
  297 |             o->mode = SEXP_ADVANCED;[0m
  298 |           else if (match_argument(optarg, "transport"))[0m
  299 |             o->mode = SEXP_TRANSPORT;[0m
  300 |           else if (match_argument(optarg, "canonical"))[0m
  301 |             o->mode = SEXP_CANONICAL;[0m
  302 |           else if (match_argument(optarg, "hex"))[0m
  303 |             {[0m
  304 |               o->mode = SEXP_ADVANCED;[0m
  305 |               o->prefer_hex = 1;[0m
  306 |             }[0m
  307 |           else[0m
  308 |             die("Available syntax variants: advanced, transport, canonical\n");[0m
  309 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1msexp-conv.c:294:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  294 |           if (o->hash)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  295 |             werror("sexp-conv: Combining --hash and -s usually makes no sense.\n");[0m
      | [0;1;32m                                                                                   
[0m[1msexp-conv.c:296:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  296 |           if (match_argument(optarg, "advanced"))[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  297 |             o->mode = SEXP_ADVANCED;[0m
  298 |           else if (match_argument(optarg, "transport"))[0m
      | [0;32m          } 
[0m[1msexp-conv.c:298:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  298 |           else if (match_argument(optarg, "transport"))[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  299 |             o->mode = SEXP_TRANSPORT;[0m
  300 |           else if (match_argument(optarg, "canonical"))[0m
      | [0;32m          } 
[0m[1msexp-conv.c:300:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  300 |           else if (match_argument(optarg, "canonical"))[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  301 |             o->mode = SEXP_CANONICAL;[0m
  302 |           else if (match_argument(optarg, "hex"))[0m
      | [0;32m          } 
[0m[1msexp-conv.c:307:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  307 |           else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  308 |             die("Available syntax variants: advanced, transport, canonical\n");[0m
      | [0;1;32m                                                                               
[0m[1msexp-conv.c:312:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  312 |           o->once = 1;[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  313 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1msexp-conv.c:316:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  316 |           o->mode = SEXP_CANONICAL;[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m[1msexp-conv.c:317:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  317 |           if (!optarg)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  318 |             o->hash = &nettle_sha1;[0m
  319 |           else[0m
      | [0;32m          } 
[0m[1msexp-conv.c:319:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  319 |           else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  320 |             for (i = 0;; i++)[0m
  321 |               {[0m
  322 |                 if (!hashes[i])[0m
  323 |                   die("sexp_conv: Unknown hash algorithm `%s'\n",[0m
  324 |                       optarg);[0m
  325 |               [0m
  326 |                 if (match_argument(optarg, hashes[i]->name))[0m
  327 |                   {[0m
  328 |                     o->hash = hashes[i];[0m
  329 |                     break;[0m
  330 |                   }[0m
  331 |               }[0m
      | [0;1;32m               
[0m[1msexp-conv.c:322:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  322 |                 if (!hashes[i])[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  323 |                   die("sexp_conv: Unknown hash algorithm `%s'\n",[0m
  324 |                       optarg);[0m
      | [0;1;32m                              
[0m[1msexp-conv.c:335:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  335 |           o->lock = 1;[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  336 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1msexp-conv.c:339:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  339 |           printf("Usage: sexp-conv [OPTION...]\n"[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m[1msexp-conv.c:349:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  349 |               if (i) printf(", ");[0m
      | [0;1;32m                    ^             
[0m      | [0;32m                     {
[0m[1msexp-conv.c:367:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  367 |           printf("sexp-conv (" PACKAGE_STRING ")\n");[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  368 |           exit (EXIT_SUCCESS);[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1msexp-conv.c:395:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  395 |       memset(&fl, 0, sizeof(fl));[0m
      | [0;1;32m      ^~~~~~
[0m[1msexp-conv.c:395:7: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  395 |       memset(&fl, 0, sizeof(fl));[0m
      | [0;1;32m      ^~~~~~
[0m[1msexp-conv.c:401:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  401 |       if (fcntl(STDOUT_FILENO, F_SETLKW, &fl) == -1)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  402 |         die("Locking output file failed: %s\n", strerror(errno));[0m
      | [0;1;32m                                                                 
[0m[1msexp-conv.c:418:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  418 |       if (options.once)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  419 |         die("sexp-conv: No input expression.\n");[0m
      | [0;1;32m                                                 
[0m[1msexp-conv.c:431:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  431 |       else if (options.mode != SEXP_CANONICAL)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  432 |         sexp_put_newline(&output, 0);[0m
      | [0;1;32m                                     
[0m[1msexp-conv.c:440:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  440 |   if (fflush(output.f) < 0)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  441 |     die("Final fflush failed: %s.\n", strerror(errno));[0m
      | [0;1;32m                                                       
[0m39 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[277/277][280.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/nettle-3.9/tidy-fixes/tmptjdy2g7j.yaml -p=/itch/common/crepos/cu-to-rtu/c/nettle-3.9 /itch/common/crepos/cu-to-rtu/c/nettle-3.9/fat-x86_64.c
[1mfat-x86_64.c:76:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |   if (s)[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m[1mfat-x86_64.c:84:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   84 |             if (MATCH(s, length, "intel", 5))[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m   85 |               features->vendor = X86_INTEL;[0m
   86 |             else if (MATCH(s, length, "amd", 3))[0m
      | [0;32m            } 
[0m[1mfat-x86_64.c:86:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   86 |             else if (MATCH(s, length, "amd", 3))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m   87 |               features->vendor = X86_AMD;[0m
      | [0;1;32m                                         
[0m[1mfat-x86_64.c:90:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |         else if (MATCH (s, length, "aesni", 5))[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m   91 |           features->have_aesni = 1;[0m
   92 |         else if (MATCH (s, length, "sha_ni", 6))[0m
      | [0;32m        } 
[0m[1mfat-x86_64.c:92:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   92 |         else if (MATCH (s, length, "sha_ni", 6))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m   93 |           features->have_sha_ni = 1;[0m
   94 |         else if (MATCH (s, length, "pclmul", 6))[0m
      | [0;32m        } 
[0m[1mfat-x86_64.c:94:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   94 |         else if (MATCH (s, length, "pclmul", 6))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m   95 |           features->have_pclmul = 1;[0m
      | [0;1;32m                                    
[0m[1mfat-x86_64.c:96:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |         if (!sep)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   97 |           break;[0m
      | [0;1;32m                
[0m[1mfat-x86_64.c:104:66: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  104 |       if (memcmp (cpuid_data + 1, "Genu" "ntel" "ineI", 12) == 0)[0m
      | [0;1;32m                                                                 ^
[0m      | [0;32m                                                                  {
[0m  105 |         features->vendor = X86_INTEL;[0m
  106 |       else if (memcmp (cpuid_data + 1, "Auth" "cAMD" "enti", 12) == 0)[0m
      | [0;32m      } 
[0m[1mfat-x86_64.c:106:71: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  106 |       else if (memcmp (cpuid_data + 1, "Auth" "cAMD" "enti", 12) == 0)[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m  107 |         features->vendor = X86_AMD;[0m
      | [0;1;32m                                   
[0m[1mfat-x86_64.c:110:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |       if (cpuid_data[2] & 0x2)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  111 |         features->have_pclmul = 1;[0m
      | [0;1;32m                                  
[0m[1mfat-x86_64.c:112:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |       if (cpuid_data[2] & 0x02000000)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  113 |         features->have_aesni = 1;[0m
      | [0;1;32m                                 
[0m[1mfat-x86_64.c:116:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  116 |       if (cpuid_data[1] & 0x20000000)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  117 |         features->have_sha_ni = 1;[0m
      | [0;1;32m                                  
[0m[1mfat-x86_64.c:183:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  183 |   if (verbose)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  184 |     fprintf (stderr, "libnettle: fat library initialization.\n");[0m
      | [0;1;32m                                                                 
[0m[1mfat-x86_64.c:184:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  184 |     fprintf (stderr, "libnettle: fat library initialization.\n");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mfat-x86_64.c:184:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  184 |     fprintf (stderr, "libnettle: fat library initialization.\n");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mfat-x86_64.c:191:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  191 |       fprintf (stderr, "libnettle: cpu features: vendor:%s%s%s%s\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:191:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  191 |       fprintf (stderr, "libnettle: cpu features: vendor:%s%s%s%s\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:199:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  199 |       if (verbose)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  200 |         fprintf (stderr, "libnettle: using aes instructions.\n");[0m
      | [0;1;32m                                                                 
[0m[1mfat-x86_64.c:200:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  200 |         fprintf (stderr, "libnettle: using aes instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:200:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  200 |         fprintf (stderr, "libnettle: using aes instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:213:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  213 |       if (verbose)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  214 |         fprintf (stderr, "libnettle: not using aes instructions.\n");[0m
      | [0;1;32m                                                                     
[0m[1mfat-x86_64.c:214:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  214 |         fprintf (stderr, "libnettle: not using aes instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:214:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  214 |         fprintf (stderr, "libnettle: not using aes instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:228:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  228 |       if (verbose)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  229 |         fprintf (stderr, "libnettle: using sha_ni instructions.\n");[0m
      | [0;1;32m                                                                    
[0m[1mfat-x86_64.c:229:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  229 |         fprintf (stderr, "libnettle: using sha_ni instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:229:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  229 |         fprintf (stderr, "libnettle: using sha_ni instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:235:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  235 |       if (verbose)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  236 |         fprintf (stderr, "libnettle: not using sha_ni instructions.\n");[0m
      | [0;1;32m                                                                        
[0m[1mfat-x86_64.c:236:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  236 |         fprintf (stderr, "libnettle: not using sha_ni instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:236:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  236 |         fprintf (stderr, "libnettle: not using sha_ni instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:243:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  243 |       if (verbose)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  244 |         fprintf (stderr, "libnettle: using pclmulqdq instructions.\n");[0m
      | [0;1;32m                                                                       
[0m[1mfat-x86_64.c:244:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  244 |         fprintf (stderr, "libnettle: using pclmulqdq instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:244:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  244 |         fprintf (stderr, "libnettle: using pclmulqdq instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:250:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  250 |       if (verbose)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  251 |         fprintf (stderr, "libnettle: not using pclmulqdq instructions.\n");[0m
      | [0;1;32m                                                                           
[0m[1mfat-x86_64.c:251:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  251 |         fprintf (stderr, "libnettle: not using pclmulqdq instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:251:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  251 |         fprintf (stderr, "libnettle: not using pclmulqdq instructions.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:258:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  258 |       if (verbose)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  259 |         fprintf (stderr, "libnettle: intel SSE2 will be used for memxor.\n");[0m
      | [0;1;32m                                                                             
[0m[1mfat-x86_64.c:259:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  259 |         fprintf (stderr, "libnettle: intel SSE2 will be used for memxor.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:259:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  259 |         fprintf (stderr, "libnettle: intel SSE2 will be used for memxor.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:264:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  264 |       if (verbose)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  265 |         fprintf (stderr, "libnettle: intel SSE2 will not be used for memxor.\n");[0m
      | [0;1;32m                                                                                 
[0m[1mfat-x86_64.c:265:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  265 |         fprintf (stderr, "libnettle: intel SSE2 will not be used for memxor.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:265:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  265 |         fprintf (stderr, "libnettle: intel SSE2 will not be used for memxor.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat-x86_64.c:270:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  270 | DEFINE_FAT_FUNC(nettle_aes128_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:270:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  270 | DEFINE_FAT_FUNC(nettle_aes128_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:274:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  274 | DEFINE_FAT_FUNC(nettle_aes128_decrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:274:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  274 | DEFINE_FAT_FUNC(nettle_aes128_decrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:279:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  279 | DEFINE_FAT_FUNC(nettle_aes192_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:279:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  279 | DEFINE_FAT_FUNC(nettle_aes192_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:283:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  283 | DEFINE_FAT_FUNC(nettle_aes192_decrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:283:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  283 | DEFINE_FAT_FUNC(nettle_aes192_decrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:288:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  288 | DEFINE_FAT_FUNC(nettle_aes256_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:288:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  288 | DEFINE_FAT_FUNC(nettle_aes256_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:292:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  292 | DEFINE_FAT_FUNC(nettle_aes256_decrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:292:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  292 | DEFINE_FAT_FUNC(nettle_aes256_decrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:297:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  297 | DEFINE_FAT_FUNC(nettle_cbc_aes128_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:297:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  297 | DEFINE_FAT_FUNC(nettle_cbc_aes128_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:301:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  301 | DEFINE_FAT_FUNC(nettle_cbc_aes192_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:301:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  301 | DEFINE_FAT_FUNC(nettle_cbc_aes192_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:305:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  305 | DEFINE_FAT_FUNC(nettle_cbc_aes256_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:305:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  305 | DEFINE_FAT_FUNC(nettle_cbc_aes256_encrypt, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:310:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  310 | DEFINE_FAT_FUNC(nettle_memxor, void *,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:310:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  310 | DEFINE_FAT_FUNC(nettle_memxor, void *,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:314:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  314 | DEFINE_FAT_FUNC(nettle_sha1_compress, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:314:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  314 | DEFINE_FAT_FUNC(nettle_sha1_compress, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:318:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  318 | DEFINE_FAT_FUNC(_nettle_sha256_compress_n, const uint8_t *,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:318:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  318 | DEFINE_FAT_FUNC(_nettle_sha256_compress_n, const uint8_t *,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:323:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  323 | DEFINE_FAT_FUNC(_nettle_ghash_set_key, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:323:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  323 | DEFINE_FAT_FUNC(_nettle_ghash_set_key, void,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:326:1: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  326 | DEFINE_FAT_FUNC(_nettle_ghash_update, const uint8_t *,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mfat-x86_64.c:326:1: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  326 | DEFINE_FAT_FUNC(_nettle_ghash_update, const uint8_t *,[0m
      | [0;1;32m^
[0m[1m./fat-setup.h:147:7: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_FAT_FUNC'[0m
  147 |       fprintf (stderr, "libnettle: "#name"_init\n");            \[0m
      | [0;1;32m      ^~~~~~~
[0m47 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.



Process exited with return code 0
