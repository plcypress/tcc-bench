Command: /itch/common/crepos/tcc-scripts/tidy-braces.sh
Directory: /itch/common/crepos/cu-to-rtu/c/pocketlang
----------------------------------------

Enabled checks:
    clang-analyzer-apiModeling.Errno
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.TrustReturnsNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.BitwiseShift
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DereferenceModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.NewArraySize
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.ArrayDelete
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PlacementNew
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtrModeling
    clang-analyzer-cplusplus.StringChecker
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.core.EnumCastOutOfRange
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-optin.taint.GenericTaint
    clang-analyzer-optin.taint.TaintPropagation
    clang-analyzer-optin.taint.TaintedAlloc
    clang-analyzer-optin.taint.TaintedDiv
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.ArrayBound
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.MmapWriteExec
    clang-analyzer-security.PointerSub
    clang-analyzer-security.PutenvStackArray
    clang-analyzer-security.SetgidSetuidOrder
    clang-analyzer-security.cert.env.InvalidPtr
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.BlockInCriticalSection
    clang-analyzer-unix.Chroot
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Errno
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.StdCLibraryFunctions
    clang-analyzer-unix.Stream
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NotNullTerminated
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    clang-analyzer-webkit.NoUncountedMemberChecker
    clang-analyzer-webkit.RefCntblBaseVirtualDtor
    clang-analyzer-webkit.UncountedLambdaCapturesChecker
    readability-braces-around-statements

Running clang-tidy for 18 files out of 18 in compilation database ...
[ 1/18][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpgswti626.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/libs.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 2/18][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpwveupszv.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_time.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 3/18][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmp81y7s316.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_dummy.c
[1msrc/libs/std_dummy.c:19:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   19 |   ASSERT(dummy != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_dummy.c:19:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   19 |   ASSERT(dummy != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_dummy.c:32:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   32 |   if (!pkValidateSlotNumber(vm, 1, &val)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_dummy.c:53:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |     if (!pkValidateSlotNumber(vm, 2, &val)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/libs/std_dummy.c:70:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   70 |   if (!pkValidateSlotInstanceOf(vm, 1, 2)) return;[0m
      | [0;1;32m                                          ^       
[0m      | [0;32m                                           {
[0m[1msrc/libs/std_dummy.c:77:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   77 |   if (!pkNewInstance(vm, 2, 0, 1, 3)) return;[0m
      | [0;1;32m                                     ^       
[0m      | [0;32m                                      {
[0m[1msrc/libs/std_dummy.c:88:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   88 |   if (!pkValidateSlotNumber(vm, 1, &value)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/libs/std_dummy.c:102:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  102 |   if (!pkValidateSlotNumber(vm, 1, &value)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/libs/std_dummy.c:114:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  114 |   if (!pkValidateSlotNumber(vm, 1, &n1)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_dummy.c:115:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  115 |   if (!pkValidateSlotNumber(vm, 2, &n2)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_dummy.c:125:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  125 |   if (!pkValidateSlotString(vm, 1, &s1, NULL)) return;[0m
      | [0;1;32m                                              ^       
[0m      | [0;32m                                               {
[0m[1msrc/libs/std_dummy.c:126:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  126 |   if (!pkValidateSlotString(vm, 2, &s2, NULL)) return;[0m
      | [0;1;32m                                              ^       
[0m      | [0;32m                                               {
[0m[1msrc/libs/std_dummy.c:134:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  134 |   if (!pkValidateSlotType(vm, 1, PK_CLOSURE)) return;[0m
      | [0;1;32m                                             ^       
[0m      | [0;32m                                              {
[0m[1msrc/libs/std_dummy.c:142:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  142 |   if (!pkCallFunction(vm, 1, 3, 2, 0)) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/libs/std_dummy.c:149:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |   if (!pkValidateSlotString(vm, 2, &method, NULL)) return;[0m
      | [0;1;32m                                                  ^       
[0m      | [0;32m                                                   {
[0m[1msrc/libs/std_dummy.c:153:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  153 |   if (!pkCallMethod(vm, 1, method, 2, 3, 0)) return;[0m
      | [0;1;32m                                            ^       
[0m      | [0;32m                                             {
[0m17 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 4/18][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmp_2kzp2bc.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_math.c
[1msrc/libs/std_math.c:21:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   21 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:30:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   30 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:39:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   39 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:40:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   40 |   if (!pkValidateSlotNumber(vm, 2, &ex)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_math.c:49:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   49 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:58:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   58 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:59:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   59 |   if (num < 0) num = -num;[0m
      | [0;1;32m              ^           
[0m      | [0;32m               {
[0m[1msrc/libs/std_math.c:68:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:69:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   69 |   if (num < 0) num = -1;[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   70 |   else if (num > 0) num = +1;[0m
      | [0;32m  } 
[0m[1msrc/libs/std_math.c:70:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   70 |   else if (num > 0) num = +1;[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m   71 |   else num = 0;[0m
      | [0;32m  } 
[0m[1msrc/libs/std_math.c:71:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   71 |   else num = 0;[0m
      | [0;1;32m      ^        
[0m      | [0;32m       {
[0m[1msrc/libs/std_math.c:81:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   81 |   if (!pkValidateSlotNumber(vm, 1, &rad)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:91:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   91 |   if (!pkValidateSlotNumber(vm, 1, &rad)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:101:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  101 |   if (!pkValidateSlotNumber(vm, 1, &rad)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:110:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |   if (!pkValidateSlotNumber(vm, 1, &val)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:119:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  119 |   if (!pkValidateSlotNumber(vm, 1, &val)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:128:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  128 |   if (!pkValidateSlotNumber(vm, 1, &val)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:138:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  138 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:153:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  153 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:168:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  168 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:179:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  179 |   if (!pkValidateSlotNumber(vm, 1, &y)) return;[0m
      | [0;1;32m                                       ^       
[0m      | [0;32m                                        {
[0m[1msrc/libs/std_math.c:180:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  180 |   if (!pkValidateSlotNumber(vm, 2, &x)) return;[0m
      | [0;1;32m                                       ^       
[0m      | [0;32m                                        {
[0m[1msrc/libs/std_math.c:190:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  190 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_math.c:199:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  199 |   if (!pkValidateSlotNumber(vm, 1, &num)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m26 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 5/18][2.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmp8pl31390.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_os.c
[1msrc/libs/std_os.c:111:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  111 |   if (handle == NULL) return NULL;[0m
      | [0;1;32m                     ^            
[0m      | [0;32m                      {
[0m[1msrc/libs/std_os.c:166:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  166 |     sprintf(tmp, "/proc/%d/exe", getpid());[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/libs/std_os.c:166:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  166 |     sprintf(tmp, "/proc/%d/exe", getpid());[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/libs/std_os.c:168:5: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory preceding 'buff' [clang-analyzer-security.ArrayBound][0m
  168 |     buff[len] = '\0';[0m
      | [0;1;32m    ^
[0m[1msrc/libs/std_os.c:302:8: [0m[0;1;36mnote: [0mCalling 'osGetExeFilePath'[0m
  302 |   if (!osGetExeFilePath(buff, MAX_PATH_LEN)) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_os.c:168:5: [0m[0;1;36mnote: [0mAccess of 'buff' at negative byte offset -1[0m
  168 |     buff[len] = '\0';[0m
      | [0;1;32m    ^~~~~~~~~
[0m[1msrc/libs/std_os.c:168:5: [0m[0;1;35mwarning: [0m[1mPotential out of bound access to 'buff' with tainted index [clang-analyzer-security.ArrayBound][0m
  168 |     buff[len] = '\0';[0m
      | [0;1;32m    ^
[0m[1msrc/libs/std_os.c:302:8: [0m[0;1;36mnote: [0mCalling 'osGetExeFilePath'[0m
  302 |   if (!osGetExeFilePath(buff, MAX_PATH_LEN)) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_os.c:167:15: [0m[0;1;36mnote: [0mTaint originated here[0m
  167 |     int len = readlink(tmp, buff, size);[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_os.c:167:15: [0m[0;1;36mnote: [0mTaint propagated to the return value[0m
  167 |     int len = readlink(tmp, buff, size);[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_os.c:167:15: [0m[0;1;36mnote: [0mAssuming that 'readlink' is successful[0m
  167 |     int len = readlink(tmp, buff, size);[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_os.c:168:5: [0m[0;1;36mnote: [0mAccess of 'buff' with a tainted index that may be too large[0m
  168 |     buff[len] = '\0';[0m
      | [0;1;32m    ^~~~~~~~~
[0m[1msrc/libs/std_os.c:192:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  192 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_os.c:194:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  194 |   if (chdir(path)) REPORT_ERRNO(chdir);[0m
      | [0;1;32m                  ^                    
[0m      | [0;32m                   {
[0m[1msrc/libs/std_os.c:202:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  202 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_os.c:220:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  220 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_os.c:221:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  221 |   if (rmdir(path)) REPORT_ERRNO(rmdir);[0m
      | [0;1;32m                  ^                    
[0m      | [0;32m                   {
[0m[1msrc/libs/std_os.c:229:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  229 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_os.c:230:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  230 |   if (unlink(path)) REPORT_ERRNO(unlink);[0m
      | [0;1;32m                   ^                     
[0m      | [0;32m                    {
[0m[1msrc/libs/std_os.c:237:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  237 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_os.c:241:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  241 |   if (stat(path, &path_stat) == 0) mtime = (double) path_stat.st_mtime;[0m
      | [0;1;32m                                  ^                                    
[0m      | [0;32m                                   {
[0m[1msrc/libs/std_os.c:250:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  250 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_os.c:268:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  268 |   if (!pkValidateSlotString(vm, 1, &cmd, NULL)) return;[0m
      | [0;1;32m                                               ^       
[0m      | [0;32m                                                {
[0m[1msrc/libs/std_os.c:286:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  286 |   if (!pkValidateSlotString(vm, 1, &name, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m18 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 6/18][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpmv8lmlev.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_types.c
[1msrc/libs/std_types.c:20:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   20 |   ASSERT(vm->fiber != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_types.c:20:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   20 |   ASSERT(vm->fiber != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_types.c:21:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   21 |   ASSERT(1 < pkGetSlotsCount(vm), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_types.c:21:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   21 |   ASSERT(1 < pkGetSlotsCount(vm), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_types.c:24:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   24 |   if (!IS_OBJ(value)) pkSetSlotBool(vm, 0, true);[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m   25 |   else pkSetSlotBool(vm, 0, isObjectHashable(AS_OBJ(value)->type));[0m
      | [0;32m  } 
[0m[1msrc/libs/std_types.c:25:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   25 |   else pkSetSlotBool(vm, 0, isObjectHashable(AS_OBJ(value)->type));[0m
      | [0;1;32m      ^                                                            
[0m      | [0;32m       {
[0m[1msrc/libs/std_types.c:33:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   33 |   ASSERT(vm->fiber != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_types.c:33:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   33 |   ASSERT(vm->fiber != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_types.c:34:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   34 |   ASSERT(1 < pkGetSlotsCount(vm), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_types.c:34:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   34 |   ASSERT(1 < pkGetSlotsCount(vm), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_types.c:65:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   65 |   if (!pkValidateSlotNumber(vm, 1, &size)) return;[0m
      | [0;1;32m                                          ^       
[0m      | [0;32m                                           {
[0m[1msrc/libs/std_types.c:77:37: [0m[0;1;35mwarning: [0m[1mpassing 'uint32_t *' (aka 'unsigned int *') to parameter of type 'int32_t *' (aka 'int *') converts between pointers to integer types with different sign [clang-diagnostic-pointer-sign][0m
   77 |   if (!pkValidateSlotInteger(vm, 1, &n)) return;[0m
      | [0;1;32m                                    ^~
[0m[1m./src/include/pocketlang.h:366:67: [0m[0;1;36mnote: [0mpassing argument to parameter 'value' here[0m
  366 | PK_PUBLIC bool pkValidateSlotInteger(PKVM* vm, int slot, int32_t* value);[0m
      | [0;1;32m                                                                  ^
[0m[1msrc/libs/std_types.c:77:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   77 |   if (!pkValidateSlotInteger(vm, 1, &n)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_types.c:85:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |   if (!pkValidateSlotNumber(vm, 1, &count)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/libs/std_types.c:111:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  111 |       pkByteBufferWrite(self, vm, pkGetSlotBool(vm, 1) ? 1 : 0);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  112 |       pkSetSlotNumber(vm, 0, 1);[0m
  113 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/libs/std_types.c:117:41: [0m[0;1;35mwarning: [0m[1mpassing 'uint32_t *' (aka 'unsigned int *') to parameter of type 'int32_t *' (aka 'int *') converts between pointers to integer types with different sign [clang-diagnostic-pointer-sign][0m
  117 |       if (!pkValidateSlotInteger(vm, 1, &i)) return;[0m
      | [0;1;32m                                        ^~
[0m[1m./src/include/pocketlang.h:366:67: [0m[0;1;36mnote: [0mpassing argument to parameter 'value' here[0m
  366 | PK_PUBLIC bool pkValidateSlotInteger(PKVM* vm, int slot, int32_t* value);[0m
      | [0;1;32m                                                                  ^
[0m[1msrc/libs/std_types.c:117:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  117 |       if (!pkValidateSlotInteger(vm, 1, &i)) return;[0m
      | [0;1;32m                                            ^       
[0m      | [0;32m                                             {
[0m[1msrc/libs/std_types.c:142:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  142 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/libs/std_types.c:154:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  154 |   if (!pkValidateSlotNumber(vm, 1, &index)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/libs/std_types.c:174:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  174 |   if (!pkValidateSlotNumber(vm, 1, &index)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/libs/std_types.c:175:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  175 |   if (!pkValidateSlotNumber(vm, 2, &value)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/libs/std_types.c:206:32: [0m[0;1;35mwarning: [0m[1mpassing 'uint8_t *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [clang-diagnostic-pointer-sign][0m
  206 |   pkSetSlotStringLength(vm, 0, self->data, self->count);[0m
      | [0;1;32m                               ^~~~~~~~~~
[0m[1m./src/include/pocketlang.h:436:50: [0m[0;1;36mnote: [0mpassing argument to parameter 'value' here[0m
  436 |                                      const char* value, uint32_t length);[0m
      | [0;1;32m                                                 ^
[0m[1msrc/libs/std_types.c:226:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  226 |   memset(vec, 0, sizeof(Vector));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/libs/std_types.c:226:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  226 |   memset(vec, 0, sizeof(Vector));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/libs/std_types.c:237:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  237 |   if (!pkCheckArgcRange(vm, argc, 0, 3)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_types.c:242:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  242 |   if (argc == 0) return;[0m
      | [0;1;32m                ^       
[0m      | [0;32m                 {
[0m[1msrc/libs/std_types.c:244:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  244 |     if (!pkValidateSlotNumber(vm, 1, &x)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_types.c:249:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  249 |     if (!pkValidateSlotNumber(vm, 2, &y)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_types.c:254:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  254 |     if (!pkValidateSlotNumber(vm, 3, &z)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_types.c:263:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  263 |   if (!pkValidateSlotString(vm, 1, &name, &length)) return;[0m
      | [0;1;32m                                                   ^       
[0m      | [0;32m                                                    {
[0m[1msrc/libs/std_types.c:283:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  283 |   if (!pkValidateSlotString(vm, 1, &name, &length)) return;[0m
      | [0;1;32m                                                   ^       
[0m      | [0;32m                                                    {
[0m[1msrc/libs/std_types.c:290:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  290 |       if (!pkValidateSlotNumber(vm, 2, &val)) return;[0m
      | [0;1;32m                                             ^       
[0m      | [0;32m                                              {
[0m[1msrc/libs/std_types.c:294:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  294 |       if (!pkValidateSlotNumber(vm, 2, &val)) return;[0m
      | [0;1;32m                                             ^       
[0m      | [0;32m                                              {
[0m[1msrc/libs/std_types.c:298:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  298 |       if (!pkValidateSlotNumber(vm, 2, &val)) return;[0m
      | [0;1;32m                                             ^       
[0m      | [0;32m                                              {
[0m31 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 7/18][6.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpr79qh6nl.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_io.c
[1msrc/libs/std_io.c:21:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   21 |   if (!pkValidateSlotNumber(vm, 1, &stream)) return;[0m
      | [0;1;32m                                            ^       
[0m      | [0;32m                                             {
[0m[1msrc/libs/std_io.c:31:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   31 |   if (!pkValidateSlotString(vm, 2, &bytes, &length)) return;[0m
      | [0;1;32m                                                    ^       
[0m      | [0;32m                                                     {
[0m[1msrc/libs/std_io.c:35:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   35 |       pkSetRuntimeError(vm, "Cannot write to stdin.");[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   36 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/libs/std_io.c:39:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   39 |       fwrite(bytes, sizeof(char), length, stdout);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   40 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/libs/std_io.c:43:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   43 |       fwrite(bytes, sizeof(char), length, stderr);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   44 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/libs/std_io.c:106:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  106 |   ASSERT(file != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:106:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  106 |   ASSERT(file != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:116:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  116 |     ASSERT(file->fp != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:116:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  116 |     ASSERT(file->fp != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:122:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  122 |     ASSERT(file->fp == NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:122:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  122 |     ASSERT(file->fp == NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:149:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |   if (!pkCheckArgcRange(vm, argc, 1, 2)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_io.c:152:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  152 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_io.c:158:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  158 |     if (!pkValidateSlotString(vm, 2, &mode_str, NULL)) return;[0m
      | [0;1;32m                                                      ^       
[0m      | [0;32m                                                       {
[0m[1msrc/libs/std_io.c:204:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  204 |   if (!pkCheckArgcRange(vm, argc, 0, 1)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_io.c:213:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  213 |     if (!pkValidateSlotNumber(vm, 1, &count_)) return;[0m
      | [0;1;32m                                              ^       
[0m      | [0;32m                                               {
[0m[1msrc/libs/std_io.c:249:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  249 |   ASSERT(buff != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:249:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  249 |   ASSERT(buff != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:260:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  260 |   if (!is_read_failed) buff[read] = '\0';[0m
      | [0;1;32m                      ^                  
[0m      | [0;32m                       {
[0m[1msrc/libs/std_io.c:327:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  327 |     if (c == '\n') break;[0m
      | [0;1;32m                  ^      
[0m      | [0;32m                   {
[0m[1msrc/libs/std_io.c:332:32: [0m[0;1;35mwarning: [0m[1mpassing 'uint8_t *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [clang-diagnostic-pointer-sign][0m
  332 |   pkSetSlotStringLength(vm, 0, buff.data, buff.count);[0m
      | [0;1;32m                               ^~~~~~~~~
[0m[1m./src/include/pocketlang.h:436:50: [0m[0;1;36mnote: [0mpassing argument to parameter 'value' here[0m
  436 |                                      const char* value, uint32_t length);[0m
      | [0;1;32m                                                 ^
[0m[1msrc/libs/std_io.c:346:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  346 |   if (!pkValidateSlotString(vm, 1, &text, &length)) return;[0m
      | [0;1;32m                                                   ^       
[0m      | [0;32m                                                    {
[0m[1msrc/libs/std_io.c:375:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  375 |     ASSERT(file->fp == NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:375:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  375 |     ASSERT(file->fp == NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_io.c:398:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  398 |   if (!pkCheckArgcRange(vm, argc, 1, 2)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_io.c:401:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  401 |   if (!pkValidateSlotInteger(vm, 1, &offset)) return;[0m
      | [0;1;32m                                             ^       
[0m      | [0;32m                                              {
[0m[1msrc/libs/std_io.c:404:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  404 |     if (!pkValidateSlotInteger(vm, 2, &whence)) return;[0m
      | [0;1;32m                                               ^       
[0m      | [0;32m                                                {
[0m[1msrc/libs/std_io.c:459:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  459 |   if (!pkCheckArgcRange(vm, argc, 1, 2)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_io.c:460:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  460 |   if (argc == 1) pkSetSlotString(vm, 2, "r");[0m
      | [0;1;32m                ^                            
[0m      | [0;32m                 {
[0m[1msrc/libs/std_io.c:462:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  462 |   if (!pkImportModule(vm, "io", 0)) return;           // slots[0] = io[0m
      | [0;1;32m                                   ^                                  
[0m      | [0;32m                                    {
[0m[1msrc/libs/std_io.c:463:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  463 |   if (!pkGetAttribute(vm, 0, "File", 0)) return;      // slots[0] = File[0m
      | [0;1;32m                                        ^                               
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_io.c:464:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  464 |   if (!pkNewInstance(vm, 0, 0, 0, 0)) return;         // slots[0] = File()[0m
      | [0;1;32m                                     ^                                    
[0m      | [0;32m                                      {
[0m[1msrc/libs/std_io.c:465:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  465 |   if (!pkCallMethod(vm, 0, "open", 2, 1, -1)) return; // slots[0] = opened file[0m
      | [0;1;32m                                             ^                                 
[0m      | [0;32m                                              {
[0m30 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 8/18][22.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpz36jibf0.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_term.c
[1msrc/libs/std_term.c:25:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   25 |   if (!pkImportModule(vm, "types", slot)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_term.c:26:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   26 |   if (!pkGetAttribute(vm, slot, "Vector", slot)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_term.c:27:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   27 |   if (!pkNewInstance(vm, slot, slot, 0, 0)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/libs/std_term.c:30:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   30 |   if (!pkSetAttribute(vm, slot, "x", tmp)) return;[0m
      | [0;1;32m                                          ^       
[0m      | [0;32m                                           {
[0m[1msrc/libs/std_term.c:32:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   32 |   if (!pkSetAttribute(vm, slot, "y", tmp)) return;[0m
      | [0;1;32m                                          ^       
[0m      | [0;32m                                           {
[0m[1msrc/libs/std_term.c:48:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   48 |   if (!pkValidateSlotString(vm, 1, &name, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_term.c:177:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  177 |   if (!pkValidateSlotBool(vm, 1, &capture_events)) return;[0m
      | [0;1;32m                                                  ^       
[0m      | [0;32m                                                   {
[0m[1msrc/libs/std_term.c:229:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  229 |   if (!pkCheckArgcRange(vm, argc, 1, 2)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_term.c:233:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  233 |     if (!pkGetAttribute(vm, 1, "x", 2)) return;[0m
      | [0;1;32m                                       ^       
[0m      | [0;32m                                        {
[0m[1msrc/libs/std_term.c:234:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  234 |     if (!pkValidateSlotNumber(vm, 2, &x)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_term.c:236:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  236 |     if (!pkGetAttribute(vm, 1, "y", 2)) return;[0m
      | [0;1;32m                                       ^       
[0m      | [0;32m                                        {
[0m[1msrc/libs/std_term.c:237:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  237 |     if (!pkValidateSlotNumber(vm, 2, &y)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_term.c:239:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  239 |     if (!pkValidateSlotNumber(vm, 1, &x)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_term.c:240:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  240 |     if (!pkValidateSlotNumber(vm, 2, &y)) return;[0m
      | [0;1;32m                                         ^       
[0m      | [0;32m                                          {
[0m[1msrc/libs/std_term.c:253:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  253 |   if (!pkValidateSlotInstanceOf(vm, 1, 2)) return;[0m
      | [0;1;32m                                          ^       
[0m      | [0;32m                                           {
[0m[1msrc/libs/std_term.c:293:31: [0m[0;1;35mwarning: [0m[1mpassing 'unsigned char[6530]' to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [clang-diagnostic-pointer-sign][0m
  293 |   pkModuleAddSource(vm, term, ext_term_pk);[0m
      | [0;1;32m                              ^~~~~~~~~~~
[0m[1m./src/include/pocketlang.h:317:46: [0m[0;1;36mnote: [0mpassing argument to parameter 'source' here[0m
  317 |                                  const char* source);[0m
      | [0;1;32m                                             ^
[0m[1msrc/libs/std_term.c:305:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  305 |   if (_cls_term_event) pkReleaseHandle(vm, _cls_term_event);[0m
      | [0;1;32m                      ^                                     
[0m      | [0;32m                       {
[0m73 warnings generated.
Suppressed 56 warnings (56 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 9/18][50.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpoefqmixv.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/core/public.c
[1msrc/core/public.c:91:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   91 |   ASSERT(vm->config.realloc_fn != NULL, "PKVM's allocator was NULL.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:91:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   91 |   ASSERT(vm->config.realloc_fn != NULL, "PKVM's allocator was NULL.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:97:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   97 |   memset(&config, 0, sizeof(config));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/public.c:97:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   97 |   memset(&config, 0, sizeof(config));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/public.c:123:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  123 |   if (config == NULL) config = &default_config;[0m
      | [0;1;32m                     ^                         
[0m      | [0;32m                      {
[0m[1msrc/core/public.c:126:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  126 |   memset(vm, 0, sizeof(PKVM));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/public.c:126:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  126 |   memset(vm, 0, sizeof(PKVM));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/public.c:176:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  176 |   ASSERT(vm->handles == NULL, "Not all handles were released.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:176:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  176 |   ASSERT(vm->handles == NULL, "Not all handles were released.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:191:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  191 |   ASSERT(vm->builtins_count < BUILTIN_FN_CAPACITY,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:191:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  191 |   ASSERT(vm->builtins_count < BUILTIN_FN_CAPACITY,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:200:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  200 |     ASSERT(strcmp(bfn->fn->name, name) != 0,[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:200:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  200 |     ASSERT(strcmp(bfn->fn->name, name) != 0,[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:214:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  214 |   CHECK_ARG_NULL(path);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:214:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  214 |   CHECK_ARG_NULL(path);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:217:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  217 |   ASSERT(length > 0, "Path size cannot be 0.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:217:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  217 |   ASSERT(length > 0, "Path size cannot be 0.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:220:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  220 |   ASSERT(last == '/' || last == '\\', "Path should ends with "[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:220:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  220 |   ASSERT(last == '/' || last == '\\', "Path should ends with "[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:230:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  230 |   CHECK_ARG_NULL(name);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:230:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  230 |   CHECK_ARG_NULL(name);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:241:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  241 |   CHECK_HANDLE_TYPE(module, OBJ_MODULE);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:241:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  241 |   CHECK_HANDLE_TYPE(module, OBJ_MODULE);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:249:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  249 |   CHECK_HANDLE_TYPE(module, OBJ_MODULE);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:249:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  249 |   CHECK_HANDLE_TYPE(module, OBJ_MODULE);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:250:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  250 |   CHECK_ARG_NULL(fptr);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:250:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  250 |   CHECK_ARG_NULL(fptr);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:261:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  261 |   CHECK_ARG_NULL(module);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:261:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  261 |   CHECK_ARG_NULL(module);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:262:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  262 |   CHECK_ARG_NULL(name);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:262:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  262 |   CHECK_ARG_NULL(name);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:263:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  263 |   CHECK_HANDLE_TYPE(module, OBJ_MODULE);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:263:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  263 |   CHECK_HANDLE_TYPE(module, OBJ_MODULE);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:267:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  267 |     CHECK_HANDLE_TYPE(base_class, OBJ_CLASS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:267:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  267 |     CHECK_HANDLE_TYPE(base_class, OBJ_CLASS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:286:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  286 |   CHECK_ARG_NULL(cls);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:286:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  286 |   CHECK_ARG_NULL(cls);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:287:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  287 |   CHECK_ARG_NULL(fptr);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:287:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  287 |   CHECK_ARG_NULL(fptr);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:288:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  288 |   CHECK_HANDLE_TYPE(cls, OBJ_CLASS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:288:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  288 |   CHECK_HANDLE_TYPE(cls, OBJ_CLASS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:313:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  313 |     if (!strcmp(name, CTOR_NAME)) class_->ctor = method;[0m
      | [0;1;32m                                 ^                      
[0m      | [0;32m                                  {
[0m[1msrc/core/public.c:319:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  319 |   CHECK_HANDLE_TYPE(module, OBJ_MODULE);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:319:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  319 |   CHECK_HANDLE_TYPE(module, OBJ_MODULE);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:49:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_HANDLE_TYPE'[0m
   49 |     CHECK_ARG_NULL(handle);                      \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:320:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  320 |   CHECK_ARG_NULL(source);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:320:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  320 |   CHECK_ARG_NULL(source);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:326:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  326 |   ASSERT(handle != NULL, "Given handle was NULL.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:326:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  326 |   ASSERT(handle != NULL, "Given handle was NULL.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:334:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  334 |   if (handle->next) handle->next->prev = handle->prev;[0m
      | [0;1;32m                   ^                                  
[0m      | [0;32m                    {
[0m[1msrc/core/public.c:335:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  335 |   if (handle->prev) handle->prev->next = handle->next;[0m
      | [0;1;32m                   ^                                  
[0m      | [0;32m                    {
[0m[1msrc/core/public.c:351:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  351 |     if (result != PK_RESULT_SUCCESS) return result;[0m
      | [0;1;32m                                    ^              
[0m      | [0;32m                                     {
[0m[1msrc/core/public.c:374:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  374 |   ASSERT(vm->config.load_script_fn != NULL,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:374:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  374 |   ASSERT(vm->config.load_script_fn != NULL,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:429:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  429 |   if (result != PK_RESULT_SUCCESS) return result;[0m
      | [0;1;32m                                  ^              
[0m      | [0;32m                                   {
[0m[1msrc/core/public.c:446:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  446 |   ASSERT(line != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:446:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  446 |   ASSERT(line != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:449:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  449 |     if (!utilIsSpace(*c)) return false;[0m
      | [0;1;32m                         ^             
[0m      | [0;32m                          {
[0m[1msrc/core/public.c:463:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  463 |   if (main_index == -1) return NULL;[0m
      | [0;1;32m                       ^            
[0m      | [0;32m                        {
[0m[1msrc/core/public.c:464:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  464 |   ASSERT_INDEX(main_index, (int) module->globals.count);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:464:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  464 |   ASSERT_INDEX(main_index, (int) module->globals.count);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:466:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  466 |   ASSERT(IS_OBJ_TYPE(main_fn, OBJ_CLOSURE), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:466:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  466 |   ASSERT(IS_OBJ_TYPE(main_fn, OBJ_CLOSURE), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:481:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  481 |     if (printerrfn) printerrfn(vm, "REPL failed to input.");[0m
      | [0;1;32m                   ^                                        
[0m      | [0;32m                    {
[0m[1msrc/core/public.c:487:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  487 |   ASSERT(IS_OBJ_TYPE(module->value, OBJ_MODULE), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:487:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  487 |   ASSERT(IS_OBJ_TYPE(module->value, OBJ_MODULE), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:508:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  508 |       if (printerrfn) printerrfn(vm, "REPL failed to input.");[0m
      | [0;1;32m                     ^                                        
[0m      | [0;32m                      {
[0m[1msrc/core/public.c:524:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  524 |       if (need_more_lines) ASSERT(lines.count != 0, OOPS);[0m
      | [0;1;32m                          ^                               
[0m      | [0;32m                           {
[0m[1msrc/core/public.c:524:28: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  524 |       if (need_more_lines) ASSERT(lines.count != 0, OOPS);[0m
      | [0;1;32m                           ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:524:28: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  524 |       if (need_more_lines) ASSERT(lines.count != 0, OOPS);[0m
      | [0;1;32m                           ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:530:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  530 |     if (lines.count != 0) pkByteBufferWrite(&lines, vm, '\n');[0m
      | [0;1;32m                         ^                                    
[0m      | [0;32m                          {
[0m[1msrc/core/public.c:539:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  539 |       ASSERT(lines.count > 0 && lines.data[lines.count - 1] == '\0', OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:539:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  539 |       ASSERT(lines.count > 0 && lines.data[lines.count - 1] == '\0', OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:551:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  551 |     if (result != PK_RESULT_SUCCESS) continue;[0m
      | [0;1;32m                                    ^         
[0m      | [0;32m                                     {
[0m[1msrc/core/public.c:555:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  555 |     ASSERT(_main != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:555:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  555 |     ASSERT(_main != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:570:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  570 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:570:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  570 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:571:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  571 |   VM_SET_ERROR(vm, newString(vm, message));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:571:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  571 |   VM_SET_ERROR(vm, newString(vm, message));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:577:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  577 |   VM_SET_ERROR(vm, newStringVaArgs(vm, fmt, args));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:577:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  577 |   VM_SET_ERROR(vm, newStringVaArgs(vm, fmt, args));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:582:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  582 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:582:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  582 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:583:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  583 |   ASSERT(IS_OBJ_TYPE(vm->fiber->self, OBJ_INST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:583:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  583 |   ASSERT(IS_OBJ_TYPE(vm->fiber->self, OBJ_INST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:585:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  585 |   ASSERT(inst->native != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:585:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  585 |   ASSERT(inst->native != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:590:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  590 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:590:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  590 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:595:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  595 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:595:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  595 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:596:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  596 |   ASSERT(min <= max, "invalid argc range (min > max).");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:596:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  596 |   ASSERT(min <= max, "invalid argc range (min > max).");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:599:35: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  599 |     char buff[STR_INT_BUFF_SIZE]; sprintf(buff, "%d", min);[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1msrc/core/public.c:599:35: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  599 |     char buff[STR_INT_BUFF_SIZE]; sprintf(buff, "%d", min);[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1msrc/core/public.c:600:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  600 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected at least %s argument(s).",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:600:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  600 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected at least %s argument(s).",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:605:35: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  605 |     char buff[STR_INT_BUFF_SIZE]; sprintf(buff, "%d", max);[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1msrc/core/public.c:605:35: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  605 |     char buff[STR_INT_BUFF_SIZE]; sprintf(buff, "%d", max);[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1msrc/core/public.c:606:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  606 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected at most %s argument(s).",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:606:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  606 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected at most %s argument(s).",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:626:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  626 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:626:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  626 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:627:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  627 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:627:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  627 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:631:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  631 |     ERR_INVALID_SLOT_TYPE(slot, "Boolean");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:631:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  631 |     ERR_INVALID_SLOT_TYPE(slot, "Boolean");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:631:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  631 |     ERR_INVALID_SLOT_TYPE(slot, "Boolean");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:631:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  631 |     ERR_INVALID_SLOT_TYPE(slot, "Boolean");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:635:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  635 |   if (value) *value = AS_BOOL(val);[0m
      | [0;1;32m            ^                      
[0m      | [0;32m             {
[0m[1msrc/core/public.c:640:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  640 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:640:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  640 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:641:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  641 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:641:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  641 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:645:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  645 |     ERR_INVALID_SLOT_TYPE(slot, "Number");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:645:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  645 |     ERR_INVALID_SLOT_TYPE(slot, "Number");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:645:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  645 |     ERR_INVALID_SLOT_TYPE(slot, "Number");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:645:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  645 |     ERR_INVALID_SLOT_TYPE(slot, "Number");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:649:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  649 |   if (value) *value = AS_NUM(val);[0m
      | [0;1;32m            ^                     
[0m      | [0;32m             {
[0m[1msrc/core/public.c:654:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  654 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:654:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  654 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:655:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  655 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:655:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  655 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:658:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  658 |   if (!pkValidateSlotNumber(vm, slot, &n)) return false;[0m
      | [0;1;32m                                          ^             
[0m      | [0;32m                                           {
[0m[1msrc/core/public.c:661:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  661 |     VM_SET_ERROR(vm, newString(vm, "Expected an integer got float."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:661:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  661 |     VM_SET_ERROR(vm, newString(vm, "Expected an integer got float."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:665:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  665 |   if (value) *value = (int32_t) n;[0m
      | [0;1;32m            ^                     
[0m      | [0;32m             {
[0m[1msrc/core/public.c:671:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  671 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:671:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  671 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:672:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  672 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:672:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  672 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:676:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  676 |     ERR_INVALID_SLOT_TYPE(slot, "String");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:676:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  676 |     ERR_INVALID_SLOT_TYPE(slot, "String");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:676:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  676 |     ERR_INVALID_SLOT_TYPE(slot, "String");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:676:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  676 |     ERR_INVALID_SLOT_TYPE(slot, "String");[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:680:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  680 |   if (value) *value = str->data;[0m
      | [0;1;32m            ^                   
[0m      | [0;32m             {
[0m[1msrc/core/public.c:681:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  681 |   if (length) *length = str->length;[0m
      | [0;1;32m             ^                      
[0m      | [0;32m              {
[0m[1msrc/core/public.c:686:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  686 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:686:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  686 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:687:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  687 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:687:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  687 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:689:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  689 |     ERR_INVALID_SLOT_TYPE(slot, getPkVarTypeName(type));[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:689:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  689 |     ERR_INVALID_SLOT_TYPE(slot, getPkVarTypeName(type));[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:689:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  689 |     ERR_INVALID_SLOT_TYPE(slot, getPkVarTypeName(type));[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:689:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  689 |     ERR_INVALID_SLOT_TYPE(slot, getPkVarTypeName(type));[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:697:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  697 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:697:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  697 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:698:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  698 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:698:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  698 |   VALIDATE_SLOT_INDEX(slot);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:699:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  699 |   VALIDATE_SLOT_INDEX(cls);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:699:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  699 |   VALIDATE_SLOT_INDEX(cls);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:704:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  704 |     if (VM_HAS_ERROR(vm)) return false;[0m
      | [0;1;32m                         ^             
[0m      | [0;32m                          {
[0m[1msrc/core/public.c:705:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  705 |     ERR_INVALID_SLOT_TYPE(slot, ((Class*)AS_OBJ(class_))->name->data);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:705:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  705 |     ERR_INVALID_SLOT_TYPE(slot, ((Class*)AS_OBJ(class_))->name->data);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:619:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  619 |     VM_SET_ERROR(vm, stringFormat(vm, "Expected a '$' at slot $.", \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  620 |                                       ty_name, buff));             \[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:705:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  705 |     ERR_INVALID_SLOT_TYPE(slot, ((Class*)AS_OBJ(class_))->name->data);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:705:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  705 |     ERR_INVALID_SLOT_TYPE(slot, ((Class*)AS_OBJ(class_))->name->data);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:618:5: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_INVALID_SLOT_TYPE'[0m
  618 |     sprintf(buff, "%d", slot);                                     \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/public.c:713:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  713 |   CHECK_ARG_NULL(val);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:713:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  713 |   CHECK_ARG_NULL(val);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:714:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  714 |   VALIDATE_SLOT_INDEX(inst);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:714:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  714 |   VALIDATE_SLOT_INDEX(inst);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:715:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  715 |   VALIDATE_SLOT_INDEX(cls);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:715:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  715 |   VALIDATE_SLOT_INDEX(cls);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:722:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  722 |   if (vm->fiber == NULL) vm->fiber = newFiber(vm, NULL);[0m
      | [0;1;32m                        ^                               
[0m      | [0;32m                         {
[0m[1msrc/core/public.c:728:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  728 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:728:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  728 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:733:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  733 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:733:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  733 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:734:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  734 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:734:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  734 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:739:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  739 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:739:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  739 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:740:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  740 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:740:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  740 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:746:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  746 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:746:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  746 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:747:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  747 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:747:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  747 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:749:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  749 |   ASSERT(IS_NUM(value), "Slot value wasn't a Number.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:749:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  749 |   ASSERT(IS_NUM(value), "Slot value wasn't a Number.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:754:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  754 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:754:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  754 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:755:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  755 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:755:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  755 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:757:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  757 |   ASSERT(IS_OBJ_TYPE(value, OBJ_STRING), "Slot value wasn't a String.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:757:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  757 |   ASSERT(IS_OBJ_TYPE(value, OBJ_STRING), "Slot value wasn't a String.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:758:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  758 |   if (length != NULL) *length = ((String*)AS_OBJ(value))->length;[0m
      | [0;1;32m                     ^                                           
[0m      | [0;32m                      {
[0m[1msrc/core/public.c:763:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  763 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:763:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  763 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:764:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  764 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:764:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  764 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:769:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  769 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:769:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  769 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:770:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  770 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:770:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  770 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:773:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  773 |   ASSERT(IS_OBJ_TYPE(value, OBJ_INST), "Slot value wasn't an Instance");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:773:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  773 |   ASSERT(IS_OBJ_TYPE(value, OBJ_INST), "Slot value wasn't an Instance");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:778:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  778 |   ASSERT(inst->native != NULL, "Slot value wasn't a Native Instance");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:778:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  778 |   ASSERT(inst->native != NULL, "Slot value wasn't a Native Instance");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:784:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  784 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:784:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  784 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:785:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  785 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:785:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  785 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:790:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  790 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:790:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  790 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:791:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  791 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:791:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  791 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:796:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  796 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:796:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  796 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:797:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  797 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:797:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  797 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:802:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  802 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:802:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  802 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:803:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  803 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:803:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  803 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:809:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  809 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:809:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  809 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:810:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  810 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:810:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  810 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:823:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  823 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:823:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  823 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:824:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  824 |   CHECK_ARG_NULL(handle);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:824:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  824 |   CHECK_ARG_NULL(handle);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:825:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  825 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:825:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  825 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:830:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  830 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:830:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  830 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:831:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  831 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:831:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  831 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:833:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  833 |   ASSERT(!IS_OBJ(value) || isObjectHashable(AS_OBJ(value)->type), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:833:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  833 |   ASSERT(!IS_OBJ(value) || isObjectHashable(AS_OBJ(value)->type), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:838:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  838 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:838:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  838 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:839:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  839 |   CHECK_ARG_NULL(name);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:839:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  839 |   CHECK_ARG_NULL(name);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:840:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  840 |   VALIDATE_SLOT_INDEX(instance);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:840:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  840 |   VALIDATE_SLOT_INDEX(instance);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:841:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  841 |   VALIDATE_SLOT_INDEX(value);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:841:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  841 |   VALIDATE_SLOT_INDEX(value);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:853:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  853 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:853:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  853 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:854:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  854 |   CHECK_ARG_NULL(name);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:854:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  854 |   CHECK_ARG_NULL(name);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:855:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  855 |   VALIDATE_SLOT_INDEX(instance);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:855:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  855 |   VALIDATE_SLOT_INDEX(instance);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:856:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  856 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:856:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  856 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:868:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  868 |   if (VM_HAS_ERROR(vm)) return VAR_NULL;[0m
      | [0;1;32m                       ^                
[0m      | [0;32m                        {
[0m[1msrc/core/public.c:870:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  870 |   if (IS_OBJ(instance)) vmPushTempRef(vm, AS_OBJ(instance)); // instance.[0m
      | [0;1;32m                       ^                                                 
[0m      | [0;32m                        {
[0m[1msrc/core/public.c:875:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  875 |     if (cls == NULL) break;[0m
      | [0;1;32m                    ^      
[0m      | [0;32m                     {
[0m[1msrc/core/public.c:879:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  879 |   if (ctor != NULL) vmCallMethod(vm, instance, ctor, argc, argv, NULL);[0m
      | [0;1;32m                   ^                                                   
[0m      | [0;32m                    {
[0m[1msrc/core/public.c:880:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  880 |   if (IS_OBJ(instance)) vmPopTempRef(vm); // instance.[0m
      | [0;1;32m                       ^                              
[0m      | [0;32m                        {
[0m[1msrc/core/public.c:886:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  886 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:886:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  886 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:887:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  887 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:887:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  887 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:890:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  890 |     VALIDATE_SLOT_INDEX(argv);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:890:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  890 |     VALIDATE_SLOT_INDEX(argv);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:891:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  891 |     VALIDATE_SLOT_INDEX(argv + argc - 1);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:891:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  891 |     VALIDATE_SLOT_INDEX(argv + argc - 1);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:894:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  894 |   ASSERT(IS_OBJ_TYPE(SLOT(cls), OBJ_CLASS), "Slot value wasn't a class.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:894:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  894 |   ASSERT(IS_OBJ_TYPE(SLOT(cls), OBJ_CLASS), "Slot value wasn't a class.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:903:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  903 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:903:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  903 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:904:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  904 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:904:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  904 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:910:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  910 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:910:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  910 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:911:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  911 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:911:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  911 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:917:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  917 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:917:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  917 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:918:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  918 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:918:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  918 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:924:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  924 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:924:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  924 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:925:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  925 |   VALIDATE_SLOT_INDEX(list);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:925:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  925 |   VALIDATE_SLOT_INDEX(list);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:926:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  926 |   VALIDATE_SLOT_INDEX(value);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:926:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  926 |   VALIDATE_SLOT_INDEX(value);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:928:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  928 |   ASSERT(IS_OBJ_TYPE(SLOT(list), OBJ_LIST), "Slot value wasn't a List");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:928:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  928 |   ASSERT(IS_OBJ_TYPE(SLOT(list), OBJ_LIST), "Slot value wasn't a List");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:930:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  930 |   if (index < 0) index = l->elements.count + index + 1;[0m
      | [0;1;32m                ^                                      
[0m      | [0;32m                 {
[0m[1msrc/core/public.c:933:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  933 |     VM_SET_ERROR(vm, newString(vm, "Index out of bounds."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:933:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  933 |     VM_SET_ERROR(vm, newString(vm, "Index out of bounds."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:942:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  942 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:942:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  942 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:943:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  943 |   VALIDATE_SLOT_INDEX(list);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:943:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  943 |   VALIDATE_SLOT_INDEX(list);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:944:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  944 |   if (popped >= 0) VALIDATE_SLOT_INDEX(popped);[0m
      | [0;1;32m                  ^                            
[0m      | [0;32m                   {
[0m[1msrc/core/public.c:944:20: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  944 |   if (popped >= 0) VALIDATE_SLOT_INDEX(popped);[0m
      | [0;1;32m                   ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:944:20: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  944 |   if (popped >= 0) VALIDATE_SLOT_INDEX(popped);[0m
      | [0;1;32m                   ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:946:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  946 |   ASSERT(IS_OBJ_TYPE(SLOT(list), OBJ_LIST), "Slot value wasn't a List");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:946:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  946 |   ASSERT(IS_OBJ_TYPE(SLOT(list), OBJ_LIST), "Slot value wasn't a List");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:948:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  948 |   if (index < 0) index += l->elements.count;[0m
      | [0;1;32m                ^                           
[0m      | [0;32m                 {
[0m[1msrc/core/public.c:951:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  951 |     VM_SET_ERROR(vm, newString(vm, "Index out of bounds."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:951:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  951 |     VM_SET_ERROR(vm, newString(vm, "Index out of bounds."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:956:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  956 |   if (popped >= 0) SET_SLOT(popped, p);[0m
      | [0;1;32m                  ^
[0m[1msrc/core/public.c:961:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  961 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:961:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  961 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:962:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  962 |   VALIDATE_SLOT_INDEX(list);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:962:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  962 |   VALIDATE_SLOT_INDEX(list);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:964:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  964 |   ASSERT(IS_OBJ_TYPE(SLOT(list), OBJ_LIST), "Slot value wasn't a List");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:964:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  964 |   ASSERT(IS_OBJ_TYPE(SLOT(list), OBJ_LIST), "Slot value wasn't a List");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:971:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  971 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:971:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  971 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:972:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  972 |   ASSERT(IS_OBJ_TYPE(SLOT(fn), OBJ_CLOSURE), "Slot value wasn't a function");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:972:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  972 |   ASSERT(IS_OBJ_TYPE(SLOT(fn), OBJ_CLOSURE), "Slot value wasn't a function");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:974:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  974 |     VALIDATE_SLOT_INDEX(argv);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:974:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  974 |     VALIDATE_SLOT_INDEX(argv);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:975:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  975 |     VALIDATE_SLOT_INDEX(argv + argc - 1);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:975:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  975 |     VALIDATE_SLOT_INDEX(argv + argc - 1);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:977:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  977 |   if (ret >= 0) VALIDATE_SLOT_INDEX(ret);[0m
      | [0;1;32m               ^                         
[0m      | [0;32m                {
[0m[1msrc/core/public.c:977:17: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  977 |   if (ret >= 0) VALIDATE_SLOT_INDEX(ret);[0m
      | [0;1;32m                ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:977:17: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  977 |   if (ret >= 0) VALIDATE_SLOT_INDEX(ret);[0m
      | [0;1;32m                ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:983:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  983 |     if (ret >= 0) SET_SLOT(ret, inst);[0m
      | [0;1;32m                 ^
[0m[1msrc/core/public.c:994:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  994 |     ASSERT(!func->fn->is_method, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:994:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  994 |     ASSERT(!func->fn->is_method, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:999:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  999 |     if (ret >= 0) SET_SLOT(ret, retval);[0m
      | [0;1;32m                 ^
[0m[1msrc/core/public.c:1003:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1003 |   VM_SET_ERROR(vm, newString(vm, "Expected a Callable."));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1003:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1003 |   VM_SET_ERROR(vm, newString(vm, "Expected a Callable."));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1009:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1009 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1009:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1009 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1010:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1010 |   CHECK_ARG_NULL(method);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1010:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1010 |   CHECK_ARG_NULL(method);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ARG_NULL'[0m
   45 |   ASSERT((name) != NULL, "Argument " #name " was NULL.");[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1011:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1011 |   VALIDATE_SLOT_INDEX(instance);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1011:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1011 |   VALIDATE_SLOT_INDEX(instance);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1013:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1013 |     VALIDATE_SLOT_INDEX(argv);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1013:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1013 |     VALIDATE_SLOT_INDEX(argv);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1014:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1014 |     VALIDATE_SLOT_INDEX(argv + argc - 1);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1014:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1014 |     VALIDATE_SLOT_INDEX(argv + argc - 1);[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1016:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1016 |   if (ret >= 0) VALIDATE_SLOT_INDEX(ret);[0m
      | [0;1;32m               ^                         
[0m      | [0;32m                {
[0m[1msrc/core/public.c:1016:17: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1016 |   if (ret >= 0) VALIDATE_SLOT_INDEX(ret);[0m
      | [0;1;32m                ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1016:17: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1016 |   if (ret >= 0) VALIDATE_SLOT_INDEX(ret);[0m
      | [0;1;32m                ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1025:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1025 |   if (VM_HAS_ERROR(vm)) return false;[0m
      | [0;1;32m                       ^             
[0m      | [0;32m                        {
[0m[1msrc/core/public.c:1031:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1031 |     if (ret >= 0) SET_SLOT(ret, inst);[0m
      | [0;1;32m                 ^
[0m[1msrc/core/public.c:1039:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1039 |     if (ret >= 0) SET_SLOT(ret, retval);[0m
      | [0;1;32m                 ^
[0m[1msrc/core/public.c:1043:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1043 |   VM_SET_ERROR(vm, stringFormat(vm, "Instance has no method named '$'.",[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1043:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1043 |   VM_SET_ERROR(vm, stringFormat(vm, "Instance has no method named '$'.",[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1049:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1049 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1049:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1049 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1050:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1050 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1050:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1050 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1055:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1055 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1055:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1055 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1056:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1056 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1056:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1056 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1068:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1068 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1068:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1068 |   CHECK_FIBER_EXISTS(vm);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:63:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_FIBER_EXISTS'[0m
   63 |     ASSERT(vm->fiber != NULL,                                            \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   64 |            "No fiber exists. Did you forget to call pkReserveSlots()?"); \[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1069:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1069 |   VALIDATE_SLOT_INDEX(instance);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1069:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1069 |   VALIDATE_SLOT_INDEX(instance);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1070:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1070 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1070:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1070 |   VALIDATE_SLOT_INDEX(index);[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:56:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_SLOT_INDEX'[0m
   56 |     ASSERT(index >= 0, "Slot index was negative.");                          \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1096:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1096 |   fprintf(stderr, "%s", text);[0m
      | [0;1;32m  ^~~~~~~
[0m[1msrc/core/public.c:1096:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1096 |   fprintf(stderr, "%s", text);[0m
      | [0;1;32m  ^~~~~~~
[0m[1msrc/core/public.c:1100:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1100 |   fprintf(stdout, "%s", text);[0m
      | [0;1;32m  ^~~~~~~
[0m[1msrc/core/public.c:1100:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1100 |   fprintf(stdout, "%s", text);[0m
      | [0;1;32m  ^~~~~~~
[0m[1msrc/core/public.c:1110:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1110 |     if (c == '\n') break;[0m
      | [0;1;32m                  ^      
[0m      | [0;32m                   {
[0m[1msrc/core/public.c:1116:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1116 |   memcpy(str, buff.data, buff.count);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/public.c:1116:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1116 |   memcpy(str, buff.data, buff.count);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/public.c:1124:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1124 |   if (file == NULL) return NULL;[0m
      | [0;1;32m                   ^            
[0m      | [0;32m                    {
[0m[1msrc/core/public.c:1135:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1135 |   ASSERT(buff != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1135:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1135 |   ASSERT(buff != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1139:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1139 |   ASSERT(read <= file_size, "fread() failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1139:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1139 |   ASSERT(read <= file_size, "fread() failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/public.c:1140:3: [0m[0;1;35mwarning: [0m[1mPotential out of bound access to the region with tainted index [clang-analyzer-security.ArrayBound][0m
 1140 |   buff[read] = '\0';[0m
      | [0;1;32m  ^~~~~~~~~~
[0m[1msrc/core/public.c:1123:16: [0m[0;1;36mnote: [0mTaint originated here[0m
 1123 |   FILE* file = fopen(path, "r");[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:1123:16: [0m[0;1;36mnote: [0mTaint propagated to the return value[0m
 1123 |   FILE* file = fopen(path, "r");[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:1123:16: [0m[0;1;36mnote: [0mAssuming that 'fopen' is successful[0m
 1123 |   FILE* file = fopen(path, "r");[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:1124:7: [0m[0;1;36mnote: [0m'file' is not equal to NULL[0m
 1124 |   if (file == NULL) return NULL;[0m
      | [0;1;32m      ^~~~
[0m[1msrc/core/public.c:1124:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1124 |   if (file == NULL) return NULL;[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:1130:22: [0m[0;1;36mnote: [0mAssuming that 'ftell' is successful[0m
 1130 |   size_t file_size = ftell(file);[0m
      | [0;1;32m                     ^~~~~~~~~~~
[0m[1msrc/core/public.c:1135:10: [0m[0;1;36mnote: [0mAssuming 'buff' is not equal to null[0m
 1135 |   ASSERT(buff != NULL, "pkRealloc failed.");[0m
      | [0;1;32m         ^
[0m[1msrc/core/common.h:58:45: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ~~~~~~~~~^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:34:11: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m          ^~~~~~~~~
[0m[1msrc/core/public.c:1135:10: [0m[0;1;36mnote: [0m'buff' is not equal to null[0m
 1135 |   ASSERT(buff != NULL, "pkRealloc failed.");[0m
      | [0;1;32m         ^
[0m[1msrc/core/common.h:58:45: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                            ^~~~~~~~~
[0m[1msrc/core/common.h:34:11: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m          ^~~~~~~~~
[0m[1msrc/core/public.c:1135:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1135 |   ASSERT(buff != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^
[0m[1msrc/core/common.h:34:5: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:1135:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
 1135 |   ASSERT(buff != NULL, "pkRealloc failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^
[0m[1msrc/core/common.h:33:3: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   33 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:1138:17: [0m[0;1;36mnote: [0mTaint propagated to the return value[0m
 1138 |   size_t read = fread(buff, sizeof(char), file_size, file);[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:1138:17: [0m[0;1;36mnote: [0mAssuming that 'fread' is successful[0m
 1138 |   size_t read = fread(buff, sizeof(char), file_size, file);[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/public.c:1139:10: [0m[0;1;36mnote: [0m'read' is <= 'file_size'[0m
 1139 |   ASSERT(read <= file_size, "fread() failed.");[0m
      | [0;1;32m         ^
[0m[1msrc/core/common.h:58:45: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                            ^~~~~~~~~
[0m[1msrc/core/common.h:34:11: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m          ^~~~~~~~~
[0m[1msrc/core/public.c:1139:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1139 |   ASSERT(read <= file_size, "fread() failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^
[0m[1msrc/core/common.h:34:5: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m    ^
[0m[1msrc/core/public.c:1139:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
 1139 |   ASSERT(read <= file_size, "fread() failed.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^
[0m[1msrc/core/common.h:33:3: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   33 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/public.c:1140:3: [0m[0;1;36mnote: [0mAccess of the region with a tainted index that may be too large[0m
 1140 |   buff[read] = '\0';[0m
      | [0;1;32m  ^~~~~~~~~~
[0m259 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[10/18][54.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpyz5vhjky.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/core/utils.c
[1msrc/core/utils.c:68:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |   if (_BETWEEN(0, value, 9)) return '0' + value;[0m
      | [0;1;32m                            ^                   
[0m      | [0;32m                             {
[0m[1msrc/core/utils.c:166:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  166 |     if (*c == '\0') return INVALID_NUMERIC_STRING;[0m
      | [0;1;32m                   ^                              
[0m      | [0;32m                    {
[0m[1msrc/core/utils.c:174:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  174 |       if (!IS_BIN_CHAR(*c)) return INVALID_NUMERIC_STRING;[0m
      | [0;1;32m                           ^                              
[0m      | [0;32m                            {
[0m[1msrc/core/utils.c:192:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  192 |     if (*c == '\0') return INVALID_NUMERIC_STRING;[0m
      | [0;1;32m                   ^                              
[0m      | [0;32m                    {
[0m[1msrc/core/utils.c:200:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  200 |       if (!IS_HEX_CHAR(*c)) return INVALID_NUMERIC_STRING;[0m
      | [0;1;32m                           ^                              
[0m      | [0;32m                            {
[0m[1msrc/core/utils.c:216:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  216 |   if (*str == '\0') return INVALID_NUMERIC_STRING;[0m
      | [0;1;32m                   ^                              
[0m      | [0;32m                    {
[0m[1msrc/core/utils.c:221:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  221 |     while (IS_DIGIT(*c)) c++;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                         {
[0m[1msrc/core/utils.c:224:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  224 |       while (IS_DIGIT(*c)) c++;[0m
      | [0;1;32m                          ^    
[0m      | [0;32m                           {
[0m[1msrc/core/utils.c:227:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  227 |     if (*c == '\0') break; // Done.[0m
      | [0;1;32m                   ^               
[0m      | [0;32m                    {
[0m[1msrc/core/utils.c:231:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  231 |       if (*c == '+' || *c == '-') c++;[0m
      | [0;1;32m                                 ^    
[0m      | [0;32m                                  {
[0m[1msrc/core/utils.c:233:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  233 |       if (!IS_DIGIT(*c)) return INVALID_NUMERIC_STRING;[0m
      | [0;1;32m                        ^                              
[0m      | [0;32m                         {
[0m[1msrc/core/utils.c:234:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  234 |       while (IS_DIGIT(*c)) c++;[0m
      | [0;1;32m                          ^    
[0m      | [0;32m                           {
[0m[1msrc/core/utils.c:235:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  235 |       if (*c != '\0') return INVALID_NUMERIC_STRING;[0m
      | [0;1;32m                     ^                              
[0m      | [0;32m                      {
[0m[1msrc/core/utils.c:238:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  238 |     if (*c != '\0') return INVALID_NUMERIC_STRING;[0m
      | [0;1;32m                   ^                              
[0m      | [0;32m                    {
[0m[1msrc/core/utils.c:244:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  244 |   if (errno == ERANGE) return "Numeric string is too long.";[0m
      | [0;1;32m                      ^                                     
[0m      | [0;32m                       {
[0m[1msrc/core/utils.c:260:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  260 |   if (value <= 0x7f) return 1;[0m
      | [0;1;32m                    ^         
[0m      | [0;32m                     {
[0m[1msrc/core/utils.c:261:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  261 |   if (value <= 0x7ff) return 2;[0m
      | [0;1;32m                     ^         
[0m      | [0;32m                      {
[0m[1msrc/core/utils.c:262:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  262 |   if (value <= 0xffff) return 3;[0m
      | [0;1;32m                      ^         
[0m      | [0;32m                       {
[0m[1msrc/core/utils.c:263:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  263 |   if (value <= 0x10ffff) return 4;[0m
      | [0;1;32m                        ^         
[0m      | [0;32m                         {
[0m[1msrc/core/utils.c:272:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  272 |   if ((byte >> 7) == 0b0) return 1;[0m
      | [0;1;32m                         ^         
[0m      | [0;32m                          {
[0m[1msrc/core/utils.c:273:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  273 |   if ((byte >> 6) == 0b10) return 1; //< continuation byte[0m
      | [0;1;32m                          ^                               
[0m      | [0;32m                           {
[0m[1msrc/core/utils.c:274:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  274 |   if ((byte >> 5) == 0b110) return 2;[0m
      | [0;1;32m                           ^         
[0m      | [0;32m                            {
[0m[1msrc/core/utils.c:275:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  275 |   if ((byte >> 4) == 0b1110) return 3;[0m
      | [0;1;32m                            ^         
[0m      | [0;32m                             {
[0m[1msrc/core/utils.c:276:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  276 |   if ((byte >> 3) == 0b11110) return 4;[0m
      | [0;1;32m                             ^         
[0m      | [0;32m                              {
[0m[1msrc/core/utils.c:357:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  357 |     if ((*bytes & 0b11000000) != 0b10000000) return -1;[0m
      | [0;1;32m                                            ^          
[0m      | [0;32m                                             {
[0m27 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[11/18][101.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpa47gvqv5.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/core/vm.c
[1msrc/core/vm.c:20:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   20 |   if (handle->next != NULL) handle->next->prev = handle;[0m
      | [0;1;32m                           ^                            
[0m      | [0;32m                            {
[0m[1msrc/core/vm.c:40:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   40 |   ASSERT(!vm->collecting_garbage || new_size == 0,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:40:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   40 |   ASSERT(!vm->collecting_garbage || new_size == 0,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:44:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   44 |     ASSERT(vm->collecting_garbage == false, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:44:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   44 |     ASSERT(vm->collecting_garbage == false, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:54:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   54 |   ASSERT(obj != NULL, "Cannot reference to NULL.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:54:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   54 |   ASSERT(obj != NULL, "Cannot reference to NULL.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:55:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   55 |   ASSERT(vm->temp_reference_count < MAX_TEMP_REFERENCE,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:55:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   55 |   ASSERT(vm->temp_reference_count < MAX_TEMP_REFERENCE,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:61:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   61 |   ASSERT(vm->temp_reference_count > 0,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:61:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   61 |   ASSERT(vm->temp_reference_count > 0,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |   ASSERT((((module->name != NULL) && IS_STR_EQ(module->name, key)) ||[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:67:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   67 |   ASSERT((((module->name != NULL) && IS_STR_EQ(module->name, key)) ||[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:77:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   77 |   if (IS_UNDEF(module)) return NULL;[0m
      | [0;1;32m                       ^            
[0m      | [0;32m                        {
[0m[1msrc/core/vm.c:78:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   78 |   ASSERT(AS_OBJ(module)->type == OBJ_MODULE, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:78:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   78 |   ASSERT(AS_OBJ(module)->type == OBJ_MODULE, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:93:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   93 |     if (vm->builtin_classes[i] == NULL) continue;[0m
      | [0;1;32m                                       ^         
[0m      | [0;32m                                        {
[0m[1msrc/core/vm.c:135:10: [0m[0;1;35mwarning: [0m[1mValue stored to 'bytes_allocated' during its initialization is never read [clang-analyzer-deadcode.DeadStores][0m
  135 |   size_t bytes_allocated = vm->bytes_allocated;[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:135:10: [0m[0;1;36mnote: [0mValue stored to 'bytes_allocated' during its initialization is never read[0m
  135 |   size_t bytes_allocated = vm->bytes_allocated;[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:161:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  161 |   ASSERT(bytes_allocated = vm->bytes_allocated, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:161:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  161 |   ASSERT(bytes_allocated = vm->bytes_allocated, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:168:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  168 |   if (vm->next_gc < vm->min_heap_size) vm->next_gc = vm->min_heap_size;[0m
      | [0;1;32m                                      ^                                
[0m      | [0;32m                                       {
[0m[1msrc/core/vm.c:178:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  178 |   ASSERT(fiber->closure->fn->arity >= -1,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:178:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  178 |   ASSERT(fiber->closure->fn->arity >= -1,[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:183:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  183 |     sprintf(buff, "%d", fiber->closure->fn->arity);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:183:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  183 |     sprintf(buff, "%d", fiber->closure->fn->arity);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:184:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  184 |     _ERR_FAIL(stringFormat(vm, "Expected exactly $ argument(s) for "[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:184:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  184 |     _ERR_FAIL(stringFormat(vm, "Expected exactly $ argument(s) for "[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:190:23: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  190 |       case FIBER_NEW: UNREACHABLE();[0m
      | [0;1;32m                      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:190:23: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  190 |       case FIBER_NEW: UNREACHABLE();[0m
      | [0;1;32m                      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:190:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  190 |       case FIBER_NEW: UNREACHABLE();[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:192:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  192 |         _ERR_FAIL(newString(vm, "The fiber has already been running."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:192:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  192 |         _ERR_FAIL(newString(vm, "The fiber has already been running."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:192:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  192 |         _ERR_FAIL(newString(vm, "The fiber has already been running."));[0m
      | [0;1;32m        ^                                                              
[0m      | [0;32m        {                                                              ;} 
[0m[1msrc/core/vm.c:172:3: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  172 |   do {                                             \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:194:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  194 |         _ERR_FAIL(newString(vm, "Cannot run a fiber which is yielded, use "[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:194:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  194 |         _ERR_FAIL(newString(vm, "Cannot run a fiber which is yielded, use "[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:194:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  194 |         _ERR_FAIL(newString(vm, "Cannot run a fiber which is yielded, use "[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  195 |           "fiber_resume() instead."));[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1msrc/core/vm.c:172:3: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  172 |   do {                                             \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:197:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  197 |         _ERR_FAIL(newString(vm, "The fiber has done running."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:197:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  197 |         _ERR_FAIL(newString(vm, "The fiber has done running."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:197:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  197 |         _ERR_FAIL(newString(vm, "The fiber has done running."));[0m
      | [0;1;32m        ^                                                      
[0m      | [0;32m        {                                                      ;} 
[0m[1msrc/core/vm.c:172:3: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  172 |   do {                                             \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:199:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  199 |     UNREACHABLE();[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:199:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  199 |     UNREACHABLE();[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:202:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  202 |   ASSERT(fiber->stack != NULL && fiber->sp == fiber->stack + 1, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:202:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  202 |   ASSERT(fiber->stack != NULL && fiber->sp == fiber->stack + 1, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:203:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  203 |   ASSERT(fiber->ret == fiber->stack, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:203:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  203 |   ASSERT(fiber->ret == fiber->stack, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:206:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  206 |   ASSERT((fiber->stack + fiber->stack_size) - fiber->sp >= argc, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:206:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  206 |   ASSERT((fiber->stack + fiber->stack_size) - fiber->sp >= argc, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:218:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  218 |   if (fiber->closure->fn->is_native) return true;[0m
      | [0;1;32m                                    ^            
[0m      | [0;32m                                     {
[0m[1msrc/core/vm.c:222:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  222 |   ASSERT(fiber->frame_count == 1, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:222:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  222 |   ASSERT(fiber->frame_count == 1, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:223:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  223 |   ASSERT(fiber->frames[0].rbp == fiber->ret, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:223:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  223 |   ASSERT(fiber->frames[0].rbp == fiber->ret, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:237:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  237 |         _ERR_FAIL(newString(vm, "The fiber hasn't started. call fiber_run() "[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:237:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  237 |         _ERR_FAIL(newString(vm, "The fiber hasn't started. call fiber_run() "[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:237:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  237 |         _ERR_FAIL(newString(vm, "The fiber hasn't started. call fiber_run() "[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  238 |           "to start."));[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1msrc/core/vm.c:172:3: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  172 |   do {                                             \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:240:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  240 |         _ERR_FAIL(newString(vm, "The fiber has already been running."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:240:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  240 |         _ERR_FAIL(newString(vm, "The fiber has already been running."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:240:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  240 |         _ERR_FAIL(newString(vm, "The fiber has already been running."));[0m
      | [0;1;32m        ^                                                              
[0m      | [0;32m        {                                                              ;} 
[0m[1msrc/core/vm.c:172:3: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  172 |   do {                                             \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:241:27: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  241 |       case FIBER_YIELDED: UNREACHABLE();[0m
      | [0;1;32m                          ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:241:27: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  241 |       case FIBER_YIELDED: UNREACHABLE();[0m
      | [0;1;32m                          ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:241:27: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  241 |       case FIBER_YIELDED: UNREACHABLE();[0m
      | [0;1;32m                          ^            
[0m      | [0;32m                          {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:243:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  243 |         _ERR_FAIL(newString(vm, "The fiber has done running."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:243:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  243 |         _ERR_FAIL(newString(vm, "The fiber has done running."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:173:28: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  173 |     if (vm->fiber != NULL) VM_SET_ERROR(vm, msg);  \[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:243:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  243 |         _ERR_FAIL(newString(vm, "The fiber has done running."));[0m
      | [0;1;32m        ^                                                      
[0m      | [0;32m        {                                                      ;} 
[0m[1msrc/core/vm.c:172:3: [0m[0;1;36mnote: [0mexpanded from macro '_ERR_FAIL'[0m
  172 |   do {                                             \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:245:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  245 |     UNREACHABLE();[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:245:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  245 |     UNREACHABLE();[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:252:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  252 |   ASSERT(fiber->frame_count != 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:252:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  252 |   ASSERT(fiber->frame_count != 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:253:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  253 |   ASSERT((fiber->stack + fiber->stack_size) - fiber->sp >= 2, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:253:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  253 |   ASSERT((fiber->stack + fiber->stack_size) - fiber->sp >= 2, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:256:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  256 |   if (value == NULL) *fiber->ret = VAR_NULL;[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  257 |   else *fiber->ret = *value;[0m
      | [0;32m  } 
[0m[1msrc/core/vm.c:257:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  257 |   else *fiber->ret = *value;[0m
      | [0;1;32m      ^                     
[0m      | [0;32m       {
[0m[1msrc/core/vm.c:275:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  275 |     if (value == NULL) *caller->ret = VAR_NULL;[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  276 |     else *caller->ret = *value;[0m
      | [0;32m    } 
[0m[1msrc/core/vm.c:276:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  276 |     else *caller->ret = *value;[0m
      | [0;1;32m        ^                      
[0m      | [0;32m         {
[0m[1msrc/core/vm.c:287:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  287 |   ASSERT(argc >= 0, "argc cannot be negative.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:287:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  287 |   ASSERT(argc >= 0, "argc cannot be negative.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:288:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  288 |   ASSERT(argc == 0 || argv != NULL, "argv was NULL when argc > 0.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:288:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  288 |   ASSERT(argc == 0 || argv != NULL, "argv was NULL when argc > 0.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:304:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  304 |   if (last != NULL) vmPushTempRef(vm, &last->_super); // last.[0m
      | [0;1;32m                   ^                                          
[0m      | [0;32m                    {
[0m[1msrc/core/vm.c:308:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  308 |       ASSERT(fiber->closure->fn->native != NULL, "Native function was NULL");[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:308:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  308 |       ASSERT(fiber->closure->fn->native != NULL, "Native function was NULL");[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:312:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  312 |         if (last != NULL) last->error = vm->fiber->error;[0m
      | [0;1;32m                         ^                               
[0m      | [0;32m                          {
[0m[1msrc/core/vm.c:323:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  323 |   if (last != NULL) vmPopTempRef(vm); // last.[0m
      | [0;1;32m                   ^                          
[0m      | [0;32m                    {
[0m[1msrc/core/vm.c:328:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  328 |   if (ret != NULL) *ret = *fiber->ret;[0m
      | [0;1;32m                  ^                   
[0m      | [0;32m                   {
[0m[1msrc/core/vm.c:352:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  352 |     if (!strncmp(start, *ext, strlen(*ext))) return true;[0m
      | [0;1;32m                                            ^            
[0m      | [0;32m                                             {
[0m[1msrc/core/vm.c:360:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  360 |     VM_SET_ERROR(vm, newString(vm, "Dynamic library importer not provided."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:360:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  360 |     VM_SET_ERROR(vm, newString(vm, "Dynamic library importer not provided."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:364:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  364 |   ASSERT(vm->config.load_dl_fn != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:364:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  364 |   ASSERT(vm->config.load_dl_fn != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:368:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  368 |     VM_SET_ERROR(vm, stringFormat(vm, "Error loading module at \"@\"",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:368:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  368 |     VM_SET_ERROR(vm, stringFormat(vm, "Error loading module at \"@\"",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:382:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  382 |     VM_SET_ERROR(vm, stringFormat(vm, "Error loading module at \"@\"",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:382:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  382 |     VM_SET_ERROR(vm, stringFormat(vm, "Error loading module at \"@\"",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:388:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  388 |     VM_SET_ERROR(vm, stringFormat(vm, "Returned handle wasn't a "[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:388:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  388 |     VM_SET_ERROR(vm, stringFormat(vm, "Returned handle wasn't a "[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:404:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  404 |   if (handle && vm->config.unload_dl_fn)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  405 |     vm->config.unload_dl_fn(vm, handle);[0m
      | [0;1;32m                                        
[0m[1msrc/core/vm.c:416:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  416 |     VM_SET_ERROR(vm, stringFormat(vm, "Error loading module at \"@\"",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:416:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  416 |     VM_SET_ERROR(vm, stringFormat(vm, "Error loading module at \"@\"",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:434:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  434 |       VM_SET_ERROR(vm, stringFormat(vm, "Error compiling module at \"@\"",[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:434:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  434 |       VM_SET_ERROR(vm, stringFormat(vm, "Error compiling module at \"@\"",[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:448:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  448 |   ASSERT((path != NULL) && (path->length > 0), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:448:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  448 |   ASSERT((path != NULL) && (path->length > 0), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:459:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  459 |       ASSERT(AS_OBJ(entry)->type == OBJ_MODULE, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:459:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  459 |       ASSERT(AS_OBJ(entry)->type == OBJ_MODULE, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:472:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  472 |     if (_resolved) break;[0m
      | [0;1;32m                  ^      
[0m      | [0;32m                   {
[0m[1msrc/core/vm.c:474:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  474 |     if (search_path_idx >= vm->search_paths->elements.count) break;[0m
      | [0;1;32m                                                            ^      
[0m      | [0;32m                                                             {
[0m[1msrc/core/vm.c:477:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  477 |     ASSERT(IS_OBJ_TYPE(sp, OBJ_STRING), OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:477:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  477 |     ASSERT(IS_OBJ_TYPE(sp, OBJ_STRING), OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:484:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  484 |     VM_SET_ERROR(vm, stringFormat(vm, "Cannot import module '@'", path));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:484:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  484 |     VM_SET_ERROR(vm, stringFormat(vm, "Cannot import module '@'", path));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:494:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  494 |     ASSERT(AS_OBJ(entry)->type == OBJ_MODULE, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:494:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  494 |     ASSERT(AS_OBJ(entry)->type == OBJ_MODULE, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:509:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  509 |     VM_SET_ERROR(vm, newString(vm, "Cannot import. The hosting application "[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:509:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  509 |     VM_SET_ERROR(vm, newString(vm, "Cannot import. The hosting application "[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:529:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  529 |       if (*c == '/') *c = '.';[0m
      | [0;1;32m                    ^         
[0m      | [0;32m                     {
[0m[1msrc/core/vm.c:535:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  535 |     if (isdl) module = _importDL(vm, resolved, _name);[0m
      | [0;1;32m             ^
[0m      | [0;32m              {
[0m  536 |     else /* ... */[0m
      | [0;32m    } 
[0m[1msrc/core/vm.c:536:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  536 |     else /* ... */[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m  537 |     #endif[0m
  538 |     module = _importScript(vm, resolved, _name);[0m
      | [0;1;32m                                                
[0m[1msrc/core/vm.c:545:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  545 |     ASSERT(VM_HAS_ERROR(vm), OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:545:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  545 |     ASSERT(VM_HAS_ERROR(vm), OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:555:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  555 |     VM_SET_ERROR(vm, newString(vm, "Maximum stack limit reached."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:555:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  555 |     VM_SET_ERROR(vm, newString(vm, "Maximum stack limit reached."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:559:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  559 |   if (fiber->stack_size >= size) return;[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                 {
[0m[1msrc/core/vm.c:571:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  571 |   if (old_rbp == fiber->stack) return;[0m
      | [0;1;32m                              ^       
[0m      | [0;32m                               {
[0m[1msrc/core/vm.c:606:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  606 |   ASSERT(!closure->fn->is_native, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:606:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  606 |   ASSERT(!closure->fn->is_native, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:607:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  607 |   ASSERT(vm->fiber->ret != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:607:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  607 |   ASSERT(vm->fiber->ret != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:614:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  614 |     if (new_capacity == 0) new_capacity = 1;[0m
      | [0;1;32m                          ^                 
[0m      | [0;32m                           {
[0m[1msrc/core/vm.c:639:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  639 |   ASSERT(!closure->fn->is_native, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:639:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  639 |   ASSERT(!closure->fn->is_native, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:640:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  640 |   ASSERT(closure->fn->arity >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:640:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  640 |   ASSERT(closure->fn->arity >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:641:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  641 |   ASSERT(vm->fiber->frame_count > 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:641:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  641 |   ASSERT(vm->fiber->frame_count > 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:653:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  653 |   ASSERT(*frame->rbp == VAR_NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:653:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  653 |   ASSERT(*frame->rbp == VAR_NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:732:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  732 |   if (current->ptr == local) return current;[0m
      | [0;1;32m                            ^               
[0m      | [0;32m                             {
[0m[1msrc/core/vm.c:734:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  734 |   ASSERT(last != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:734:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  734 |   ASSERT(last != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:758:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  758 |   ASSERT(VM_HAS_ERROR(vm), "runtimeError() should be called after an error.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:758:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  758 |   ASSERT(VM_HAS_ERROR(vm), "runtimeError() should be called after an error.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:762:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  762 |   if (vm->config.stderr_write == NULL) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/core/vm.c:778:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  778 |   ASSERT(fiber_->state == FIBER_NEW || fiber_->state == FIBER_YIELDED, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:778:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  778 |   ASSERT(fiber_->state == FIBER_NEW || fiber_->state == FIBER_YIELDED, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:889:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  889 |       ASSERT_INDEX(index, module->constants.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:889:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  889 |       ASSERT_INDEX(index, module->constants.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:890:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  890 |       PUSH(module->constants.data[index]);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:890:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  890 |       PUSH(module->constants.data[index]);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:895:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  895 |       PUSH(VAR_NULL);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:895:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  895 |       PUSH(VAR_NULL);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:895:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  895 |       PUSH(VAR_NULL);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  896 |       DISPATCH();[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1msrc/core/vm.c:792:3: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  792 |   do {                                                                      \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:899:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  899 |       PUSH(VAR_NUM(0));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:899:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  899 |       PUSH(VAR_NUM(0));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:899:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  899 |       PUSH(VAR_NUM(0));[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  900 |       DISPATCH();[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1msrc/core/vm.c:792:3: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  792 |   do {                                                                      \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:903:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  903 |       PUSH(VAR_TRUE);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:903:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  903 |       PUSH(VAR_TRUE);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:903:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  903 |       PUSH(VAR_TRUE);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  904 |       DISPATCH();[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1msrc/core/vm.c:792:3: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  792 |   do {                                                                      \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:907:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  907 |       PUSH(VAR_FALSE);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:907:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  907 |       PUSH(VAR_FALSE);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:907:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  907 |       PUSH(VAR_FALSE);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  908 |       DISPATCH();[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1msrc/core/vm.c:792:3: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  792 |   do {                                                                      \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:920:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  920 |       PUSH(*(fiber->sp - 1));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:920:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  920 |       PUSH(*(fiber->sp - 1));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:927:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  927 |       PUSH(VAR_OBJ(list));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:927:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  927 |       PUSH(VAR_OBJ(list));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:934:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  934 |       PUSH(VAR_OBJ(map));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:934:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  934 |       PUSH(VAR_OBJ(map));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:940:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  940 |       PUSH(*self);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:940:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  940 |       PUSH(*self);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:948:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  948 |       ASSERT(IS_OBJ_TYPE(list, OBJ_LIST), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:948:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  948 |       ASSERT(IS_OBJ_TYPE(list, OBJ_LIST), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:960:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  960 |       ASSERT(IS_OBJ_TYPE(on, OBJ_MAP), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:960:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  960 |       ASSERT(IS_OBJ_TYPE(on, OBJ_MAP), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:963:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  963 |         RUNTIME_ERROR(stringFormat(vm, "$ type is not hashable.",[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:963:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  963 |         RUNTIME_ERROR(stringFormat(vm, "$ type is not hashable.",[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:985:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  985 |       PUSH(rbp[index + 1]); // +1: rbp[0] is return value.[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:985:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  985 |       PUSH(rbp[index + 1]); // +1: rbp[0] is return value.[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:991:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  991 |       PUSH(rbp[index + 1]);  // +1: rbp[0] is return value.[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:991:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  991 |       PUSH(rbp[index + 1]);  // +1: rbp[0] is return value.[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1019:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1019 |       ASSERT_INDEX(index, module->globals.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1019:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1019 |       ASSERT_INDEX(index, module->globals.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1020:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1020 |       PUSH(module->globals.data[index]);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1020:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1020 |       PUSH(module->globals.data[index]);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1027:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1027 |       ASSERT_INDEX(index, module->globals.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1027:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1027 |       ASSERT_INDEX(index, module->globals.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1035:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1035 |       ASSERT_INDEX(index, vm->builtins_count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1035:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1035 |       ASSERT_INDEX(index, vm->builtins_count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1037:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1037 |       PUSH(VAR_OBJ(closure));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1037:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1037 |       PUSH(VAR_OBJ(closure));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1044:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1044 |       ASSERT_INDEX(index, PK_INSTANCE);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1044:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1044 |       ASSERT_INDEX(index, PK_INSTANCE);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1046:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1046 |       PUSH(VAR_OBJ(cls));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1046:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1046 |       PUSH(VAR_OBJ(cls));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1053:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1053 |       PUSH(*(frame->closure->upvalues[index]->ptr));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1053:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1053 |       PUSH(*(frame->closure->upvalues[index]->ptr));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1067:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1067 |       ASSERT_INDEX(index, module->constants.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1067:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1067 |       ASSERT_INDEX(index, module->constants.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1068:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1068 |       ASSERT(IS_OBJ_TYPE(module->constants.data[index], OBJ_FUNC), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1068:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1068 |       ASSERT(IS_OBJ_TYPE(module->constants.data[index], OBJ_FUNC), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1088:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1088 |       PUSH(VAR_OBJ(closure));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1088:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1088 |       PUSH(VAR_OBJ(closure));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1098:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1098 |         RUNTIME_ERROR(newString(vm, "Cannot inherit a non class object."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1098:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1098 |         RUNTIME_ERROR(newString(vm, "Cannot inherit a non class object."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1106:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1106 |         RUNTIME_ERROR(stringFormat(vm, "$ type cannot be inherited.",[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1106:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1106 |         RUNTIME_ERROR(stringFormat(vm, "$ type cannot be inherited.",[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1111:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1111 |       ASSERT_INDEX(index, module->constants.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1111:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1111 |       ASSERT_INDEX(index, module->constants.count);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1112:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1112 |       ASSERT(IS_OBJ_TYPE(module->constants.data[index], OBJ_CLASS), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1112:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1112 |       ASSERT(IS_OBJ_TYPE(module->constants.data[index], OBJ_CLASS), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1117:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1117 |       PUSH(VAR_OBJ(drived));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1117:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1117 |       PUSH(VAR_OBJ(drived));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1123:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1123 |       ASSERT(IS_OBJ_TYPE(PEEK(-1), OBJ_CLOSURE), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1123:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1123 |       ASSERT(IS_OBJ_TYPE(PEEK(-1), OBJ_CLOSURE), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1124:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1124 |       ASSERT(IS_OBJ_TYPE(PEEK(-2), OBJ_CLASS), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1124:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1124 |       ASSERT(IS_OBJ_TYPE(PEEK(-2), OBJ_CLASS), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1147:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1147 |       DROP();[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1148 |       DISPATCH();[0m
      | [0;1;32m                
[0m      | [0;32m                ;} 
[0m[1msrc/core/vm.c:802:22: [0m[0;1;36mnote: [0mexpanded from macro 'DROP'[0m
  802 | #define DROP()       (--fiber->sp)[0m
      | [0;1;32m                     ^
[0m[1msrc/core/vm.c:1151:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1151 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m[1msrc/core/vm.c:1154:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1154 |       ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1154:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1154 |       ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1157:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1157 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1157:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1157 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1158:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1158 |       ASSERT(IS_OBJ_TYPE(_imported, OBJ_MODULE), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1158:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1158 |       ASSERT(IS_OBJ_TYPE(_imported, OBJ_MODULE), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1160:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1160 |       PUSH(_imported);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1160:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1160 |       PUSH(_imported);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1166:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1166 |         ASSERT(imported->body != NULL, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1166:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1166 |         ASSERT(imported->body != NULL, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1181:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1181 |         CHECK_ERROR(); //< Stack overflow.[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1181:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1181 |         CHECK_ERROR(); //< Stack overflow.[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1202:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1202 |         CHECK_ERROR(); // Will return if super_method is NULL.[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1202:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1202 |         CHECK_ERROR(); // Will return if super_method is NULL.[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1214:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1214 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1214:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1214 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1226:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1226 |       ASSERT(!IS_OBJ_TYPE(callable, OBJ_FUNC), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1226:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1226 |       ASSERT(!IS_OBJ_TYPE(callable, OBJ_FUNC), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1236:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1236 |           RUNTIME_ERROR(newString(vm, "Cannot call an unbound method."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1236:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1236 |           RUNTIME_ERROR(newString(vm, "Cannot call an unbound method."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1237:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1237 |           CHECK_ERROR();[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1237:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1237 |           CHECK_ERROR();[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1247:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1247 |         CHECK_ERROR();[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1247:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1247 |         CHECK_ERROR();[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1258:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1258 |           if (cls == NULL) break;[0m
      | [0;1;32m                          ^      
[0m      | [0;32m                           {
[0m[1msrc/core/vm.c:1266:62: [0m[0;1;35mwarning: [0m[1mAccess to field 'name' results in a dereference of a null pointer (loaded from variable 'cls') [clang-analyzer-core.NullDereference][0m
 1266 |                                        "for constructor $.", cls->name->data);[0m
      | [0;1;32m                                                             ^~~
[0m[1msrc/core/vm.c:778:10: [0m[0;1;36mnote: [0mAssuming field 'state' is not equal to FIBER_NEW[0m
  778 |   ASSERT(fiber_->state == FIBER_NEW || fiber_->state == FIBER_YIELDED, OOPS);[0m
      | [0;1;32m         ^
[0m[1msrc/core/common.h:58:45: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                            ^~~~~~~~~
[0m[1msrc/core/common.h:34:11: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m          ^~~~~~~~~
[0m[1msrc/core/vm.c:778:10: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  778 |   ASSERT(fiber_->state == FIBER_NEW || fiber_->state == FIBER_YIELDED, OOPS);[0m
      | [0;1;32m         ^
[0m[1msrc/core/vm.c:778:40: [0m[0;1;36mnote: [0mAssuming field 'state' is equal to FIBER_YIELDED[0m
  778 |   ASSERT(fiber_->state == FIBER_NEW || fiber_->state == FIBER_YIELDED, OOPS);[0m
      | [0;1;32m                                       ^
[0m[1msrc/core/common.h:58:45: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                            ^~~~~~~~~
[0m[1msrc/core/common.h:34:11: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m          ^~~~~~~~~
[0m[1msrc/core/vm.c:778:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  778 |   ASSERT(fiber_->state == FIBER_NEW || fiber_->state == FIBER_YIELDED, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^
[0m[1msrc/core/common.h:34:5: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.c:778:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  778 |   ASSERT(fiber_->state == FIBER_NEW || fiber_->state == FIBER_YIELDED, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^
[0m[1msrc/core/common.h:33:3: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   33 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:863:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  863 |   LOAD_FRAME();[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:843:3: [0m[0;1;36mnote: [0mexpanded from macro 'LOAD_FRAME'[0m
  843 |   do {                                             \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:869:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  869 |   NO_OP;[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:43:15: [0m[0;1;36mnote: [0mexpanded from macro 'NO_OP'[0m
   43 | #define NO_OP do {} while (false)[0m
      | [0;1;32m              ^
[0m[1msrc/core/vm.c:884:3: [0m[0;1;36mnote: [0mControl jumps to 'case OP_CALL:'  at line 1217[0m
  884 |   SWITCH() {[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:858:38: [0m[0;1;36mnote: [0mexpanded from macro 'SWITCH'[0m
  858 | #define SWITCH() Opcode instruction; switch (instruction = (Opcode)READ_BYTE())[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/vm.c:1226:15: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 1226 |       ASSERT(!IS_OBJ_TYPE(callable, OBJ_FUNC), OOPS);[0m
      | [0;1;32m              ^
[0m[1msrc/core/value.h:134:4: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ_TYPE'[0m
  134 |   (IS_OBJ(var) && (AS_OBJ(var)->type == (obj_type)))[0m
      | [0;1;32m   ^
[0m[1msrc/core/value.h:130:26: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ'[0m
  130 | #define IS_OBJ(value)   ((value & _MASK_OBJECT) == _MASK_OBJECT)[0m
      | [0;1;32m                         ^
[0m[1msrc/core/common.h:58:45: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ~~~~~~~~~^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:34:11: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m          ^~~~~~~~~
[0m[1msrc/core/vm.c:1226:15: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1226 |       ASSERT(!IS_OBJ_TYPE(callable, OBJ_FUNC), OOPS);[0m
      | [0;1;32m              ^
[0m[1msrc/core/value.h:134:4: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ_TYPE'[0m
  134 |   (IS_OBJ(var) && (AS_OBJ(var)->type == (obj_type)))[0m
      | [0;1;32m   ^
[0m[1msrc/core/value.h:130:25: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ'[0m
  130 | #define IS_OBJ(value)   ((value & _MASK_OBJECT) == _MASK_OBJECT)[0m
      | [0;1;32m                        ^
[0m[1msrc/core/vm.c:1226:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1226 |       ASSERT(!IS_OBJ_TYPE(callable, OBJ_FUNC), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:34:9: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m        ^~~~~~~~~~~~
[0m[1msrc/core/vm.c:1226:7: [0m[0;1;36mnote: [0mTaking false branch[0m
 1226 |       ASSERT(!IS_OBJ_TYPE(callable, OBJ_FUNC), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^
[0m[1msrc/core/common.h:34:5: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   34 |     if (!(condition)) {                                              \[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.c:1226:7: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
 1226 |       ASSERT(!IS_OBJ_TYPE(callable, OBJ_FUNC), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^
[0m[1msrc/core/common.h:33:3: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   33 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:1230:11: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1230 |       if (IS_OBJ_TYPE(callable, OBJ_CLOSURE)) {[0m
      | [0;1;32m          ^
[0m[1msrc/core/value.h:134:4: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ_TYPE'[0m
  134 |   (IS_OBJ(var) && (AS_OBJ(var)->type == (obj_type)))[0m
      | [0;1;32m   ^
[0m[1msrc/core/value.h:130:25: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ'[0m
  130 | #define IS_OBJ(value)   ((value & _MASK_OBJECT) == _MASK_OBJECT)[0m
      | [0;1;32m                        ^
[0m[1msrc/core/vm.c:1230:11: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to OBJ_CLOSURE[0m
 1230 |       if (IS_OBJ_TYPE(callable, OBJ_CLOSURE)) {[0m
      | [0;1;32m          ^
[0m[1msrc/core/value.h:134:20: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ_TYPE'[0m
  134 |   (IS_OBJ(var) && (AS_OBJ(var)->type == (obj_type)))[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/value.h:151:24: [0m[0;1;36mnote: [0mexpanded from macro 'AS_OBJ'[0m
  151 | #define AS_OBJ(value)  ((Object*)(value & _PAYLOAD_OBJECT))[0m
      | [0;1;32m                       ^
[0m[1msrc/core/vm.c:1230:7: [0m[0;1;36mnote: [0mTaking false branch[0m
 1230 |       if (IS_OBJ_TYPE(callable, OBJ_CLOSURE)) {[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:1233:18: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1233 |       } else if (IS_OBJ_TYPE(callable, OBJ_METHOD_BIND)) {[0m
      | [0;1;32m                 ^
[0m[1msrc/core/value.h:134:4: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ_TYPE'[0m
  134 |   (IS_OBJ(var) && (AS_OBJ(var)->type == (obj_type)))[0m
      | [0;1;32m   ^
[0m[1msrc/core/value.h:130:25: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ'[0m
  130 | #define IS_OBJ(value)   ((value & _MASK_OBJECT) == _MASK_OBJECT)[0m
      | [0;1;32m                        ^
[0m[1msrc/core/vm.c:1233:18: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to OBJ_METHOD_BIND[0m
 1233 |       } else if (IS_OBJ_TYPE(callable, OBJ_METHOD_BIND)) {[0m
      | [0;1;32m                 ^
[0m[1msrc/core/value.h:134:20: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ_TYPE'[0m
  134 |   (IS_OBJ(var) && (AS_OBJ(var)->type == (obj_type)))[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/value.h:151:24: [0m[0;1;36mnote: [0mexpanded from macro 'AS_OBJ'[0m
  151 | #define AS_OBJ(value)  ((Object*)(value & _PAYLOAD_OBJECT))[0m
      | [0;1;32m                       ^
[0m[1msrc/core/vm.c:1233:14: [0m[0;1;36mnote: [0mTaking false branch[0m
 1233 |       } else if (IS_OBJ_TYPE(callable, OBJ_METHOD_BIND)) {[0m
      | [0;1;32m             ^
[0m[1msrc/core/vm.c:1242:18: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1242 |       } else if (IS_OBJ_TYPE(callable, OBJ_CLASS)) {[0m
      | [0;1;32m                 ^
[0m[1msrc/core/value.h:134:4: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ_TYPE'[0m
  134 |   (IS_OBJ(var) && (AS_OBJ(var)->type == (obj_type)))[0m
      | [0;1;32m   ^
[0m[1msrc/core/value.h:130:25: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ'[0m
  130 | #define IS_OBJ(value)   ((value & _MASK_OBJECT) == _MASK_OBJECT)[0m
      | [0;1;32m                        ^
[0m[1msrc/core/vm.c:1242:18: [0m[0;1;36mnote: [0mAssuming field 'type' is equal to OBJ_CLASS[0m
 1242 |       } else if (IS_OBJ_TYPE(callable, OBJ_CLASS)) {[0m
      | [0;1;32m                 ^
[0m[1msrc/core/value.h:134:20: [0m[0;1;36mnote: [0mexpanded from macro 'IS_OBJ_TYPE'[0m
  134 |   (IS_OBJ(var) && (AS_OBJ(var)->type == (obj_type)))[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/value.h:151:24: [0m[0;1;36mnote: [0mexpanded from macro 'AS_OBJ'[0m
  151 | #define AS_OBJ(value)  ((Object*)(value & _PAYLOAD_OBJECT))[0m
      | [0;1;32m                       ^
[0m[1msrc/core/vm.c:1242:14: [0m[0;1;36mnote: [0mTaking true branch[0m
 1242 |       } else if (IS_OBJ_TYPE(callable, OBJ_CLASS)) {[0m
      | [0;1;32m             ^
[0m[1msrc/core/vm.c:1246:23: [0m[0;1;36mnote: [0mValue assigned to field 'super_class'[0m
 1246 |         fiber->self = preConstructSelf(vm, cls);[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:1247:9: [0m[0;1;36mnote: [0mAssuming field 'error' is equal to null[0m
 1247 |         CHECK_ERROR();[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:822:22: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  822 |     if (VM_HAS_ERROR(vm)) {           \[0m
      | [0;1;32m        ~~~~~~~~~~~~~^~~
[0m[1msrc/core/vm.h:41:27: [0m[0;1;36mnote: [0mexpanded from macro 'VM_HAS_ERROR'[0m
   41 | #define VM_HAS_ERROR(vm) (vm->fiber->error != NULL)[0m
      | [0;1;32m                          ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:1247:9: [0m[0;1;36mnote: [0mTaking false branch[0m
 1247 |         CHECK_ERROR();[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:822:5: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  822 |     if (VM_HAS_ERROR(vm)) {           \[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.c:1247:9: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
 1247 |         CHECK_ERROR();[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:821:3: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  821 |   do {                                \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:1256:16: [0m[0;1;36mnote: [0mAssuming 'closure' is equal to NULL[0m
 1256 |         while (closure == NULL) {[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:1256:9: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1256 |         while (closure == NULL) {[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:1257:11: [0m[0;1;36mnote: [0mValue assigned to 'cls'[0m
 1257 |           cls = cls->super_class;[0m
      | [0;1;32m          ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:1258:15: [0m[0;1;36mnote: [0mAssuming 'cls' is equal to NULL[0m
 1258 |           if (cls == NULL) break;[0m
      | [0;1;32m              ^~~~~~~~~~~
[0m[1msrc/core/vm.c:1258:11: [0m[0;1;36mnote: [0mTaking true branch[0m
 1258 |           if (cls == NULL) break;[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:1258:28: [0m[0;1;36mnote: [0m Execution continues on line 1263[0m
 1258 |           if (cls == NULL) break;[0m
      | [0;1;32m                           ^
[0m[1msrc/core/vm.c:1263:13: [0m[0;1;36mnote: [0m'closure' is equal to NULL[0m
 1263 |         if (closure == NULL) {[0m
      | [0;1;32m            ^~~~~~~
[0m[1msrc/core/vm.c:1263:9: [0m[0;1;36mnote: [0mTaking true branch[0m
 1263 |         if (closure == NULL) {[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:1264:15: [0m[0;1;36mnote: [0mAssuming 'argc' is not equal to 0[0m
 1264 |           if (argc != 0) {[0m
      | [0;1;32m              ^~~~~~~~~
[0m[1msrc/core/vm.c:1264:11: [0m[0;1;36mnote: [0mTaking true branch[0m
 1264 |           if (argc != 0) {[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:1266:62: [0m[0;1;36mnote: [0mAccess to field 'name' results in a dereference of a null pointer (loaded from variable 'cls')[0m
 1266 |                                        "for constructor $.", cls->name->data);[0m
      | [0;1;32m                                                             ^~~
[0m[1msrc/core/vm.c:1267:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1267 |             RUNTIME_ERROR(msg);[0m
      | [0;1;32m            ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1267:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1267 |             RUNTIME_ERROR(msg);[0m
      | [0;1;32m            ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1275:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1275 |         RUNTIME_ERROR(stringFormat(vm, "$ '$'.", "Expected a callable to "[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1275:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1275 |         RUNTIME_ERROR(stringFormat(vm, "$ '$'.", "Expected a callable to "[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1281:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1281 |       ASSERT(closure != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1281:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1281 |       ASSERT(closure != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1285:39: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1285 |         char buff[STR_INT_BUFF_SIZE]; sprintf(buff, "%d", closure->fn->arity);[0m
      | [0;1;32m                                      ^~~~~~~
[0m[1msrc/core/vm.c:1285:39: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
 1285 |         char buff[STR_INT_BUFF_SIZE]; sprintf(buff, "%d", closure->fn->arity);[0m
      | [0;1;32m                                      ^~~~~~~
[0m[1msrc/core/vm.c:1288:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1288 |         RUNTIME_ERROR(msg);[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1288:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1288 |         RUNTIME_ERROR(msg);[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1294:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1294 |           RUNTIME_ERROR(stringFormat(vm,[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1294:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1294 |           RUNTIME_ERROR(stringFormat(vm,[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1305:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1305 |         if (vm->fiber == NULL) return PK_RESULT_SUCCESS;[0m
      | [0;1;32m                              ^                         
[0m      | [0;32m                               {
[0m[1msrc/core/vm.c:1319:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1319 |         CHECK_ERROR();[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1319:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1319 |         CHECK_ERROR();[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1328:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1328 |           ASSERT((instruction == OP_CALL) ||[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1328:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1328 |           ASSERT((instruction == OP_CALL) ||[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1335:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1335 |           CHECK_ERROR(); //< Stack overflow.[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1335:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1335 |           CHECK_ERROR(); //< Stack overflow.[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1349:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1349 |           RUNTIME_ERROR(newString(vm, "Null is not iterable."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1349:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1349 |           RUNTIME_ERROR(newString(vm, "Null is not iterable."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1351:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1351 |           RUNTIME_ERROR(newString(vm, "Boolenan is not iterable."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1351:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1351 |           RUNTIME_ERROR(newString(vm, "Boolenan is not iterable."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1353:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1353 |           RUNTIME_ERROR(newString(vm, "Number is not iterable."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1353:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1353 |           RUNTIME_ERROR(newString(vm, "Number is not iterable."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:833:5: [0m[0;1;36mnote: [0mexpanded from macro 'RUNTIME_ERROR'[0m
  833 |     VM_SET_ERROR(vm, err_msg);       \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1355:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1355 |           UNREACHABLE();[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1355:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1355 |           UNREACHABLE();[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1376:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1376 |       ASSERT(IS_NUM(*iterator), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1376:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1376 |       ASSERT(IS_NUM(*iterator), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1378:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1378 |       ASSERT(AS_NUM(*iterator) == (int32_t)trunc(it), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1378:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1378 |       ASSERT(AS_NUM(*iterator) == (int32_t)trunc(it), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1383:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1383 |         case OBJ_STRING: {[0m
      | [0;1;32m                         ^
[0m      | [0;32m                         {
[0m 1384 |           uint32_t iter = (int32_t)trunc(it);[0m
 1385 | [0m
 1386 |           // TODO: // Need to consider utf8.[0m
 1387 |           String* str = ((String*)obj);[0m
 1388 |           if (iter >= str->length) JUMP_ITER_EXIT();[0m
 1389 | [0m
 1390 |           //TODO: vm's char (and reusable) strings.[0m
 1391 |           *value = VAR_OBJ(newStringLength(vm, str->data + iter, 1));[0m
 1392 |           *iterator = VAR_NUM((double)iter + 1);[0m
 1393 | [0m
 1394 |         } DISPATCH();[0m
      | [0;1;32m                    
[0m      | [0;32m                    ;} 
[0m[1msrc/core/vm.c:1388:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1388 |           if (iter >= str->length) JUMP_ITER_EXIT();[0m
      | [0;1;32m                                  ^                 
[0m      | [0;32m                                   {
[0m[1msrc/core/vm.c:1396:24: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1396 |         case OBJ_LIST: {[0m
      | [0;1;32m                       ^
[0m      | [0;32m                       {
[0m 1397 |           uint32_t iter = (int32_t)trunc(it);[0m
 1398 |           pkVarBuffer* elems = &((List*)obj)->elements;[0m
 1399 |           if (iter >= elems->count) JUMP_ITER_EXIT();[0m
 1400 |           *value = elems->data[iter];[0m
 1401 |           *iterator = VAR_NUM((double)iter + 1);[0m
 1402 | [0m
 1403 |         } DISPATCH();[0m
      | [0;1;32m                    
[0m      | [0;32m                    ;} 
[0m[1msrc/core/vm.c:1399:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1399 |           if (iter >= elems->count) JUMP_ITER_EXIT();[0m
      | [0;1;32m                                   ^                 
[0m      | [0;32m                                    {
[0m[1msrc/core/vm.c:1405:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1405 |         case OBJ_MAP: {[0m
      | [0;1;32m                      ^
[0m      | [0;32m                      {
[0m 1406 |           uint32_t iter = (int32_t)trunc(it);[0m
 1407 | [0m
 1408 |           Map* map = (Map*)obj;[0m
 1409 |           if (map->entries == NULL) JUMP_ITER_EXIT();[0m
 1410 |           MapEntry* e = map->entries + iter;[0m
 1411 |           for (; iter < map->capacity; iter++, e++) {[0m
 1412 |             if (!IS_UNDEF(e->key)) break;[0m
 1413 |           }[0m
 1414 |           if (iter >= map->capacity) JUMP_ITER_EXIT();[0m
 1415 | [0m
 1416 |           *value = map->entries[iter].key;[0m
 1417 |           *iterator = VAR_NUM((double)iter + 1);[0m
 1418 | [0m
 1419 |         } DISPATCH();[0m
      | [0;1;32m                    
[0m      | [0;32m                    ;} 
[0m[1msrc/core/vm.c:1409:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1409 |           if (map->entries == NULL) JUMP_ITER_EXIT();[0m
      | [0;1;32m                                   ^                 
[0m      | [0;32m                                    {
[0m[1msrc/core/vm.c:1412:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1412 |             if (!IS_UNDEF(e->key)) break;[0m
      | [0;1;32m                                  ^      
[0m      | [0;32m                                   {
[0m[1msrc/core/vm.c:1414:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1414 |           if (iter >= map->capacity) JUMP_ITER_EXIT();[0m
      | [0;1;32m                                    ^                 
[0m      | [0;32m                                     {
[0m[1msrc/core/vm.c:1421:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1421 |         case OBJ_RANGE: {[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m 1422 |           double from = ((Range*)obj)->from;[0m
 1423 |           double to = ((Range*)obj)->to;[0m
 1424 |           if (from == to) JUMP_ITER_EXIT();[0m
 1425 | [0m
 1426 |           double current;[0m
 1427 |           if (from <= to) { //< Straight range.[0m
 1428 |             current = from + it;[0m
 1429 |           } else {          //< Reversed range.[0m
 1430 |             current = from - it;[0m
 1431 |           }[0m
 1432 |           if (current == to) JUMP_ITER_EXIT();[0m
 1433 |           *value = VAR_NUM(current);[0m
 1434 |           *iterator = VAR_NUM(it + 1);[0m
 1435 | [0m
 1436 |         } DISPATCH();[0m
      | [0;1;32m                    
[0m      | [0;32m                    ;} 
[0m[1msrc/core/vm.c:1424:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1424 |           if (from == to) JUMP_ITER_EXIT();[0m
      | [0;1;32m                         ^                 
[0m      | [0;32m                          {
[0m[1msrc/core/vm.c:1432:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1432 |           if (current == to) JUMP_ITER_EXIT();[0m
      | [0;1;32m                            ^                 
[0m      | [0;32m                             {
[0m[1msrc/core/vm.c:1446:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1446 |           TODO; break;[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:111:14: [0m[0;1;36mnote: [0mexpanded from macro 'TODO'[0m
  111 | #define TODO __ASSERT(false, "TODO: It hasn't implemented yet.")[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1446:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1446 |           TODO; break;[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:111:14: [0m[0;1;36mnote: [0mexpanded from macro 'TODO'[0m
  111 | #define TODO __ASSERT(false, "TODO: It hasn't implemented yet.")[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1446:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1446 |           TODO; break;[0m
      | [0;1;32m                ^    
[0m      | [0;32m                {    ;} 
[0m[1msrc/core/vm.c:1448:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1448 |           UNREACHABLE();[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1448:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1448 |           UNREACHABLE();[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1448:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1448 |           UNREACHABLE();[0m
      | [0;1;32m          ^            
[0m      | [0;32m          {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:1533:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1533 |           FIBER_SWITCH_BACK();[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1533:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1533 |           FIBER_SWITCH_BACK();[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1552:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1552 |       ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1552:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1552 |       ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1555:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1555 |       PUSH(value);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1555:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1555 |       PUSH(value);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1557:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1557 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1557:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1557 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1565:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1565 |       ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1565:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1565 |       ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1566:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1566 |       PUSH(varGetAttrib(vm, on, name));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1566:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1566 |       PUSH(varGetAttrib(vm, on, name));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1567:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1567 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1567:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1567 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1576:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1576 |       ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1576:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1576 |       ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1581:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1581 |       PUSH(value);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1581:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1581 |       PUSH(value);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1583:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1583 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1583:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1583 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1594:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1594 |       PUSH(value);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1594:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1594 |       PUSH(value);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1596:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1596 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1596:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1596 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1604:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1604 |       PUSH(varGetSubscript(vm, on, key));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1604:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1604 |       PUSH(varGetSubscript(vm, on, key));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1605:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1605 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1605:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1605 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1618:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1618 |       PUSH(value);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1618:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1618 |       PUSH(value);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1620:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1620 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1620:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1620 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1630:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1630 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1630:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1630 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1632:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1632 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1632:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1632 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1642:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1642 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1642:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1642 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1644:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1644 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1644:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1644 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1654:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1654 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1654:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1654 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1656:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1656 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1656:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1656 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1666:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1666 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1666:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1666 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1668:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1668 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1668:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1668 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1679:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1679 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1679:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1679 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1682:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1682 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1682:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1682 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1684:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1684 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1684:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1684 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1692:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1692 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1692:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1692 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1695:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1695 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1695:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1695 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1697:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1697 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1697:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1697 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1705:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1705 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1705:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1705 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1708:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1708 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1708:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1708 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1710:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1710 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1710:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1710 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1718:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1718 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1718:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1718 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1721:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1721 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1721:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1721 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1723:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1723 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1723:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1723 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1731:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1731 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1731:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1731 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1734:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1734 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1734:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1734 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1736:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1736 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1736:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1736 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1744:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1744 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1744:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1744 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1747:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1747 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1747:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1747 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1749:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1749 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1749:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1749 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1757:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1757 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1757:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1757 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1760:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1760 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1760:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1760 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1762:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1762 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1762:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1762 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1770:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1770 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1770:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1770 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1773:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1773 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1773:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1773 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1775:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1775 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1775:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1775 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1783:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1783 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1783:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1783 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1786:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1786 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1786:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1786 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1788:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1788 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1788:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1788 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1796:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1796 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1796:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1796 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1799:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1799 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1799:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1799 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1801:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1801 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1801:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1801 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1809:38: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1809 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1809:38: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1809 |       uint8_t inplace = READ_BYTE(); ASSERT(inplace <= 1, OOPS);[0m
      | [0;1;32m                                     ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1812:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1812 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1812:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1812 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1814:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1814 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1814:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1814 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1824:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1824 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1824:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1824 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1825:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1825 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1825:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1825 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1835:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1835 |       PUSH(VAR_BOOL(!toBool(result)));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1835:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1835 |       PUSH(VAR_BOOL(!toBool(result)));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1836:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1836 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1836:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1836 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1846:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1846 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1846:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1846 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1847:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1847 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1847:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1847 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1857:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1857 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1857:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1857 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1860:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1860 |       if (!lteq) result = varEqals(vm, l, r);[0m
      | [0;1;32m                ^                            
[0m      | [0;32m                 {
[0m[1msrc/core/vm.c:1861:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1861 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1861:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1861 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1864:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1864 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1864:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1864 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1874:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1874 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1874:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1874 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1875:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1875 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1875:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1875 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1884:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1884 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1884:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1884 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1887:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1887 |       if (!gteq) result = varEqals(vm, l, r);[0m
      | [0;1;32m                ^                            
[0m      | [0;32m                 {
[0m[1msrc/core/vm.c:1888:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1888 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1888:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1888 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1891:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1891 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1891:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1891 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1901:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1901 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1901:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1901 |       PUSH(result);[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1902:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1902 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1902:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1902 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1912:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1912 |       PUSH(VAR_BOOL(contains));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1912:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1912 |       PUSH(VAR_BOOL(contains));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1913:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1913 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1913:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1913 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1923:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1923 |       PUSH(VAR_BOOL(is));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1923:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1923 |       PUSH(VAR_BOOL(is));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:793:5: [0m[0;1;36mnote: [0mexpanded from macro 'PUSH'[0m
  793 |     ASSERT(fiber->sp < (fiber->stack + ((intptr_t) fiber->stack_size - 1)), \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  794 |            OOPS);                                                           \[0m
      | [0;1;32m           ~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1924:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1924 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1924:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1924 |       CHECK_ERROR();[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.c:825:7: [0m[0;1;36mnote: [0mexpanded from macro 'CHECK_ERROR'[0m
  825 |       FIBER_SWITCH_BACK();            \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.c:812:5: [0m[0;1;36mnote: [0mexpanded from macro 'FIBER_SWITCH_BACK'[0m
  812 |     ASSERT(caller == NULL || caller->state == FIBER_RUNNING, OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/vm.c:1941:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1941 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1941:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1941 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1941:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1941 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1942 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:1945:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1945 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1945:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1945 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1945:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1945 |       UNREACHABLE();[0m
      | [0;1;32m      ^            
[0m      | [0;32m      {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.c:1949:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1949 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/vm.c:1949:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1949 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m270 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[12/18][106.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpmfzr8osg.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/cli/main.c
[1mcli/main.c:107:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  107 |     fprintf(stdout, "pocketlang %s\n", PK_VERSION_STRING);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcli/main.c:107:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  107 |     fprintf(stdout, "pocketlang %s\n", PK_VERSION_STRING);[0m
      | [0;1;32m    ^~~~~~~
[0m48 warnings generated.
Suppressed 47 warnings (47 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[13/18][144.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpyq_rto57.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_json.c
[1msrc/libs/std_json.c:25:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   25 |       return VAR_NULL;[0m
      | [0;1;32m      ^              
[0m      | [0;32m      {              ;} 
[0m[1msrc/libs/std_json.c:28:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   28 |       return VAR_FALSE;[0m
      | [0;1;32m      ^               
[0m      | [0;32m      {               ;} 
[0m[1msrc/libs/std_json.c:31:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   31 |       return VAR_TRUE;[0m
      | [0;1;32m      ^              
[0m      | [0;32m      {              ;} 
[0m[1msrc/libs/std_json.c:34:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   34 |       return VAR_NUM(item->valuedouble);[0m
      | [0;1;32m      ^                                
[0m      | [0;32m      {                                ;} 
[0m[1msrc/libs/std_json.c:49:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   49 |         if (IS_OBJ(v)) vmPushTempRef(vm, AS_OBJ(v)); // v.[0m
      | [0;1;32m                      ^                                   
[0m      | [0;32m                       {
[0m[1msrc/libs/std_json.c:51:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |         if (IS_OBJ(v)) vmPopTempRef(vm); // v.[0m
      | [0;1;32m                      ^                       
[0m      | [0;32m                       {
[0m[1msrc/libs/std_json.c:67:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   67 |           if (IS_OBJ(value)) vmPushTempRef(vm, AS_OBJ(value)); // value.[0m
      | [0;1;32m                            ^                                           
[0m      | [0;32m                             {
[0m[1msrc/libs/std_json.c:69:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   69 |           if (IS_OBJ(value)) vmPopTempRef(vm); // value.[0m
      | [0;1;32m                            ^                           
[0m      | [0;32m                             {
[0m[1msrc/libs/std_json.c:79:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   79 |     UNREACHABLE();[0m
      | [0;1;32m    ^
[0m[1msrc/libs/../core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/libs/std_json.c:79:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   79 |     UNREACHABLE();[0m
      | [0;1;32m    ^
[0m[1msrc/libs/../core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/libs/std_json.c:79:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   79 |     UNREACHABLE();[0m
      | [0;1;32m    ^            
[0m      | [0;32m    {            ;} 
[0m[1msrc/libs/../core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_json.c:82:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   82 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/libs/std_json.c:82:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   82 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/libs/std_json.c:89:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   89 |       return cJSON_CreateNull();[0m
      | [0;1;32m      ^                        
[0m      | [0;32m      {                        ;} 
[0m[1msrc/libs/std_json.c:92:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   92 |       return cJSON_CreateBool(AS_BOOL(item));[0m
      | [0;1;32m      ^                                     
[0m      | [0;32m      {                                     ;} 
[0m[1msrc/libs/std_json.c:95:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   95 |       return cJSON_CreateNumber(AS_NUM(item));[0m
      | [0;1;32m      ^                                      
[0m      | [0;32m      {                                      ;} 
[0m[1msrc/libs/std_json.c:98:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   98 |       return cJSON_CreateString(((String*) AS_OBJ(item))->data);[0m
      | [0;1;32m      ^                                                        
[0m      | [0;32m      {                                                        ;} 
[0m[1msrc/libs/std_json.c:128:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  128 |         if (IS_UNDEF(e->key)) continue;[0m
      | [0;1;32m                             ^         
[0m      | [0;32m                              {
[0m[1msrc/libs/std_json.c:158:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  158 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/libs/std_json.c:158:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  158 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/libs/std_json.c:167:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  167 |   if (!pkValidateSlotString(vm, 1, &string, NULL)) return;[0m
      | [0;1;32m                                                  ^       
[0m      | [0;32m                                                   {
[0m[1msrc/libs/std_json.c:194:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  194 |   if (!pkCheckArgcRange(vm, argc, 1, 2)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_json.c:198:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  198 |     if (!pkValidateSlotBool(vm, 2, &pretty)) return;[0m
      | [0;1;32m                                            ^       
[0m      | [0;32m                                             {
[0m[1msrc/libs/std_json.c:205:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  205 |   if (json == NULL) return;[0m
      | [0;1;32m                   ^       
[0m      | [0;32m                    {
[0m80 warnings generated.
Suppressed 59 warnings (59 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[14/18][154.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmp495tyokf.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/core/core.c
[1msrc/core/core.c:61:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   61 |       ASSERT(INT64_MIN <= number && number <= INT64_MAX,[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:61:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   61 |       ASSERT(INT64_MIN <= number && number <= INT64_MAX,[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:73:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |   if (isNumeric(var, value)) return true;[0m
      | [0;1;32m                            ^            
[0m      | [0;32m                             {
[0m[1msrc/core/core.c:74:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   74 |   VM_SET_ERROR(vm, stringFormat(vm, "$ must be a numeric value.", name));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:74:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   74 |   VM_SET_ERROR(vm, stringFormat(vm, "$ must be a numeric value.", name));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:81:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   81 |   if (isInteger(var, value)) return true;[0m
      | [0;1;32m                            ^            
[0m      | [0;32m                             {
[0m[1msrc/core/core.c:82:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   82 |   VM_SET_ERROR(vm, stringFormat(vm, "$ must be an Integer.", name));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:82:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   82 |   VM_SET_ERROR(vm, stringFormat(vm, "$ must be an Integer.", name));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:91:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   91 |     VM_SET_ERROR(vm, stringFormat(vm, "$ index out of bound.", container));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:91:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   91 |     VM_SET_ERROR(vm, stringFormat(vm, "$ index out of bound.", container));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:101:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  101 |     VM_SET_ERROR(vm, newString(vm, err));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:101:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  101 |     VM_SET_ERROR(vm, newString(vm, err));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:122:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  122 |  VALIDATE_ARG_OBJ(String, OBJ_STRING, "string")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:122:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  122 |  VALIDATE_ARG_OBJ(String, OBJ_STRING, "string")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:122:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  122 |  VALIDATE_ARG_OBJ(String, OBJ_STRING, "string")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:122:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  122 |  VALIDATE_ARG_OBJ(String, OBJ_STRING, "string")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:123:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  123 |  VALIDATE_ARG_OBJ(List, OBJ_LIST, "list")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:123:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  123 |  VALIDATE_ARG_OBJ(List, OBJ_LIST, "list")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:123:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  123 |  VALIDATE_ARG_OBJ(List, OBJ_LIST, "list")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:123:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  123 |  VALIDATE_ARG_OBJ(List, OBJ_LIST, "list")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:124:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  124 |  VALIDATE_ARG_OBJ(Map, OBJ_MAP, "map")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:124:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  124 |  VALIDATE_ARG_OBJ(Map, OBJ_MAP, "map")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:124:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  124 |  VALIDATE_ARG_OBJ(Map, OBJ_MAP, "map")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:124:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  124 |  VALIDATE_ARG_OBJ(Map, OBJ_MAP, "map")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:125:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  125 |  VALIDATE_ARG_OBJ(Closure, OBJ_CLOSURE, "closure")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:125:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  125 |  VALIDATE_ARG_OBJ(Closure, OBJ_CLOSURE, "closure")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:125:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  125 |  VALIDATE_ARG_OBJ(Closure, OBJ_CLOSURE, "closure")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:125:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  125 |  VALIDATE_ARG_OBJ(Closure, OBJ_CLOSURE, "closure")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:126:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  126 |  VALIDATE_ARG_OBJ(Fiber, OBJ_FIBER, "fiber")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:126:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  126 |  VALIDATE_ARG_OBJ(Fiber, OBJ_FIBER, "fiber")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:126:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  126 |  VALIDATE_ARG_OBJ(Fiber, OBJ_FIBER, "fiber")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:126:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  126 |  VALIDATE_ARG_OBJ(Fiber, OBJ_FIBER, "fiber")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:127:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  127 |  VALIDATE_ARG_OBJ(Class, OBJ_CLASS, "class")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:127:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  127 |  VALIDATE_ARG_OBJ(Class, OBJ_CLASS, "class")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:127:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  127 |  VALIDATE_ARG_OBJ(Class, OBJ_CLASS, "class")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:127:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  127 |  VALIDATE_ARG_OBJ(Class, OBJ_CLASS, "class")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:128:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  128 |  VALIDATE_ARG_OBJ(Module, OBJ_MODULE, "module")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:128:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  128 |  VALIDATE_ARG_OBJ(Module, OBJ_MODULE, "module")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:112:5: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  112 |     ASSERT(arg > 0 && arg <= ARGC, OOPS);                                    \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:128:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  128 |  VALIDATE_ARG_OBJ(Module, OBJ_MODULE, "module")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:128:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  128 |  VALIDATE_ARG_OBJ(Module, OBJ_MODULE, "module")[0m
      | [0;1;32m ^
[0m[1msrc/core/core.c:114:22: [0m[0;1;36mnote: [0mexpanded from macro 'VALIDATE_ARG_OBJ'[0m
  114 |       char buff[12]; sprintf(buff, "%d", arg);                               \[0m
      | [0;1;32m                     ^~~~~~~
[0m[1msrc/core/core.c:155:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  155 |     ASSERT(module->name != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:155:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  155 |     ASSERT(module->name != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:159:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  159 |   ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:159:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  159 |   ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:170:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  170 |   if (is_main) vmPopTempRef(vm); // _main.[0m
      | [0;1;32m              ^                           
[0m      | [0;32m               {
[0m[1msrc/core/core.c:203:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  203 |       if (result != PK_RESULT_SUCCESS) return NULL;[0m
      | [0;1;32m                                      ^            
[0m      | [0;32m                                       {
[0m[1msrc/core/core.c:206:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  206 |         VM_SET_ERROR(vm, newString(vm, "method " LITS__str " returned "[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:206:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  206 |         VM_SET_ERROR(vm, newString(vm, "method " LITS__str " returned "[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:218:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  218 |   if (repr) return toRepr(vm, self);[0m
      | [0;1;32m           ^                        
[0m      | [0;32m            {
[0m[1msrc/core/core.c:233:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  233 |   if (!has_method) return false;[0m
      | [0;1;32m                  ^             
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:250:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  250 |   if (!has_method) return false;[0m
      | [0;1;32m                  ^             
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:263:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  263 |   if (cls == NULL) return;[0m
      | [0;1;32m                  ^       
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:282:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  282 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:282:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  282 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:287:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  287 |     if (vm->config.stdout_write == NULL) RET(VAR_NULL);[0m
      | [0;1;32m                                        ^              
[0m      | [0;32m                                         {
[0m[1msrc/core/core.c:295:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  295 |     if (vm->config.stdout_write == NULL) RET(VAR_NULL);[0m
      | [0;1;32m                                        ^              
[0m      | [0;32m                                         {
[0m[1msrc/core/core.c:333:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  333 |       RET_ERR(newString(vm, "Expected a Closure, MethodBind or "[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:333:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  333 |       RET_ERR(newString(vm, "Expected a Closure, MethodBind or "[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:347:11: [0m[0;1;35mwarning: [0m[1menumeration values 'PK_OBJECT' and 'PK_METHOD_BIND' not handled in switch [clang-diagnostic-switch][0m
  347 |   switch (getVarType(v)) {[0m
      | [0;1;32m          ^~~~~~~~~~~~~
[0m[1msrc/core/core.c:365:21: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  365 |     case PK_MODULE: {[0m
      | [0;1;32m                    ^
[0m      | [0;32m                    {
[0m  366 |       Module* m = (Module*) AS_OBJ(v);[0m
  367 |       List* list = newList(vm, 8);[0m
  368 |       vmPushTempRef(vm, &list->_super); // list.[0m
  369 |       for (uint32_t i = 0; i < m->globals.count; i++) {[0m
  370 |         Var name = m->constants.data[m->global_names.data[i]];[0m
  371 |         ASSERT(IS_OBJ_TYPE(name, OBJ_STRING), OOPS);[0m
  372 |         listAppend(vm, list, name);[0m
  373 |       }[0m
  374 |       vmPopTempRef(vm); // list.[0m
  375 |       RET(VAR_OBJ(list));[0m
  376 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:371:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  371 |         ASSERT(IS_OBJ_TYPE(name, OBJ_STRING), OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:371:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  371 |         ASSERT(IS_OBJ_TYPE(name, OBJ_STRING), OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:378:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  378 |     case PK_CLASS: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m  379 |       Class* cls = (Class*) AS_OBJ(v);[0m
  380 |       List* list = newList(vm, 8);[0m
  381 |       vmPushTempRef(vm, &list->_super); // list.[0m
  382 |       _collectMethods(vm, list, cls);[0m
  383 |       // TODO: if we add static variables to classes it should be[0m
  384 |       // added here as well.[0m
  385 |       vmPopTempRef(vm); // list.[0m
  386 |       RET(VAR_OBJ(list));[0m
  387 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:389:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  389 |     case PK_INSTANCE: {[0m
      | [0;1;32m                      ^
[0m      | [0;32m                      {
[0m  390 |       Instance* inst = (Instance*) AS_OBJ(v);[0m
  391 |       List* list = newList(vm, 8);[0m
  392 |       vmPushTempRef(vm, &list->_super); // list.[0m
  393 |       for (uint32_t i = 0; i < inst->attribs->capacity; i++) {[0m
  394 |         Var key = (inst->attribs->entries + i)->key;[0m
  395 |         if (!IS_UNDEF(key)) {[0m
  396 |           ASSERT(IS_OBJ_TYPE(key, OBJ_STRING), OOPS);[0m
  397 |           listAppend(vm, list, key);[0m
  398 |         }[0m
  399 |       }[0m
  400 |       _collectMethods(vm, list, inst->cls);[0m
  401 |       vmPopTempRef(vm); // list.[0m
  402 |       RET(VAR_OBJ(list));[0m
  403 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:396:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  396 |           ASSERT(IS_OBJ_TYPE(key, OBJ_STRING), OOPS);[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:396:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  396 |           ASSERT(IS_OBJ_TYPE(key, OBJ_STRING), OOPS);[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:406:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  406 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:406:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  406 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:416:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  416 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:416:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  416 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:425:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  425 |         if (msg == NULL) return; //< Error at _to_string override.[0m
      | [0;1;32m                        ^                                         
[0m      | [0;32m                         {
[0m[1msrc/core/core.c:432:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  432 |       VM_SET_ERROR(vm, stringFormat(vm, "Assertion failed: '@'.", msg));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:432:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  432 |       VM_SET_ERROR(vm, stringFormat(vm, "Assertion failed: '@'.", msg));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:435:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  435 |       VM_SET_ERROR(vm, newString(vm, "Assertion failed."));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:435:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  435 |       VM_SET_ERROR(vm, newString(vm, "Assertion failed."));[0m
      | [0;1;32m      ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:445:58: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  445 |   if (!validateInteger(vm, ARG(1), &value, "Argument 1")) return;[0m
      | [0;1;32m                                                         ^       
[0m      | [0;32m                                                          {
[0m[1msrc/core/core.c:450:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  450 |   if (negative) value = -value;[0m
      | [0;1;32m               ^               
[0m      | [0;32m                {
[0m[1msrc/core/core.c:465:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  465 |   if (negative) *ptr-- = '-';[0m
      | [0;1;32m               ^             
[0m      | [0;32m                {
[0m[1msrc/core/core.c:476:58: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  476 |   if (!validateInteger(vm, ARG(1), &value, "Argument 1")) return;[0m
      | [0;1;32m                                                         ^       
[0m      | [0;32m                                                          {
[0m[1msrc/core/core.c:481:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  481 |   if (value < 0) *ptr++ = '-';[0m
      | [0;1;32m                ^             
[0m      | [0;32m                 {
[0m[1msrc/core/core.c:485:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  485 |     VM_SET_ERROR(vm, newString(vm, "Integer is too large."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:485:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  485 |     VM_SET_ERROR(vm, newString(vm, "Integer is too large."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:492:16: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  492 |   int length = sprintf(ptr, "%x", _x);[0m
      | [0;1;32m               ^~~~~~~
[0m[1msrc/core/core.c:492:16: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  492 |   int length = sprintf(ptr, "%x", _x);[0m
      | [0;1;32m               ^~~~~~~
[0m[1msrc/core/core.c:507:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  507 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:507:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  507 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:518:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  518 |   if (str == NULL) RET(VAR_NULL);[0m
      | [0;1;32m                  ^              
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:527:56: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  527 |   if (!validateInteger(vm, ARG(1), &num, "Argument 1")) return;[0m
      | [0;1;32m                                                       ^       
[0m      | [0;32m                                                        {
[0m[1msrc/core/core.c:530:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  530 |     RET_ERR(newString(vm, "The number should be in range 0x00 to 0xff."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:530:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  530 |     RET_ERR(newString(vm, "The number should be in range 0x00 to 0xff."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:542:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  542 |   if (!validateArgString(vm, 1, &c)) return;[0m
      | [0;1;32m                                    ^       
[0m      | [0;32m                                     {
[0m[1msrc/core/core.c:544:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  544 |     RET_ERR(newString(vm, "Expected a string of length 1."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:544:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  544 |     RET_ERR(newString(vm, "Expected a string of length 1."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:557:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  557 |   if (VM_HAS_ERROR(vm)) RET(VAR_NULL);[0m
      | [0;1;32m                       ^              
[0m      | [0;32m                        {
[0m[1msrc/core/core.c:559:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  559 |   if (toBool(islesser)) RET(a);[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1msrc/core/core.c:569:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  569 |   if (VM_HAS_ERROR(vm)) RET(VAR_NULL);[0m
      | [0;1;32m                       ^              
[0m      | [0;32m                        {
[0m[1msrc/core/core.c:571:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  571 |   if (toBool(islesser)) RET(b);[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1msrc/core/core.c:582:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  582 |   if (vm->config.stdout_write == NULL) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/core/core.c:585:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  585 |     if (i != 1) vm->config.stdout_write(vm, " ");[0m
      | [0;1;32m               ^                                 
[0m      | [0;32m                {
[0m[1msrc/core/core.c:587:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  587 |     if (str == NULL) RET(VAR_NULL);[0m
      | [0;1;32m                    ^              
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:601:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  601 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:601:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  601 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:605:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  605 |   if (vm->config.stdin_read == NULL) return;[0m
      | [0;1;32m                                    ^       
[0m      | [0;32m                                     {
[0m[1msrc/core/core.c:609:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  609 |     if (str == NULL) RET(VAR_NULL);[0m
      | [0;1;32m                    ^              
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:615:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  615 |     RET_ERR(newString(vm, "Input function failed."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:615:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  615 |     RET_ERR(newString(vm, "Input function failed."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:630:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  630 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:630:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  630 |     RET_ERR(newString(vm, "Invalid argument count."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:635:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  635 |     if (!validateInteger(vm, ARG(1), &value, "Argument 1")) return;[0m
      | [0;1;32m                                                           ^       
[0m      | [0;32m                                                            {
[0m[1msrc/core/core.c:650:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  650 |   if (!validateArgList(vm, 1, &list)) return;[0m
      | [0;1;32m                                     ^       
[0m      | [0;32m                                      {
[0m[1msrc/core/core.c:664:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  664 |   if (!validateArgList(vm, 1, &list)) return;[0m
      | [0;1;32m                                     ^       
[0m      | [0;32m                                      {
[0m[1msrc/core/core.c:671:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  671 |     if (str == NULL) RET(VAR_NULL);[0m
      | [0;1;32m                    ^              
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:733:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  733 |     ASSERT(false, stringFormat(vm,[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:733:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  733 |     ASSERT(false, stringFormat(vm,[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:781:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  781 |   if (!validateArgClosure(vm, 1, &closure)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/core/core.c:784:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  784 |                     "Cannot disassemble native functions.")) return;[0m
      | [0;1;32m                                                            ^       
[0m      | [0;32m                                                             {
[0m[1msrc/core/core.c:802:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  802 |   ASSERT(fiber != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:802:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  802 |   ASSERT(fiber != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:815:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  815 |       if (instruction_index == -1) instruction_index = 0;[0m
      | [0;1;32m                                  ^                      
[0m      | [0;32m                                   {
[0m[1msrc/core/core.c:825:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  825 |     if (fiber->caller) fiber = fiber->caller;[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  826 |     else fiber = fiber->native;[0m
      | [0;32m    } 
[0m[1msrc/core/core.c:826:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  826 |     else fiber = fiber->native;[0m
      | [0;1;32m        ^                      
[0m      | [0;32m         {
[0m[1msrc/core/core.c:830:36: [0m[0;1;35mwarning: [0m[1mpassing 'uint8_t *' (aka 'unsigned char *') to parameter of type 'const char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [clang-diagnostic-pointer-sign][0m
  830 |   String* bt = newStringLength(vm, bb.data, bb.count);[0m
      | [0;1;32m                                   ^~~~~~~
[0m[1msrc/core/value.h:583:47: [0m[0;1;36mnote: [0mpassing argument to parameter 'text' here[0m
  583 | String* newStringLength(PKVM* vm, const char* text, uint32_t length);[0m
      | [0;1;32m                                              ^
[0m[1msrc/core/core.c:847:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  847 |       ASSERT(IS_OBJ_TYPE(entry, OBJ_MODULE), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:847:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  847 |       ASSERT(IS_OBJ_TYPE(entry, OBJ_MODULE), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:849:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  849 |       ASSERT(module->name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:849:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  849 |       ASSERT(module->name != NULL, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:914:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  914 |     if (err == NULL) RET(VAR_NUM(value));[0m
      | [0;1;32m                    ^                    
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:915:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  915 |     VM_SET_ERROR(vm, newString(vm, err));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:915:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  915 |     VM_SET_ERROR(vm, newString(vm, err));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:919:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  919 |   VM_SET_ERROR(vm, newString(vm, "Argument must be numeric or string."));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:919:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  919 |   VM_SET_ERROR(vm, newString(vm, "Argument must be numeric or string."));[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:923:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  923 |   if (!pkCheckArgcRange(vm, ARGC, 0, 1)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/core.c:929:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  929 |   if (str == NULL) RET(VAR_NULL);[0m
      | [0;1;32m                  ^              
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:949:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  949 |   if (!validateNumeric(vm, ARG(1), &from, "Argument 1")) return;[0m
      | [0;1;32m                                                        ^       
[0m      | [0;32m                                                         {
[0m[1msrc/core/core.c:950:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  950 |   if (!validateNumeric(vm, ARG(2), &to, "Argument 2")) return;[0m
      | [0;1;32m                                                      ^       
[0m      | [0;32m                                                       {
[0m[1msrc/core/core.c:957:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  957 |   if (!validateArgClosure(vm, 1, &closure)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/core/core.c:984:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  984 |   ASSERT(IS_NUM(SELF), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:984:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  984 |   ASSERT(IS_NUM(SELF), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:988:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  988 |   if (!validateArgClosure(vm, 1, &closure)) return;[0m
      | [0;1;32m                                           ^       
[0m      | [0;32m                                            {
[0m[1msrc/core/core.c:993:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  993 |     if (result != PK_RESULT_SUCCESS) break;[0m
      | [0;1;32m                                    ^      
[0m      | [0;32m                                     {
[0m[1msrc/core/core.c:1018:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1018 |   if (!pkCheckArgcRange(vm, ARGC, 1, 2)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/core.c:1021:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1021 |   if (!validateArgString(vm, 1, &sub)) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/core/core.c:1025:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1025 |     if (!validateInteger(vm, ARG(2), &start, "Argument 1")) return;[0m
      | [0;1;32m                                                           ^       
[0m      | [0;32m                                                            {
[0m[1msrc/core/core.c:1039:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1039 |   if (match == NULL) RET(VAR_NUM((double) -1));[0m
      | [0;1;32m                    ^                          
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:1041:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1041 |   ASSERT_INDEX(match - self->data, self->capacity);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1041:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1041 |   ASSERT_INDEX(match - self->data, self->capacity);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1051:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1051 |   if (!pkCheckArgcRange(vm, ARGC, 2, 3)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/core.c:1054:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1054 |   if (!validateArgString(vm, 1, &old)) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/core/core.c:1055:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1055 |   if (!validateArgString(vm, 2, &new_)) return;[0m
      | [0;1;32m                                       ^       
[0m      | [0;32m                                        {
[0m[1msrc/core/core.c:1061:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1061 |     if (!validateInteger(vm, ARG(3), &count, "Argument 3")) return;[0m
      | [0;1;32m                                                           ^       
[0m      | [0;32m                                                            {
[0m[1msrc/core/core.c:1063:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1063 |       RET_ERR(newString(vm, "count should either be >= 0 or -1"));[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1063:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1063 |       RET_ERR(newString(vm, "count should either be >= 0 or -1"));[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1075:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1075 |   if (!validateArgString(vm, 1, &sep)) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/core/core.c:1078:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1078 |     RET_ERR(newString(vm, "Cannot use empty string as a seperator."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1078:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1078 |     RET_ERR(newString(vm, "Cannot use empty string as a seperator."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1114:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1114 |     if (pre->length > self->length) RET(VAR_FALSE);[0m
      | [0;1;32m                                   ^               
[0m      | [0;32m                                    {
[0m[1msrc/core/core.c:1123:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1123 |         RET_ERR(newString(vm, "Expected a String for prefix."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1123:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1123 |         RET_ERR(newString(vm, "Expected a String for prefix."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1126:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1126 |       if (pre->length > self->length) RET(VAR_FALSE);[0m
      | [0;1;32m                                     ^               
[0m      | [0;32m                                      {
[0m[1msrc/core/core.c:1127:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1127 |       if (strncmp(self->data, pre->data, pre->length) == 0) RET(VAR_TRUE);[0m
      | [0;1;32m                                                           ^              
[0m      | [0;32m                                                            {
[0m[1msrc/core/core.c:1132:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1132 |     RET_ERR(newString(vm, "Expected a String or a List of prifiexes."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1132:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1132 |     RET_ERR(newString(vm, "Expected a String or a List of prifiexes."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1145:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1145 |     if (suf->length > self->length) RET(VAR_FALSE);[0m
      | [0;1;32m                                   ^               
[0m      | [0;32m                                    {
[0m[1msrc/core/core.c:1156:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1156 |         RET_ERR(newString(vm, "Expected a String for suffix."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1156:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1156 |         RET_ERR(newString(vm, "Expected a String for suffix."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1159:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1159 |       if (suf->length > self->length) RET(VAR_FALSE);[0m
      | [0;1;32m                                     ^               
[0m      | [0;32m                                      {
[0m[1msrc/core/core.c:1162:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1162 |       if (strncmp(start, suf->data, suf->length) == 0) RET(VAR_TRUE);[0m
      | [0;1;32m                                                      ^              
[0m      | [0;32m                                                       {
[0m[1msrc/core/core.c:1167:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1167 |     RET_ERR(newString(vm, "Expected a String or a List of suffixes."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1167:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1167 |     RET_ERR(newString(vm, "Expected a String or a List of suffixes."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1175:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1175 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_LIST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1175:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1175 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_LIST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1189:58: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1189 |   if (!validateInteger(vm, ARG(1), &index, "Argument 1")) return;[0m
      | [0;1;32m                                                         ^       
[0m      | [0;32m                                                          {
[0m[1msrc/core/core.c:1192:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1192 |     RET_ERR(newString(vm, "List.insert index out of bounds."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1192:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1192 |     RET_ERR(newString(vm, "List.insert index out of bounds."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1202:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1202 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_LIST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1202:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1202 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_LIST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1205:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1205 |   if (!pkCheckArgcRange(vm, ARGC, 0, 1)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/core.c:1208:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1208 |     RET_ERR(newString(vm, "Cannot pop from an empty list."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1208:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1208 |     RET_ERR(newString(vm, "Cannot pop from an empty list."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1213:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1213 |     if (!validateInteger(vm, ARG(1), &index, "Argument 1")) return;[0m
      | [0;1;32m                                                           ^       
[0m      | [0;32m                                                            {
[0m[1msrc/core/core.c:1215:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1215 |   if (index < 0) index = self->elements.count + index;[0m
      | [0;1;32m                ^                                     
[0m      | [0;32m                 {
[0m[1msrc/core/core.c:1218:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1218 |     RET_ERR(newString(vm, "List.pop index out of bounds."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1218:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1218 |     RET_ERR(newString(vm, "List.pop index out of bounds."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1228:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1228 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_LIST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1228:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1228 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_LIST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1232:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1232 |   if (it == NULL) RET(VAR_NUM(-1)); // Empty list.[0m
      | [0;1;32m                 ^                                
[0m      | [0;32m                  {
[0m[1msrc/core/core.c:1261:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1261 |   if (!pkCheckArgcRange(vm, ARGC, 1, 2)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/core.c:1268:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1268 |   if (IS_UNDEF(value)) RET(default_);[0m
      | [0;1;32m                      ^              
[0m      | [0;32m                       {
[0m[1msrc/core/core.c:1288:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1288 |     RET_ERR(stringFormat(vm, "Key '@' does not exists.", toRepr(vm, ARG(1))));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1288:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1288 |     RET_ERR(stringFormat(vm, "Key '@' does not exists.", toRepr(vm, ARG(1))));[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:34:5: [0m[0;1;36mnote: [0mexpanded from macro 'RET_ERR'[0m
   34 |     VM_SET_ERROR(vm, err);     \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1310:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1310 |     VM_SET_ERROR(vm, newString(vm, "Cannot bind method, instance and method "[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1310:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1310 |     VM_SET_ERROR(vm, newString(vm, "Cannot bind method, instance and method "[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1331:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1331 |     ASSERT(method->fn->name, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1331:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1331 |     ASSERT(method->fn->name, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1332:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1332 |     if (method->fn->name[0] == SPECIAL_NAME_CHAR) continue;[0m
      | [0;1;32m                                                 ^         
[0m      | [0;32m                                                  {
[0m[1msrc/core/core.c:1370:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1370 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_FIBER), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1370:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1370 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_FIBER), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1388:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1388 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_FIBER), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1388:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1388 |   ASSERT(IS_OBJ_TYPE(SELF, OBJ_FIBER), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1391:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1391 |   if (!pkCheckArgcRange(vm, ARGC, 0, 1)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/core.c:1410:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1410 |     if (i != 0) super = vm->builtin_classes[PK_OBJECT];[0m
      | [0;1;32m               ^                                       
[0m      | [0;32m                {
[0m[1msrc/core/core.c:1502:11: [0m[0;1;35mwarning: [0m[1menumeration value 'PK_METHOD_BIND' not handled in switch [clang-diagnostic-switch][0m
 1502 |   switch (cls->class_of) {[0m
      | [0;1;32m          ^~~~~~~~~~~~~
[0m[1msrc/core/core.c:1504:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1504 |       NO_INSTANCE("Object");[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1500 |                "Class '" type_name "' cannot be instanciated."))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1504:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1504 |       NO_INSTANCE("Object");[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1500 |                "Class '" type_name "' cannot be instanciated."))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1504:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1504 |       NO_INSTANCE("Object");[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1505 |       return VAR_NULL;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   45 |   do {                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1517:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1517 |       NO_INSTANCE("Module");[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1500 |                "Class '" type_name "' cannot be instanciated."))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1517:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1517 |       NO_INSTANCE("Module");[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1500 |                "Class '" type_name "' cannot be instanciated."))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1517:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1517 |       NO_INSTANCE("Module");[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1518 |       return VAR_NULL;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   45 |   do {                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1521:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1521 |       NO_INSTANCE("Closure");[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1500 |                "Class '" type_name "' cannot be instanciated."))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1521:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1521 |       NO_INSTANCE("Closure");[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1500 |                "Class '" type_name "' cannot be instanciated."))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1521:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1521 |       NO_INSTANCE("Closure");[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1522 |       return VAR_NULL;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   45 |   do {                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1525:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1525 |       return VAR_NULL;[0m
      | [0;1;32m      ^              
[0m      | [0;32m      {              ;} 
[0m[1msrc/core/core.c:1528:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1528 |       NO_INSTANCE("Class");[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1500 |                "Class '" type_name "' cannot be instanciated."))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1528:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1528 |       NO_INSTANCE("Class");[0m
      | [0;1;32m      ^
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1500 |                "Class '" type_name "' cannot be instanciated."))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1528:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1528 |       NO_INSTANCE("Class");[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1529 |       return VAR_NULL;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/core/core.c:1499:3: [0m[0;1;36mnote: [0mexpanded from macro 'NO_INSTANCE'[0m
 1499 |   VM_SET_ERROR(vm, newString(vm, \[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:45:3: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   45 |   do {                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1532:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1532 |       return VAR_OBJ(newInstance(vm, cls));[0m
      | [0;1;32m      ^                                   
[0m      | [0;32m      {                                   ;} 
[0m[1msrc/core/core.c:1535:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1535 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:1535:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1535 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:1544:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1544 |   ASSERT(IS_OBJ_TYPE(instance, OBJ_INST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1544:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1544 |   ASSERT(IS_OBJ_TYPE(instance, OBJ_INST), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1556:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1556 |       ASSERT(method_->fn->is_method, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1556:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1556 |       ASSERT(method_->fn->is_method, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1569:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1569 |   ASSERT(cls != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1569:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1569 |   ASSERT(cls != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1584:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1584 |     if (is_method) *is_method = true;[0m
      | [0;1;32m                  ^                  
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:1589:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1589 |   if (is_method) *is_method = false;[0m
      | [0;1;32m                ^                   
[0m      | [0;32m                 {
[0m[1msrc/core/core.c:1596:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1596 |     VM_SET_ERROR(vm, stringFormat(vm, "'$' object has no parent class.", \[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1596:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1596 |     VM_SET_ERROR(vm, stringFormat(vm, "'$' object has no parent class.", \[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1603:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1603 |     VM_SET_ERROR(vm, stringFormat(vm, "'@' class has no method named '@'.", \[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1603:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1603 |     VM_SET_ERROR(vm, stringFormat(vm, "'@' class has no method named '@'.", \[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1669:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1669 |   double n; if (isNumeric(v, &n)) return v;[0m
      | [0;1;32m                                 ^         
[0m      | [0;32m                                  {
[0m[1msrc/core/core.c:1671:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1671 |   UNSUPPORTED_UNARY_OP("unary +");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1610:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_UNARY_OP'[0m
 1610 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand ($) for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1611 |                "unary operator " op ".", varTypeName(v)))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1671:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1671 |   UNSUPPORTED_UNARY_OP("unary +");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1610:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_UNARY_OP'[0m
 1610 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand ($) for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1611 |                "unary operator " op ".", varTypeName(v)))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1676:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1676 |   double n; if (isNumeric(v, &n)) return VAR_NUM(-AS_NUM(v));[0m
      | [0;1;32m                                 ^                           
[0m      | [0;32m                                  {
[0m[1msrc/core/core.c:1678:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1678 |   UNSUPPORTED_UNARY_OP("unary -");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1610:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_UNARY_OP'[0m
 1610 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand ($) for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1611 |                "unary operator " op ".", varTypeName(v)))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1678:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1678 |   UNSUPPORTED_UNARY_OP("unary -");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1610:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_UNARY_OP'[0m
 1610 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand ($) for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1611 |                "unary operator " op ".", varTypeName(v)))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1689:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1689 |   if (isInteger(v, &i)) return VAR_NUM((double)(~i));[0m
      | [0;1;32m                       ^                             
[0m      | [0;32m                        {
[0m[1msrc/core/core.c:1691:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1691 |   UNSUPPORTED_UNARY_OP("unary ~");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1610:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_UNARY_OP'[0m
 1610 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand ($) for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1611 |                "unary operator " op ".", varTypeName(v)))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1691:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1691 |   UNSUPPORTED_UNARY_OP("unary ~");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1610:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_UNARY_OP'[0m
 1610 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand ($) for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1611 |                "unary operator " op ".", varTypeName(v)))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1703:24: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1703 |       case OBJ_STRING: {[0m
      | [0;1;32m                       ^
[0m      | [0;32m                       {
[0m 1704 |         if (!IS_OBJ(v2)) break;[0m
 1705 |         Object* o2 = AS_OBJ(v2);[0m
 1706 |         if (o2->type == OBJ_STRING) {[0m
 1707 |           return VAR_OBJ(stringJoin(vm, (String*)o1, (String*)o2));[0m
 1708 |         }[0m
 1709 |       } break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/core.c:1704:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1704 |         if (!IS_OBJ(v2)) break;[0m
      | [0;1;32m                        ^      
[0m      | [0;32m                         {
[0m[1msrc/core/core.c:1711:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1711 |       case OBJ_LIST: {[0m
      | [0;1;32m                     ^
[0m      | [0;32m                     {
[0m 1712 |         if (!IS_OBJ(v2)) break;[0m
 1713 |         Object* o2 = AS_OBJ(v2);[0m
 1714 |         if (o2->type == OBJ_LIST) {[0m
 1715 |           if (inplace) {[0m
 1716 |             pkVarBufferConcat(&((List*)o1)->elements, vm,[0m
 1717 |                               &((List*)o2)->elements);[0m
 1718 |             return v1;[0m
 1719 |           } else {[0m
 1720 |             return VAR_OBJ(listAdd(vm, (List*)o1, (List*)o2));[0m
 1721 |           }[0m
 1722 |         }[0m
 1723 |       } break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/core.c:1712:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1712 |         if (!IS_OBJ(v2)) break;[0m
      | [0;1;32m                        ^      
[0m      | [0;32m                         {
[0m[1msrc/core/core.c:1725:16: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1725 |       default: break;[0m
      | [0;1;32m               ^    
[0m      | [0;32m               {    ;} 
[0m[1msrc/core/core.c:1729:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1729 |   UNSUPPORTED_BINARY_OP("+");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1729:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1729 |   UNSUPPORTED_BINARY_OP("+");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1743:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1743 |     TODO; // "fmt" % v2.[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:111:14: [0m[0;1;36mnote: [0mexpanded from macro 'TODO'[0m
  111 | #define TODO __ASSERT(false, "TODO: It hasn't implemented yet.")[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1743:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1743 |     TODO; // "fmt" % v2.[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:111:14: [0m[0;1;36mnote: [0mexpanded from macro 'TODO'[0m
  111 | #define TODO __ASSERT(false, "TODO: It hasn't implemented yet.")[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1747:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1747 |   UNSUPPORTED_BINARY_OP("%");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1747:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1747 |   UNSUPPORTED_BINARY_OP("%");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1756:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1756 |   UNSUPPORTED_BINARY_OP("-");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1756:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1756 |   UNSUPPORTED_BINARY_OP("-");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1768:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1768 |       if (left->length == 0) return VAR_OBJ(left);[0m
      | [0;1;32m                            ^                     
[0m      | [0;32m                             {
[0m[1msrc/core/core.c:1769:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1769 |       if (right == 0) return VAR_OBJ(newString(vm, ""));[0m
      | [0;1;32m                     ^                                  
[0m      | [0;32m                      {
[0m[1msrc/core/core.c:1773:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1773 |       if (right < 0) return VAR_OBJ(newString(vm, ""));[0m
      | [0;1;32m                    ^                                  
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:1778:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1778 |         memcpy(buff, left->data, left->length);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/core/core.c:1778:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1778 |         memcpy(buff, left->data, left->length);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/core/core.c:1781:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1781 |       ASSERT(buff == str->data + str->length, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1781:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1781 |       ASSERT(buff == str->data + str->length, OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1787:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1787 |   UNSUPPORTED_BINARY_OP("*");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1787:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1787 |   UNSUPPORTED_BINARY_OP("*");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1794:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1794 |   UNSUPPORTED_BINARY_OP("/");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1794:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1794 |   UNSUPPORTED_BINARY_OP("/");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1808:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1808 |   UNSUPPORTED_BINARY_OP("**");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1808:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1808 |   UNSUPPORTED_BINARY_OP("**");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1815:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1815 |   UNSUPPORTED_BINARY_OP("&");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1815:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1815 |   UNSUPPORTED_BINARY_OP("&");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1822:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1822 |   UNSUPPORTED_BINARY_OP("|");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1822:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1822 |   UNSUPPORTED_BINARY_OP("|");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1829:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1829 |   UNSUPPORTED_BINARY_OP("^");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1829:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1829 |   UNSUPPORTED_BINARY_OP("^");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1836:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1836 |   UNSUPPORTED_BINARY_OP("<<");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1836:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1836 |   UNSUPPORTED_BINARY_OP("<<");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1843:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1843 |   UNSUPPORTED_BINARY_OP(">>");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1843:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1843 |   UNSUPPORTED_BINARY_OP(">>");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1857:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1857 |   UNSUPPORTED_BINARY_OP(">");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1857:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1857 |   UNSUPPORTED_BINARY_OP(">");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1865:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1865 |   UNSUPPORTED_BINARY_OP("<");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1865:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1865 |   UNSUPPORTED_BINARY_OP("<");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1876:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1876 |     if (str == NULL) return VAR_NULL;[0m
      | [0;1;32m                    ^                
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:1883:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1883 |   UNSUPPORTED_BINARY_OP("..");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1883:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1883 |   UNSUPPORTED_BINARY_OP("..");[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1614:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNSUPPORTED_BINARY_OP'[0m
 1614 |   VM_SET_ERROR(vm, stringFormat(vm, "Unsupported operand types for " \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1615 |     "operator '" op "' $ and $", varTypeName(v1), varTypeName(v2)))[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1895:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1895 |     VM_SET_ERROR(vm, stringFormat(vm, "'$' is not iterable.",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1895:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1895 |     VM_SET_ERROR(vm, stringFormat(vm, "'$' is not iterable.",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1901:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1901 |     case OBJ_STRING: {[0m
      | [0;1;32m                     ^
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:1903:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1903 |         VM_SET_ERROR(vm, stringFormat(vm, "Expected a string operand."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1903:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1903 |         VM_SET_ERROR(vm, stringFormat(vm, "Expected a string operand."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1909:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1909 |       if (sub->length > str->length) return false;[0m
      | [0;1;32m                                    ^             
[0m      | [0;32m                                     {
[0m[1msrc/core/core.c:1919:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1919 |     case OBJ_LIST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m 1920 |       List* list = (List*)AS_OBJ(container);[0m
 1921 |       for (uint32_t i = 0; i < list->elements.count; i++) {[0m
 1922 |         if (isValuesEqual(elem, list->elements.data[i])) return true;[0m
 1923 |       }[0m
 1924 |       return false;[0m
 1925 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:1922:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1922 |         if (isValuesEqual(elem, list->elements.data[i])) return true;[0m
      | [0;1;32m                                                        ^            
[0m      | [0;32m                                                         {
[0m[1msrc/core/core.c:1927:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1927 |     case OBJ_MAP: {[0m
      | [0;1;32m                  ^
[0m      | [0;32m                  {
[0m 1928 |       Map* map = (Map*)AS_OBJ(container);[0m
 1929 |       return !IS_UNDEF(mapGet(map, elem));[0m
 1930 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:1932:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1932 |     default: break;[0m
      | [0;1;32m             ^    
[0m      | [0;32m             {    ;} 
[0m[1msrc/core/core.c:1942:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1942 |   VM_SET_ERROR(vm, stringFormat(vm, "Argument of type $ is not iterable.",[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1942:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1942 |   VM_SET_ERROR(vm, stringFormat(vm, "Argument of type $ is not iterable.",[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1949:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1949 |     VM_SET_ERROR(vm, newString(vm, "Right operand must be a class."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1949:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1949 |     VM_SET_ERROR(vm, newString(vm, "Right operand must be a class."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1957:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1957 |     if (cls_inst == cls) return true;[0m
      | [0;1;32m                        ^            
[0m      | [0;32m                         {
[0m[1msrc/core/core.c:1975:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1975 |     ERR_NO_ATTRIB(vm, on, attrib);[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:1967:3: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_NO_ATTRIB'[0m
 1967 |   VM_SET_ERROR(vm, stringFormat(vm, "'$' object has no attribute named '$'.", \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1968 |                                 varTypeName(on), attrib->data))[0m
      | [0;1;32m                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1975:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1975 |     ERR_NO_ATTRIB(vm, on, attrib);[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:1967:3: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_NO_ATTRIB'[0m
 1967 |   VM_SET_ERROR(vm, stringFormat(vm, "'$' object has no attribute named '$'.", \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1968 |                                 varTypeName(on), attrib->data))[0m
      | [0;1;32m                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:1981:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1981 |     case OBJ_STRING: {[0m
      | [0;1;32m                     ^
[0m      | [0;32m                     {
[0m 1982 |       String* str = (String*)obj;[0m
 1983 |       switch (attrib->hash) {[0m
 1984 | [0m
 1985 |         case CHECK_HASH("length", 0x83d03615):[0m
 1986 |           return VAR_NUM((double)(str->length));[0m
 1987 |       }[0m
 1988 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:1986:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1986 |           return VAR_NUM((double)(str->length));[0m
      | [0;1;32m          ^                                    
[0m      | [0;32m          {                                    ;} 
[0m[1msrc/core/core.c:1990:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1990 |     case OBJ_LIST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m 1991 |       List* list = (List*)obj;[0m
 1992 |       switch (attrib->hash) {[0m
 1993 | [0m
 1994 |         case CHECK_HASH("length", 0x83d03615):[0m
 1995 |           return VAR_NUM((double)(list->elements.count));[0m
 1996 |       }[0m
 1997 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:1995:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1995 |           return VAR_NUM((double)(list->elements.count));[0m
      | [0;1;32m          ^                                             
[0m      | [0;32m          {                                             ;} 
[0m[1msrc/core/core.c:1999:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1999 |     case OBJ_MAP: {[0m
      | [0;1;32m                  ^
[0m      | [0;32m                  {
[0m 2000 |       // TODO:[0m
 2001 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2003:21: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2003 |     case OBJ_RANGE: {[0m
      | [0;1;32m                    ^
[0m      | [0;32m                    {
[0m[1msrc/core/core.c:2008:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2008 |           return VAR_OBJ(rangeAsList(vm, range));[0m
      | [0;1;32m          ^                                     
[0m      | [0;32m          {                                     ;} 
[0m[1msrc/core/core.c:2015:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2015 |           return VAR_NUM(range->from);[0m
      | [0;1;32m          ^                          
[0m      | [0;32m          {                          ;} 
[0m[1msrc/core/core.c:2018:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2018 |           return VAR_NUM(range->to);[0m
      | [0;1;32m          ^                        
[0m      | [0;32m          {                        ;} 
[0m[1msrc/core/core.c:2022:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2022 |     case OBJ_MODULE: {[0m
      | [0;1;32m                     ^
[0m      | [0;32m                     {
[0m 2023 |       Module* module = (Module*)obj;[0m
 2024 | [0m
 2025 |       // Search in globals.[0m
 2026 |       int index = moduleGetGlobalIndex(module, attrib->data, attrib->length);[0m
 2027 |       if (index != -1) {[0m
 2028 |         ASSERT_INDEX((uint32_t)index, module->globals.count);[0m
 2029 |         return module->globals.data[index];[0m
 2030 |       }[0m
 2031 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2028:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2028 |         ASSERT_INDEX((uint32_t)index, module->globals.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2028:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2028 |         ASSERT_INDEX((uint32_t)index, module->globals.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2034:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2034 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/core/core.c:2036:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2036 |     case OBJ_CLOSURE: {[0m
      | [0;1;32m                      ^
[0m      | [0;32m                      {
[0m[1msrc/core/core.c:2041:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2041 |           return VAR_OBJ(newString(vm, closure->fn->name));[0m
      | [0;1;32m          ^                                               
[0m      | [0;32m          {                                               ;} 
[0m[1msrc/core/core.c:2044:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2044 |           if (closure->fn->docstring) {[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m 2045 |             return VAR_OBJ(newString(vm, closure->fn->docstring));[0m
 2046 |           } else {[0m
 2047 |             return VAR_OBJ(newString(vm, ""));[0m
 2048 |           }[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2051:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2051 |           return VAR_NUM((double)(closure->fn->arity));[0m
      | [0;1;32m          ^                                           
[0m      | [0;32m          {                                           ;} 
[0m[1msrc/core/core.c:2056:27: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2056 |     case OBJ_METHOD_BIND: {[0m
      | [0;1;32m                          ^
[0m      | [0;32m                          {
[0m[1msrc/core/core.c:2061:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2061 |           if (mb->method->fn->docstring) {[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m 2062 |             return VAR_OBJ(newString(vm, mb->method->fn->docstring));[0m
 2063 |           } else {[0m
 2064 |             return VAR_OBJ(newString(vm, ""));[0m
 2065 |           }[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2068:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2068 |           return VAR_OBJ(newString(vm, mb->method->fn->name));[0m
      | [0;1;32m          ^                                                  
[0m      | [0;32m          {                                                  ;} 
[0m[1msrc/core/core.c:2071:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2071 |           if (IS_UNDEF(mb->instance)) return VAR_NULL;[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m 2072 |           return mb->instance;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1msrc/core/core.c:2071:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2071 |           if (IS_UNDEF(mb->instance)) return VAR_NULL;[0m
      | [0;1;32m                                     ^                
[0m      | [0;32m                                      {
[0m[1msrc/core/core.c:2078:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2078 |       UNREACHABLE(); // Upvalues aren't first class objects.[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:2078:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2078 |       UNREACHABLE(); // Upvalues aren't first class objects.[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:2078:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2078 |       UNREACHABLE(); // Upvalues aren't first class objects.[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 2079 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:2081:21: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2081 |     case OBJ_FIBER: {[0m
      | [0;1;32m                    ^
[0m      | [0;32m                    {
[0m 2082 |       Fiber* fb = (Fiber*)obj;[0m
 2083 |       switch (attrib->hash) {[0m
 2084 | [0m
 2085 |         case CHECK_HASH("is_done", 0x789c2706):[0m
 2086 |           return VAR_BOOL(fb->state == FIBER_DONE);[0m
 2087 | [0m
 2088 |         case CHECK_HASH("function", 0x9ed64249):[0m
 2089 |           return VAR_OBJ(fb->closure);[0m
 2090 |       }[0m
 2091 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2086:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2086 |           return VAR_BOOL(fb->state == FIBER_DONE);[0m
      | [0;1;32m          ^                                       
[0m      | [0;32m          {                                       ;} 
[0m[1msrc/core/core.c:2089:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2089 |           return VAR_OBJ(fb->closure);[0m
      | [0;1;32m          ^                          
[0m      | [0;32m          {                          ;} 
[0m[1msrc/core/core.c:2093:21: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2093 |     case OBJ_CLASS: {[0m
      | [0;1;32m                    ^
[0m      | [0;32m                    {
[0m[1msrc/core/core.c:2098:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2098 |           if (cls->docstring) {[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m 2099 |             return VAR_OBJ(newString(vm, cls->docstring));[0m
 2100 |           } else {[0m
 2101 |             return VAR_OBJ(newString(vm, ""));[0m
 2102 |           }[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2105:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2105 |           return VAR_OBJ(newString(vm, cls->name->data));[0m
      | [0;1;32m          ^                                             
[0m      | [0;32m          {                                             ;} 
[0m[1msrc/core/core.c:2108:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2108 |           if (cls->super_class != NULL) {[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m 2109 |             return VAR_OBJ(cls->super_class);[0m
 2110 |           } else {[0m
 2111 |             return VAR_NULL;[0m
 2112 |           }[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2116:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2116 |       if (!IS_UNDEF(value)) return  value;[0m
      | [0;1;32m                           ^              
[0m      | [0;32m                            {
[0m[1msrc/core/core.c:2120:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2120 |         ASSERT(method_->fn->is_method, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2120:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2120 |         ASSERT(method_->fn->is_method, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2129:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2129 |     case OBJ_INST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:2150:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2150 |       if (!IS_UNDEF(value)) return value;[0m
      | [0;1;32m                           ^             
[0m      | [0;32m                            {
[0m[1msrc/core/core.c:2162:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2162 |   ERR_NO_ATTRIB(vm, on, attrib);[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1967:3: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_NO_ATTRIB'[0m
 1967 |   VM_SET_ERROR(vm, stringFormat(vm, "'$' object has no attribute named '$'.", \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1968 |                                 varTypeName(on), attrib->data))[0m
      | [0;1;32m                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2162:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2162 |   ERR_NO_ATTRIB(vm, on, attrib);[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:1967:3: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_NO_ATTRIB'[0m
 1967 |   VM_SET_ERROR(vm, stringFormat(vm, "'$' object has no attribute named '$'.", \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1968 |                                 varTypeName(on), attrib->data))[0m
      | [0;1;32m                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2177:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2177 |     ERR_NO_ATTRIB(vm, on, attrib);[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:2172:3: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_NO_ATTRIB'[0m
 2172 |   VM_SET_ERROR(vm, stringFormat(vm,                                 \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2173 |                    "'$' object has no mutable attribute named '$'", \[0m
      | [0;1;32m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2174 |                    varTypeName(on), attrib->data))[0m
      | [0;1;32m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2177:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2177 |     ERR_NO_ATTRIB(vm, on, attrib);[0m
      | [0;1;32m    ^
[0m[1msrc/core/core.c:2172:3: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_NO_ATTRIB'[0m
 2172 |   VM_SET_ERROR(vm, stringFormat(vm,                                 \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2173 |                    "'$' object has no mutable attribute named '$'", \[0m
      | [0;1;32m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2174 |                    varTypeName(on), attrib->data))[0m
      | [0;1;32m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2184:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2184 |     case OBJ_MODULE: {[0m
      | [0;1;32m                     ^
[0m      | [0;32m                     {
[0m 2185 |       moduleSetGlobal(vm, (Module*) obj, attrib->data, attrib->length, value);[0m
 2186 |     } return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/core.c:2190:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2190 |       UNREACHABLE(); // Functions aren't first class objects.[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:2190:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2190 |       UNREACHABLE(); // Functions aren't first class objects.[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:2191:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2191 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/core/core.c:2199:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2199 |     case OBJ_INST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:2229:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2229 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/core/core.c:2232:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2232 |   ERR_NO_ATTRIB(vm, on, attrib);[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:2172:3: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_NO_ATTRIB'[0m
 2172 |   VM_SET_ERROR(vm, stringFormat(vm,                                 \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2173 |                    "'$' object has no mutable attribute named '$'", \[0m
      | [0;1;32m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2174 |                    varTypeName(on), attrib->data))[0m
      | [0;1;32m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2232:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2232 |   ERR_NO_ATTRIB(vm, on, attrib);[0m
      | [0;1;32m  ^
[0m[1msrc/core/core.c:2172:3: [0m[0;1;36mnote: [0mexpanded from macro 'ERR_NO_ATTRIB'[0m
 2172 |   VM_SET_ERROR(vm, stringFormat(vm,                                 \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2173 |                    "'$' object has no mutable attribute named '$'", \[0m
      | [0;1;32m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2174 |                    varTypeName(on), attrib->data))[0m
      | [0;1;32m                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2246:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2246 |     VM_SET_ERROR(vm, newString(vm, "Expected a whole number."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2246:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2246 |     VM_SET_ERROR(vm, newString(vm, "Expected a whole number."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2253:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2253 |   if (from < 0) from = count + from;[0m
      | [0;1;32m               ^                    
[0m      | [0;32m                {
[0m[1msrc/core/core.c:2254:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2254 |   if (to < 0) to = count + to;[0m
      | [0;1;32m             ^                
[0m      | [0;32m              {
[0m[1msrc/core/core.c:2275:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2275 |     VM_SET_ERROR(vm, newString(vm, "Index out of bound."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2275:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2275 |     VM_SET_ERROR(vm, newString(vm, "Index out of bound."));[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2296:56: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2296 |   if (start == 0 && length == str->length && !reversed) return str;[0m
      | [0;1;32m                                                       ^           
[0m      | [0;32m                                                        {
[0m[1msrc/core/core.c:2301:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2301 |   if (!reversed) return slice;[0m
      | [0;1;32m                ^             
[0m      | [0;32m                 {
[0m[1msrc/core/core.c:2336:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2336 |     VM_SET_ERROR(vm, stringFormat(vm, "$ type is not subscriptable.",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2336:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2336 |     VM_SET_ERROR(vm, stringFormat(vm, "$ type is not subscriptable.",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2343:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2343 |     case OBJ_STRING: {[0m
      | [0;1;32m                     ^
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:2350:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2350 |         if (index < 0) index = str->length + index;[0m
      | [0;1;32m                      ^                            
[0m      | [0;32m                       {
[0m[1msrc/core/core.c:2352:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2352 |           VM_SET_ERROR(vm, newString(vm, "String index out of bound."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2352:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2352 |           VM_SET_ERROR(vm, newString(vm, "String index out of bound."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2362:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2362 |         if (subs != NULL) return VAR_OBJ(subs);[0m
      | [0;1;32m                         ^                     
[0m      | [0;32m                          {
[0m[1msrc/core/core.c:2368:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2368 |     case OBJ_LIST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m[1msrc/core/core.c:2374:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2374 |         if (index < 0) index = elems->count + index;[0m
      | [0;1;32m                      ^                             
[0m      | [0;32m                       {
[0m[1msrc/core/core.c:2376:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2376 |           VM_SET_ERROR(vm, newString(vm, "List index out of bound."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2376:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2376 |           VM_SET_ERROR(vm, newString(vm, "List index out of bound."));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2384:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2384 |         if (sublist != NULL) return VAR_OBJ(sublist);[0m
      | [0;1;32m                            ^                        
[0m      | [0;32m                             {
[0m[1msrc/core/core.c:2390:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2390 |     case OBJ_MAP: {[0m
      | [0;1;32m                  ^
[0m      | [0;32m                  {
[0m[1msrc/core/core.c:2395:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2395 |           VM_SET_ERROR(vm, stringFormat(vm, "Unhashable key '$'.",[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2395:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2395 |           VM_SET_ERROR(vm, stringFormat(vm, "Unhashable key '$'.",[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2400:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2400 |           VM_SET_ERROR(vm, stringFormat(vm, "Key '@' not exists", key_repr));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2400:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2400 |           VM_SET_ERROR(vm, stringFormat(vm, "Key '@' not exists", key_repr));[0m
      | [0;1;32m          ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2410:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2410 |       UNREACHABLE(); // Not first class objects.[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:2410:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2410 |       UNREACHABLE(); // Not first class objects.[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:2412:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2412 |     case OBJ_INST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m 2413 |       Var ret;[0m
 2414 |       if (_callBinaryOpMethod(vm, on, key, "[]", &ret)) {[0m
 2415 |         return ret;[0m
 2416 |       }[0m
 2417 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2420:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2420 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/core/core.c:2423:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2423 |   VM_SET_ERROR(vm, stringFormat(vm, "$ type is not subscriptable.",[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2423:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2423 |   VM_SET_ERROR(vm, stringFormat(vm, "$ type is not subscriptable.",[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2430:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2430 |     VM_SET_ERROR(vm, stringFormat(vm, "$ type is not subscriptable.",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2430:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2430 |     VM_SET_ERROR(vm, stringFormat(vm, "$ type is not subscriptable.",[0m
      | [0;1;32m    ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2437:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2437 |     case OBJ_LIST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m 2438 |       int64_t index;[0m
 2439 |       pkVarBuffer* elems = &((List*)obj)->elements;[0m
 2440 |       if (!validateInteger(vm, key, &index, "List index")) return;[0m
 2441 | [0m
 2442 |       // Normalize index.[0m
 2443 |       if (index < 0) index = elems->count + index;[0m
 2444 |       if (index >= elems->count || index < 0) {[0m
 2445 |         VM_SET_ERROR(vm, newString(vm, "List index out of bound."));[0m
 2446 |         return;[0m
 2447 |       }[0m
 2448 |       elems->data[index] = value;[0m
 2449 |       return;[0m
 2450 | [0m
 2451 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2440:59: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2440 |       if (!validateInteger(vm, key, &index, "List index")) return;[0m
      | [0;1;32m                                                          ^       
[0m      | [0;32m                                                           {
[0m[1msrc/core/core.c:2443:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2443 |       if (index < 0) index = elems->count + index;[0m
      | [0;1;32m                    ^                             
[0m      | [0;32m                     {
[0m[1msrc/core/core.c:2445:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2445 |         VM_SET_ERROR(vm, newString(vm, "List index out of bound."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2445:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2445 |         VM_SET_ERROR(vm, newString(vm, "List index out of bound."));[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2453:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2453 |     case OBJ_MAP: {[0m
      | [0;1;32m                  ^
[0m      | [0;32m                  {
[0m 2454 |       if (IS_OBJ(key) && !isObjectHashable(AS_OBJ(key)->type)) {[0m
 2455 |         VM_SET_ERROR(vm, stringFormat(vm, "$ type is not hashable.",[0m
 2456 |                                       varTypeName(key)));[0m
 2457 |       } else {[0m
 2458 |         mapSet(vm, (Map*)obj, key, value);[0m
 2459 |       }[0m
 2460 |       return;[0m
 2461 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2455:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2455 |         VM_SET_ERROR(vm, stringFormat(vm, "$ type is not hashable.",[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2455:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2455 |         VM_SET_ERROR(vm, stringFormat(vm, "$ type is not hashable.",[0m
      | [0;1;32m        ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2465:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2465 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:2465:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2465 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/core.c:2467:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2467 |     case OBJ_INST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m 2468 | [0m
 2469 |       Closure* closure = NULL;[0m
 2470 |       String* name = newString(vm, "[]=");[0m
 2471 |       vmPushTempRef(vm, &name->_super); // name.[0m
 2472 |       bool has_method = hasMethod(vm, on, name, &closure);[0m
 2473 |       vmPopTempRef(vm); // name.[0m
 2474 | [0m
 2475 |       if (has_method) {[0m
 2476 |         Var args[2] = { key, value };[0m
 2477 |         vmCallMethod(vm, on, closure, 2, args, NULL);[0m
 2478 |         return;[0m
 2479 |       }[0m
 2480 | [0m
 2481 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/core.c:2484:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2484 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/core/core.c:2487:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2487 |   VM_SET_ERROR(vm, stringFormat(vm, "$ type is not subscriptable.",[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/core.c:2487:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2487 |   VM_SET_ERROR(vm, stringFormat(vm, "$ type is not subscriptable.",[0m
      | [0;1;32m  ^
[0m[1msrc/core/vm.h:46:5: [0m[0;1;36mnote: [0mexpanded from macro 'VM_SET_ERROR'[0m
   46 |     ASSERT(!VM_HAS_ERROR(vm), OOPS); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m286 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[15/18][170.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpb4y_t5u_.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/core/debug.c
[1msrc/core/debug.c:32:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   32 |   if (writefn == NULL) return;[0m
      | [0;1;32m                      ^       
[0m      | [0;32m                       {
[0m[1msrc/core/debug.c:43:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   43 |     snprintf((char*)buff.data, buff.capacity, "%d", line);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1msrc/core/debug.c:43:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
   43 |     snprintf((char*)buff.data, buff.capacity, "%d", line);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1msrc/core/debug.c:52:16: [0m[0;1;35mwarning: [0m[1mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   52 |     int size = vsnprintf(NULL, 0, fmt, args_copy) + 1;[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1msrc/core/debug.c:52:16: [0m[0;1;36mnote: [0mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11[0m
   52 |     int size = vsnprintf(NULL, 0, fmt, args_copy) + 1;[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1msrc/core/debug.c:55:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   55 |     ASSERT(size >= 0, "vnsprintf() failed.");[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:55:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   55 |     ASSERT(size >= 0, "vnsprintf() failed.");[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:57:5: [0m[0;1;35mwarning: [0m[1mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   57 |     vsnprintf((char*)buff.data, size, fmt, args);[0m
      | [0;1;32m    ^~~~~~~~~
[0m[1msrc/core/debug.c:57:5: [0m[0;1;36mnote: [0mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11[0m
   57 |     vsnprintf((char*)buff.data, size, fmt, args);[0m
      | [0;1;32m    ^~~~~~~~~
[0m[1msrc/core/debug.c:64:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   64 |     if (start < 1) start = 1;[0m
      | [0;1;32m                  ^          
[0m      | [0;32m                   {
[0m[1msrc/core/debug.c:76:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |         if (*c == '\n') curr_line--;[0m
      | [0;1;32m                       ^            
[0m      | [0;32m                        {
[0m[1msrc/core/debug.c:77:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   77 |         if (c == source) break;[0m
      | [0;1;32m                        ^      
[0m      | [0;32m                         {
[0m[1msrc/core/debug.c:83:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   83 |       ASSERT(*c == '\n', OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:83:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   83 |       ASSERT(*c == '\n', OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:91:7: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   91 |       snprintf((char*)buff.data, buff.capacity,[0m
      | [0;1;32m      ^~~~~~~~
[0m[1msrc/core/debug.c:91:7: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
   91 |       snprintf((char*)buff.data, buff.capacity,[0m
      | [0;1;32m      ^~~~~~~~
[0m[1msrc/core/debug.c:99:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   99 |         while (*c != '\0' && *c != '\n') c++;[0m
      | [0;1;32m                                        ^    
[0m      | [0;32m                                         {
[0m[1msrc/core/debug.c:131:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  131 |             if (*tail_start == '\0') break;[0m
      | [0;1;32m                                    ^      
[0m      | [0;32m                                     {
[0m[1msrc/core/debug.c:136:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  136 |           while (*c != '\0' && *c != '\n') c++;[0m
      | [0;1;32m                                          ^    
[0m      | [0;32m                                           {
[0m[1msrc/core/debug.c:173:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  173 |       if (*c == '\0') break;[0m
      | [0;1;32m                     ^      
[0m      | [0;32m                      {
[0m[1msrc/core/debug.c:183:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  183 |   ASSERT(!fn->is_native, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:183:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  183 |   ASSERT(!fn->is_native, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:190:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  190 |   if (instruction_index == -1) instruction_index++;[0m
      | [0;1;32m                              ^                    
[0m      | [0;32m                               {
[0m[1msrc/core/debug.c:198:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  198 |     sprintf(buff, "%2d", line);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/debug.c:198:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  198 |     sprintf(buff, "%2d", line);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/debug.c:211:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  211 |     sprintf(buff, "%d", line);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/debug.c:211:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  211 |     sprintf(buff, "%d", line);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/debug.c:220:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  220 |   if (writefn == NULL) return;[0m
      | [0;1;32m                      ^       
[0m      | [0;32m                       {
[0m[1msrc/core/debug.c:241:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  241 |     sprintf(buff, "%d", skipped_count);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/debug.c:241:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  241 |     sprintf(buff, "%d", skipped_count);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/debug.c:267:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  267 |   if (!vm->config.stdout_write) return;[0m
      | [0;1;32m                               ^       
[0m      | [0;32m                                {
[0m[1msrc/core/debug.c:275:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  275 |   if (!vm->config.stdout_write) return;[0m
      | [0;1;32m                               ^       
[0m      | [0;32m                                {
[0m[1msrc/core/debug.c:317:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  317 |   ASSERT(func->owner->path != NULL || func->owner->name != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:317:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  317 |   ASSERT(func->owner->path != NULL || func->owner->name != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:330:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  330 |     ASSERT_INDEX(i, func->fn->opcodes.count);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:330:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  330 |     ASSERT_INDEX(i, func->fn->opcodes.count);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:337:7: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  337 |       _PRINT_INT(line, _INT_WIDTH - 1);[0m
      | [0;1;32m      ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:337:7: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  337 |       _PRINT_INT(line, _INT_WIDTH - 1);[0m
      | [0;1;32m      ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:346:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  346 |     _PRINT_INT(i, _INT_WIDTH - 1);[0m
      | [0;1;32m    ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:346:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  346 |     _PRINT_INT(i, _INT_WIDTH - 1);[0m
      | [0;1;32m    ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:361:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  361 |         ASSERT_INDEX((uint32_t)index, func->owner->constants.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:361:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  361 |         ASSERT_INDEX((uint32_t)index, func->owner->constants.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:365:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  365 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:365:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  365 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:379:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  379 |         break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/core/debug.c:382:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  382 |         SHORT_ARG();[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:307:5: [0m[0;1;36mnote: [0mexpanded from macro 'SHORT_ARG'[0m
  307 |     PRINT_INT(READ_SHORT()); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:382:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  382 |         SHORT_ARG();[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:307:5: [0m[0;1;36mnote: [0mexpanded from macro 'SHORT_ARG'[0m
  307 |     PRINT_INT(READ_SHORT()); \[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:382:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  382 |         SHORT_ARG();[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  383 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/debug.c:306:3: [0m[0;1;36mnote: [0mexpanded from macro 'SHORT_ARG'[0m
  306 |   do {                       \[0m
      | [0;1;32m  ^
[0m[1msrc/core/debug.c:390:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  390 |         break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/core/debug.c:407:11: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  407 |           PRINT_INT(arg);[0m
      | [0;1;32m          ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:407:11: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  407 |           PRINT_INT(arg);[0m
      | [0;1;32m          ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:411:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  411 |           for (int j = 0; j < _INT_WIDTH; j++) PRINT(" ");[0m
      | [0;1;32m                                              ^           
[0m      | [0;32m                                               {
[0m[1msrc/core/debug.c:417:11: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  417 |           _PRINT_INT(arg, 1);[0m
      | [0;1;32m          ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:417:11: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  417 |           _PRINT_INT(arg, 1);[0m
      | [0;1;32m          ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:423:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  423 |       } break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/core/debug.c:439:11: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  439 |           PRINT_INT(arg);[0m
      | [0;1;32m          ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:439:11: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  439 |           PRINT_INT(arg);[0m
      | [0;1;32m          ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:443:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  443 |           for (int j = 0; j < _INT_WIDTH; j++) PRINT(" ");[0m
      | [0;1;32m                                              ^           
[0m      | [0;32m                                               {
[0m[1msrc/core/debug.c:449:11: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  449 |           _PRINT_INT(arg, 1);[0m
      | [0;1;32m          ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:449:11: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  449 |           _PRINT_INT(arg, 1);[0m
      | [0;1;32m          ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:455:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  455 |       } break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/core/debug.c:461:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  461 |         ASSERT_INDEX(index, (int)func->owner->global_names.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:461:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  461 |         ASSERT_INDEX(index, (int)func->owner->global_names.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:463:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  463 |         ASSERT_INDEX(name_index, (int)func->owner->constants.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:463:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  463 |         ASSERT_INDEX(name_index, (int)func->owner->constants.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:466:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  466 |         ASSERT(IS_OBJ_TYPE(name, OBJ_STRING), OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:466:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  466 |         ASSERT(IS_OBJ_TYPE(name, OBJ_STRING), OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:469:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  469 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:469:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  469 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:479:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  479 |         ASSERT_INDEX(index, vm->builtins_count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:479:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  479 |         ASSERT_INDEX(index, vm->builtins_count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:482:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  482 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:482:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  482 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:492:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  492 |         ASSERT_INDEX(index, PK_INSTANCE);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:492:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  492 |         ASSERT_INDEX(index, PK_INSTANCE);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:495:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  495 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:495:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  495 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:506:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  506 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:506:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  506 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:514:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  514 |         ASSERT_INDEX((uint32_t)index, func->owner->constants.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:514:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  514 |         ASSERT_INDEX((uint32_t)index, func->owner->constants.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:516:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  516 |         ASSERT(IS_OBJ_TYPE(value, OBJ_FUNC), OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:516:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  516 |         ASSERT(IS_OBJ_TYPE(value, OBJ_FUNC), OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:519:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  519 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:519:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  519 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:529:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  529 |         ASSERT_INDEX((uint32_t)index, func->owner->constants.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:529:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  529 |         ASSERT_INDEX((uint32_t)index, func->owner->constants.count);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:531:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  531 |         ASSERT(IS_OBJ_TYPE(value, OBJ_CLASS), OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:531:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  531 |         ASSERT(IS_OBJ_TYPE(value, OBJ_CLASS), OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:534:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  534 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:534:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  534 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:545:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  545 |         break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/core/debug.c:551:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  551 |         ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:551:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  551 |         ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:553:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  553 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:553:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  553 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:566:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  566 |         ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:566:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  566 |         ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:569:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  569 |         PRINT_INT(argc);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:569:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  569 |         PRINT_INT(argc);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:572:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  572 |         _PRINT_INT(index, 0);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:572:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  572 |         _PRINT_INT(index, 0);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:581:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  581 |         PRINT_INT(READ_BYTE());[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:581:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  581 |         PRINT_INT(READ_BYTE());[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:581:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  581 |         PRINT_INT(READ_BYTE());[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  582 |         PRINT(" (argc)\n");[0m
  583 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^
[0m[1msrc/core/debug.c:284:3: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  284 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/debug.c:587:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  587 |         PRINT_INT(READ_BYTE());[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:587:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  587 |         PRINT_INT(READ_BYTE());[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:587:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  587 |         PRINT_INT(READ_BYTE());[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  588 |         PRINT(" (argc)\n");[0m
  589 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^
[0m[1msrc/core/debug.c:284:3: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  284 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/debug.c:591:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  591 |       case OP_ITER_TEST: NO_ARGS(); break;[0m
      | [0;1;32m                         ^               
[0m      | [0;32m                         {               ;} 
[0m[1msrc/core/debug.c:297:19: [0m[0;1;36mnote: [0mexpanded from macro 'NO_ARGS'[0m
  297 | #define NO_ARGS() NEWLINE()[0m
      | [0;1;32m                  ^
[0m[1msrc/core/debug.c:281:19: [0m[0;1;36mnote: [0mexpanded from macro 'NEWLINE'[0m
  281 | #define NEWLINE() PRINT("\n")[0m
      | [0;1;32m                  ^
[0m[1msrc/core/debug.c:280:20: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT'[0m
  280 | #define PRINT(str) vm->config.stdout_write(vm, str)[0m
      | [0;1;32m                   ^
[0m[1msrc/core/debug.c:602:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  602 |         PRINT_INT(offset);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:602:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  602 |         PRINT_INT(offset);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:604:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  604 |         _PRINT_INT(i + offset, 0);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:604:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  604 |         _PRINT_INT(i + offset, 0);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:613:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  613 |         PRINT_INT(-offset);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:613:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  613 |         PRINT_INT(-offset);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:615:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  615 |         _PRINT_INT(i - offset, 0);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:615:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  615 |         _PRINT_INT(i - offset, 0);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:620:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  620 |       case OP_RETURN: NO_ARGS(); break;[0m
      | [0;1;32m                      ^               
[0m      | [0;32m                      {               ;} 
[0m[1msrc/core/debug.c:297:19: [0m[0;1;36mnote: [0mexpanded from macro 'NO_ARGS'[0m
  297 | #define NO_ARGS() NEWLINE()[0m
      | [0;1;32m                  ^
[0m[1msrc/core/debug.c:281:19: [0m[0;1;36mnote: [0mexpanded from macro 'NEWLINE'[0m
  281 | #define NEWLINE() PRINT("\n")[0m
      | [0;1;32m                  ^
[0m[1msrc/core/debug.c:280:20: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT'[0m
  280 | #define PRINT(str) vm->config.stdout_write(vm, str)[0m
      | [0;1;32m                   ^
[0m[1msrc/core/debug.c:628:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  628 |         ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:628:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  628 |         ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:631:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  631 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:631:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  631 |         PRINT_INT(index);[0m
      | [0;1;32m        ^
[0m[1msrc/core/debug.c:292:26: [0m[0;1;36mnote: [0mexpanded from macro 'PRINT_INT'[0m
  292 | #define PRINT_INT(value) _PRINT_INT(value, _INT_WIDTH)[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/debug.c:287:31: [0m[0;1;36mnote: [0mexpanded from macro '_PRINT_INT'[0m
  287 |     if ((width) > 0) length = sprintf(sbuff, "%*d", (width), value); \[0m
      | [0;1;32m                              ^~~~~~~
[0m[1msrc/core/debug.c:635:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  635 |       } break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/core/debug.c:641:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  641 |         break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/core/debug.c:665:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  665 |           ASSERT(inplace == 0, "inplace should be either 0 or 1");[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:665:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  665 |           ASSERT(inplace == 0, "inplace should be either 0 or 1");[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:682:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  682 |         break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/core/debug.c:685:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  685 |         UNREACHABLE();[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/debug.c:685:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  685 |         UNREACHABLE();[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/debug.c:685:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  685 |         UNREACHABLE();[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  686 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/debug.c:706:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  706 |   ASSERT(frame_ind >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:706:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  706 |   ASSERT(frame_ind >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:712:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  712 |     ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:712:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  712 |     ASSERT(name != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:723:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  723 |   ASSERT(frame_ind >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/debug.c:723:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  723 |   ASSERT(frame_ind >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m108 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[16/18][221.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpp_4cyh8h.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/core/value.c
[1msrc/core/value.c:30:1: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   30 | DEFINE_BUFFER(Uint, uint32_t)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:30:1: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   30 | DEFINE_BUFFER(Uint, uint32_t)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:31:1: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   31 | DEFINE_BUFFER(Byte, uint8_t)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:31:1: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   31 | DEFINE_BUFFER(Byte, uint8_t)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:32:1: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   32 | DEFINE_BUFFER(Var, Var)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:32:1: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   32 | DEFINE_BUFFER(Var, Var)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:33:1: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   33 | DEFINE_BUFFER(String, String*)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:33:1: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   33 | DEFINE_BUFFER(String, String*)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:34:1: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   34 | DEFINE_BUFFER(Closure, Closure*)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:34:1: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   34 | DEFINE_BUFFER(Closure, Closure*)[0m
      | [0;1;32m^
[0m[1msrc/core/buffers.h:99:5: [0m[0;1;36mnote: [0mexpanded from macro 'DEFINE_BUFFER'[0m
   99 |     memcpy(self->data + self->count,                                          \[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:51:16: [0m[0;1;35mwarning: [0m[1mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   51 |   int length = vsnprintf(NULL, 0, fmt, copy);[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1msrc/core/value.c:51:16: [0m[0;1;36mnote: [0mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11[0m
   51 |   int length = vsnprintf(NULL, 0, fmt, copy);[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1msrc/core/value.c:55:3: [0m[0;1;35mwarning: [0m[1mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   55 |   vsnprintf(self->data + self->count, self->capacity - self->count, fmt, args);[0m
      | [0;1;32m  ^~~~~~~~~
[0m[1msrc/core/value.c:55:3: [0m[0;1;36mnote: [0mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11[0m
   55 |   vsnprintf(self->data + self->count, self->capacity - self->count, fmt, args);[0m
      | [0;1;32m  ^~~~~~~~~
[0m[1msrc/core/value.c:55:13: [0m[0;1;35mwarning: [0m[1mpassing 'uint8_t *' (aka 'unsigned char *') to parameter of type 'char *' converts between pointers to integer types where one is of the unique plain 'char' type and the other is not [clang-diagnostic-pointer-sign][0m
   55 |   vsnprintf(self->data + self->count, self->capacity - self->count, fmt, args);[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m/usr/include/stdio.h:382:40: [0m[0;1;36mnote: [0mpassing argument to parameter '__s' here[0m
  382 | extern int vsnprintf (char *__restrict __s, size_t __maxlen,[0m
      | [0;1;32m                                       ^
[0m[1msrc/core/value.c:68:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |   if (self == NULL || self->is_marked) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/core/value.c:85:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |   if (!IS_OBJ(self)) return;[0m
      | [0;1;32m                    ^       
[0m      | [0;32m                     {
[0m[1msrc/core/value.c:90:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |   if (self == NULL) return;[0m
      | [0;1;32m                   ^       
[0m      | [0;32m                    {
[0m[1msrc/core/value.c:97:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |   if (self == NULL) return;[0m
      | [0;1;32m                   ^       
[0m      | [0;32m                    {
[0m[1msrc/core/value.c:104:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  104 |   if (self == NULL) return;[0m
      | [0;1;32m                   ^       
[0m      | [0;32m                    {
[0m[1msrc/core/value.c:114:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  114 |     case OBJ_STRING: {[0m
      | [0;1;32m                     ^
[0m      | [0;32m                     {
[0m  115 |       vm->bytes_allocated += sizeof(String);[0m
  116 |       vm->bytes_allocated += ((size_t)((String*)obj)->capacity);[0m
  117 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:119:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  119 |     case OBJ_LIST: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m  120 |       List* list = (List*)obj;[0m
  121 |       markVarBuffer(vm, &list->elements);[0m
  122 |       vm->bytes_allocated += sizeof(List);[0m
  123 |       vm->bytes_allocated += sizeof(Var) * list->elements.capacity;[0m
  124 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:126:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  126 |     case OBJ_MAP: {[0m
      | [0;1;32m                  ^
[0m      | [0;32m                  {
[0m  127 |       Map* map = (Map*)obj;[0m
  128 |       for (uint32_t i = 0; i < map->capacity; i++) {[0m
  129 |         if (IS_UNDEF(map->entries[i].key)) continue;[0m
  130 |         markValue(vm, map->entries[i].key);[0m
  131 |         markValue(vm, map->entries[i].value);[0m
  132 |       }[0m
  133 |       vm->bytes_allocated += sizeof(Map);[0m
  134 |       vm->bytes_allocated += sizeof(MapEntry) * map->capacity;[0m
  135 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:129:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  129 |         if (IS_UNDEF(map->entries[i].key)) continue;[0m
      | [0;1;32m                                          ^         
[0m      | [0;32m                                           {
[0m[1msrc/core/value.c:137:21: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  137 |     case OBJ_RANGE: {[0m
      | [0;1;32m                    ^
[0m      | [0;32m                    {
[0m  138 |       vm->bytes_allocated += sizeof(Range);[0m
  139 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:142:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  142 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m[1msrc/core/value.c:162:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  162 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  163 |       Function* func = (Function*)obj;[0m
  164 |       vm->bytes_allocated += sizeof(Function);[0m
  165 | [0m
  166 |       markObject(vm, &func->owner->_super);[0m
  167 | [0m
  168 |       // If a garbage collection is triggered when allocating a name string[0m
  169 |       // for this function, it's [fn] property will be NULL.[0m
  170 |       if (!func->is_native && func->fn != NULL) {[0m
  171 |         Fn* fn = func->fn;[0m
  172 |         vm->bytes_allocated += sizeof(Fn);[0m
  173 | [0m
  174 |         vm->bytes_allocated += sizeof(uint8_t) * fn->opcodes.capacity;[0m
  175 |         vm->bytes_allocated += sizeof(uint32_t) * fn->oplines.capacity;[0m
  176 |       }[0m
  177 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:180:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  180 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  181 |       Closure* closure = (Closure*)obj;[0m
  182 |       markObject(vm, &closure->fn->_super);[0m
  183 |       for (int i = 0; i < closure->fn->upvalue_count; i++) {[0m
  184 |         markObject(vm, &(closure->upvalues[i]->_super));[0m
  185 |       }[0m
  186 | [0m
  187 |       vm->bytes_allocated += sizeof(Closure);[0m
  188 |       vm->bytes_allocated += sizeof(Upvalue*) * closure->fn->upvalue_count;[0m
  189 | [0m
  190 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:193:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  193 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  194 |       MethodBind* mb = (MethodBind*) obj;[0m
  195 |       markObject(vm, &mb->method->_super);[0m
  196 |       markValue(vm, mb->instance);[0m
  197 | [0m
  198 |       vm->bytes_allocated += sizeof(MethodBind);[0m
  199 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:202:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  202 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  203 |       Upvalue* upvalue = (Upvalue*)obj;[0m
  204 | [0m
  205 |       // We don't have to mark upvalue->ptr since the [ptr] points to a local[0m
  206 |       // in the stack, however we need to mark upvalue->closed incase if it's[0m
  207 |       // closed.[0m
  208 |       markValue(vm, upvalue->closed);[0m
  209 | [0m
  210 |       vm->bytes_allocated += sizeof(Upvalue);[0m
  211 | [0m
  212 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:215:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  215 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m[1msrc/core/value.c:243:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  243 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  244 |       Class* cls = (Class*)obj;[0m
  245 |       vm->bytes_allocated += sizeof(Class);[0m
  246 |       markObject(vm, &cls->owner->_super);[0m
  247 |       markObject(vm, &cls->ctor->_super);[0m
  248 |       markObject(vm, &cls->name->_super);[0m
  249 |       markObject(vm, &cls->static_attribs->_super);[0m
  250 | [0m
  251 |       markClosureBuffer(vm, &cls->methods);[0m
  252 |       vm->bytes_allocated += sizeof(Closure) * cls->methods.capacity;[0m
  253 | [0m
  254 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:257:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  257 |     {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  258 |       Instance* inst = (Instance*)obj;[0m
  259 |       markObject(vm, &inst->attribs->_super);[0m
  260 |       markObject(vm, &inst->cls->_super);[0m
  261 |       vm->bytes_allocated += sizeof(Instance);[0m
  262 |     } break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/value.c:300:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  300 |   ASSERT(length == 0 || text != NULL, "Unexpected NULL string.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:300:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  300 |   ASSERT(length == 0 || text != NULL, "Unexpected NULL string.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:304:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  304 |   if (length != 0 && text != NULL) memcpy(string->data, text, length);[0m
      | [0;1;32m                                  ^                                   
[0m      | [0;32m                                   {
[0m[1msrc/core/value.c:304:36: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  304 |   if (length != 0 && text != NULL) memcpy(string->data, text, length);[0m
      | [0;1;32m                                   ^~~~~~
[0m[1msrc/core/value.c:304:36: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  304 |   if (length != 0 && text != NULL) memcpy(string->data, text, length);[0m
      | [0;1;32m                                   ^~~~~~
[0m[1msrc/core/value.c:313:16: [0m[0;1;35mwarning: [0m[1mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  313 |   int length = vsnprintf(NULL, 0, fmt, copy);[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1msrc/core/value.c:313:16: [0m[0;1;36mnote: [0mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11[0m
  313 |   int length = vsnprintf(NULL, 0, fmt, copy);[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1msrc/core/value.c:317:3: [0m[0;1;35mwarning: [0m[1mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  317 |   vsnprintf(string->data, string->capacity, fmt, args);[0m
      | [0;1;32m  ^~~~~~~~~
[0m[1msrc/core/value.c:317:3: [0m[0;1;36mnote: [0mCall to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11[0m
  317 |   vsnprintf(string->data, string->capacity, fmt, args);[0m
      | [0;1;32m  ^~~~~~~~~
[0m[1msrc/core/value.c:355:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  355 |   memset(module, 0, sizeof(Module));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:355:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  355 |   memset(module, 0, sizeof(Module));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:371:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  371 |   memset(func, 0, sizeof(Function));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:371:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  371 |   memset(func, 0, sizeof(Function));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:383:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  383 |   ASSERT(is_native || owner != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:383:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  383 |   ASSERT(is_native || owner != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:392:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  392 |     if (fn_index) *fn_index = _fn_index;[0m
      | [0;1;32m                 ^                      
[0m      | [0;32m                  {
[0m[1msrc/core/value.c:417:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  417 |   memset(closure->upvalues, 0, sizeof(Upvalue*) * fn->upvalue_count);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:417:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  417 |   memset(closure->upvalues, 0, sizeof(Upvalue*) * fn->upvalue_count);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:443:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  443 |   ASSERT(closure == NULL || closure->fn->arity >= -1, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:443:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  443 |   ASSERT(closure == NULL || closure->fn->arity >= -1, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:450:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  450 |   memset(fiber, 0, sizeof(Fiber));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:450:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  450 |   memset(fiber, 0, sizeof(Fiber));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:468:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  468 |     if (stack_size == 0) stack_size++;[0m
      | [0;1;32m                        ^             
[0m      | [0;32m                         {
[0m[1msrc/core/value.c:471:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  471 |     ASSERT(fiber->stack != NULL, "Out of memory");[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:471:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  471 |     ASSERT(fiber->stack != NULL, "Out of memory");[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:479:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  479 |     if (stack_size < MIN_STACK_SIZE) stack_size = MIN_STACK_SIZE;[0m
      | [0;1;32m                                    ^                            
[0m      | [0;32m                                     {
[0m[1msrc/core/value.c:517:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  517 |   memset(cls, 0, sizeof(Class));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:517:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  517 |   memset(cls, 0, sizeof(Class));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:534:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  534 |     if (cls_index) *cls_index = _cls_index;[0m
      | [0;1;32m                  ^                        
[0m      | [0;32m                   {
[0m[1msrc/core/value.c:546:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  546 |   ASSERT(cls->class_of == PK_INSTANCE, "Cannot create an instace of builtin "[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:546:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  546 |   ASSERT(cls->class_of == PK_INSTANCE, "Cannot create an instace of builtin "[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:550:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  550 |   memset(inst, 0, sizeof(Instance));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:550:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  550 |   memset(inst, 0, sizeof(Instance));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:573:5: [0m[0;1;35mwarning: [0m[1mVariable 'i' with floating point type 'double' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter][0m
  573 |     for (double i = self->from; i < self->to; i++) {[0m
      | [0;1;32m    ^                           ~             ~
[0m[1msrc/core/value.c:573:5: [0m[0;1;36mnote: [0mVariable 'i' with floating point type 'double' should not be used as a loop counter[0m
  573 |     for (double i = self->from; i < self->to; i++) {[0m
      | [0;1;32m    ^                           ~             ~
[0m[1msrc/core/value.c:595:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  595 |       for (; *_c != '\0'; _c++) *_c = (char) tolower(*_c);[0m
      | [0;1;32m                               ^                          
[0m      | [0;32m                                {
[0m[1msrc/core/value.c:616:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  616 |       for (; *_c != '\0'; _c++) *_c = (char) toupper(*_c);[0m
      | [0;1;32m                               ^                          
[0m      | [0;32m                                {
[0m[1msrc/core/value.c:640:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  640 |   while (*start && isspace(*start)) start++;[0m
      | [0;1;32m                                   ^        
[0m      | [0;32m                                    {
[0m[1msrc/core/value.c:649:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  649 |   while (isspace(*end)) end--;[0m
      | [0;1;32m                       ^      
[0m      | [0;32m                        {
[0m[1msrc/core/value.c:682:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  682 |   ASSERT(count >= 0 || count == -1, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:682:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  682 |   ASSERT(count >= 0 || count == -1, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:685:59: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  685 |   if (self->length == 0 || old->length == 0 || count == 0) return self;[0m
      | [0;1;32m                                                          ^            
[0m      | [0;32m                                                           {
[0m[1msrc/core/value.c:686:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  686 |   if (IS_STR_EQ(old, new_)) return self;[0m
      | [0;1;32m                           ^            
[0m      | [0;32m                            {
[0m[1msrc/core/value.c:706:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  706 |     if (replacedc == count) break;[0m
      | [0;1;32m                           ^      
[0m      | [0;32m                            {
[0m[1msrc/core/value.c:709:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  709 |     if (match == NULL) break;[0m
      | [0;1;32m                      ^      
[0m      | [0;32m                       {
[0m[1msrc/core/value.c:719:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  719 |     memcpy(d, s, match - s);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:719:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  719 |     memcpy(d, s, match - s);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:724:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  724 |     memcpy(d, new_->data, new_->length);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:724:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  724 |     memcpy(d, new_->data, new_->length);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:734:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  734 |     memcpy(d, s, tail_length);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:734:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  734 |     memcpy(d, s, tail_length);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/core/value.c:739:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  739 |     ASSERT(replaced->length < replaced->capacity, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:739:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  739 |     ASSERT(replaced->length < replaced->capacity, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:744:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  744 |     ASSERT(self == replaced, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:744:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  744 |     ASSERT(self == replaced, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:752:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  752 |   ASSERT(sep->length != 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:752:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  752 |   ASSERT(sep->length != 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:765:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  765 |         ASSERT(list->elements.count == 0, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:765:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  765 |         ASSERT(list->elements.count == 0, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:802:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  802 |         total_length += strlen(va_arg(arg_list, const char*));[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  803 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/value.c:806:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  806 |         total_length += va_arg(arg_list, String*)->length;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  807 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/value.c:810:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  810 |         total_length++;[0m
      | [0;1;32m        ^             
[0m      | [0;32m        {             ;} 
[0m[1msrc/core/value.c:822:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  822 |       {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  823 |         const char* string = va_arg(arg_list, const char*);[0m
  824 |         size_t length = strlen(string);[0m
  825 |         memcpy(buff, string, length);[0m
  826 |         buff += length;[0m
  827 |       } break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/value.c:825:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  825 |         memcpy(buff, string, length);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/core/value.c:825:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  825 |         memcpy(buff, string, length);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/core/value.c:830:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  830 |       {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  831 |         String* string = va_arg(arg_list, String*);[0m
  832 |         memcpy(buff, string->data, string->length);[0m
  833 |         buff += string->length;[0m
  834 |       } break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/value.c:832:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  832 |         memcpy(buff, string->data, string->length);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/core/value.c:832:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  832 |         memcpy(buff, string->data, string->length);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/core/value.c:837:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  837 |       {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  838 |         *buff++ = *c;[0m
  839 |       } break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/core/value.c:851:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  851 |   if (str1->length == 0) return str2;[0m
      | [0;1;32m                        ^            
[0m      | [0;32m                         {
[0m[1msrc/core/value.c:852:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  852 |   if (str2->length == 0) return str1;[0m
      | [0;1;32m                        ^            
[0m      | [0;32m                         {
[0m[1msrc/core/value.c:857:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  857 |   memcpy(string->data, str1->data, str1->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:857:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  857 |   memcpy(string->data, str1->data, str1->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:858:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  858 |   memcpy(string->data + str1->length, str2->data, str2->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:858:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  858 |   memcpy(string->data + str1->length, str2->data, str2->length);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/value.c:868:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  868 |   if (IS_OBJ(value)) vmPushTempRef(vm, AS_OBJ(value));[0m
      | [0;1;32m                    ^                                 
[0m      | [0;32m                     {
[0m[1msrc/core/value.c:870:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  870 |   if (IS_OBJ(value)) vmPopTempRef(vm);[0m
      | [0;1;32m                    ^                 
[0m      | [0;32m                     {
[0m[1msrc/core/value.c:882:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  882 |   ASSERT_INDEX(index, self->elements.count);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:882:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  882 |   ASSERT_INDEX(index, self->elements.count);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:885:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  885 |   if (IS_OBJ(removed)) vmPushTempRef(vm, AS_OBJ(removed));[0m
      | [0;1;32m                      ^                                   
[0m      | [0;32m                       {
[0m[1msrc/core/value.c:900:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  900 |   if (IS_OBJ(removed)) vmPopTempRef(vm);[0m
      | [0;1;32m                      ^                 
[0m      | [0;32m                       {
[0m[1msrc/core/value.c:913:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  913 |   if (l1->elements.count == 0) return l2;[0m
      | [0;1;32m                              ^          
[0m      | [0;32m                               {
[0m[1msrc/core/value.c:914:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  914 |   if (l2->elements.count == 0) return l1;[0m
      | [0;1;32m                              ^          
[0m      | [0;32m                               {
[0m[1msrc/core/value.c:931:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  931 |   ASSERT(isObjectHashable(obj->type),[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:931:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  931 |   ASSERT(isObjectHashable(obj->type),[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:937:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  937 |       return ((String*)obj)->hash;[0m
      | [0;1;32m      ^                          
[0m      | [0;32m      {                          ;} 
[0m[1msrc/core/value.c:948:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  948 |     default: break;[0m
      | [0;1;32m             ^    
[0m      | [0;32m             {    ;} 
[0m[1msrc/core/value.c:951:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  951 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:951:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  951 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:956:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  956 |   if (IS_OBJ(v)) return _hashObject(AS_OBJ(v));[0m
      | [0;1;32m                ^                              
[0m      | [0;32m                 {
[0m[1msrc/core/value.c:971:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  971 |   if (self->capacity == 0) return false;[0m
      | [0;1;32m                          ^             
[0m      | [0;32m                           {
[0m[1msrc/core/value.c:987:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  987 |       ASSERT(IS_BOOL(entry->value), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:987:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  987 |       ASSERT(IS_BOOL(entry->value), OOPS);[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:993:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  993 |         if (tombstone == NULL) tombstone = entry;[0m
      | [0;1;32m                              ^                  
[0m      | [0;32m                               {
[0m[1msrc/core/value.c:1016:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1016 |   ASSERT(tombstone != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1016:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1016 |   ASSERT(tombstone != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1025:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1025 |   ASSERT(self->capacity != 0, "Should ensure the capacity before inserting.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1025:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1025 |   ASSERT(self->capacity != 0, "Should ensure the capacity before inserting.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1055:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1055 |     if (IS_UNDEF(old_entries[i].key)) continue;[0m
      | [0;1;32m                                     ^         
[0m      | [0;32m                                      {
[0m[1msrc/core/value.c:1065:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1065 |   if (_mapFindEntry(self, key, &entry)) return entry->value;[0m
      | [0;1;32m                                       ^                    
[0m      | [0;32m                                        {
[0m[1msrc/core/value.c:1074:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1074 |     if (capacity < MIN_CAPACITY) capacity = MIN_CAPACITY;[0m
      | [0;1;32m                                ^                        
[0m      | [0;32m                                 {
[0m[1msrc/core/value.c:1092:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1092 |   if (!_mapFindEntry(self, key, &entry)) return VAR_UNDEFINED;[0m
      | [0;1;32m                                        ^                     
[0m      | [0;32m                                         {
[0m[1msrc/core/value.c:1102:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1102 |   if (IS_OBJ(value)) vmPushTempRef(vm, AS_OBJ(value));[0m
      | [0;1;32m                    ^                                 
[0m      | [0;32m                     {
[0m[1msrc/core/value.c:1119:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1119 |     if (capacity < MIN_CAPACITY) capacity = MIN_CAPACITY;[0m
      | [0;1;32m                                ^                        
[0m      | [0;32m                                 {
[0m[1msrc/core/value.c:1124:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1124 |   if (IS_OBJ(value)) vmPopTempRef(vm);[0m
      | [0;1;32m                    ^                 
[0m      | [0;32m                     {
[0m[1msrc/core/value.c:1143:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1143 |     case OBJ_STRING: {[0m
      | [0;1;32m                     ^
[0m      | [0;32m                     {
[0m 1144 |       String* str = (String*) self;[0m
 1145 |       DEALLOCATE_DYNAMIC(vm, str, String, str->capacity, char);[0m
 1146 |       return;[0m
 1147 |     };[0m
      | [0;1;32m      
[0m      | [0;32m      ;} 
[0m[1msrc/core/value.c:1173:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1173 |       if (module->handle) vmUnloadDlHandle(vm, module->handle);[0m
      | [0;1;32m                         ^                                     
[0m      | [0;32m                          {
[0m[1msrc/core/value.c:1179:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1179 |     case OBJ_FUNC: {[0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m 1180 |       Function* func = (Function*)self;[0m
 1181 |       if (!func->is_native) {[0m
 1182 |         pkByteBufferClear(&func->fn->opcodes, vm);[0m
 1183 |         pkUintBufferClear(&func->fn->oplines, vm);[0m
 1184 |         DEALLOCATE(vm, func->fn, Fn);[0m
 1185 |       }[0m
 1186 |       DEALLOCATE(vm, self, Function);[0m
 1187 |       return;[0m
 1188 |     };[0m
      | [0;1;32m      
[0m      | [0;32m      ;} 
[0m[1msrc/core/value.c:1231:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1231 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1231:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1231 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1248:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1248 |     if (!IS_OBJ_TYPE(module->constants.data[i], OBJ_STRING)) continue;[0m
      | [0;1;32m                                                            ^         
[0m      | [0;32m                                                             {
[0m[1msrc/core/value.c:1252:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1252 |       if (index) *index = i;[0m
      | [0;1;32m                ^           
[0m      | [0;32m                 {
[0m[1msrc/core/value.c:1263:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1263 |   if (index) *index = module->constants.count - 1;[0m
      | [0;1;32m            ^                                     
[0m      | [0;32m             {
[0m[1msrc/core/value.c:1268:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1268 |   ASSERT(index >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1268:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1268 |   ASSERT(index >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1269:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1269 |   if (index >= (int)module->constants.count) return NULL;[0m
      | [0;1;32m                                            ^            
[0m      | [0;32m                                             {
[0m[1msrc/core/value.c:1284:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1284 |     ASSERT(g_index < (int)module->globals.count, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1284:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1284 |     ASSERT(g_index < (int)module->globals.count, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1302:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1302 |     ASSERT(g_name != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1302:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1302 |     ASSERT(g_name != NULL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1311:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1311 |   ASSERT(module->body == NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1311:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1311 |   ASSERT(module->body == NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1335:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1335 |     case OBJ_STRING:  return PK_STRING;[0m
      | [0;1;32m                      ^               
[0m      | [0;32m                      {               ;} 
[0m[1msrc/core/value.c:1336:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1336 |     case OBJ_LIST:    return PK_LIST;[0m
      | [0;1;32m                      ^             
[0m      | [0;32m                      {             ;} 
[0m[1msrc/core/value.c:1337:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1337 |     case OBJ_MAP:     return PK_MAP;[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/value.c:1338:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1338 |     case OBJ_RANGE:   return PK_RANGE;[0m
      | [0;1;32m                      ^              
[0m      | [0;32m                      {              ;} 
[0m[1msrc/core/value.c:1339:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1339 |     case OBJ_MODULE:  return PK_MODULE;[0m
      | [0;1;32m                      ^               
[0m      | [0;32m                      {               ;} 
[0m[1msrc/core/value.c:1340:23: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1340 |     case OBJ_FUNC:    UNREACHABLE();[0m
      | [0;1;32m                      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1340:23: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1340 |     case OBJ_FUNC:    UNREACHABLE();[0m
      | [0;1;32m                      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1340:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1340 |     case OBJ_FUNC:    UNREACHABLE();[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/value.c:1341:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1341 |     case OBJ_CLOSURE: return PK_CLOSURE;[0m
      | [0;1;32m                      ^                
[0m      | [0;32m                      {                ;} 
[0m[1msrc/core/value.c:1342:27: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1342 |     case OBJ_METHOD_BIND: return PK_METHOD_BIND;[0m
      | [0;1;32m                          ^                    
[0m      | [0;32m                          {                    ;} 
[0m[1msrc/core/value.c:1343:23: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1343 |     case OBJ_UPVALUE: UNREACHABLE();[0m
      | [0;1;32m                      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1343:23: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1343 |     case OBJ_UPVALUE: UNREACHABLE();[0m
      | [0;1;32m                      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1343:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1343 |     case OBJ_UPVALUE: UNREACHABLE();[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/value.c:1344:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1344 |     case OBJ_FIBER:   return PK_FIBER;[0m
      | [0;1;32m                      ^              
[0m      | [0;32m                      {              ;} 
[0m[1msrc/core/value.c:1345:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1345 |     case OBJ_CLASS:   return PK_CLASS;[0m
      | [0;1;32m                      ^              
[0m      | [0;32m                      {              ;} 
[0m[1msrc/core/value.c:1346:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1346 |     case OBJ_INST:    return PK_INSTANCE;[0m
      | [0;1;32m                      ^                 
[0m      | [0;32m                      {                 ;} 
[0m[1msrc/core/value.c:1349:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1349 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1349:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1349 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1359:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1359 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1359:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1359 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1361:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1361 |     case PK_STRING:      return OBJ_STRING;[0m
      | [0;1;32m                         ^                
[0m      | [0;32m                         {                ;} 
[0m[1msrc/core/value.c:1362:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1362 |     case PK_LIST:        return OBJ_LIST;[0m
      | [0;1;32m                         ^              
[0m      | [0;32m                         {              ;} 
[0m[1msrc/core/value.c:1363:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1363 |     case PK_MAP:         return OBJ_MAP;[0m
      | [0;1;32m                         ^             
[0m      | [0;32m                         {             ;} 
[0m[1msrc/core/value.c:1364:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1364 |     case PK_RANGE:       return OBJ_RANGE;[0m
      | [0;1;32m                         ^               
[0m      | [0;32m                         {               ;} 
[0m[1msrc/core/value.c:1365:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1365 |     case PK_MODULE:      return OBJ_MODULE;[0m
      | [0;1;32m                         ^                
[0m      | [0;32m                         {                ;} 
[0m[1msrc/core/value.c:1366:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1366 |     case PK_CLOSURE:     return OBJ_CLOSURE;[0m
      | [0;1;32m                         ^                 
[0m      | [0;32m                         {                 ;} 
[0m[1msrc/core/value.c:1367:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1367 |     case PK_METHOD_BIND: return OBJ_METHOD_BIND;[0m
      | [0;1;32m                         ^                     
[0m      | [0;32m                         {                     ;} 
[0m[1msrc/core/value.c:1368:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1368 |     case PK_FIBER:       return OBJ_FIBER;[0m
      | [0;1;32m                         ^               
[0m      | [0;32m                         {               ;} 
[0m[1msrc/core/value.c:1369:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1369 |     case PK_CLASS:       return OBJ_CLASS;[0m
      | [0;1;32m                         ^               
[0m      | [0;32m                         {               ;} 
[0m[1msrc/core/value.c:1370:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1370 |     case PK_INSTANCE:    return OBJ_INST;[0m
      | [0;1;32m                         ^              
[0m      | [0;32m                         {              ;} 
[0m[1msrc/core/value.c:1373:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1373 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1373:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1373 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1379:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1379 |     case PK_OBJECT:   return "Object";[0m
      | [0;1;32m                      ^              
[0m      | [0;32m                      {              ;} 
[0m[1msrc/core/value.c:1380:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1380 |     case PK_NULL:     return "Null";[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/value.c:1381:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1381 |     case PK_BOOL:     return "Bool";[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/value.c:1382:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1382 |     case PK_NUMBER:   return "Number";[0m
      | [0;1;32m                      ^              
[0m      | [0;32m                      {              ;} 
[0m[1msrc/core/value.c:1384:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1384 |       return getObjectTypeName(getPkVarObjType(type));[0m
      | [0;1;32m      ^                                              
[0m      | [0;32m      {                                              ;} 
[0m[1msrc/core/value.c:1387:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1387 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1387:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1387 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1393:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1393 |     case OBJ_STRING:  return "String";[0m
      | [0;1;32m                      ^              
[0m      | [0;32m                      {              ;} 
[0m[1msrc/core/value.c:1394:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1394 |     case OBJ_LIST:    return "List";[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/value.c:1395:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1395 |     case OBJ_MAP:     return "Map";[0m
      | [0;1;32m                      ^           
[0m      | [0;32m                      {           ;} 
[0m[1msrc/core/value.c:1396:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1396 |     case OBJ_RANGE:   return "Range";[0m
      | [0;1;32m                      ^             
[0m      | [0;32m                      {             ;} 
[0m[1msrc/core/value.c:1397:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1397 |     case OBJ_MODULE:  return "Module";[0m
      | [0;1;32m                      ^              
[0m      | [0;32m                      {              ;} 
[0m[1msrc/core/value.c:1398:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1398 |     case OBJ_FUNC:    return "Func";[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/value.c:1399:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1399 |     case OBJ_CLOSURE: return "Closure";[0m
      | [0;1;32m                      ^               
[0m      | [0;32m                      {               ;} 
[0m[1msrc/core/value.c:1400:27: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1400 |     case OBJ_METHOD_BIND: return "MethodBind";[0m
      | [0;1;32m                          ^                  
[0m      | [0;32m                          {                  ;} 
[0m[1msrc/core/value.c:1401:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1401 |     case OBJ_UPVALUE: return "Upvalue";[0m
      | [0;1;32m                      ^               
[0m      | [0;32m                      {               ;} 
[0m[1msrc/core/value.c:1402:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1402 |     case OBJ_FIBER:   return "Fiber";[0m
      | [0;1;32m                      ^             
[0m      | [0;32m                      {             ;} 
[0m[1msrc/core/value.c:1403:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1403 |     case OBJ_CLASS:   return "Class";[0m
      | [0;1;32m                      ^             
[0m      | [0;32m                      {             ;} 
[0m[1msrc/core/value.c:1404:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1404 |     case OBJ_INST:    return "Inst";[0m
      | [0;1;32m                      ^            
[0m      | [0;32m                      {            ;} 
[0m[1msrc/core/value.c:1406:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1406 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1406:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1406 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1411:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1411 |   if (IS_NULL(v)) return "Null";[0m
      | [0;1;32m                 ^              
[0m      | [0;32m                  {
[0m[1msrc/core/value.c:1412:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1412 |   if (IS_BOOL(v)) return "Bool";[0m
      | [0;1;32m                 ^              
[0m      | [0;32m                  {
[0m[1msrc/core/value.c:1413:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1413 |   if (IS_NUM(v))  return "Number";[0m
      | [0;1;32m                ^                 
[0m      | [0;32m                 {
[0m[1msrc/core/value.c:1415:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1415 |   ASSERT(IS_OBJ(v), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1415:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1415 |   ASSERT(IS_OBJ(v), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1426:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1426 |   if (IS_NULL(v)) return PK_NULL;[0m
      | [0;1;32m                 ^               
[0m      | [0;32m                  {
[0m[1msrc/core/value.c:1427:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1427 |   if (IS_BOOL(v)) return PK_BOOL;[0m
      | [0;1;32m                 ^               
[0m      | [0;32m                  {
[0m[1msrc/core/value.c:1428:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1428 |   if (IS_NUM(v))  return PK_NUMBER;[0m
      | [0;1;32m                ^                  
[0m      | [0;32m                 {
[0m[1msrc/core/value.c:1430:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1430 |   ASSERT(IS_OBJ(v), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1430:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1430 |   ASSERT(IS_OBJ(v), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1445:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1445 |   if (isValuesSame(v1, v2)) return true;[0m
      | [0;1;32m                           ^            
[0m      | [0;32m                            {
[0m[1msrc/core/value.c:1453:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1453 |   if (!IS_OBJ(v1) || !IS_OBJ(v2)) return false;[0m
      | [0;1;32m                                 ^             
[0m      | [0;32m                                  {
[0m[1msrc/core/value.c:1456:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1456 |   if (o1->type != o2->type) return false;[0m
      | [0;1;32m                           ^             
[0m      | [0;32m                            {
[0m[1msrc/core/value.c:1460:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1460 |       return ((Range*)o1)->from == ((Range*)o2)->from &&[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1461 |              ((Range*)o1)->to   == ((Range*)o2)->to;[0m
      | [0;1;32m                                                   
[0m      | [0;32m                                                   ;} 
[0m[1msrc/core/value.c:1478:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1478 |       if (l1->elements.count != l2->elements.count) return false;[0m
      | [0;1;32m                                                   ^             
[0m      | [0;32m                                                    {
[0m[1msrc/core/value.c:1482:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1482 |         if (!isValuesEqual(*_v1, *_v2)) return false;[0m
      | [0;1;32m                                       ^             
[0m      | [0;32m                                        {
[0m[1msrc/core/value.c:1493:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1493 |         if (IS_UNDEF(e->key)) continue;[0m
      | [0;1;32m                             ^         
[0m      | [0;32m                              {
[0m[1msrc/core/value.c:1495:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1495 |         if (IS_UNDEF(v)) return false;[0m
      | [0;1;32m                        ^             
[0m      | [0;32m                         {
[0m[1msrc/core/value.c:1496:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1496 |         if (!isValuesEqual(e->value, v)) return false;[0m
      | [0;1;32m                                        ^             
[0m      | [0;32m                                         {
[0m[1msrc/core/value.c:1502:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1502 |       return false;[0m
      | [0;1;32m      ^           
[0m      | [0;32m      {           ;} 
[0m[1msrc/core/value.c:1527:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1527 |   ASSERT(outer == NULL || repr, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1527:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1527 |   ASSERT(outer == NULL || repr, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1534:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1534 |     if (AS_BOOL(v)) pkByteBufferAddString(buff, vm, "true", 4);[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m 1535 |     else pkByteBufferAddString(buff, vm, "false", 5);[0m
      | [0;32m    } 
[0m[1msrc/core/value.c:1535:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1535 |     else pkByteBufferAddString(buff, vm, "false", 5);[0m
      | [0;1;32m        ^                                            
[0m      | [0;32m         {
[0m[1msrc/core/value.c:1553:20: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1553 |       int length = sprintf(num_buff, DOUBLE_FMT, AS_NUM(v));[0m
      | [0;1;32m                   ^~~~~~~
[0m[1msrc/core/value.c:1553:20: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
 1553 |       int length = sprintf(num_buff, DOUBLE_FMT, AS_NUM(v));[0m
      | [0;1;32m                   ^~~~~~~
[0m[1msrc/core/value.c:1576:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1576 |               case '"':  pkByteBufferAddString(buff, vm, "\\\"", 2); break;[0m
      | [0;1;32m                         ^                                                
[0m      | [0;32m                         {                                                ;} 
[0m[1msrc/core/value.c:1577:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1577 |               case '\\': pkByteBufferAddString(buff, vm, "\\\\", 2); break;[0m
      | [0;1;32m                         ^                                                
[0m      | [0;32m                         {                                                ;} 
[0m[1msrc/core/value.c:1578:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1578 |               case '\n': pkByteBufferAddString(buff, vm, "\\n", 2); break;[0m
      | [0;1;32m                         ^                                               
[0m      | [0;32m                         {                                               ;} 
[0m[1msrc/core/value.c:1579:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1579 |               case '\r': pkByteBufferAddString(buff, vm, "\\r", 2); break;[0m
      | [0;1;32m                         ^                                               
[0m      | [0;32m                         {                                               ;} 
[0m[1msrc/core/value.c:1580:26: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1580 |               case '\t': pkByteBufferAddString(buff, vm, "\\t", 2); break;[0m
      | [0;1;32m                         ^                                               
[0m      | [0;32m                         {                                               ;} 
[0m[1msrc/core/value.c:1582:24: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1582 |               default: {[0m
      | [0;1;32m                       ^
[0m      | [0;32m                       {
[0m 1583 |                 // if c isn't in range 0x00 to 0xff, isprintc()[0m
 1584 |                 // fail an assertion.[0m
 1585 |                 if ((0x00 <= c && c <= 0xff) && isprint(c)) {[0m
 1586 |                   pkByteBufferWrite(buff, vm, c);[0m
 1587 |                 } else {[0m
 1588 |                   pkByteBufferAddString(buff, vm, "\\x", 2);[0m
 1589 |                   uint8_t byte = (uint8_t) c;[0m
 1590 |                   pkByteBufferWrite(buff, vm, utilHexDigit(((byte >> 4) & 0xf),[0m
 1591 |                                     false));[0m
 1592 |                   pkByteBufferWrite(buff, vm, utilHexDigit(((byte >> 0) & 0xf),[0m
 1593 |                                     false));[0m
 1594 |                 }[0m
 1595 |               } break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/core/value.c:1585:37: [0m[0;1;35mwarning: [0m[1mresult of comparison of constant 255 with expression of type 'char' is always true [clang-diagnostic-tautological-constant-out-of-range-compare][0m
 1585 |                 if ((0x00 <= c && c <= 0xff) && isprint(c)) {[0m
      | [0;1;32m                                  ~ ^  ~~~~
[0m[1msrc/core/value.c:1601:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1601 |         UNREACHABLE();[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1601:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1601 |         UNREACHABLE();[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1626:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1626 |           if (i != 0) pkByteBufferAddString(buff, vm, ", ", 2);[0m
      | [0;1;32m                     ^                                         
[0m      | [0;32m                      {
[0m[1msrc/core/value.c:1666:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1666 |           if (_done) break;[0m
      | [0;1;32m                    ^      
[0m      | [0;32m                     {
[0m[1msrc/core/value.c:1668:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1668 |           if (!_first) pkByteBufferAddString(buff, vm, ", ", 2);[0m
      | [0;1;32m                      ^                                         
[0m      | [0;32m                       {
[0m[1msrc/core/value.c:1686:30: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1686 |         const int len_from = snprintf(buff_from, sizeof(buff_from),[0m
      | [0;1;32m                             ^~~~~~~~
[0m[1msrc/core/value.c:1686:30: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
 1686 |         const int len_from = snprintf(buff_from, sizeof(buff_from),[0m
      | [0;1;32m                             ^~~~~~~~
[0m[1msrc/core/value.c:1689:28: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1689 |         const int len_to = snprintf(buff_to, sizeof(buff_to),[0m
      | [0;1;32m                           ^~~~~~~~
[0m[1msrc/core/value.c:1689:28: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
 1689 |         const int len_to = snprintf(buff_to, sizeof(buff_to),[0m
      | [0;1;32m                           ^~~~~~~~
[0m[1msrc/core/value.c:1775:25: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1775 |         const int len = snprintf(ptr, sizeof(buff_addr) - 2,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1msrc/core/value.c:1775:25: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
 1775 |         const int len = snprintf(ptr, sizeof(buff_addr) - 2,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1msrc/core/value.c:1784:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1784 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1784:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1784 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1814:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1814 |   if (IS_BOOL(v)) return AS_BOOL(v);[0m
      | [0;1;32m                 ^                  
[0m      | [0;32m                  {
[0m[1msrc/core/value.c:1815:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1815 |   if (IS_NULL(v)) return false;[0m
      | [0;1;32m                 ^             
[0m      | [0;32m                  {
[0m[1msrc/core/value.c:1816:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1816 |   if (IS_NUM(v)) return AS_NUM(v) != 0;[0m
      | [0;1;32m                ^                      
[0m      | [0;32m                 {
[0m[1msrc/core/value.c:1818:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1818 |   ASSERT(IS_OBJ(v), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1818:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1818 |   ASSERT(IS_OBJ(v), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/value.c:1821:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1821 |     case OBJ_STRING: return ((String*)o)->length != 0;[0m
      | [0;1;32m                     ^                               
[0m      | [0;32m                     {                               ;} 
[0m[1msrc/core/value.c:1822:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1822 |     case OBJ_LIST:   return ((List*)o)->elements.count != 0;[0m
      | [0;1;32m                     ^                                     
[0m      | [0;32m                     {                                     ;} 
[0m[1msrc/core/value.c:1823:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1823 |     case OBJ_MAP:    return ((Map*)o)->count != 0;[0m
      | [0;1;32m                     ^                           
[0m      | [0;32m                     {                           ;} 
[0m[1msrc/core/value.c:1836:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1836 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/value.c:1836:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1836 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m203 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[17/18][222.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmp0c6pb3v2.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/libs/std_path.c
[1msrc/libs/std_path.c:76:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |   if (path_size + ext_size + 1 >= FILENAME_MAX) return 0;[0m
      | [0;1;32m                                               ^         
[0m      | [0;32m                                                {
[0m[1msrc/libs/std_path.c:79:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   79 |   strcpy(buff, path);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/libs/std_path.c:79:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
   79 |   strcpy(buff, path);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/libs/std_path.c:80:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   80 |   strcpy(buff + path_size, ext);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/libs/std_path.c:80:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
   80 |   strcpy(buff + path_size, ext);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/libs/std_path.c:82:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |   if (!pathIsFile(buff)) return 0;[0m
      | [0;1;32m                        ^         
[0m      | [0;32m                         {
[0m[1msrc/libs/std_path.c:134:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  134 |     memcpy(ret, buff, path_size + 1);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/libs/std_path.c:134:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  134 |     memcpy(ret, buff, path_size + 1);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/libs/std_path.c:179:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  179 |     if (from_dir_length == 0) return NULL;[0m
      | [0;1;32m                             ^            
[0m      | [0;32m                              {
[0m[1msrc/libs/std_path.c:198:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  198 |   if (stat(path, &path_stat)) return false; // Error: might be path not exists.[0m
      | [0;1;32m                             ^                                                 
[0m      | [0;32m                              {
[0m[1msrc/libs/std_path.c:204:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  204 |   if (stat(path, &path_stat)) return false; // Error: might be path not exists.[0m
      | [0;1;32m                             ^                                                 
[0m      | [0;32m                              {
[0m[1msrc/libs/std_path.c:210:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  210 |   if (stat(path, &path_stat)) return 0; // Error: might be path not exists.[0m
      | [0;1;32m                             ^                                             
[0m      | [0;32m                              {
[0m[1msrc/libs/std_path.c:247:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  247 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:259:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:260:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:302:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  302 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:313:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  313 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:325:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  325 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:336:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  336 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:345:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  345 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:360:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  360 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:368:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  368 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:376:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  376 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/libs/std_path.c:385:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  385 |   if (!pkCheckArgcRange(vm, argc, 0, 1)) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/libs/std_path.c:388:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  388 |   if (argc == 1) if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                ^                                                      
[0m      | [0;32m                 {
[0m[1msrc/libs/std_path.c:388:64: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  388 |   if (argc == 1) if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m                                                               ^       
[0m      | [0;32m                                                                {
[0m[1msrc/libs/std_path.c:403:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  403 |       if (!strcmp(dir->d_name, ".")) continue;[0m
      | [0;1;32m                                    ^         
[0m      | [0;32m                                     {
[0m[1msrc/libs/std_path.c:404:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  404 |       if (!strcmp(dir->d_name, "..")) continue;[0m
      | [0;1;32m                                     ^         
[0m      | [0;32m                                      {
[0m[1msrc/libs/std_path.c:407:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  407 |       if (!pkListInsert(vm, 0, -1, 1)) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/libs/std_path.c:433:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  433 |   if (!osGetExeFilePath(buff, MAX_PATH_LEN)) return;[0m
      | [0;1;32m                                            ^       
[0m      | [0;32m                                             {
[0m[1msrc/libs/std_path.c:436:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  436 |   if (length == 0) return;[0m
      | [0;1;32m                  ^       
[0m      | [0;32m                   {
[0m[1msrc/libs/std_path.c:446:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  446 |   ASSERT(length + strlen("libs/") < MAX_PATH_LEN, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_path.c:446:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  446 |   ASSERT(length + strlen("libs/") < MAX_PATH_LEN, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/libs/../core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/../core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/libs/std_path.c:447:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  447 |   strcpy(buff + length, (ps == CWK_STYLE_WINDOWS) ? "libs\\" : "libs/");[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/libs/std_path.c:447:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  447 |   strcpy(buff + length, (ps == CWK_STYLE_WINDOWS) ? "libs\\" : "libs/");[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:66:14: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'abs_from' [clang-analyzer-security.ArrayBound][0m
   66 |     memmove(&buffer[position], str, amount_written);[0m
      | [0;1;32m             ^
[0m[1msrc/libs/std_path.c:259:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:259:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:260:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:260:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:266:3: [0m[0;1;36mnote: [0mCalling 'pathAbs'[0m
  266 |   pathAbs(from, abs_from, sizeof(abs_from));[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:222:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  222 |   if (getcwd(cwd, sizeof(cwd)) == NULL) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:226:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_get_absolute'[0m
  226 |   return cwk_path_get_absolute(cwd, path, buff, buffsz);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:694:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  694 |   if (cwk_path_is_absolute(base)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:696:14: [0m[0;1;36mnote: [0mAssuming 'path_style' is not equal to CWK_STYLE_WINDOWS[0m
  696 |   } else if (path_style == CWK_STYLE_WINDOWS) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:696:10: [0m[0;1;36mnote: [0mTaking false branch[0m
  696 |   } else if (path_style == CWK_STYLE_WINDOWS) {[0m
      | [0;1;32m         ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:704:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  704 |   if (cwk_path_is_absolute(path)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:718:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_join_and_normalize_multiple'[0m
  718 |   return cwk_path_join_and_normalize_multiple(paths, buffer, buffer_size);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:621:14: [0m[0;1;36mnote: [0mCalling 'cwk_path_is_root_absolute'[0m
  621 |   absolute = cwk_path_is_root_absolute(paths[0], pos);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:577:7: [0m[0;1;36mnote: [0mAssuming 'length' is not equal to 0[0m
  577 |   if (length == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:577:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  577 |   if (length == 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:583:33: [0m[0;1;36mnote: [0mAssuming index is less than 2, the number of 'const char' elements in the string literal[0m
  583 |   return cwk_path_is_separator(&path[length - 1]);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:621:14: [0m[0;1;36mnote: [0mReturning from 'cwk_path_is_root_absolute'[0m
  621 |   absolute = cwk_path_is_root_absolute(paths[0], pos);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:630:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  630 |   if (!cwk_path_get_first_segment_joined(paths, &sj)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is false[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 641[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:650:14: [0m[0;1;36mnote: [0mCalling 'cwk_path_output_separator'[0m
  650 |       pos += cwk_path_output_separator(buffer, buffer_size, pos);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:94:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_output_sized'[0m
   94 |   return cwk_path_output_sized(buffer, buffer_size, position,[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   95 |     separators[path_style], 1);[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:56:14: [0m[0;1;36mnote: [0mAssuming 'buffer_size' is <= 'position'[0m
   56 |   } else if (buffer_size > position) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:56:10: [0m[0;1;36mnote: [0mTaking false branch[0m
   56 |   } else if (buffer_size > position) {[0m
      | [0;1;32m         ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:7: [0m[0;1;36mnote: [0m'amount_written' is <= 0[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:94:10: [0m[0;1;36mnote: [0mReturning from 'cwk_path_output_sized'[0m
   94 |   return cwk_path_output_sized(buffer, buffer_size, position,[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   95 |     separators[path_style], 1);[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:650:14: [0m[0;1;36mnote: [0mReturning from 'cwk_path_output_separator'[0m
  650 |       pos += cwk_path_output_separator(buffer, buffer_size, pos);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:661:12: [0m[0;1;36mnote: [0mCalling 'cwk_path_output_sized'[0m
  661 |     pos += cwk_path_output_sized(buffer, buffer_size, pos, sj.segment.begin,[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  662 |       sj.segment.size);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:3: [0m[0;1;36mnote: [0mTaking true branch[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:7: [0m[0;1;36mnote: [0mAssuming 'amount_written' is > 0[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:3: [0m[0;1;36mnote: [0mTaking true branch[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:66:14: [0m[0;1;36mnote: [0mAccess of 'abs_from' at an overflowing index, while it holds only 4096 'char' elements[0m
   66 |     memmove(&buffer[position], str, amount_written);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:66:14: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'abs_path' [clang-analyzer-security.ArrayBound][0m
   66 |     memmove(&buffer[position], str, amount_written);[0m
      | [0;1;32m             ^
[0m[1msrc/libs/std_path.c:259:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:259:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:260:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:260:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:263:3: [0m[0;1;36mnote: [0mCalling 'pathAbs'[0m
  263 |   pathAbs(path, abs_path, sizeof(abs_path));[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:222:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  222 |   if (getcwd(cwd, sizeof(cwd)) == NULL) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:226:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_get_absolute'[0m
  226 |   return cwk_path_get_absolute(cwd, path, buff, buffsz);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:694:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  694 |   if (cwk_path_is_absolute(base)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:696:14: [0m[0;1;36mnote: [0mAssuming 'path_style' is not equal to CWK_STYLE_WINDOWS[0m
  696 |   } else if (path_style == CWK_STYLE_WINDOWS) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:696:10: [0m[0;1;36mnote: [0mTaking false branch[0m
  696 |   } else if (path_style == CWK_STYLE_WINDOWS) {[0m
      | [0;1;32m         ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:704:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  704 |   if (cwk_path_is_absolute(path)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:718:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_join_and_normalize_multiple'[0m
  718 |   return cwk_path_join_and_normalize_multiple(paths, buffer, buffer_size);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:621:14: [0m[0;1;36mnote: [0mCalling 'cwk_path_is_root_absolute'[0m
  621 |   absolute = cwk_path_is_root_absolute(paths[0], pos);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:577:7: [0m[0;1;36mnote: [0mAssuming 'length' is not equal to 0[0m
  577 |   if (length == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:577:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  577 |   if (length == 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:583:33: [0m[0;1;36mnote: [0mAssuming index is less than 2, the number of 'const char' elements in the string literal[0m
  583 |   return cwk_path_is_separator(&path[length - 1]);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:621:14: [0m[0;1;36mnote: [0mReturning from 'cwk_path_is_root_absolute'[0m
  621 |   absolute = cwk_path_is_root_absolute(paths[0], pos);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:630:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  630 |   if (!cwk_path_get_first_segment_joined(paths, &sj)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is false[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 641[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:650:14: [0m[0;1;36mnote: [0mCalling 'cwk_path_output_separator'[0m
  650 |       pos += cwk_path_output_separator(buffer, buffer_size, pos);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:94:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_output_sized'[0m
   94 |   return cwk_path_output_sized(buffer, buffer_size, position,[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   95 |     separators[path_style], 1);[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:56:14: [0m[0;1;36mnote: [0mAssuming 'buffer_size' is <= 'position'[0m
   56 |   } else if (buffer_size > position) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:56:10: [0m[0;1;36mnote: [0mTaking false branch[0m
   56 |   } else if (buffer_size > position) {[0m
      | [0;1;32m         ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:7: [0m[0;1;36mnote: [0m'amount_written' is <= 0[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:94:10: [0m[0;1;36mnote: [0mReturning from 'cwk_path_output_sized'[0m
   94 |   return cwk_path_output_sized(buffer, buffer_size, position,[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m   95 |     separators[path_style], 1);[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:650:14: [0m[0;1;36mnote: [0mReturning from 'cwk_path_output_separator'[0m
  650 |       pos += cwk_path_output_separator(buffer, buffer_size, pos);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:661:12: [0m[0;1;36mnote: [0mCalling 'cwk_path_output_sized'[0m
  661 |     pos += cwk_path_output_sized(buffer, buffer_size, pos, sj.segment.begin,[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  662 |       sj.segment.size);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:3: [0m[0;1;36mnote: [0mTaking true branch[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:7: [0m[0;1;36mnote: [0mAssuming 'amount_written' is > 0[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:3: [0m[0;1;36mnote: [0mTaking true branch[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:66:14: [0m[0;1;36mnote: [0mAccess of 'abs_path' at an overflowing index, while it holds only 4096 'char' elements[0m
   66 |     memmove(&buffer[position], str, amount_written);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:66:14: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'result' [clang-analyzer-security.ArrayBound][0m
   66 |     memmove(&buffer[position], str, amount_written);[0m
      | [0;1;32m             ^
[0m[1msrc/libs/std_path.c:302:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  302 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:302:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  302 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:305:29: [0m[0;1;36mnote: [0mCalling 'cwk_path_normalize'[0m
  305 |   uint32_t len = (uint32_t) cwk_path_normalize(path, result, sizeof(result));[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:1159:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_join_and_normalize_multiple'[0m
 1159 |   return cwk_path_join_and_normalize_multiple(paths, buffer, buffer_size);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:630:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  630 |   if (!cwk_path_get_first_segment_joined(paths, &sj)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is false[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 641[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:661:12: [0m[0;1;36mnote: [0mCalling 'cwk_path_output_sized'[0m
  661 |     pos += cwk_path_output_sized(buffer, buffer_size, pos, sj.segment.begin,[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  662 |       sj.segment.size);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:54:3: [0m[0;1;36mnote: [0mTaking true branch[0m
   54 |   if (buffer_size > position + length) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:7: [0m[0;1;36mnote: [0mAssuming 'amount_written' is > 0[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:65:3: [0m[0;1;36mnote: [0mTaking true branch[0m
   65 |   if (amount_written > 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:66:14: [0m[0;1;36mnote: [0mAccess of 'result' at an overflowing index, while it holds only 4096 'char' elements[0m
   66 |     memmove(&buffer[position], str, amount_written);[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:123:7: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'abs_from' [clang-analyzer-security.ArrayBound][0m
  123 |       buffer[pos] = '\0';[0m
      | [0;1;32m      ^
[0m[1msrc/libs/std_path.c:259:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:259:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:260:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:260:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:266:3: [0m[0;1;36mnote: [0mCalling 'pathAbs'[0m
  266 |   pathAbs(from, abs_from, sizeof(abs_from));[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:222:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  222 |   if (getcwd(cwd, sizeof(cwd)) == NULL) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:226:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_get_absolute'[0m
  226 |   return cwk_path_get_absolute(cwd, path, buff, buffsz);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:694:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  694 |   if (cwk_path_is_absolute(base)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:696:14: [0m[0;1;36mnote: [0mAssuming 'path_style' is not equal to CWK_STYLE_WINDOWS[0m
  696 |   } else if (path_style == CWK_STYLE_WINDOWS) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:696:10: [0m[0;1;36mnote: [0mTaking false branch[0m
  696 |   } else if (path_style == CWK_STYLE_WINDOWS) {[0m
      | [0;1;32m         ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:704:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  704 |   if (cwk_path_is_absolute(path)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:718:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_join_and_normalize_multiple'[0m
  718 |   return cwk_path_join_and_normalize_multiple(paths, buffer, buffer_size);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:630:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  630 |   if (!cwk_path_get_first_segment_joined(paths, &sj)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is false[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 641[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:667:8: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  667 |   if (!has_segment_output && pos == 0) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:667:27: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  667 |   if (!has_segment_output && pos == 0) {[0m
      | [0;1;32m                          ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:678:3: [0m[0;1;36mnote: [0mCalling 'cwk_path_terminate_output'[0m
  678 |   cwk_path_terminate_output(buffer, buffer_size, pos);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:119:7: [0m[0;1;36mnote: [0m'buffer_size' is > 0[0m
  119 |   if (buffer_size > 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:119:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  119 |   if (buffer_size > 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:120:9: [0m[0;1;36mnote: [0m'pos' is < 'buffer_size'[0m
  120 |     if (pos >= buffer_size) {[0m
      | [0;1;32m        ^~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:120:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  120 |     if (pos >= buffer_size) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:123:7: [0m[0;1;36mnote: [0mAccess of 'abs_from' at an overflowing index, while it holds only 4096 'char' elements[0m
  123 |       buffer[pos] = '\0';[0m
      | [0;1;32m      ^~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:123:7: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'abs_path' [clang-analyzer-security.ArrayBound][0m
  123 |       buffer[pos] = '\0';[0m
      | [0;1;32m      ^
[0m[1msrc/libs/std_path.c:259:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:259:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  259 |   if (!pkValidateSlotString(vm, 1, &path, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:260:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:260:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  260 |   if (!pkValidateSlotString(vm, 2, &from, NULL)) return;[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:263:3: [0m[0;1;36mnote: [0mCalling 'pathAbs'[0m
  263 |   pathAbs(path, abs_path, sizeof(abs_path));[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:222:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  222 |   if (getcwd(cwd, sizeof(cwd)) == NULL) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:226:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_get_absolute'[0m
  226 |   return cwk_path_get_absolute(cwd, path, buff, buffsz);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:694:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  694 |   if (cwk_path_is_absolute(base)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:696:14: [0m[0;1;36mnote: [0mAssuming 'path_style' is not equal to CWK_STYLE_WINDOWS[0m
  696 |   } else if (path_style == CWK_STYLE_WINDOWS) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:696:10: [0m[0;1;36mnote: [0mTaking false branch[0m
  696 |   } else if (path_style == CWK_STYLE_WINDOWS) {[0m
      | [0;1;32m         ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:704:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  704 |   if (cwk_path_is_absolute(path)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:718:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_join_and_normalize_multiple'[0m
  718 |   return cwk_path_join_and_normalize_multiple(paths, buffer, buffer_size);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:630:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  630 |   if (!cwk_path_get_first_segment_joined(paths, &sj)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is false[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 641[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:667:8: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  667 |   if (!has_segment_output && pos == 0) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:667:27: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  667 |   if (!has_segment_output && pos == 0) {[0m
      | [0;1;32m                          ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:678:3: [0m[0;1;36mnote: [0mCalling 'cwk_path_terminate_output'[0m
  678 |   cwk_path_terminate_output(buffer, buffer_size, pos);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:119:7: [0m[0;1;36mnote: [0m'buffer_size' is > 0[0m
  119 |   if (buffer_size > 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:119:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  119 |   if (buffer_size > 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:120:9: [0m[0;1;36mnote: [0m'pos' is < 'buffer_size'[0m
  120 |     if (pos >= buffer_size) {[0m
      | [0;1;32m        ^~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:120:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  120 |     if (pos >= buffer_size) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:123:7: [0m[0;1;36mnote: [0mAccess of 'abs_path' at an overflowing index, while it holds only 4096 'char' elements[0m
  123 |       buffer[pos] = '\0';[0m
      | [0;1;32m      ^~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:123:7: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'result' [clang-analyzer-security.ArrayBound][0m
  123 |       buffer[pos] = '\0';[0m
      | [0;1;32m      ^
[0m[1msrc/libs/std_path.c:281:7: [0m[0;1;36mnote: [0mAssuming 'argc' is <= MAX_JOIN_PATHS[0m
  281 |   if (argc > MAX_JOIN_PATHS) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/std_path.c:281:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  281 |   if (argc > MAX_JOIN_PATHS) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:287:19: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'argc'[0m
  287 |   for (int i = 0; i < argc; i++) {[0m
      | [0;1;32m                  ^~~~~~~~
[0m[1msrc/libs/std_path.c:287:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 290[0m
  287 |   for (int i = 0; i < argc; i++) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/std_path.c:293:29: [0m[0;1;36mnote: [0mCalling 'cwk_path_join_multiple'[0m
  293 |   uint32_t len = (uint32_t) cwk_path_join_multiple(paths, result,[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  294 |                                                    sizeof(result));[0m
      | [0;1;32m                                                   ~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:885:10: [0m[0;1;36mnote: [0mCalling 'cwk_path_join_and_normalize_multiple'[0m
  885 |   return cwk_path_join_and_normalize_multiple(paths, buffer, buffer_size);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:630:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  630 |   if (!cwk_path_get_first_segment_joined(paths, &sj)) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is false[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 641[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 641[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:641:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  641 |     if (cwk_path_segment_will_be_removed(&sj, absolute)) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:9: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:649:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  649 |     if (has_segment_output) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:638:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  638 |   do {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:667:8: [0m[0;1;36mnote: [0m'has_segment_output' is true[0m
  667 |   if (!has_segment_output && pos == 0) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:667:27: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  667 |   if (!has_segment_output && pos == 0) {[0m
      | [0;1;32m                          ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:678:3: [0m[0;1;36mnote: [0mCalling 'cwk_path_terminate_output'[0m
  678 |   cwk_path_terminate_output(buffer, buffer_size, pos);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:119:7: [0m[0;1;36mnote: [0m'buffer_size' is > 0[0m
  119 |   if (buffer_size > 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:119:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  119 |   if (buffer_size > 0) {[0m
      | [0;1;32m  ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:120:9: [0m[0;1;36mnote: [0m'pos' is < 'buffer_size'[0m
  120 |     if (pos >= buffer_size) {[0m
      | [0;1;32m        ^~~
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:120:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  120 |     if (pos >= buffer_size) {[0m
      | [0;1;32m    ^
[0m[1msrc/libs/thirdparty/cwalk/cwalk.c:123:7: [0m[0;1;36mnote: [0mAccess of 'result' at an overflowing index, while it holds only 4096 'char' elements[0m
  123 |       buffer[pos] = '\0';[0m
      | [0;1;32m      ^~~~~~~~~~~
[0m39 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[18/18][274.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/pocketlang/tidy-fixes/tmpgj94bbv4.yaml -p=/itch/common/crepos/cu-to-rtu/c/pocketlang /itch/common/crepos/cu-to-rtu/c/pocketlang/src/core/compiler.c
[1msrc/core/compiler.c:560:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  560 |   memset(compiler, 0, sizeof(Compiler));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/compiler.c:560:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  560 |   memset(compiler, 0, sizeof(Compiler));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/core/compiler.c:588:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  588 |   ASSERT(compiler->bifn_list_join >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:588:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  588 |   ASSERT(compiler->bifn_list_join >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:602:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  602 |   if (vm->config.stderr_write == NULL) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/core/compiler.c:607:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  607 |     ASSERT(parser->repl_mode, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:607:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  607 |     ASSERT(parser->repl_mode, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:622:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  622 |   if (parser->has_syntax_error) return;[0m
      | [0;1;32m                               ^       
[0m      | [0;32m                                {
[0m[1msrc/core/compiler.c:635:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  635 |   if (parser->has_syntax_error) return;[0m
      | [0;1;32m                               ^       
[0m      | [0;32m                                {
[0m[1msrc/core/compiler.c:658:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  658 |   ASSERT(index >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:658:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  658 |   ASSERT(index >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:693:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  693 |     if (c == quote) break;[0m
      | [0;1;32m                   ^      
[0m      | [0;32m                    {
[0m[1msrc/core/compiler.c:745:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  745 |         case '"':  pkByteBufferWrite(&buff, parser->vm, '"'); break;[0m
      | [0;1;32m                   ^                                               
[0m      | [0;32m                   {                                               ;} 
[0m[1msrc/core/compiler.c:746:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  746 |         case '\'': pkByteBufferWrite(&buff, parser->vm, '\''); break;[0m
      | [0;1;32m                   ^                                                
[0m      | [0;32m                   {                                                ;} 
[0m[1msrc/core/compiler.c:747:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  747 |         case '\\': pkByteBufferWrite(&buff, parser->vm, '\\'); break;[0m
      | [0;1;32m                   ^                                                
[0m      | [0;32m                   {                                                ;} 
[0m[1msrc/core/compiler.c:748:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  748 |         case 'n':  pkByteBufferWrite(&buff, parser->vm, '\n'); break;[0m
      | [0;1;32m                   ^                                                
[0m      | [0;32m                   {                                                ;} 
[0m[1msrc/core/compiler.c:749:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  749 |         case 'r':  pkByteBufferWrite(&buff, parser->vm, '\r'); break;[0m
      | [0;1;32m                   ^                                                
[0m      | [0;32m                   {                                                ;} 
[0m[1msrc/core/compiler.c:750:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  750 |         case 't':  pkByteBufferWrite(&buff, parser->vm, '\t'); break;[0m
      | [0;1;32m                   ^                                                
[0m      | [0;32m                   {                                                ;} 
[0m[1msrc/core/compiler.c:751:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  751 |         case '\n': break; // Just ignore the next line.[0m
      | [0;1;32m                   ^    
[0m      | [0;32m                   {    ;} 
[0m[1msrc/core/compiler.c:754:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  754 |         case '$':  pkByteBufferWrite(&buff, parser->vm, '$'); break;[0m
      | [0;1;32m                   ^                                               
[0m      | [0;32m                   {                                               ;} 
[0m[1msrc/core/compiler.c:757:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  757 |         case 'x': {[0m
      | [0;1;32m                  ^
[0m      | [0;32m                  {
[0m[1msrc/core/compiler.c:783:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  783 |           if (matchChar(parser, '\n')) break;[0m
      | [0;1;32m          ^                                 
[0m      | [0;32m          {                                 ;} 
[0m[1msrc/core/compiler.c:783:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  783 |           if (matchChar(parser, '\n')) break;[0m
      | [0;1;32m                                      ^      
[0m      | [0;32m                                       {
[0m[1msrc/core/compiler.c:788:11: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  788 |           semanticError(compiler, makeErrToken(parser),[0m
      | [0;1;32m          ^
[0m      | [0;32m          {
[0m  789 |                         "Invalid escape character.");[0m
  790 |           break;[0m
      | [0;1;32m               
[0m      | [0;32m               ;} 
[0m[1msrc/core/compiler.c:813:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  813 |   if (peekChar(parser) == '\0') return '\0';[0m
      | [0;1;32m                               ^            
[0m      | [0;32m                                {
[0m[1msrc/core/compiler.c:821:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  821 |   if (c == '\n') parser->current_line++;[0m
      | [0;1;32m                ^                       
[0m      | [0;32m                 {
[0m[1msrc/core/compiler.c:873:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  873 |         if (!IS_BIN_CHAR(c)) break;[0m
      | [0;1;32m                            ^      
[0m      | [0;32m                             {
[0m[1msrc/core/compiler.c:907:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  907 |         if (!utilIsCharHex(c)) break;[0m
      | [0;1;32m                              ^      
[0m      | [0;32m                               {
[0m[1msrc/core/compiler.c:953:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  953 |         while (utilIsDigit(peekChar(parser))) eatChar(parser);[0m
      | [0;1;32m                                             ^                
[0m      | [0;32m                                              {
[0m[1msrc/core/compiler.c:977:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  977 |     if (c == '\n') return;[0m
      | [0;1;32m                  ^       
[0m      | [0;32m                   {
[0m[1msrc/core/compiler.c:985:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  985 |   if (peekChar(parser) != c) return false;[0m
      | [0;1;32m                            ^             
[0m      | [0;32m                             {
[0m[1msrc/core/compiler.c:1033:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1033 |   if (parser->current.type == TK_EOF) return;[0m
      | [0;1;32m                                     ^       
[0m      | [0;32m                                      {
[0m[1msrc/core/compiler.c:1050:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1050 |         ASSERT(parser->current_char < parser->si_name_end, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1050:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1050 |         ASSERT(parser->current_char < parser->si_name_end, OOPS);[0m
      | [0;1;32m        ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1089:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1089 |       case ',': setNextToken(parser, TK_COMMA); return;[0m
      | [0;1;32m                ^                                     
[0m      | [0;32m                {                                     ;} 
[0m[1msrc/core/compiler.c:1090:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1090 |       case ':': setNextToken(parser, TK_COLLON); return;[0m
      | [0;1;32m                ^                                      
[0m      | [0;32m                {                                      ;} 
[0m[1msrc/core/compiler.c:1091:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1091 |       case ';': setNextToken(parser, TK_SEMICOLLON); return;[0m
      | [0;1;32m                ^                                          
[0m      | [0;32m                {                                          ;} 
[0m[1msrc/core/compiler.c:1092:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1092 |       case '#': skipLineComment(parser); break;[0m
      | [0;1;32m                ^                             
[0m      | [0;32m                {                             ;} 
[0m[1msrc/core/compiler.c:1093:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1093 |       case '(': setNextToken(parser, TK_LPARAN); return;[0m
      | [0;1;32m                ^                                      
[0m      | [0;32m                {                                      ;} 
[0m[1msrc/core/compiler.c:1094:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1094 |       case ')': setNextToken(parser, TK_RPARAN); return;[0m
      | [0;1;32m                ^                                      
[0m      | [0;32m                {                                      ;} 
[0m[1msrc/core/compiler.c:1095:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1095 |       case '[': setNextToken(parser, TK_LBRACKET); return;[0m
      | [0;1;32m                ^                                        
[0m      | [0;32m                {                                        ;} 
[0m[1msrc/core/compiler.c:1096:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1096 |       case ']': setNextToken(parser, TK_RBRACKET); return;[0m
      | [0;1;32m                ^                                        
[0m      | [0;32m                {                                        ;} 
[0m[1msrc/core/compiler.c:1098:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1098 |         setNextTwoCharToken(parser, '=', TK_PERCENT, TK_MODEQ);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1099 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1101:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1101 |       case '~': setNextToken(parser, TK_TILD); return;[0m
      | [0;1;32m                ^                                    
[0m      | [0;32m                {                                    ;} 
[0m[1msrc/core/compiler.c:1104:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1104 |         setNextTwoCharToken(parser, '=', TK_AMP, TK_ANDEQ);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1105 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1108:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1108 |         setNextTwoCharToken(parser, '=', TK_PIPE, TK_OREQ);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1109 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1112:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1112 |         setNextTwoCharToken(parser, '=', TK_CARET, TK_XOREQ);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1113 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1115:18: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1115 |       case '\n': setNextToken(parser, TK_LINE); return;[0m
      | [0;1;32m                 ^                                    
[0m      | [0;32m                 {                                    ;} 
[0m[1msrc/core/compiler.c:1129:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1129 |         if (matchChar(parser, '.')) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1130 |           setNextToken(parser, TK_DOTDOT); // '..'[0m
 1131 |         } else if (utilIsDigit(peekChar(parser))) {[0m
 1132 |           eatChar(parser);   // Consume the decimal point.[0m
 1133 |           eatNumber(compiler); // Consume the rest of the number[0m
 1134 |           if (parser->has_syntax_error) return;[0m
 1135 |         } else {[0m
 1136 |           setNextToken(parser, TK_DOT);    // '.'[0m
 1137 |         }[0m
 1138 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1134:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1134 |           if (parser->has_syntax_error) return;[0m
      | [0;1;32m                                       ^       
[0m      | [0;32m                                        {
[0m[1msrc/core/compiler.c:1141:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1141 |         setNextTwoCharToken(parser, '=', TK_EQ, TK_EQEQ);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1142 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1145:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1145 |         setNextTwoCharToken(parser, '=', TK_NOT, TK_NOTEQ);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1146 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1149:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1149 |         if (matchChar(parser, '>')) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1150 |           setNextTwoCharToken(parser, '=', TK_SRIGHT, TK_SRIGHTEQ);[0m
 1151 |         } else {[0m
 1152 |           setNextTwoCharToken(parser, '=', TK_GT, TK_GTEQ);[0m
 1153 |         }[0m
 1154 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1157:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1157 |         if (matchChar(parser, '<')) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1158 |           setNextTwoCharToken(parser, '=', TK_SLEFT, TK_SLEFTEQ);[0m
 1159 |         } else {[0m
 1160 |           setNextTwoCharToken(parser, '=', TK_LT, TK_LTEQ);[0m
 1161 |         }[0m
 1162 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1165:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1165 |         setNextTwoCharToken(parser, '=', TK_PLUS, TK_PLUSEQ);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1166 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1169:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1169 |         if (matchChar(parser, '=')) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1170 |           setNextToken(parser, TK_MINUSEQ);  // '-='[0m
 1171 |         } else if (matchChar(parser, '>')) {[0m
 1172 |           setNextToken(parser, TK_ARROW);    // '->'[0m
 1173 |         } else {[0m
 1174 |           setNextToken(parser, TK_MINUS);    // '-'[0m
 1175 |         }[0m
 1176 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1179:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1179 |         if (matchChar(parser, '*')) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1180 |           setNextTwoCharToken(parser, '=', TK_STARSTAR, TK_POWEQ);[0m
 1181 |         } else {[0m
 1182 |           setNextTwoCharToken(parser, '=', TK_STAR, TK_STAREQ);[0m
 1183 |         }[0m
 1184 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1187:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1187 |         setNextTwoCharToken(parser, '=', TK_FSLASH, TK_DIVEQ);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1188 |         return;[0m
      | [0;1;32m              
[0m      | [0;32m              ;} 
[0m[1msrc/core/compiler.c:1190:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1190 |       case '"': eatString(compiler, false); return;[0m
      | [0;1;32m                ^                                 
[0m      | [0;32m                {                                 ;} 
[0m[1msrc/core/compiler.c:1192:18: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1192 |       case '\'': eatString(compiler, true); return;[0m
      | [0;1;32m                 ^                                
[0m      | [0;32m                 {                                ;} 
[0m[1msrc/core/compiler.c:1198:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1198 |           if (parser->has_syntax_error) return;[0m
      | [0;1;32m                                       ^       
[0m      | [0;32m                                        {
[0m[1msrc/core/compiler.c:1235:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1235 |   if (peek(compiler) != expected) return false;[0m
      | [0;1;32m                                 ^             
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:1238:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1238 |   if (compiler->parser.has_syntax_error) return false;[0m
      | [0;1;32m                                        ^             
[0m      | [0;32m                                         {
[0m[1msrc/core/compiler.c:1249:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1249 |   if (compiler->parser.has_syntax_error) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/compiler.c:1266:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1266 |       if (compiler->parser.has_syntax_error) return false;[0m
      | [0;1;32m                                            ^             
[0m      | [0;32m                                             {
[0m[1msrc/core/compiler.c:1294:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1294 |   if (matchLine(compiler) || peek(compiler) == TK_EOF)[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m 1295 |     return true;[0m
      | [0;1;32m                
[0m[1msrc/core/compiler.c:1301:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1301 |     || peek(compiler) == TK_ELIF)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m 1302 |     return true;[0m
      | [0;1;32m                
[0m[1msrc/core/compiler.c:1322:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1322 |     if (match(compiler, delimiter))[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m 1323 |       consumed = true;[0m
      | [0;1;32m                      
[0m[1msrc/core/compiler.c:1326:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1326 |   if (matchLine(compiler))[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m 1327 |     consumed = true;[0m
      | [0;1;32m                    
[0m[1msrc/core/compiler.c:1331:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1331 |     if (delimiter == TK_DO) msg = "Expected enter block with newline or 'do'.";[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m 1332 |     else msg = "Expected enter block with newline or 'then'.";[0m
      | [0;32m    } 
[0m[1msrc/core/compiler.c:1332:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1332 |     else msg = "Expected enter block with newline or 'then'.";[0m
      | [0;1;32m        ^                                                     
[0m      | [0;32m         {
[0m[1msrc/core/compiler.c:1340:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1340 |   if (match(compiler, TK_EQ))       return true;[0m
      | [0;1;32m                             ^                  
[0m      | [0;32m                              {
[0m[1msrc/core/compiler.c:1341:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1341 |   if (match(compiler, TK_PLUSEQ))   return true;[0m
      | [0;1;32m                                 ^              
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:1342:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1342 |   if (match(compiler, TK_MINUSEQ))  return true;[0m
      | [0;1;32m                                  ^             
[0m      | [0;32m                                   {
[0m[1msrc/core/compiler.c:1343:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1343 |   if (match(compiler, TK_STAREQ))   return true;[0m
      | [0;1;32m                                 ^              
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:1344:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1344 |   if (match(compiler, TK_DIVEQ))    return true;[0m
      | [0;1;32m                                ^               
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:1345:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1345 |   if (match(compiler, TK_MODEQ))    return true;[0m
      | [0;1;32m                                ^               
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:1346:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1346 |   if (match(compiler, TK_POWEQ))    return true;[0m
      | [0;1;32m                                ^               
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:1347:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1347 |   if (match(compiler, TK_ANDEQ))    return true;[0m
      | [0;1;32m                                ^               
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:1348:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1348 |   if (match(compiler, TK_OREQ))     return true;[0m
      | [0;1;32m                               ^                
[0m      | [0;32m                                {
[0m[1msrc/core/compiler.c:1349:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1349 |   if (match(compiler, TK_XOREQ))    return true;[0m
      | [0;1;32m                                ^               
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:1350:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1350 |   if (match(compiler, TK_SRIGHTEQ)) return true;[0m
      | [0;1;32m                                   ^            
[0m      | [0;32m                                    {
[0m[1msrc/core/compiler.c:1351:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1351 |   if (match(compiler, TK_SLEFTEQ))  return true;[0m
      | [0;1;32m                                  ^             
[0m      | [0;32m                                   {
[0m[1msrc/core/compiler.c:1366:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1366 |     if (bfn_length != length) continue;[0m
      | [0;1;32m                             ^         
[0m      | [0;32m                              {
[0m[1msrc/core/compiler.c:1389:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1389 |   ASSERT(func != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1389:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1389 |   ASSERT(func != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1391:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1391 |     if (func->locals[i].length != length) continue;[0m
      | [0;1;32m                                         ^         
[0m      | [0;32m                                          {
[0m[1msrc/core/compiler.c:1434:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1434 |   if (func->depth <= DEPTH_GLOBAL) return -1;[0m
      | [0;1;32m                                  ^          
[0m      | [0;32m                                   {
[0m[1msrc/core/compiler.c:1689:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1689 |   ASSERT(index >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1689:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1689 |   ASSERT(index >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1696:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1696 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:1696:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1696 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:1700:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1700 |       if (index < 9) { //< 0..8 locals have single opcode.[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1701 |         emitOpcode(compiler, (Opcode)(OP_PUSH_LOCAL_0 + index));[0m
 1702 |       } else {[0m
 1703 |         emitOpcode(compiler, OP_PUSH_LOCAL_N);[0m
 1704 |         emitByte(compiler, index);[0m
 1705 |       }[0m
 1706 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/compiler.c:1709:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1709 |       emitOpcode(compiler, OP_PUSH_UPVALUE);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1710 |       emitByte(compiler, index);[0m
 1711 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/compiler.c:1714:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1714 |       emitOpcode(compiler, OP_PUSH_GLOBAL);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1715 |       emitByte(compiler, index);[0m
 1716 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/compiler.c:1719:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1719 |       emitOpcode(compiler, OP_PUSH_BUILTIN_FN);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1720 |       emitByte(compiler, index);[0m
 1721 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/compiler.c:1724:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1724 |       emitOpcode(compiler, OP_PUSH_BUILTIN_TY);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1725 |       emitByte(compiler, index);[0m
 1726 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/compiler.c:1733:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1733 |   ASSERT(index >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1733:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1733 |   ASSERT(index >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1739:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1739 |       if (compiler->parser.has_errors) return;[0m
      | [0;1;32m                                      ^       
[0m      | [0;32m                                       {
[0m[1msrc/core/compiler.c:1740:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1740 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:1740:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1740 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:1744:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1744 |       if (index < 9) { //< 0..8 locals have single opcode.[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1745 |         emitOpcode(compiler, (Opcode)(OP_STORE_LOCAL_0 + index));[0m
 1746 |       } else {[0m
 1747 |         emitOpcode(compiler, OP_STORE_LOCAL_N);[0m
 1748 |         emitByte(compiler, index);[0m
 1749 |       }[0m
 1750 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/compiler.c:1753:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1753 |       emitOpcode(compiler, OP_STORE_UPVALUE);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1754 |       emitByte(compiler, index);[0m
 1755 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/compiler.c:1758:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1758 |       emitStoreGlobal(compiler, index);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1759 |       return;[0m
      | [0;1;32m            
[0m      | [0;32m            ;} 
[0m[1msrc/core/compiler.c:1767:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1767 |   ASSERT((call_type == OP_CALL) ||[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1767:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1767 |   ASSERT((call_type == OP_CALL) ||[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1795:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1795 |     ASSERT_INDEX(method, (int)compiler->module->constants.count);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1795:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1795 |     ASSERT_INDEX(method, (int)compiler->module->constants.count);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:61:3: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT_INDEX'[0m
   61 |   ASSERT(index >= 0 && index < size, "Index out of bounds.")[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1870:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1870 |     ASSERT(IS_OBJ_TYPE(compiler->parser.previous.value, OBJ_STRING), OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1870:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1870 |     ASSERT(IS_OBJ_TYPE(compiler->parser.previous.value, OBJ_STRING), OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1986:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1986 |       ASSERT(compiler->parser.has_errors ||[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:1986:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1986 |       ASSERT(compiler->parser.has_errors ||[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2064:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2064 |     case TK_DOTDOT:   emitOpcode(compiler, OP_RANGE);        break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2065:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2065 |     case TK_PERCENT:  EMIT_BINARY_OP_INPLACE(OP_MOD);        break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2066:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2066 |     case TK_PLUS:     EMIT_BINARY_OP_INPLACE(OP_ADD);        break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2067:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2067 |     case TK_MINUS:    EMIT_BINARY_OP_INPLACE(OP_SUBTRACT);   break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2068:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2068 |     case TK_STAR:     EMIT_BINARY_OP_INPLACE(OP_MULTIPLY);   break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2069:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2069 |     case TK_FSLASH:   EMIT_BINARY_OP_INPLACE(OP_DIVIDE);     break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2070:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2070 |     case TK_STARSTAR: EMIT_BINARY_OP_INPLACE(OP_EXPONENT);   break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2071:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2071 |     case TK_AMP:      EMIT_BINARY_OP_INPLACE(OP_BIT_AND);    break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2072:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2072 |     case TK_PIPE:     EMIT_BINARY_OP_INPLACE(OP_BIT_OR);     break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2073:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2073 |     case TK_CARET:    EMIT_BINARY_OP_INPLACE(OP_BIT_XOR);    break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2074:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2074 |     case TK_SRIGHT:   EMIT_BINARY_OP_INPLACE(OP_BIT_RSHIFT); break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2075:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2075 |     case TK_SLEFT:    EMIT_BINARY_OP_INPLACE(OP_BIT_LSHIFT); break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2061:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2061 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 0); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2078:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2078 |     case TK_GT:      emitOpcode(compiler, OP_GT);    break;[0m
      | [0;1;32m                     ^                                    
[0m      | [0;32m                     {                                    ;} 
[0m[1msrc/core/compiler.c:2079:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2079 |     case TK_LT:      emitOpcode(compiler, OP_LT);    break;[0m
      | [0;1;32m                     ^                                    
[0m      | [0;32m                     {                                    ;} 
[0m[1msrc/core/compiler.c:2080:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2080 |     case TK_EQEQ:    emitOpcode(compiler, OP_EQEQ);  break;[0m
      | [0;1;32m                     ^                                    
[0m      | [0;32m                     {                                    ;} 
[0m[1msrc/core/compiler.c:2081:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2081 |     case TK_NOTEQ:   emitOpcode(compiler, OP_NOTEQ); break;[0m
      | [0;1;32m                     ^                                    
[0m      | [0;32m                     {                                    ;} 
[0m[1msrc/core/compiler.c:2082:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2082 |     case TK_GTEQ:    emitOpcode(compiler, OP_GTEQ);  break;[0m
      | [0;1;32m                     ^                                    
[0m      | [0;32m                     {                                    ;} 
[0m[1msrc/core/compiler.c:2083:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2083 |     case TK_LTEQ:    emitOpcode(compiler, OP_LTEQ);  break;[0m
      | [0;1;32m                     ^                                    
[0m      | [0;32m                     {                                    ;} 
[0m[1msrc/core/compiler.c:2084:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2084 |     case TK_IN:      emitOpcode(compiler, OP_IN);    break;[0m
      | [0;1;32m                     ^                                    
[0m      | [0;32m                     {                                    ;} 
[0m[1msrc/core/compiler.c:2085:22: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2085 |     case TK_IS:      emitOpcode(compiler, OP_IS);    break;[0m
      | [0;1;32m                     ^                                    
[0m      | [0;32m                     {                                    ;} 
[0m[1msrc/core/compiler.c:2087:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2087 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2087:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2087 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2087:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2087 |       UNREACHABLE();[0m
      | [0;1;32m      ^            
[0m      | [0;32m      {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2097:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2097 |     case TK_TILD:  emitOpcode(compiler, OP_BIT_NOT); break;[0m
      | [0;1;32m                   ^                                      
[0m      | [0;32m                   {                                      ;} 
[0m[1msrc/core/compiler.c:2098:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2098 |     case TK_PLUS:  emitOpcode(compiler, OP_POSITIVE); break;[0m
      | [0;1;32m                   ^                                       
[0m      | [0;32m                   {                                       ;} 
[0m[1msrc/core/compiler.c:2099:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2099 |     case TK_MINUS: emitOpcode(compiler, OP_NEGATIVE); break;[0m
      | [0;1;32m                   ^                                       
[0m      | [0;32m                   {                                       ;} 
[0m[1msrc/core/compiler.c:2100:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2100 |     case TK_NOT:   emitOpcode(compiler, OP_NOT); break;[0m
      | [0;1;32m                   ^                                  
[0m      | [0;32m                   {                                  ;} 
[0m[1msrc/core/compiler.c:2102:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2102 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2102:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2102 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2102:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2102 |       UNREACHABLE();[0m
      | [0;1;32m      ^            
[0m      | [0;32m      {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2121:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2121 |     if (peek(compiler) == TK_RBRACKET) break;[0m
      | [0;1;32m                                      ^      
[0m      | [0;32m                                       {
[0m[1msrc/core/compiler.c:2141:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2141 |     if (peek(compiler) == TK_RBRACE) break;[0m
      | [0;1;32m                                    ^      
[0m      | [0;32m                                     {
[0m[1msrc/core/compiler.c:2177:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2177 |   if (_compileOptionalParanCall(compiler, index)) return;[0m
      | [0;1;32m                                                 ^       
[0m      | [0;32m                                                  {
[0m[1msrc/core/compiler.c:2228:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2228 |     case TK_NULL:  emitOpcode(compiler, OP_PUSH_NULL);  break;[0m
      | [0;1;32m                   ^                                         
[0m      | [0;32m                   {                                         ;} 
[0m[1msrc/core/compiler.c:2229:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2229 |     case TK_TRUE:  emitOpcode(compiler, OP_PUSH_TRUE);  break;[0m
      | [0;1;32m                   ^                                         
[0m      | [0;32m                   {                                         ;} 
[0m[1msrc/core/compiler.c:2230:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2230 |     case TK_FALSE: emitOpcode(compiler, OP_PUSH_FALSE); break;[0m
      | [0;1;32m                   ^                                         
[0m      | [0;32m                   {                                         ;} 
[0m[1msrc/core/compiler.c:2232:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2232 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2232:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2232 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2232:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2232 |       UNREACHABLE();[0m
      | [0;1;32m      ^            
[0m      | [0;32m      {            ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2266:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2266 |   ASSERT(compiler->func->ptr != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2266:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2266 |   ASSERT(compiler->func->ptr != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2285:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2285 |   if (compiler->parser.has_syntax_error) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/compiler.c:2295:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2295 |   if (compiler->parser.has_syntax_error) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/compiler.c:2312:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2312 |   if (prefix != exprName) compiler->can_define = false;[0m
      | [0;1;32m                         ^                             
[0m      | [0;32m                          {
[0m[1msrc/core/compiler.c:2329:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2329 |     if (compiler->parser.has_syntax_error) return;[0m
      | [0;1;32m                                          ^       
[0m      | [0;32m                                           {
[0m[1msrc/core/compiler.c:2390:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2390 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2390:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2390 |   UNREACHABLE();[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2430:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2430 |   ASSERT(compiler->parser.has_errors || compiler->func->stack_size >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2430:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2430 |   ASSERT(compiler->parser.has_errors || compiler->func->stack_size >= 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2443:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2443 |   ASSERT(depth > (int)DEPTH_GLOBAL, "Cannot pop global variables.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2443:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2443 |   ASSERT(depth > (int)DEPTH_GLOBAL, "Cannot pop global variables.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2467:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2467 |   ASSERT(compiler->scope_depth > (int)DEPTH_GLOBAL, "Cannot exit toplevel.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2467:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2467 |   ASSERT(compiler->scope_depth > (int)DEPTH_GLOBAL, "Cannot exit toplevel.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2533:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2533 |     case TK_PLUSEQ:   EMIT_BINARY_OP_INPLACE(OP_ADD);        break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2534:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2534 |     case TK_MINUSEQ:  EMIT_BINARY_OP_INPLACE(OP_SUBTRACT);   break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2535:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2535 |     case TK_STAREQ:   EMIT_BINARY_OP_INPLACE(OP_MULTIPLY);   break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2536:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2536 |     case TK_DIVEQ:    EMIT_BINARY_OP_INPLACE(OP_DIVIDE);     break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2537:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2537 |     case TK_MODEQ:    EMIT_BINARY_OP_INPLACE(OP_MOD);        break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2538:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2538 |     case TK_POWEQ:    EMIT_BINARY_OP_INPLACE(OP_EXPONENT);   break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2539:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2539 |     case TK_ANDEQ:    EMIT_BINARY_OP_INPLACE(OP_BIT_AND);    break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2540:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2540 |     case TK_OREQ:     EMIT_BINARY_OP_INPLACE(OP_BIT_OR);     break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2541:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2541 |     case TK_XOREQ:    EMIT_BINARY_OP_INPLACE(OP_BIT_XOR);    break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2542:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2542 |     case TK_SRIGHTEQ: EMIT_BINARY_OP_INPLACE(OP_BIT_RSHIFT); break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2543:23: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2543 |     case TK_SLEFTEQ:  EMIT_BINARY_OP_INPLACE(OP_BIT_LSHIFT); break;[0m
      | [0;1;32m                      ^                                           
[0m      | [0;32m                      {                                           ;} 
[0m[1msrc/core/compiler.c:2530:3: [0m[0;1;36mnote: [0mexpanded from macro 'EMIT_BINARY_OP_INPLACE'[0m
 2530 |   do { emitOpcode(compiler, opcode); emitByte(compiler, 1); } while (false)[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2545:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2545 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2545:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2545 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m[1msrc/core/common.h:65:5: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   65 |     fprintf(stderr, "Execution reached an unreachable path\n"        \[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/core/compiler.c:2545:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2545 |       UNREACHABLE();[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 2546 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/core/common.h:64:3: [0m[0;1;36mnote: [0mexpanded from macro 'UNREACHABLE'[0m
   64 |   do {                                                               \[0m
      | [0;1;32m  ^
[0m[1msrc/core/compiler.c:2567:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2567 |   ASSERT(offset < MAX_JUMP, "Too large address offset to jump to.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2567:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2567 |   ASSERT(offset < MAX_JUMP, "Too large address offset to jump to.");[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2600:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2600 |   ASSERT(compiler->scope_depth == DEPTH_GLOBAL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2600:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2600 |   ASSERT(compiler->scope_depth == DEPTH_GLOBAL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2651:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2651 |     ASSERT(compiler->parser.has_errors ||[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2651:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2651 |     ASSERT(compiler->parser.has_errors ||[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2655:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2655 |     if (compiler->parser.has_syntax_error) break;[0m
      | [0;1;32m                                          ^      
[0m      | [0;32m                                           {
[0m[1msrc/core/compiler.c:2658:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2658 |     if (compiler->parser.has_syntax_error) break;[0m
      | [0;1;32m                                          ^      
[0m      | [0;32m                                           {
[0m[1msrc/core/compiler.c:2662:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2662 |     ASSERT(compiler->parser.has_errors ||[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2662:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2662 |     ASSERT(compiler->parser.has_errors ||[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2682:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2682 |   ASSERT((name != NULL) && (length != NULL) && (argc != NULL), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2682:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2682 |   ASSERT((name != NULL) && (length != NULL) && (argc != NULL), OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2691:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2691 |     if (match(compiler, TK_SELF)) _RET("+self", 0);[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m 2692 |     else _RET("+", 1);[0m
      | [0;32m    } 
[0m[1msrc/core/compiler.c:2692:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2692 |     else _RET("+", 1);[0m
      | [0;1;32m        ^             
[0m      | [0;32m         {
[0m[1msrc/core/compiler.c:2695:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2695 |     if (match(compiler, TK_SELF)) _RET("-self", 0);[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m 2696 |     else _RET("-", 1);[0m
      | [0;32m    } 
[0m[1msrc/core/compiler.c:2696:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2696 |     else _RET("-", 1);[0m
      | [0;1;32m        ^             
[0m      | [0;32m         {
[0m[1msrc/core/compiler.c:2699:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2699 |     if (match(compiler, TK_SELF)) _RET("~self", 0);[0m
      | [0;1;32m                                 ^                 
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:2705:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2705 |     if (match(compiler, TK_SELF)) _RET("!self", 0);[0m
      | [0;1;32m                                 ^                 
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:2712:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2712 |       if (match(compiler, TK_EQ)) _RET("[]=", 2);[0m
      | [0;1;32m                                 ^               
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:2720:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2720 |   if (match(compiler, TK_PLUSEQ))    _RET("+=",  1);[0m
      | [0;1;32m                                 ^                  
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:2721:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2721 |   if (match(compiler, TK_MINUSEQ))   _RET("-=",  1);[0m
      | [0;1;32m                                  ^                 
[0m      | [0;32m                                   {
[0m[1msrc/core/compiler.c:2722:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2722 |   if (match(compiler, TK_STAR))      _RET("*",   1);[0m
      | [0;1;32m                               ^                    
[0m      | [0;32m                                {
[0m[1msrc/core/compiler.c:2723:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2723 |   if (match(compiler, TK_STAREQ))    _RET("*=",  1);[0m
      | [0;1;32m                                 ^                  
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:2724:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2724 |   if (match(compiler, TK_FSLASH))    _RET("/",   1);[0m
      | [0;1;32m                                 ^                  
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:2725:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2725 |   if (match(compiler, TK_STARSTAR))  _RET("**",  1);[0m
      | [0;1;32m                                   ^                
[0m      | [0;32m                                    {
[0m[1msrc/core/compiler.c:2726:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2726 |   if (match(compiler, TK_DIVEQ))     _RET("/=",  1);[0m
      | [0;1;32m                                ^                   
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:2727:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2727 |   if (match(compiler, TK_PERCENT))   _RET("%",   1);[0m
      | [0;1;32m                                  ^                 
[0m      | [0;32m                                   {
[0m[1msrc/core/compiler.c:2728:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2728 |   if (match(compiler, TK_MODEQ))     _RET("%=",  1);[0m
      | [0;1;32m                                ^                   
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:2729:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2729 |   if (match(compiler, TK_POWEQ))     _RET("**=", 1);[0m
      | [0;1;32m                                ^                   
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:2730:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2730 |   if (match(compiler, TK_AMP))       _RET("&",   1);[0m
      | [0;1;32m                              ^                     
[0m      | [0;32m                               {
[0m[1msrc/core/compiler.c:2731:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2731 |   if (match(compiler, TK_ANDEQ))     _RET("&=",  1);[0m
      | [0;1;32m                                ^                   
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:2732:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2732 |   if (match(compiler, TK_PIPE))      _RET("|",   1);[0m
      | [0;1;32m                               ^                    
[0m      | [0;32m                                {
[0m[1msrc/core/compiler.c:2733:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2733 |   if (match(compiler, TK_OREQ))      _RET("|=",  1);[0m
      | [0;1;32m                               ^                    
[0m      | [0;32m                                {
[0m[1msrc/core/compiler.c:2734:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2734 |   if (match(compiler, TK_CARET))     _RET("^",   1);[0m
      | [0;1;32m                                ^                   
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:2735:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2735 |   if (match(compiler, TK_XOREQ))     _RET("^=",  1);[0m
      | [0;1;32m                                ^                   
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:2736:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2736 |   if (match(compiler, TK_SLEFT))     _RET("<<",  1);[0m
      | [0;1;32m                                ^                   
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:2737:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2737 |   if (match(compiler, TK_SLEFTEQ))   _RET("<<=", 1);[0m
      | [0;1;32m                                  ^                 
[0m      | [0;32m                                   {
[0m[1msrc/core/compiler.c:2738:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2738 |   if (match(compiler, TK_SRIGHT))    _RET(">>",  1);[0m
      | [0;1;32m                                 ^                  
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:2739:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2739 |   if (match(compiler, TK_SRIGHTEQ))  _RET(">>=", 1);[0m
      | [0;1;32m                                   ^                
[0m      | [0;32m                                    {
[0m[1msrc/core/compiler.c:2740:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2740 |   if (match(compiler, TK_EQEQ))      _RET("==",  1);[0m
      | [0;1;32m                               ^                    
[0m      | [0;32m                                {
[0m[1msrc/core/compiler.c:2741:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2741 |   if (match(compiler, TK_GT))        _RET(">",   1);[0m
      | [0;1;32m                             ^                      
[0m      | [0;32m                              {
[0m[1msrc/core/compiler.c:2742:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2742 |   if (match(compiler, TK_LT))        _RET("<",   1);[0m
      | [0;1;32m                             ^                      
[0m      | [0;32m                              {
[0m[1msrc/core/compiler.c:2743:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2743 |   if (match(compiler, TK_DOTDOT))    _RET("..",  1);[0m
      | [0;1;32m                                 ^                  
[0m      | [0;32m                                  {
[0m[1msrc/core/compiler.c:2744:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2744 |   if (match(compiler, TK_IN))        _RET("in",  1);[0m
      | [0;1;32m                             ^                      
[0m      | [0;32m                              {
[0m[1msrc/core/compiler.c:2783:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2783 |   if (compiler->parser.has_syntax_error) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/compiler.c:2800:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 2800 |     ASSERT(compiler->scope_depth == DEPTH_GLOBAL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2800:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 2800 |     ASSERT(compiler->scope_depth == DEPTH_GLOBAL, OOPS);[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:2973:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2973 |     if (compiler->parser.has_syntax_error) break;[0m
      | [0;1;32m                                          ^      
[0m      | [0;32m                                           {
[0m[1msrc/core/compiler.c:2976:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2976 |     if (tkmodule.type != TK_ERROR) pkByteBufferWrite(&buff, vm, (uint8_t) '/');[0m
      | [0;1;32m                                  ^                                            
[0m      | [0;32m                                   {
[0m[1msrc/core/compiler.c:3004:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3004 |   ASSERT(compiler->scope_depth == DEPTH_GLOBAL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3004:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3004 |   ASSERT(compiler->scope_depth == DEPTH_GLOBAL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3008:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3008 |     if (tkmodule.type == TK_ERROR) return; //< Syntax error. Terminate.[0m
      | [0;1;32m                                  ^                                    
[0m      | [0;32m                                   {
[0m[1msrc/core/compiler.c:3012:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3012 |       if (compiler->parser.has_syntax_error) return;[0m
      | [0;1;32m                                            ^       
[0m      | [0;32m                                             {
[0m[1msrc/core/compiler.c:3037:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3037 |   ASSERT(compiler->scope_depth == DEPTH_GLOBAL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3037:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3037 |   ASSERT(compiler->scope_depth == DEPTH_GLOBAL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3040:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3040 |   if (tkmodule.type == TK_ERROR) return; //< Syntax error. Terminate.[0m
      | [0;1;32m                                ^                                    
[0m      | [0;32m                                 {
[0m[1msrc/core/compiler.c:3045:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3045 |   if (compiler->parser.has_syntax_error) return;[0m
      | [0;1;32m                                        ^       
[0m      | [0;32m                                         {
[0m[1msrc/core/compiler.c:3050:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3050 |     if (compiler->parser.has_syntax_error) return;[0m
      | [0;1;32m                                          ^       
[0m      | [0;32m                                           {
[0m[1msrc/core/compiler.c:3249:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3249 |     ASSERT(compiler->loop->patch_count < MAX_BREAK_PATCH,[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3249:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3249 |     ASSERT(compiler->loop->patch_count < MAX_BREAK_PATCH,[0m
      | [0;1;32m    ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3309:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3309 |           ASSERT(_FN->opcodes.count >= 2, OOPS); // OP_CALL, argc[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3309:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3309 |           ASSERT(_FN->opcodes.count >= 2, OOPS); // OP_CALL, argc[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3310:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3310 |           ASSERT(_FN->opcodes.data[_FN->opcodes.count - 2] == OP_CALL, OOPS);[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3310:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3310 |           ASSERT(_FN->opcodes.data[_FN->opcodes.count - 2] == OP_CALL, OOPS);[0m
      | [0;1;32m          ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3333:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3333 |     if (!compiler->new_local) is_temporary = true;[0m
      | [0;1;32m                             ^                    
[0m      | [0;32m                              {
[0m[1msrc/core/compiler.c:3345:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3345 |   if (is_temporary) emitOpcode(compiler, OP_POP);[0m
      | [0;1;32m                   ^                             
[0m      | [0;32m                    {
[0m[1msrc/core/compiler.c:3355:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3355 |   ASSERT(compiler->parser.has_errors || compiler->func->stack_size == 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3355:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3355 |   ASSERT(compiler->parser.has_errors || compiler->func->stack_size == 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3375:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3375 |   ASSERT(compiler->parser.has_errors || compiler->func->stack_size == 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3375:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3375 |   ASSERT(compiler->parser.has_errors || compiler->func->stack_size == 0, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3389:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3389 |   ASSERT(module != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3389:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3389 |   ASSERT(module != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3392:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3392 |   if (strncmp(source, "\xEF\xBB\xBF", 3) == 0) source += 3;[0m
      | [0;1;32m                                              ^            
[0m      | [0;32m                                               {
[0m[1msrc/core/compiler.c:3407:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3407 |   if (module->body == NULL) moduleAddMain(vm, module);[0m
      | [0;1;32m                           ^                          
[0m      | [0;32m                            {
[0m[1msrc/core/compiler.c:3408:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3408 |   ASSERT(module->body != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m[1msrc/core/compiler.c:3408:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 3408 |   ASSERT(module->body != NULL, OOPS);[0m
      | [0;1;32m  ^
[0m[1msrc/core/common.h:58:36: [0m[0;1;36mnote: [0mexpanded from macro 'ASSERT'[0m
   58 | #define ASSERT(condition, message) __ASSERT(condition, message)[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/core/common.h:35:7: [0m[0;1;36mnote: [0mexpanded from macro '__ASSERT'[0m
   35 |       fprintf(stderr, "Assertion failed: %s\n\tat %s() (%s:%i)\n"    \[0m
      | [0;1;32m      ^~~~~~~
[0m220 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.



Process exited with return code 0
