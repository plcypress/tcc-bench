Command: /itch/common/crepos/tcc-scripts/tidy-braces.sh
Directory: /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43
----------------------------------------

Enabled checks:
    clang-analyzer-apiModeling.Errno
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.TrustReturnsNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.BitwiseShift
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DereferenceModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.NewArraySize
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.ArrayDelete
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PlacementNew
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtrModeling
    clang-analyzer-cplusplus.StringChecker
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.core.EnumCastOutOfRange
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-optin.taint.GenericTaint
    clang-analyzer-optin.taint.TaintPropagation
    clang-analyzer-optin.taint.TaintedAlloc
    clang-analyzer-optin.taint.TaintedDiv
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.ArrayBound
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.MmapWriteExec
    clang-analyzer-security.PointerSub
    clang-analyzer-security.PutenvStackArray
    clang-analyzer-security.SetgidSetuidOrder
    clang-analyzer-security.cert.env.InvalidPtr
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.BlockInCriticalSection
    clang-analyzer-unix.Chroot
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Errno
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.StdCLibraryFunctions
    clang-analyzer-unix.Stream
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NotNullTerminated
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    clang-analyzer-webkit.NoUncountedMemberChecker
    clang-analyzer-webkit.RefCntblBaseVirtualDtor
    clang-analyzer-webkit.UncountedLambdaCapturesChecker
    readability-braces-around-statements

Running clang-tidy for 72 files out of 72 in compilation database ...
[ 1/72][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp3f1xogl3.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/fat_free.c
[1mfat_free.c:35:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   35 |         if (fat == 0)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m   36 |                 return(0);[0m
      | [0;1;32m                          
[0m[1mfat_free.c:43:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   43 |                 if (next_no_step >= This->last_fat)[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m   44 |                         break;[0m
      | [0;1;32m                              
[0m[1mfat_free.c:57:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   57 |                 fprintf(stderr,"Trying to remove . or .. entry\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat_free.c:57:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   57 |                 fprintf(stderr,"Trying to remove . or .. entry\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat_free.c:62:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   62 |         if(fat32RootCluster(Dir))[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m   63 |                 first |= (uint32_t) STARTHI(dir) << 16;[0m
      | [0;1;32m                                                       
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 2/72][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpk698ix5y.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/missFuncs.c
[1mmissFuncs.c:502:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  502 |         if(ptr)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  503 |                 filename = ptr + 1;[0m
      | [0;1;32m                                   
[0m[1mmissFuncs.c:520:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  520 |         if(ptr && !strcasecmp(ptr, ".exe"))[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  521 |                 *ptr = '\0';[0m
      | [0;1;32m                            
[0m4 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 3/72][0.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpihwin_6s.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/force_io.c
[1mforce_io.c:39:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   39 |                         if (done)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m   40 |                                 return done;[0m
   41 |                         else[0m
      | [0;32m                        } 
[0m[1mforce_io.c:41:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   41 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   42 |                                 return ret;[0m
      | [0;1;32m                                           
[0m4 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 4/72][0.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpk1ta_qn2.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/directory.c
[1mdirectory.c:59:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   59 |         if (!getfreeMinClusters(Dir, 1))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m   60 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mdirectory.c:69:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   69 |         memset((char *) buffer, '\0', buflen);[0m
      | [0;1;32m        ^~~~~~
[0m[1mdirectory.c:69:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   69 |         memset((char *) buffer, '\0', buflen);[0m
      | [0;1;32m        ^~~~~~
[0m[1mdirectory.c:72:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   72 |         if(ret < (int) buflen)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   73 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mdirectory.c:140:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  140 |         strncpy(dn.base, base, 8);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdirectory.c:140:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  140 |         strncpy(dn.base, base, 8);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdirectory.c:141:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  141 |         strncpy(dn.ext, "   ", 3);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdirectory.c:141:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  141 |         strncpy(dn.ext, "   ", 3);[0m
      | [0;1;32m        ^~~~~~~
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 5/72][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpeyc0ip4_.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/lba.c
[1mlba.c:30:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   30 |         if(dev->heads && dev->sectors && dev->tracks)[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m   31 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mlba.c:52:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   52 |                         if(dev->heads == 1)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m   53 |                                 dev->tracks = 80;[0m
   54 |                         else {[0m
      | [0;32m                        } 
[0m[1mlba.c:73:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |                 if (dev->tot_sectors < 16u*dev->sectors*1024)[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m   74 |                         dev->heads = 16;[0m
   75 |                 else if (dev->tot_sectors < 32u*dev->sectors*1024)[0m
      | [0;32m                } 
[0m[1mlba.c:75:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   75 |                 else if (dev->tot_sectors < 32u*dev->sectors*1024)[0m
      | [0;1;32m                                                                  ^
[0m      | [0;32m                                                                   {
[0m   76 |                         dev->heads = 32;[0m
   77 |                 else if (dev->tot_sectors < 64u*dev->sectors*1024)[0m
      | [0;32m                } 
[0m[1mlba.c:77:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   77 |                 else if (dev->tot_sectors < 64u*dev->sectors*1024)[0m
      | [0;1;32m                                                                  ^
[0m      | [0;32m                                                                   {
[0m   78 |                         dev->heads = 64;[0m
   79 |                 else if (dev->tot_sectors < 128u*dev->sectors*1024)[0m
      | [0;32m                } 
[0m[1mlba.c:79:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   79 |                 else if (dev->tot_sectors < 128u*dev->sectors*1024)[0m
      | [0;1;32m                                                                   ^
[0m      | [0;32m                                                                    {
[0m   80 |                         dev->heads = 128;[0m
   81 |                 else[0m
      | [0;32m                } 
[0m[1mlba.c:81:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   81 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   82 |                         dev->heads = 255;[0m
      | [0;1;32m                                         
[0m9 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 6/72][1.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp_xf3trre.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mcd.c
[1mmcd.c:31:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   31 |                 fprintf(stderr,"mcd: Can't open mcwd .file for writing\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcd.c:31:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   31 |                 fprintf(stderr,"mcd: Can't open mcwd .file for writing\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcd.c:36:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   36 |         fprintf(fp, "\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcd.c:36:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   36 |         fprintf(fp, "\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcd.c:44:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   44 |                 fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcd.c:44:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   44 |                 fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcd.c:46:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   46 |                 fprintf(stderr, "Usage: %s: [-V] [-i image] msdosdirectory\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcd.c:46:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   46 |                 fprintf(stderr, "Usage: %s: [-V] [-i image] msdosdirectory\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcd.c:61:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   61 |                         set_cmd_line_image(optarg);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m   62 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmcd.c:64:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   64 |                         usage(0);[0m
      | [0;1;32m                        ^       
[0m      | [0;32m                        {       ;} 
[0m[1mmcd.c:66:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   66 |                         usage(1);[0m
      | [0;1;32m                        ^       
[0m      | [0;32m                        {       ;} 
[0m[1mmcd.c:70:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   70 |         if (argc > optind + 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   71 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmcd.c:79:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   79 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   80 |                 exit(main_loop(&mp, argv + optind, 1));[0m
      | [0;1;32m                                                       
[0m11 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 7/72][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpvstcmxhi.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/device.c
[1mdevice.c:27:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   27 |         if(!maxBytes)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m   28 |                 return 0; /* Maxbytes = 0 => no checking */[0m
      | [0;1;32m                                                           
[0m[1mdevice.c:30:3: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   30 |                 sprintf(errmsg,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevice.c:30:3: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   30 |                 sprintf(errmsg,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevice.c:46:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   46 |         if(dev->tot_sectors)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   47 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mdevice.c:49:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   49 |         if(!dev->heads || !dev->sectors || !dev->tracks)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m   50 |                 return 0; /* not fully specified => we cannot do[0m
[1mdevice.c:61:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |                 if(errmsg)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   62 |                         sprintf(errmsg,[0m
   63 |                                 "Number of sectors larger than 2^32\n");[0m
      | [0;1;32m                                                                        
[0m[1mdevice.c:62:4: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   62 |                         sprintf(errmsg,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevice.c:62:4: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   62 |                         sprintf(errmsg,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevice.c:68:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |         if(tot_sectors > dev->hidden % sect_per_track)[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m   69 |                 tot_sectors -= dev->hidden % sect_per_track;[0m
      | [0;1;32m                                                            
[0m9 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 8/72][1.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpr7vkeh6n.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/precmd.c
[1mprecmd.c:25:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   25 |         if(!dev)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   26 |                 return;[0m
      | [0;1;32m                       
[0m[1mprecmd.c:36:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   36 |         if(!cmd)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   37 |                 return;[0m
      | [0;1;32m                       
[0m[1mprecmd.c:39:10: [0m[0;1;35mwarning: [0m[1mAlthough the value stored to 'pid' is used in the enclosing expression, the value is never actually read from 'pid' [clang-analyzer-deadcode.DeadStores][0m
   39 |         switch((pid=fork())){[0m
      | [0;1;32m                ^   ~~~~~~
[0m[1mprecmd.c:39:10: [0m[0;1;36mnote: [0mAlthough the value stored to 'pid' is used in the enclosing expression, the value is never actually read from 'pid'[0m
   39 |         switch((pid=fork())){[0m
      | [0;1;32m                ^   ~~~~~~
[0m[1mprecmd.c:41:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   41 |                         perror("Could not fork");[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m   42 |                         exit(1);[0m
      | [0;1;32m                               
[0m      | [0;32m                               ;} 
[0m[1mprecmd.c:44:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   44 |                         execl("/bin/sh", "sh", "-c", cmd, (char *)NULL);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m   45 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mprecmd.c:47:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   47 |                         wait(&status);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m   48 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m8 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 9/72][1.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp5h5jtj4v.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/streamcache.c
[1mstreamcache.c:34:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   34 |                 if(fss[i] && fss[i]->refs != 1 )[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m   35 |                         fprintf(stderr,"Streamcache allocation problem:%c %d\n",[0m
   36 |                                 i, fss[i]->refs);[0m
      | [0;1;32m                                                 
[0m[1mstreamcache.c:35:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   35 |                         fprintf(stderr,"Streamcache allocation problem:%c %d\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mstreamcache.c:35:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   35 |                         fprintf(stderr,"Streamcache allocation problem:%c %d\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mstreamcache.c:45:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   45 |         if(is_initialized)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   46 |                 return;[0m
      | [0;1;32m                       
[0m[1mstreamcache.c:48:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   48 |         for(i=0; i<256; i++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   49 |                 fss[i]=0;[0m
      | [0;1;32m                         
[0m[1mstreamcache.c:62:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   62 |         if(fss[(unsigned char)drive])[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   63 |                 Fs = fss[(unsigned char)drive];[0m
   64 |         else {[0m
      | [0;32m        } 
[0m[1mstreamcache.c:67:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |                         fprintf(stderr, "Cannot initialize '%c:'\n", drive);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mstreamcache.c:67:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   67 |                         fprintf(stderr, "Cannot initialize '%c:'\n", drive);[0m
      | [0;1;32m                        ^~~~~~~
[0m8 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[10/72][2.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmphesb5np6.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/offset.c
[1moffset.c:67:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |         memset((void*)This, 0, sizeof(Offset_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1moffset.c:67:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   67 |         memset((void*)This, 0, sizeof(Offset_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1moffset.c:74:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   74 |                         if(errmsg)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m   75 |                                 sprintf(errmsg,"init: Big disks not supported");[0m
      | [0;1;32m                                                                                
[0m[1moffset.c:75:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   75 |                                 sprintf(errmsg,"init: Big disks not supported");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1moffset.c:75:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   75 |                                 sprintf(errmsg,"init: Big disks not supported");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1moffset.c:82:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |         if(adjust_tot_sectors(dev, This->offset, errmsg) < 0)[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m   83 |                 goto exit_0;[0m
      | [0;1;32m                            
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[11/72][2.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpkmommd23.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mmount.c
[1mmmount.c:47:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   47 |                 fprintf(stderr,"Usage: %s -V drive:\n", argv[0]);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmount.c:47:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   47 |                 fprintf(stderr,"Usage: %s -V drive:\n", argv[0]);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmount.c:52:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   52 |         if(!Stream)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m   53 |                 exit(1);[0m
      | [0;1;32m                        
[0m[1mmmount.c:60:3: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   60 |                 sprintf(part_name, "%d", dev.partition %1000);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmount.c:60:3: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   60 |                 sprintf(part_name, "%d", dev.partition %1000);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmount.c:61:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   61 |                 strcat(name, part_name);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmmount.c:61:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
   61 |                 strcat(name, part_name);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmmount.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |                 fprintf(stderr,"fork failed\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmount.c:67:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   67 |                 fprintf(stderr,"fork failed\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmount.c:67:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   67 |                 fprintf(stderr,"fork failed\n");[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m   68 |                 exit(1);[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1mmmount.c:70:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   70 |                 close(2);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m   71 |                 open("/dev/null", O_RDWR | O_BINARY | O_LARGEFILE);[0m
   72 |                 argv[1] = strdup("mount");[0m
   73 |                 if ( argc > 2 )[0m
   74 |                         execvp("mount", argv + 1 );[0m
   75 |                 else[0m
   76 |                         execlp("mount", "mount", name, NULL);[0m
   77 |                 perror("exec mount");[0m
   78 |                 exit(1);[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1mmmount.c:73:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |                 if ( argc > 2 )[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m   74 |                         execvp("mount", argv + 1 );[0m
   75 |                 else[0m
      | [0;32m                } 
[0m[1mmmount.c:75:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   75 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   76 |                         execlp("mount", "mount", name, NULL);[0m
      | [0;1;32m                                                             
[0m[1mmmount.c:80:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   80 |                 while ( wait(&status) != pid );[0m
      | [0;1;32m                ^                              
[0m      | [0;32m                {                              ;} 
[0m[1mmmount.c:80:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   80 |                 while ( wait(&status) != pid );[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m[1mmmount.c:82:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |         if ( WEXITSTATUS(status) == 0 )[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   83 |                 exit(0);[0m
      | [0;1;32m                        
[0m[1mmmount.c:90:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |         if ( argc > 2 )[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   91 |                 execvp("mount", argv);[0m
   92 |         else[0m
      | [0;32m        } 
[0m[1mmmount.c:92:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   92 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   93 |                 execlp("mount", "mount","-r", name, NULL);[0m
      | [0;1;32m                                                          
[0m16 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[12/72][2.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpca63ssuq.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/privileges.c
[1mprivileges.c:98:3: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'seteuid' is not checked.  If an error occurs in 'seteuid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
   98 |                 seteuid(uid);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mprivileges.c:98:3: [0m[0;1;36mnote: [0mThe return value from the call to 'seteuid' is not checked.  If an error occurs in 'seteuid', the following code may execute with unexpected privileges[0m
   98 |                 seteuid(uid);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mprivileges.c:102:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  102 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  103 | #endif[0m
  104 |                 setuid(uid);[0m
      | [0;1;32m                            
[0m[1mprivileges.c:112:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |         if(noPrivileges)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  113 |                 return;[0m
      | [0;1;32m                       
[0m[1mprivileges.c:114:2: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'setgid' is not checked.  If an error occurs in 'setgid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
  114 |         setgid(egid);[0m
      | [0;1;32m        ^~~~~~
[0m[1mprivileges.c:114:2: [0m[0;1;36mnote: [0mThe return value from the call to 'setgid' is not checked.  If an error occurs in 'setgid', the following code may execute with unexpected privileges[0m
  114 |         setgid(egid);[0m
      | [0;1;32m        ^~~~~~
[0m[1mprivileges.c:122:2: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'setgid' is not checked.  If an error occurs in 'setgid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
  122 |         setgid(rgid);[0m
      | [0;1;32m        ^~~~~~
[0m[1mprivileges.c:122:2: [0m[0;1;36mnote: [0mThe return value from the call to 'setgid' is not checked.  If an error occurs in 'setgid', the following code may execute with unexpected privileges[0m
  122 |         setgid(rgid);[0m
      | [0;1;32m        ^~~~~~
[0m[1mprivileges.c:132:3: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'setuid' is not checked.  If an error occurs in 'setuid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
  132 |                 setuid(0); /* get the necessary privs to drop real root id */[0m
      | [0;1;32m                ^~~~~~
[0m[1mprivileges.c:132:3: [0m[0;1;36mnote: [0mThe return value from the call to 'setuid' is not checked.  If an error occurs in 'setuid', the following code may execute with unexpected privileges[0m
  132 |                 setuid(0); /* get the necessary privs to drop real root id */[0m
      | [0;1;32m                ^~~~~~
[0m[1mprivileges.c:133:3: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'setuid' is not checked.  If an error occurs in 'setuid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
  133 |                 setuid(ruid); /* this should be enough to get rid of the three[0m
      | [0;1;32m                ^~~~~~
[0m[1mprivileges.c:133:3: [0m[0;1;36mnote: [0mThe return value from the call to 'setuid' is not checked.  If an error occurs in 'setuid', the following code may execute with unexpected privileges[0m
  133 |                 setuid(ruid); /* this should be enough to get rid of the three[0m
      | [0;1;32m                ^~~~~~
[0m[1mprivileges.c:135:3: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'seteuid' is not checked.  If an error occurs in 'seteuid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
  135 |                 seteuid(ruid); /* for good measure... just in case we came[0m
      | [0;1;32m                ^~~~~~~
[0m[1mprivileges.c:135:3: [0m[0;1;36mnote: [0mThe return value from the call to 'seteuid' is not checked.  If an error occurs in 'seteuid', the following code may execute with unexpected privileges[0m
  135 |                 seteuid(ruid); /* for good measure... just in case we came[0m
      | [0;1;32m                ^~~~~~~
[0m[1mprivileges.c:183:3: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'setuid' is not checked.  If an error occurs in 'setuid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
  183 |                 setuid(0); /* set real uid to 0 */[0m
      | [0;1;32m                ^~~~~~
[0m[1mprivileges.c:183:3: [0m[0;1;36mnote: [0mThe return value from the call to 'setuid' is not checked.  If an error occurs in 'setuid', the following code may execute with unexpected privileges[0m
  183 |                 setuid(0); /* set real uid to 0 */[0m
      | [0;1;32m                ^~~~~~
[0m11 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[13/72][2.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpxiree17v.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/patchlevel.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[14/72][3.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpje8r3ybo.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/unix2dos.c
[1munix2dos.c:41:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   41 |         if(This->eof)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m   42 |                 return 0;[0m
      | [0;1;32m                         
[0m[1munix2dos.c:59:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   59 |                                         if(i == 0)[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m   60 |                                                 return -1;[0m
   61 |                                         else[0m
      | [0;32m                                        } 
[0m[1munix2dos.c:61:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |                                         else[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m   62 |                                                 break;[0m
      | [0;1;32m                                                      
[0m[1munix2dos.c:106:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  106 |         if (!This)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  107 |                 return NULL;[0m
      | [0;1;32m                            
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[15/72][3.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpzuuznloc.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/swap.c
[1mswap.c:45:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   45 |         if(result < 0)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   46 |                 return result;[0m
      | [0;1;32m                              
[0m[1mswap.c:58:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   58 |         memcpy( swapping, buf, len );[0m
      | [0;1;32m        ^~~~~~
[0m[1mswap.c:58:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   58 |         memcpy( swapping, buf, len );[0m
      | [0;1;32m        ^~~~~~
[0m[1mswap.c:90:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   90 |         memset((void*)This, 0, sizeof(Swap_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mswap.c:90:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   90 |         memset((void*)This, 0, sizeof(Swap_t));[0m
      | [0;1;32m        ^~~~~~
[0m5 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[16/72][3.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpwryc3pid.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mdu.c
[1mmdu.c:42:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   42 |                 fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdu.c:42:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   42 |                 fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdu.c:44:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   44 |                 fprintf(stderr, "Usage: %s: msdosdirectory\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdu.c:44:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   44 |                 fprintf(stderr, "Usage: %s: msdosdirectory\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdu.c:102:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  102 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  103 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmdu.c:107:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  107 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  108 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdu.c:110:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  110 |                                 arg.all = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  111 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdu.c:113:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  113 |                                 arg.summary = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  114 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdu.c:116:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  116 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmdu.c:118:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  118 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmdu.c:122:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  122 |         if (optind >= argc)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  123 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmdu.c:126:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  126 |                 fprintf(stderr,"-a and -s options are mutually exclusive\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdu.c:126:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  126 |                 fprintf(stderr,"-a and -s options are mutually exclusive\n");[0m
      | [0;1;32m                ^~~~~~~
[0m12 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[17/72][3.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpzv36o5f2.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mshowfat.c
[1mmshowfat.c:53:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   53 |         fprintf(stderr,"File does not reside on a Dos fs\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshowfat.c:53:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   53 |         fprintf(stderr,"File does not reside on a Dos fs\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshowfat.c:61:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   61 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshowfat.c:61:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   61 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshowfat.c:63:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   63 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshowfat.c:63:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   63 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshowfat.c:75:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   75 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   76 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmshowfat.c:81:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   81 |                                 arg.offset = str_to_offset(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m   82 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmshowfat.c:84:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   84 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m   85 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmshowfat.c:87:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   87 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmshowfat.c:89:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   89 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmshowfat.c:93:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   93 |         if (argc - optind < 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   94 |                 usage(1);[0m
      | [0;1;32m                         
[0m11 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[18/72][3.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpq2yh0bis.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/dos2unix.c
[1mdos2unix.c:38:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   38 |         if ( ret < 0 )[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   39 |                 return ret;[0m
      | [0;1;32m                           
[0m[1mdos2unix.c:43:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   43 |                 if ( buf[i] == '\r' )[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   44 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mdos2unix.c:45:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   45 |                 if (buf[i] == 0x1a)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m   46 |                         break;[0m
      | [0;1;32m                              
[0m[1mdos2unix.c:76:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |         if (!This)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m   77 |                 return NULL;[0m
      | [0;1;32m                            
[0m6 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[19/72][4.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpl5tpcrmg.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/strtonum.c
[1mstrtonum.c:89:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   89 |                 fprintf(stderr, "Too many sectors\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mstrtonum.c:89:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   89 |                 fprintf(stderr, "Too many sectors\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mstrtonum.c:98:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   98 |                 fprintf(stderr, "Bad size %s\n", sizeStr);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mstrtonum.c:98:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   98 |                 fprintf(stderr, "Bad size %s\n", sizeStr);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mstrtonum.c:103:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  103 |                 checkOverflow(tot_sectors, 10);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  104 |                 tot_sectors *= 1024;[0m
      | [0;1;32m                                   
[0m      | [0;32m                                   ;} 
[0m[1mstrtonum.c:107:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  107 |                 checkOverflow(tot_sectors, 10);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  108 |                 tot_sectors *= 1024;[0m
      | [0;1;32m                                   
[0m      | [0;32m                                   ;} 
[0m[1mstrtonum.c:111:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  111 |                 checkOverflow(tot_sectors, 10);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  112 |                 tot_sectors *= 1024;[0m
      | [0;1;32m                                   
[0m      | [0;32m                                   ;} 
[0m[1mstrtonum.c:115:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  115 |                 checkOverflow(tot_sectors, 1);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  116 |                 tot_sectors *= 2;[0m
  117 |                 eptr++;[0m
  118 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mstrtonum.c:121:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  121 |                 break;[0m
      | [0;1;32m                ^    
[0m      | [0;32m                {    ;} 
[0m[1mstrtonum.c:124:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  124 |                 fprintf(stderr, "Bad suffix %s\n", eptr);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mstrtonum.c:124:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  124 |                 fprintf(stderr, "Bad suffix %s\n", eptr);[0m
      | [0;1;32m                ^~~~~~~
[0m10 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[20/72][3.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp1y8bzrqo.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/expand.c
[1mexpand.c:37:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   37 |                         return -2;[0m
      | [0;1;32m                        ^        
[0m      | [0;32m                        {        ;} 
[0m[1mexpand.c:39:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   39 |                         close(pipefd[0]);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m   40 |                         destroy_privs();[0m
   41 |                         close(1);[0m
   42 |                         close(2); /* avoid nasty error messages on stderr */[0m
   43 |                         if(dup(pipefd[1]) < 0) {[0m
   44 |                                 perror("Dup error");[0m
   45 |                                 exit(1);[0m
   46 |                         }[0m
   47 |                         close(pipefd[1]);[0m
   48 |                         execvp(command[0], (char *const*)(command+1));[0m
   49 |                         exit(1);[0m
      | [0;1;32m                               
[0m      | [0;32m                               ;} 
[0m[1mexpand.c:51:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   51 |                         close(pipefd[1]);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m   52 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mexpand.c:74:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   74 |         if (input == NULL)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   75 |                 return(NULL);[0m
      | [0;1;32m                             
[0m[1mexpand.c:76:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |         if (*input == '\0')[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   77 |                 return("");[0m
      | [0;1;32m                           
[0m[1mexpand.c:80:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   80 |                 strncpy(ans, input, EXPAND_BUF-1);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mexpand.c:80:3: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
   80 |                 strncpy(ans, input, EXPAND_BUF-1);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mexpand.c:85:2: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   85 |         snprintf(buf, 255, "echo %s", input);[0m
      | [0;1;32m        ^~~~~~~~
[0m[1mexpand.c:85:2: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
   85 |         snprintf(buf, 255, "echo %s", input);[0m
      | [0;1;32m        ^~~~~~~~
[0m[1mexpand.c:96:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |         if(last)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   97 |                 ans[last-1] = '\0';[0m
   98 |         else[0m
      | [0;32m        } 
[0m[1mexpand.c:98:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   98 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   99 |                 strncpy(ans, input, EXPAND_BUF-1);[0m
      | [0;1;32m                                                  
[0m[1mexpand.c:99:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   99 |                 strncpy(ans, input, EXPAND_BUF-1);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mexpand.c:99:3: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
   99 |                 strncpy(ans, input, EXPAND_BUF-1);[0m
      | [0;1;32m                ^~~~~~~
[0m12 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[21/72][4.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp6s6pw6gh.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/lockdev.c
[1mlockdev.c:73:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |         if(IS_NOLOCK(dev))[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   74 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mlockdev.c:81:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   81 |                 memset(&alrm_action, 0, sizeof(alrm_action));[0m
      | [0;1;32m                ^~~~~~
[0m[1mlockdev.c:81:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   81 |                 memset(&alrm_action, 0, sizeof(alrm_action));[0m
      | [0;1;32m                ^~~~~~
[0m[1mlockdev.c:160:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |                 } else /* no error => we got the lock! */[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  161 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mlockdev.c:164:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  164 |                 if(retries++ < mtools_lock_timeout * 10)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  165 |                         usleep(100000);[0m
  166 | #else[0m
  167 |                 if(retries++ < mtools_lock_timeout)[0m
  168 |                         sleep(1);[0m
  169 | #endif[0m
  170 |                 else[0m
      | [0;32m                } 
[0m[1mlockdev.c:170:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  170 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  171 |                         /* waited for too long => give up */[0m
  172 |                         return 1;[0m
      | [0;1;32m                                 
[0m7 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[22/72][3.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpdoi9z3yt.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/copyfile.c
[1mcopyfile.c:34:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   34 |                 fprintf(stderr,"Couldn't open source file\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcopyfile.c:34:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   34 |                 fprintf(stderr,"Couldn't open source file\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcopyfile.c:39:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   39 |                 fprintf(stderr,"Couldn't open target file\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcopyfile.c:39:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   39 |                 fprintf(stderr,"Couldn't open target file\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcopyfile.c:50:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   50 |                 if(!ret)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m   51 |                         break;[0m
      | [0;1;32m                              
[0m[1mcopyfile.c:52:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   52 |                 if(got_signal)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   53 |                         return -1;[0m
      | [0;1;32m                                  
[0m[1mcopyfile.c:54:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   54 |                 if (ret == 0)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   55 |                         break;[0m
      | [0;1;32m                              
[0m[1mcopyfile.c:57:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   57 |                         if(retw < 0 )[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   58 |                                 perror("write in copy");[0m
   59 |                         else[0m
      | [0;32m                        } 
[0m[1mcopyfile.c:59:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   59 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   60 |                                 fprintf(stderr,[0m
   61 |                                         "Short write "SSZF" instead of "SSZF"\n",[0m
   62 |                                         retw, ret);[0m
      | [0;1;32m                                                   
[0m[1mcopyfile.c:60:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   60 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mcopyfile.c:60:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   60 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mcopyfile.c:63:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   63 |                         if(errno == ENOSPC)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m   64 |                                 got_signal = 1;[0m
      | [0;1;32m                                               
[0m11 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[23/72][5.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpdyvuf_lk.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mmd.c
[1mmmd.c:68:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |         if (!getfreeMinClusters(targetEntry->Dir, 1))[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m   69 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mmmd.c:74:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   74 |                 fprintf(stderr,"Could not open Target\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmd.c:74:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   74 |                 fprintf(stderr,"Could not open Target\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmd.c:106:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  106 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmd.c:106:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  106 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmd.c:108:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  108 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmd.c:108:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  108 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmd.c:110:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  110 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmd.c:110:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  110 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmd.c:126:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  126 |         if (!getfreeMinClusters(Dir, 1))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  127 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mmmd.c:130:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |         if(ret < 1)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  131 |                 return NULL;[0m
  132 |         else[0m
      | [0;32m        } 
[0m[1mmmd.c:132:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  132 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  133 |                 return arg.NewDir;[0m
      | [0;1;32m                                  
[0m[1mmmd.c:143:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  143 |         if(ret == NULL)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  144 |                 return ERROR_ONE;[0m
  145 |         else {[0m
      | [0;32m        } 
[0m[1mmmd.c:163:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  163 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  164 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmmd.c:168:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  168 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  169 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmmd.c:171:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  171 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmmd.c:173:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  173 |                                 handle_clash_options(&arg.ch, c);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  174 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmmd.c:176:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  176 |                                 if(handle_clash_options(&arg.ch, *optarg))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  177 |                                         usage(1);[0m
  178 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmmd.c:176:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  176 |                                 if(handle_clash_options(&arg.ch, *optarg))[0m
      | [0;1;32m                                                                          ^
[0m      | [0;32m                                                                           {
[0m  177 |                                         usage(1);[0m
      | [0;1;32m                                                 
[0m[1mmmd.c:180:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  180 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmmd.c:182:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  182 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmmd.c:186:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  186 |         if (argc - optind < 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  187 |                 usage(1);[0m
      | [0;1;32m                         
[0m20 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[24/72][8.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpq9jj5ecj.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mmove.c
[1mmmove.c:80:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   80 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmmove.c:80:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   80 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmmove.c:80:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   80 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m   81 |                                         " Directory has no parent entry\n");[0m
   82 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmmove.c:84:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   84 |                                 return ERROR_ONE;[0m
      | [0;1;32m                                ^               
[0m      | [0;32m                                {               ;} 
[0m[1mmmove.c:86:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   86 |                                 GET_DATA(targetEntry->Dir, 0, 0, 0, &fat);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m   87 |                                 if (fat == fat32RootCluster(targetEntry->Dir)) {[0m
   88 |                                     fat = 0;[0m
   89 |                                 }[0m
   90 | [0m
   91 |                                 subEntry.dir.start[1] = (fat >> 8) & 0xff;[0m
   92 |                                 subEntry.dir.start[0] = fat & 0xff;[0m
   93 |                                 dir_write(&subEntry);[0m
   94 |                                 if(arg->verbose){[0m
   95 |                                         fprintf(stderr,[0m
   96 |                                                 "Easy, isn't it? I wonder why DOS can't do this.\n");[0m
   97 |                                 }[0m
   98 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1m./stream.h:66:53: [0m[0;1;36mnote: [0mexpanded from macro 'GET_DATA'[0m
   66 | #define GET_DATA(stream, date, size, type, address) \[0m
      | [0;1;32m                                                    ^
[0m[1mmmove.c:95:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   95 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmmove.c:95:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   95 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmmove.c:145:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  145 |         if(result == 1)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  146 |                 return GOT_ONE;[0m
  147 |         else[0m
      | [0;32m        } 
[0m[1mmmove.c:147:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  147 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  148 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmmove.c:158:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  158 |                 fprintf(stderr, "Cannot move directory ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmove.c:158:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  158 |                 fprintf(stderr, "Cannot move directory ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmove.c:160:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  160 |                 fprintf(stderr, " into one of its own subdirectories (");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmove.c:160:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  160 |                 fprintf(stderr, " into one of its own subdirectories (");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmove.c:162:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  162 |                 fprintf(stderr, ")\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmove.c:162:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  162 |                 fprintf(stderr, ")\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmove.c:167:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  167 |                 fprintf(stderr, "Cannot move a root directory: ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmove.c:167:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  167 |                 fprintf(stderr, "Cannot move a root directory: ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmmove.c:173:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  173 |         if(ret & ERROR_ONE)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  174 |                 return ret;[0m
      | [0;1;32m                           
[0m[1mmmove.c:206:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  206 |         if(result == 1)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  207 |                 return GOT_ONE;[0m
  208 |         else[0m
      | [0;32m        } 
[0m[1mmmove.c:208:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  208 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  209 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmmove.c:216:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  216 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmove.c:216:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  216 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmove.c:218:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  218 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmove.c:218:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  218 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmove.c:220:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  220 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmove.c:220:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  220 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmmove.c:242:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  242 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  243 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmmove.c:247:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  247 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  248 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmmove.c:250:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  250 |                                 arg.verbose = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  251 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmmove.c:253:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  253 |                                 handle_clash_options(&arg.ch, c);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  254 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmmove.c:256:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  256 |                                 if(handle_clash_options(&arg.ch, *optarg))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  257 |                                         usage(1);[0m
  258 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmmove.c:256:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  256 |                                 if(handle_clash_options(&arg.ch, *optarg))[0m
      | [0;1;32m                                                                          ^
[0m      | [0;32m                                                                           {
[0m  257 |                                         usage(1);[0m
      | [0;1;32m                                                 
[0m[1mmmove.c:260:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  260 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmmove.c:262:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  262 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmmove.c:264:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  264 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mmmove.c:268:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  268 |         if (argc - optind < 2)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  269 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmmove.c:277:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  277 |         for(i=optind; i<argc; i++)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  278 |                 if(argv[i][0] && argv[i][1] == ':' ){[0m
  279 |                         if(!def_drive)[0m
  280 |                                 def_drive = ch_toupper(argv[i][0]);[0m
  281 |                         else if(def_drive != ch_toupper(argv[i][0])){[0m
  282 |                                 fprintf(stderr,[0m
  283 |                                         "Cannot move files across different drives\n");[0m
  284 |                                 exit(1);[0m
  285 |                         }[0m
  286 |                 }[0m
      | [0;1;32m                 
[0m[1mmmove.c:279:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  279 |                         if(!def_drive)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  280 |                                 def_drive = ch_toupper(argv[i][0]);[0m
  281 |                         else if(def_drive != ch_toupper(argv[i][0])){[0m
      | [0;32m                        } 
[0m[1mmmove.c:282:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  282 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmmove.c:282:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  282 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmmove.c:288:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  288 |         if(def_drive)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  289 |                 *(arg.mp.mcwd) = def_drive;[0m
      | [0;1;32m                                           
[0m[1mmmove.c:291:71: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  291 |         if (oldsyntax && (argc - optind != 2 || strpbrk(":/", argv[argc-1])))[0m
      | [0;1;32m                                                                             ^
[0m      | [0;32m                                                                              {
[0m  292 |                 oldsyntax = 0;[0m
      | [0;1;32m                              
[0m[1mmmove.c:304:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  304 |                 if(arg.fromname[0] && arg.fromname[1] == ':')[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m  305 |                         arg.fromname += 2;[0m
      | [0;1;32m                                          
[0m35 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[25/72][3.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpc3xctarf.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/llong.c
[1mllong.c:42:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   42 |                 fprintf(stderr, "Internal error, offset too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mllong.c:42:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   42 |                 fprintf(stderr, "Internal error, offset too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mllong.c:51:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   51 |                 fprintf(stderr, "Internal error, offset too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mllong.c:51:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   51 |                 fprintf(stderr, "Internal error, offset too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mllong.c:60:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   60 |                 fprintf(stderr, "Internal error, size too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mllong.c:60:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   60 |                 fprintf(stderr, "Internal error, size too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mllong.c:104:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  104 |         if (lseek(fd, (off_t) where, whence) >= 0)[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  105 |                 return 0;[0m
  106 |         else[0m
      | [0;32m        } 
[0m[1mllong.c:106:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  106 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  107 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mllong.c:116:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  116 |                 if(1u << i == size)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  117 |                         return i;[0m
      | [0;1;32m                                 
[0m8 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[26/72][11.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmppg3yu3kr.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/old_dos.c
[1mold_dos.c:31:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   31 |                     old_dos[i].heads == size)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m   32 |                         return &old_dos[i];[0m
      | [0;1;32m                                           
[0m[1mold_dos.c:40:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   40 |                 if (old_dos[i].media == media)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m   41 |                         return &old_dos[i];[0m
      | [0;1;32m                                           
[0m[1mold_dos.c:43:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   43 |         fprintf(stderr, "Unknown media type %02x\n", media);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mold_dos.c:43:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   43 |         fprintf(stderr, "Unknown media type %02x\n", media);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mold_dos.c:68:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |         if(params == NULL)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   69 |                 return -1;[0m
      | [0;1;32m                          
[0m7 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[27/72][16.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpredaj53o.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/file_name.c
[1mfile_name.c:32:59: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   32 |         for (a=buffer,j=0; (j<8) && (dn->base[j] > ' '); ++j,++a)[0m
      | [0;1;32m                                                                 ^
[0m      | [0;32m                                                                  {
[0m   33 |                 *a = dn->base[j];[0m
      | [0;1;32m                                 
[0m[1mfile_name.c:36:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   36 |                 for (j=0; j<3 && dn->ext[j] > ' '; ++j,++a)[0m
      | [0;1;32m                                                           ^
[0m      | [0;32m                                                            {
[0m   37 |                         *a = dn->ext[j];[0m
      | [0;1;32m                                        
[0m[1mfile_name.c:76:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |                         if(*Case == UPPER && !mtools_no_vfat)[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m   77 |                                 *mangled |= 1;[0m
   78 |                         else[0m
      | [0;32m                        } 
[0m[1mfile_name.c:78:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   79 |                                 *Case = LOWER;[0m
      | [0;1;32m                                              
[0m[1mfile_name.c:82:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |                         if(*Case == LOWER && !mtools_no_vfat)[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m   83 |                                 *mangled |= 1;[0m
   84 |                         else[0m
      | [0;32m                        } 
[0m[1mfile_name.c:84:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   84 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   85 |                                 *Case = UPPER;[0m
      | [0;1;32m                                              
[0m[1mfile_name.c:86:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   86 |                 } else[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   87 |                         buffer[t_idx] = *s;[0m
      | [0;1;32m                                           
[0m[1mfile_name.c:109:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  109 |         if (name[0] && name[1] == ':')[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  110 |                 name = &name[2];[0m
      | [0;1;32m                                
[0m[1mfile_name.c:114:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  114 |         if ((s = strrchr(name, '\\')))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  115 |                 name = s + 1;[0m
      | [0;1;32m                             
[0m[1mfile_name.c:117:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  117 |         memset(dn, ' ', 11);[0m
      | [0;1;32m        ^~~~~~
[0m[1mfile_name.c:117:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  117 |         memset(dn, ' ', 11);[0m
      | [0;1;32m        ^~~~~~
[0m[1mfile_name.c:130:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |         if(ext)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  131 |                 TranslateToDos(toDos, ext+1, dn->ext, 3, 0, &ExtCase,  mangled);[0m
      | [0;1;32m                                                                                
[0m[1mfile_name.c:133:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  133 |         if(*mangled & 2)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  134 |                 autorename_short(dn, 0);[0m
      | [0;1;32m                                        
[0m[1mfile_name.c:137:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  137 |                 if(BaseCase == LOWER)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  138 |                         *mangled |= BASECASE;[0m
      | [0;1;32m                                             
[0m[1mfile_name.c:139:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  139 |                 if(ExtCase == LOWER)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  140 |                         *mangled |= EXTCASE;[0m
      | [0;1;32m                                            
[0m[1mfile_name.c:158:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  158 |         strncpy(tname, base, 8);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfile_name.c:158:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  158 |         strncpy(tname, base, 8);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfile_name.c:160:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |         if ((s = strchr(tname, ' ')))[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  161 |                 *s = '\0';[0m
      | [0;1;32m                          
[0m[1mfile_name.c:162:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  162 |         if (tname[0] == '\x05')[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  163 |                 tname[0] = '\xE5';[0m
      | [0;1;32m                                  
[0m[1mfile_name.c:165:64: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  165 |         if(!(Case & (BASECASE | EXTCASE)) && mtools_ignore_short_case)[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m  166 |                 Case |= BASECASE | EXTCASE;[0m
      | [0;1;32m                                           
[0m[1mfile_name.c:168:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  168 |         if(Case & BASECASE)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  169 |                 for(i=0;i<8 && tname[i];i++)[0m
  170 |                         tname[i] = ch_tolower(tname[i]);[0m
      | [0;1;32m                                                        
[0m[1mfile_name.c:169:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  169 |                 for(i=0;i<8 && tname[i];i++)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  170 |                         tname[i] = ch_tolower(tname[i]);[0m
      | [0;1;32m                                                        
[0m[1mfile_name.c:172:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  172 |         strncpy(text, ext, 3);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfile_name.c:172:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  172 |         strncpy(text, ext, 3);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfile_name.c:174:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  174 |         if ((s = strchr(text, ' ')))[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  175 |                 *s = '\0';[0m
      | [0;1;32m                          
[0m[1mfile_name.c:177:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  177 |         if(Case & EXTCASE)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  178 |                 for(i=0;i<3 && text[i];i++)[0m
  179 |                         text[i] = ch_tolower(text[i]);[0m
      | [0;1;32m                                                      
[0m[1mfile_name.c:178:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  178 |                 for(i=0;i<3 && text[i];i++)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  179 |                         text[i] = ch_tolower(text[i]);[0m
      | [0;1;32m                                                      
[0m[1mfile_name.c:182:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  182 |                 strcpy(ans, tname);[0m
      | [0;1;32m                ^~~~~~
[0m[1mfile_name.c:182:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  182 |                 strcpy(ans, tname);[0m
      | [0;1;32m                ^~~~~~
[0m[1mfile_name.c:183:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  183 |                 strcat(ans, ".");[0m
      | [0;1;32m                ^~~~~~
[0m[1mfile_name.c:183:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  183 |                 strcat(ans, ".");[0m
      | [0;1;32m                ^~~~~~
[0m[1mfile_name.c:184:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  184 |                 strcat(ans, text);[0m
      | [0;1;32m                ^~~~~~
[0m[1mfile_name.c:184:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  184 |                 strcat(ans, text);[0m
      | [0;1;32m                ^~~~~~
[0m[1mfile_name.c:185:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  185 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  186 |                 strcpy(ans, tname);[0m
      | [0;1;32m                                   
[0m[1mfile_name.c:186:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  186 |                 strcpy(ans, tname);[0m
      | [0;1;32m                ^~~~~~
[0m[1mfile_name.c:186:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  186 |                 strcpy(ans, tname);[0m
      | [0;1;32m                ^~~~~~
[0m[1mfile_name.c:195:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  195 |         if(name[0] == '\0')[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  196 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfile_name.c:197:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  197 |         if(!strcmp(name,"."))[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  198 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfile_name.c:199:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  199 |         if(!strcmp(name,".."))[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  200 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfile_name.c:207:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  207 |         if(name[0] == '\0')[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  208 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfile_name.c:209:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  209 |         if(!wcscmp(name,L"."))[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  210 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfile_name.c:211:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  211 |         if(!wcscmp(name,L".."))[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  212 |                 return 1;[0m
      | [0;1;32m                         
[0m37 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[28/72][12.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp5oul86qb.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mkmanifest.c
[1mmkmanifest.c:44:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   44 |                 fprintf(stderr, "Usage: mkmanifest [-V] <list-of-files>\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmkmanifest.c:44:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   44 |                 fprintf(stderr, "Usage: mkmanifest [-V] <list-of-files>\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmkmanifest.c:54:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   54 |                 if (strcasecmp(new_name, name))[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m   55 |                         printf("mv %s %s\n", new_name, name);[0m
      | [0;1;32m                                                             
[0m[1mmkmanifest.c:70:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   70 |         strncpy(buf, name, MAX_PATH-1);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmkmanifest.c:70:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
   70 |         strncpy(buf, name, MAX_PATH-1);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmkmanifest.c:81:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   81 |                 if (isupper((unsigned char)buf[i]))[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m   82 |                         buf[i] = ch_tolower(buf[i]);[0m
      | [0;1;32m                                                    
[0m[1mmkmanifest.c:85:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |         if (*temp == '\0')[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   86 |                 strcpy(ans, "x");[0m
   87 |         else {[0m
      | [0;32m        } 
[0m[1mmkmanifest.c:90:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |                         if (!strcasecmp(temp, dev[i]))[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m   91 |                                 *temp = 'x';[0m
      | [0;1;32m                                            
[0m[1mmkmanifest.c:94:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   94 |                 if (strlen(temp) > 8)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   95 |                         *(temp+8) = '\0';[0m
      | [0;1;32m                                         
[0m[1mmkmanifest.c:97:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |                 if (ext && strlen(ext) > 3)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m   98 |                         *(ext+3) = '\0';[0m
      | [0;1;32m                                        
[0m[1mmkmanifest.c:100:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  100 |                 while ((s = strpbrk(temp, "^+=/[]:',?*\\<>|\". ")))[0m
      | [0;1;32m                                                                   ^
[0m      | [0;32m                                                                    {
[0m  101 |                         *s = 'x';[0m
      | [0;1;32m                                 
[0m[1mmkmanifest.c:103:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  103 |                 while (ext && (s = strpbrk(ext, "^+=/[]:',?*\\<>|\". ")))[0m
      | [0;1;32m                                                                         ^
[0m      | [0;32m                                                                          {
[0m  104 |                         *s = 'x';[0m
      | [0;1;32m                                 
[0m[1mmkmanifest.c:105:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  105 |                 strncpy(ans, temp, 12);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmkmanifest.c:105:3: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  105 |                 strncpy(ans, temp, 12);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmkmanifest.c:109:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  109 |                 strcat(ans, ".");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmkmanifest.c:109:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  109 |                 strcat(ans, ".");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmkmanifest.c:110:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  110 |                 strcat(ans, ext);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmkmanifest.c:110:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  110 |                 strcat(ans, ext);[0m
      | [0;1;32m                ^~~~~~
[0m15 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[29/72][5.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp_apy0ii2.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/open_image.c
[1mopen_image.c:71:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   71 |                         if(maxSize)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m   72 |                                 *maxSize = max_off_t_31;[0m
      | [0;1;32m                                                        
[0m[1mopen_image.c:95:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |                         if(*geomFailureP)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m   96 |                                 *geomFailureP=geomFailure;[0m
      | [0;1;32m                                                          
[0m[1mopen_image.c:101:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  101 |         if( !Stream)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  102 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mopen_image.c:106:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  106 |                 if(Remapped == NULL)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  107 |                         goto exit_0;[0m
      | [0;1;32m                                    
[0m[1mopen_image.c:114:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  114 |                 if(Offset == NULL)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  115 |                         goto exit_0;[0m
      | [0;1;32m                                    
[0m[1mopen_image.c:121:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  121 |                 if(Swap == NULL)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  122 |                         goto exit_0;[0m
      | [0;1;32m                                    
[0m[1mopen_image.c:127:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  127 |            compute_lba_geom_from_tot_sectors(out_dev) < 0)[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m  128 |                 goto exit_0;[0m
      | [0;1;32m                            
[0m[1mopen_image.c:133:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  133 |                 if(Partition == NULL)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  134 |                         goto exit_0;[0m
      | [0;1;32m                                    
[0m12 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[30/72][3.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmphb9tnmd9.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/scsi.c
[1mscsi.c:176:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  176 |         memset(&my_scsi_cmd,0,sizeof(my_scsi_cmd));[0m
      | [0;1;32m        ^~~~~~
[0m[1mscsi.c:176:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  176 |         memset(&my_scsi_cmd,0,sizeof(my_scsi_cmd));[0m
      | [0;1;32m        ^~~~~~
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[31/72][21.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp5fd_cogw.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/plain_io.c
[1mplain_io.c:141:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  141 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  142 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mplain_io.c:203:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  203 |         if(date)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  204 |                 *date = This->statbuf.st_mtime;[0m
      | [0;1;32m                                               
[0m[1mplain_io.c:205:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  205 |         if(size)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  206 |                 *size = This->statbuf.st_size;[0m
      | [0;1;32m                                              
[0m[1mplain_io.c:207:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  207 |         if(type)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  208 |                 *type = S_ISDIR(This->statbuf.st_mode);[0m
      | [0;1;32m                                                       
[0m[1mplain_io.c:209:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  209 |         if(address)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  210 |                 *address = 0;[0m
      | [0;1;32m                             
[0m[1mplain_io.c:252:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  252 |                 if(errmsg)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  253 | #ifdef HAVE_SNPRINTF[0m
  254 |                         snprintf(errmsg,199,[0m
  255 |                                 "plain floppy: device \"%s\" busy (%s):",[0m
  256 |                                 dev ? dev->name : "unknown", strerror(errno));[0m
      | [0;1;32m                                                                              
[0m[1mplain_io.c:254:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  254 |                         snprintf(errmsg,199,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mplain_io.c:254:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  254 |                         snprintf(errmsg,199,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mplain_io.c:297:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  297 |         if (IS_SCSI(dev))[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  298 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mplain_io.c:304:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  304 |         memset((void*)This, 0, sizeof(SimpleFile_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mplain_io.c:304:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  304 |         memset((void*)This, 0, sizeof(SimpleFile_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mplain_io.c:311:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  311 |                 if (mode == O_RDONLY)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  312 |                         This->fd = 0;[0m
  313 |                 else[0m
      | [0;32m                } 
[0m[1mplain_io.c:313:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  313 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  314 |                         This->fd = 1;[0m
      | [0;1;32m                                     
[0m[1mplain_io.c:318:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  318 |                     if(errmsg)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  319 | #ifdef HAVE_SNPRINTF[0m
  320 |                         snprintf(errmsg,199,"Can't stat -: %s",[0m
  321 |                                 strerror(errno));[0m
      | [0;1;32m                                                 
[0m[1mplain_io.c:320:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  320 |                         snprintf(errmsg,199,"Can't stat -: %s",[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mplain_io.c:320:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  320 |                         snprintf(errmsg,199,"Can't stat -: %s",[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mplain_io.c:334:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  334 |                 if(!(mode2 & NO_PRIV))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  335 |                         This->privileged = IS_PRIVILEGED(dev);[0m
      | [0;1;32m                                                              
[0m[1mplain_io.c:340:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  340 |         if(dev)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  341 |             This->postcmd=dev->postcmd;[0m
      | [0;1;32m                                       
[0m[1mplain_io.c:342:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  342 |         if(IS_PRIVILEGED(dev) && !(mode2 & NO_PRIV))[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  343 |                 reclaim_privs();[0m
      | [0;1;32m                                
[0m[1mplain_io.c:377:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  377 |         if(IS_PRIVILEGED(dev) && !(mode2 & NO_PRIV))[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  378 |                 drop_privs();[0m
      | [0;1;32m                             
[0m[1mplain_io.c:383:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  383 |                         snprintf(errmsg, 199, "Can't open %s: %s",[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mplain_io.c:383:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  383 |                         snprintf(errmsg, 199, "Can't open %s: %s",[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mplain_io.c:393:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  393 |         if(IS_PRIVILEGED(dev) && !(mode2 & NO_PRIV))[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  394 |                 closeExec(This->fd);[0m
      | [0;1;32m                                    
[0m[1mplain_io.c:406:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  406 |                         snprintf(errmsg,199,"Can't stat %s: %s",[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mplain_io.c:406:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  406 |                         snprintf(errmsg,199,"Can't stat %s: %s",[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mplain_io.c:421:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  421 |         if(LockDevice(This->fd, dev, locked, lockMode, errmsg) < 0)[0m
      | [0;1;32m                                                                   ^
[0m      | [0;32m                                                                    {
[0m  422 |                 goto exit_0;[0m
      | [0;1;32m                            
[0m[1mplain_io.c:434:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  434 |                         } else if(errmsg)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  435 |                                 sprintf(errmsg,"init: set default params");[0m
      | [0;1;32m                                                                           
[0m[1mplain_io.c:435:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  435 |                                 sprintf(errmsg,"init: set default params");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mplain_io.c:435:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  435 |                                 sprintf(errmsg,"init: set default params");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mplain_io.c:440:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  440 |         if(maxSize)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  441 |                 *maxSize = max_off_t_seek;[0m
      | [0;1;32m                                          
[0m[1mplain_io.c:459:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  459 |         if(clazz != &SimpleFileClass)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  460 |           return -1;[0m
  461 |         else[0m
      | [0;32m        } 
[0m[1mplain_io.c:461:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  461 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  462 |           return This->fd;[0m
      | [0;1;32m                          
[0m31 warnings generated.
Suppressed 5 warnings (5 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[32/72][4.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpi88f32t8.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/unixdir.c
[1munixdir.c:86:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   86 |         if(date)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   87 |                 *date = This->statbuf.st_mtime;[0m
      | [0;1;32m                                               
[0m[1munixdir.c:88:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   88 |         if(size)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   89 |                 *size = This->statbuf.st_size;[0m
      | [0;1;32m                                              
[0m[1munixdir.c:90:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |         if(type)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   91 |                 *type = 1;[0m
      | [0;1;32m                          
[0m[1munixdir.c:92:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   92 |         if(address)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m   93 |                 *address = 0;[0m
      | [0;1;32m                             
[0m[1munixdir.c:128:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  128 |                 if(got_signal)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  129 |                         break;[0m
      | [0;1;32m                              
[0m[1munixdir.c:130:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |                 if(isSpecial(entry->d_name))[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  131 |                         continue;[0m
      | [0;1;32m                                 
[0m[1munixdir.c:138:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  138 |                 strcpy(newName, This->pathname);[0m
      | [0;1;32m                ^~~~~~
[0m[1munixdir.c:138:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  138 |                 strcpy(newName, This->pathname);[0m
      | [0;1;32m                ^~~~~~
[0m[1munixdir.c:139:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  139 |                 strcat(newName, "/");[0m
      | [0;1;32m                ^~~~~~
[0m[1munixdir.c:139:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  139 |                 strcat(newName, "/");[0m
      | [0;1;32m                ^~~~~~
[0m[1munixdir.c:140:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  140 |                 strcat(newName, entry->d_name);[0m
      | [0;1;32m                ^~~~~~
[0m[1munixdir.c:140:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  140 |                 strcat(newName, entry->d_name);[0m
      | [0;1;32m                ^~~~~~
[0m[1munixdir.c:159:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  159 |         strcpy(This->pathname, filename);[0m
      | [0;1;32m        ^~~~~~
[0m[1munixdir.c:159:2: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  159 |         strcpy(This->pathname, filename);[0m
      | [0;1;32m        ^~~~~~
[0m12 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[33/72][24.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp2ecjqjff.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tty.c
[1mtty.c:96:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |         if(tty && need_tty_reset)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m   97 |                 restore_tty (&in_orig);[0m
      | [0;1;32m                                       
[0m[1mtty.c:178:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  178 |         if(notty)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  179 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mtty.c:195:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  195 |         if(mtools_raw_tty)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  196 |                 set_raw_tty(mode);[0m
      | [0;1;32m                                  
[0m[1mtty.c:206:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  206 |         if(!opentty(-1))[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  207 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mtty.c:217:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  217 |                         if(c < 0)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  218 |                                 /* Treat end-of-file or error as no */[0m
  219 |                                 ans[0] = 'n';[0m
  220 |                         else[0m
      | [0;32m                        } 
[0m[1mtty.c:220:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  220 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  221 |                                 ans[0] = (char) c;[0m
      | [0;1;32m                                                  
[0m[1mtty.c:224:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  224 |                         if(fgets(ans,9, opentty(0)) == NULL)[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m  225 |                                 /* Treat end-of-file as no */[0m
  226 |                                 ans[0] = 'n';[0m
      | [0;1;32m                                             
[0m[1mtty.c:228:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  228 |                 if (ans[0] == 'y' || ans[0] == 'Y')[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  229 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mtty.c:230:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  230 |                 if (ans[0] == 'n' || ans[0] == 'N')[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  231 |                         return -1;[0m
      | [0;1;32m                                  
[0m11 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[34/72][3.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp191wejcs.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mshortname.c
[1mmshortname.c:36:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   36 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshortname.c:36:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   36 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshortname.c:38:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   38 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshortname.c:38:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   38 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmshortname.c:50:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   50 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   51 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmshortname.c:55:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   55 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m   56 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmshortname.c:58:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   58 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmshortname.c:60:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   60 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmshortname.c:68:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |         if (optind >= argc)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   69 |                 usage(1);[0m
      | [0;1;32m                         
[0m9 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[35/72][0.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpyuk6e6m0.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/codepages.c
[36/72][22.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp91hysn3t.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/hash.c
[1mhash.c:47:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   47 |   for(i=0; sizes[i]; i++)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m   48 |     if (sizes[i] > size*4 )[0m
   49 |       break;[0m
      | [0;1;32m            
[0m[1mhash.c:48:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   48 |     if (sizes[i] > size*4 )[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   49 |       break;[0m
      | [0;1;32m            
[0m[1mhash.c:50:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   50 |   if (!sizes[i])[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   51 |     for(i=0; sizes[i]; i++)[0m
   52 |       if (sizes[i] > size*2 )[0m
   53 |         break;[0m
      | [0;1;32m              
[0m[1mhash.c:51:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |     for(i=0; sizes[i]; i++)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   52 |       if (sizes[i] > size*2 )[0m
   53 |         break;[0m
      | [0;1;32m              
[0m[1mhash.c:52:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   52 |       if (sizes[i] > size*2 )[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   53 |         break;[0m
      | [0;1;32m              
[0m[1mhash.c:54:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   54 |   if (!sizes[i])[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   55 |     for(i=0; sizes[i]; i++)[0m
   56 |       if (sizes[i] > size)[0m
   57 |         break;[0m
      | [0;1;32m              
[0m[1mhash.c:55:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   55 |     for(i=0; sizes[i]; i++)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   56 |       if (sizes[i] > size)[0m
   57 |         break;[0m
      | [0;1;32m              
[0m[1mhash.c:56:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   56 |       if (sizes[i] > size)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   57 |         break;[0m
      | [0;1;32m              
[0m[1mhash.c:58:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   58 |   if(!sizes[i])[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m   59 |     return -1;[0m
      | [0;1;32m              
[0m[1mhash.c:61:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |   if(size < H->size)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   62 |           size = H->size; /* never shrink the table */[0m
      | [0;1;32m                                                      
[0m[1mhash.c:68:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |   if (H->entries == NULL)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m   69 |     return -1; /* out of memory error */[0m
      | [0;1;32m                                        
[0m[1mhash.c:71:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   71 |   for(ii=0; ii < size; ii++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   72 |     H->entries[ii] = &unallocated;[0m
      | [0;1;32m                                  
[0m[1mhash.c:88:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   88 |   if(alloc_ht(*H,size))[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   89 |     return -1;[0m
      | [0;1;32m              
[0m[1mhash.c:96:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |   if(entry_free)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   97 |     for(i=0; i< H->size; i++)[0m
   98 |       if (H->entries[i] != &unallocated &&[0m
   99 |           H->entries[i] != &deleted)[0m
  100 |         entry_free(H->entries[i]);[0m
      | [0;1;32m                                  
[0m[1mhash.c:97:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |     for(i=0; i< H->size; i++)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   98 |       if (H->entries[i] != &unallocated &&[0m
   99 |           H->entries[i] != &deleted)[0m
  100 |         entry_free(H->entries[i]);[0m
      | [0;1;32m                                  
[0m[1mhash.c:99:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   99 |           H->entries[i] != &deleted)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  100 |         entry_free(H->entries[i]);[0m
      | [0;1;32m                                  
[0m[1mhash.c:117:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  117 |     if (f2 == (size_t) -1)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  118 |       f2 = H->f2(E) % (H->size - 1);[0m
      | [0;1;32m                                    
[0m[1mhash.c:122:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  122 |   if(H->entries[pos] == &unallocated)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  123 |      H->fill++; /* only increase fill if the previous element was not yet[0m
[1mhash.c:127:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  127 |   if(hint)[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  128 |           *hint = pos;[0m
      | [0;1;32m                      
[0m[1mhash.c:140:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  140 |   if(alloc_ht(H,((H->inuse+1)*4+H->fill)/5))[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  141 |           return -1;[0m
      | [0;1;32m                    
[0m[1mhash.c:144:67: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  144 |     if(oldentries[i] != &unallocated && oldentries[i] != &deleted)[0m
      | [0;1;32m                                                                  ^
[0m      | [0;32m                                                                   {
[0m  145 |       _hash_add(H, oldentries[i], 0);[0m
      | [0;1;32m                                     
[0m[1mhash.c:153:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  153 |   if (H->fill >= H->max)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  154 |     rehash(H);[0m
      | [0;1;32m              
[0m[1mhash.c:155:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  155 |   if (H->fill == H->size)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  156 |     return -1; /*out of memory error */[0m
      | [0;1;32m                                       
[0m[1mhash.c:176:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  176 |     if (f2 == (size_t) -1)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  177 |       f2 = H->f2(E) % (H->size - 1);[0m
      | [0;1;32m                                    
[0m[1mhash.c:178:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  178 |     if (upos == (size_t) -1 && H->entries[pos] == &deleted)[0m
      | [0;1;32m                                                           ^
[0m      | [0;32m                                                            {
[0m  179 |       upos = pos;[0m
      | [0;1;32m                 
[0m[1mhash.c:183:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  183 |   if(H->entries[pos] == &unallocated || !ttl)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  184 |     return -1;[0m
      | [0;1;32m              
[0m[1mhash.c:190:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  190 |   if(hint)[0m
      | [0;1;32m          ^
[0m      | [0;32m           {
[0m  191 |     *hint = pos;[0m
      | [0;1;32m                
[0m[1mhash.c:215:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  215 |           fprintf(stderr, "Removing non-existent entry\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mhash.c:215:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  215 |           fprintf(stderr, "Removing non-existent entry\n");[0m
      | [0;1;32m          ^~~~~~~
[0m30 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[37/72][25.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpcl9add60.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mtools.c
[1mmtools.c:65:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   65 |         if(locale == NULL || !strcmp(locale, "C"))[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m   66 |                 setlocale(LC_ALL, "en_US");[0m
      | [0;1;32m                                           
[0m[1mmtools.c:169:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  169 |                 if (!strcmp(name,dispatch[i].cmd))[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  170 |                         dispatch[i].fn(argc, argv, dispatch[i].type);[0m
      | [0;1;32m                                                                     
[0m[1mmtools.c:172:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  172 |         if (strcmp(name,"mtools"))[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  173 |                 fprintf(stderr,"Unknown mtools command '%s'\n",name);[0m
      | [0;1;32m                                                                     
[0m[1mmtools.c:173:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  173 |                 fprintf(stderr,"Unknown mtools command '%s'\n",name);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmtools.c:173:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  173 |                 fprintf(stderr,"Unknown mtools command '%s'\n",name);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmtools.c:174:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  174 |         fprintf(stderr,"Supported commands:");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmtools.c:174:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  174 |         fprintf(stderr,"Supported commands:");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmtools.c:176:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  176 |                 if (i%8 == 0) putc('\n', stderr);[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  177 |                 else fprintf(stderr, ", ");[0m
      | [0;32m                } 
[0m[1mmtools.c:177:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  177 |                 else fprintf(stderr, ", ");[0m
      | [0;1;32m                    ^                      
[0m      | [0;32m                     {
[0m[1mmtools.c:177:8: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  177 |                 else fprintf(stderr, ", ");[0m
      | [0;1;32m                     ^~~~~~~
[0m[1mmtools.c:177:8: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  177 |                 else fprintf(stderr, ", ");[0m
      | [0;1;32m                     ^~~~~~~
[0m[1mmtools.c:178:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  178 |                 fprintf(stderr, "%s", dispatch[i].cmd);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmtools.c:178:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  178 |                 fprintf(stderr, "%s", dispatch[i].cmd);[0m
      | [0;1;32m                ^~~~~~~
[0m11 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[38/72][5.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmprqdmxaqz.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/misc.c
[1mmisc.c:27:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   27 |         fprintf(stderr, "Out of memory error");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmisc.c:27:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   27 |         fprintf(stderr, "Out of memory error");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmisc.c:43:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   43 |         if ( homedir )[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   44 |                 return homedir;[0m
      | [0;1;32m                               
[0m[1mmisc.c:49:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   49 |         if ( !username )[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m   50 |                 username = getlogin();[0m
      | [0;1;32m                                      
[0m[1mmisc.c:51:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |         if ( username )[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   52 |                 pw = getpwnam( username);[0m
      | [0;1;32m                                         
[0m[1mmisc.c:61:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |         if ( pw )[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   62 |                 return pw->pw_dir;[0m
      | [0;1;32m                                  
[0m[1mmisc.c:78:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |                 if(!homedir)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   79 |                         homedir="/tmp";[0m
      | [0;1;32m                                       
[0m[1mmisc.c:80:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   80 |                 strncpy(file, homedir, MAXPATHLEN-6);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmisc.c:80:3: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
   80 |                 strncpy(file, homedir, MAXPATHLEN-6);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmisc.c:82:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   82 |                 strcat( file, "/.mcwd");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmisc.c:82:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
   82 |                 strcat( file, "/.mcwd");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmisc.c:84:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   84 |                 strncpy(file, mcwd_path, MAXPATHLEN);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmisc.c:84:3: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
   84 |                 strncpy(file, mcwd_path, MAXPATHLEN);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmisc.c:104:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  104 |                 if (MT_STAT(file, &sbuf) < 0)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  105 |                         return NULL;[0m
      | [0;1;32m                                    
[0m[1mmisc.c:111:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  111 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmisc.c:111:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  111 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmisc.c:145:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  145 |                 for(col = 0; col < 16; col++)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  146 |                         printf("%02x ", data [row*16+col]);[0m
      | [0;1;32m                                                           
[0m[1mmisc.c:148:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  148 |                         if(isprint(data [row*16+col]))[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m  149 |                                 printf("%c", data [row*16+col]);[0m
  150 |                         else[0m
      | [0;32m                        } 
[0m[1mmisc.c:150:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  150 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  151 |                                 printf(".");[0m
      | [0;1;32m                                            
[0m[1mmisc.c:176:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  176 |                         if (endptr == source_date_epoch)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  177 |                                 fprintf(stderr,[0m
  178 |                                         "SOURCE_DATE_EPOCH \"%s\" invalid\n",[0m
  179 |                                         source_date_epoch);[0m
  180 |                         else if (errno != 0)[0m
      | [0;32m                        } 
[0m[1mmisc.c:177:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  177 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmisc.c:177:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  177 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmisc.c:180:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  180 |                         else if (errno != 0)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  181 |                                 fprintf(stderr,[0m
  182 |                                         "SOURCE_DATE_EPOCH: strtoll: %s: %s\n",[0m
  183 |                                         strerror(errno), source_date_epoch);[0m
  184 |                         else if (*endptr != '\0')[0m
      | [0;32m                        } 
[0m[1mmisc.c:181:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  181 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmisc.c:181:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  181 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmisc.c:184:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  184 |                         else if (*endptr != '\0')[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  185 |                                 fprintf(stderr,[0m
  186 |                                         "SOURCE_DATE_EPOCH has trailing garbage \"%s\"\n",[0m
  187 |                                         endptr);[0m
  188 |                         else {[0m
      | [0;32m                        } 
[0m[1mmisc.c:185:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  185 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmisc.c:185:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  185 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmisc.c:199:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  199 |         if(now)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  200 |                 *now = sharedNow;[0m
      | [0;1;32m                                 
[0m[1mmisc.c:215:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  215 |         if (s == 's' || s == 'S')       /* sector */[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  216 |                 ofs <<= 9;[0m
  217 |         else if (s == 'k' || s == 'K')  /* kb */[0m
      | [0;32m        } 
[0m[1mmisc.c:217:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  217 |         else if (s == 'k' || s == 'K')  /* kb */[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  218 |                 ofs <<= 10;[0m
  219 |         else if (s == 'm' || s == 'M')  /* Mb */[0m
      | [0;32m        } 
[0m[1mmisc.c:219:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  219 |         else if (s == 'm' || s == 'M')  /* Mb */[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  220 |                 ofs <<= 20;[0m
  221 |         else if (s == 'g' || s == 'G')  /* Gb */[0m
      | [0;32m        } 
[0m[1mmisc.c:221:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  221 |         else if (s == 'g' || s == 'G')  /* Gb */[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  222 |                 ofs <<= 30;[0m
  223 |         else[0m
      | [0;32m        } 
[0m[1mmisc.c:223:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  223 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  224 |                 return ofs;      /* invalid character */[0m
      | [0;1;32m                                                        
[0m[1mmisc.c:240:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  240 |         if (s == 's' || s == 'S')       /* sector */[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  241 |                 siz <<= 9;[0m
  242 |         else if (s == 'k' || s == 'K')  /* kb */[0m
      | [0;32m        } 
[0m[1mmisc.c:242:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  242 |         else if (s == 'k' || s == 'K')  /* kb */[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  243 |                 siz <<= 10;[0m
  244 |         else if (s == 'm' || s == 'M')  /* Mb */[0m
      | [0;32m        } 
[0m[1mmisc.c:244:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  244 |         else if (s == 'm' || s == 'M')  /* Mb */[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  245 |                 siz <<= 20;[0m
  246 |         else if (s == 'g' || s == 'G')  /* Gb */[0m
      | [0;32m        } 
[0m[1mmisc.c:246:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  246 |         else if (s == 'g' || s == 'G')  /* Gb */[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  247 |                 siz <<= 30;[0m
  248 |         else[0m
      | [0;32m        } 
[0m[1mmisc.c:248:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  248 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  249 |                 return siz;      /* invalid character */[0m
      | [0;1;32m                                                        
[0m[1mmisc.c:257:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  257 |         if (ofs <= 0)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  258 |                 return 0; /* invalid or missing offset */[0m
      | [0;1;32m                                                         
[0m[1mmisc.c:259:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  259 |         if (*end)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  260 |                 return 0; /* extra char, invalid */[0m
      | [0;1;32m                                                   
[0m35 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[39/72][34.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpymzm4rpf.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/charsetConv.c
[1mcharsetConv.c:65:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   65 |                 if(test != (iconv_t) -1)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m   66 |                         break;[0m
      | [0;1;32m                              
[0m[1mcharsetConv.c:68:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |         if(test == (iconv_t) -1)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   69 |                 goto fail0;[0m
      | [0;1;32m                           
[0m[1mcharsetConv.c:73:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |         if(res != 0 || outbufLen != 0 || inbufLen != 0)[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m   74 |                 goto fail;[0m
      | [0;1;32m                          
[0m[1mcharsetConv.c:75:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   75 |         if(memcmp(outbuf, "ab", 2))[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m   76 |                 goto fail;[0m
      | [0;1;32m                          
[0m[1mcharsetConv.c:88:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   88 |         if(wcharCp != NULL)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   89 |                 return wcharCp;[0m
      | [0;1;32m                               
[0m[1mcharsetConv.c:91:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   91 |                 if(try(wcharTries[i]))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m   92 |                         return (wcharCp=wcharTries[i]);[0m
      | [0;1;32m                                                       
[0m[1mcharsetConv.c:94:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   94 |         fprintf(stderr, "No codepage found for wchar_t\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mcharsetConv.c:94:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   94 |         fprintf(stderr, "No codepage found for wchar_t\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mcharsetConv.c:106:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  106 |         if(codepage == 0)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  107 |                 codepage = mtools_default_codepage;[0m
      | [0;1;32m                                                   
[0m[1mcharsetConv.c:109:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  109 |                 fprintf(stderr, "Bad codepage %d\n", codepage);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:109:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  109 |                 fprintf(stderr, "Bad codepage %d\n", codepage);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:113:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  113 |         if(getWcharCp() == NULL)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  114 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mcharsetConv.c:116:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  116 |         sprintf(dosCp, "CP%d", codepage);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mcharsetConv.c:116:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  116 |         sprintf(dosCp, "CP%d", codepage);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mcharsetConv.c:119:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  119 |                 fprintf(stderr, "Error converting to codepage %d %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:119:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  119 |                 fprintf(stderr, "Error converting to codepage %d %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:124:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  124 |         sprintf(dosCp, "CP%d//TRANSLIT", codepage);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mcharsetConv.c:124:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  124 |         sprintf(dosCp, "CP%d//TRANSLIT", codepage);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mcharsetConv.c:128:3: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  128 |                 sprintf(dosCp, "CP%d", codepage);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:128:3: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  128 |                 sprintf(dosCp, "CP%d", codepage);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:133:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  133 |                 fprintf(stderr, "Error converting to codepage %d %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:133:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  133 |                 fprintf(stderr, "Error converting to codepage %d %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:139:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  139 |         if(ret == NULL)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  140 |                 return ret;[0m
      | [0;1;32m                           
[0m[1mcharsetConv.c:162:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  162 |         if(r == (size_t) -1)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  163 |                 return r;[0m
      | [0;1;32m                         
[0m[1mcharsetConv.c:190:12: [0m[0;1;35mwarning: [0m[1mThe left expression of the compound assignment is an uninitialized value. The computed value will also be garbage [clang-analyzer-core.uninitialized.Assign][0m
  190 |                 *mangled |= 1;[0m
      | [0;1;32m                         ^
[0m[1mcharsetConv.c:373:2: [0m[0;1;36mnote: [0m'mangled' declared without an initial value[0m
  373 |         int mangled;[0m
      | [0;1;32m        ^~~~~~~~~~~
[0m[1mcharsetConv.c:377:4: [0m[0;1;36mnote: [0mCalling 'safe_iconv'[0m
  377 |         r=safe_iconv(to_native, wchar, native, len, out_len, &mangled);[0m
      | [0;1;32m          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mcharsetConv.c:183:8: [0m[0;1;36mnote: [0mAssuming 'in_len' is > 0[0m
  183 |         while(in_len > 0 && out_len > 0) {[0m
      | [0;1;32m              ^~~~~~~~~~
[0m[1mcharsetConv.c:183:8: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mcharsetConv.c:183:22: [0m[0;1;36mnote: [0mAssuming 'out_len' is > 0[0m
  183 |         while(in_len > 0 && out_len > 0) {[0m
      | [0;1;32m                            ^~~~~~~~~~~
[0m[1mcharsetConv.c:183:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  183 |         while(in_len > 0 && out_len > 0) {[0m
      | [0;1;32m        ^
[0m[1mcharsetConv.c:185:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  185 |                 if(r == (size_t) -1 || errno != EILSEQ) {[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~
[0m[1mcharsetConv.c:185:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mcharsetConv.c:185:26: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  185 |                 if(r == (size_t) -1 || errno != EILSEQ) {[0m
      | [0;1;32m                                       ^
[0m[1m/usr/include/errno.h:38:16: [0m[0;1;36mnote: [0mexpanded from macro 'errno'[0m
   38 | # define errno (*__errno_location ())[0m
      | [0;1;32m               ^
[0m[1mcharsetConv.c:185:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  185 |                 if(r == (size_t) -1 || errno != EILSEQ) {[0m
      | [0;1;32m                ^
[0m[1mcharsetConv.c:190:12: [0m[0;1;36mnote: [0mThe left expression of the compound assignment is an uninitialized value. The computed value will also be garbage[0m
  190 |                 *mangled |= 1;[0m
      | [0;1;32m                ~~~~~~~~ ^
[0m[1mcharsetConv.c:192:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  192 |                 if(out_len <= 0)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  193 |                         break;[0m
      | [0;1;32m                              
[0m[1mcharsetConv.c:194:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  194 |                 if(dptr)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  195 |                         *dptr++ = '_';[0m
      | [0;1;32m                                      
[0m[1mcharsetConv.c:210:13: [0m[0;1;35mwarning: [0m[1mThe left expression of the compound assignment is an uninitialized value. The computed value will also be garbage [clang-analyzer-core.uninitialized.Assign][0m
  210 |                         *mangled |= 1;[0m
      | [0;1;32m                                 ^
[0m[1mcharsetConv.c:373:2: [0m[0;1;36mnote: [0m'mangled' declared without an initial value[0m
  373 |         int mangled;[0m
      | [0;1;32m        ^~~~~~~~~~~
[0m[1mcharsetConv.c:377:4: [0m[0;1;36mnote: [0mCalling 'safe_iconv'[0m
  377 |         r=safe_iconv(to_native, wchar, native, len, out_len, &mangled);[0m
      | [0;1;32m          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mcharsetConv.c:183:8: [0m[0;1;36mnote: [0mAssuming 'in_len' is > 0[0m
  183 |         while(in_len > 0 && out_len > 0) {[0m
      | [0;1;32m              ^~~~~~~~~~
[0m[1mcharsetConv.c:183:8: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mcharsetConv.c:183:22: [0m[0;1;36mnote: [0mAssuming 'out_len' is > 0[0m
  183 |         while(in_len > 0 && out_len > 0) {[0m
      | [0;1;32m                            ^~~~~~~~~~~
[0m[1mcharsetConv.c:183:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  183 |         while(in_len > 0 && out_len > 0) {[0m
      | [0;1;32m        ^
[0m[1mcharsetConv.c:185:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  185 |                 if(r == (size_t) -1 || errno != EILSEQ) {[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~
[0m[1mcharsetConv.c:185:23: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  185 |                 if(r == (size_t) -1 || errno != EILSEQ) {[0m
      | [0;1;32m                                    ^
[0m[1mcharsetConv.c:188:4: [0m[0;1;36mnote: [0m Execution continues on line 202[0m
  188 |                         break;[0m
      | [0;1;32m                        ^
[0m[1mcharsetConv.c:207:11: [0m[0;1;36mnote: [0mAssuming 'i' is < 'len'[0m
  207 |         for(i=0; i<len; i++) {[0m
      | [0;1;32m                 ^~~~~
[0m[1mcharsetConv.c:207:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  207 |         for(i=0; i<len; i++) {[0m
      | [0;1;32m        ^
[0m[1mcharsetConv.c:208:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  208 |                 if(dest[i] == '?') {[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~
[0m[1mcharsetConv.c:208:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  208 |                 if(dest[i] == '?') {[0m
      | [0;1;32m                ^
[0m[1mcharsetConv.c:210:13: [0m[0;1;36mnote: [0mThe left expression of the compound assignment is an uninitialized value. The computed value will also be garbage[0m
  210 |                         *mangled |= 1;[0m
      | [0;1;32m                        ~~~~~~~~ ^
[0m[1mcharsetConv.c:337:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  337 |         if(to_native != NULL)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  338 |                 return;[0m
      | [0;1;32m                       
[0m[1mcharsetConv.c:341:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  341 |         if(getWcharCp() == NULL)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  342 |                 exit(1);[0m
      | [0;1;32m                        
[0m[1mcharsetConv.c:344:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  344 |         strcpy(cp, li);[0m
      | [0;1;32m        ^~~~~~
[0m[1mcharsetConv.c:344:2: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  344 |         strcpy(cp, li);[0m
      | [0;1;32m        ^~~~~~
[0m[1mcharsetConv.c:345:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  345 |         strcat(cp, "//TRANSLIT");[0m
      | [0;1;32m        ^~~~~~
[0m[1mcharsetConv.c:345:2: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  345 |         strcat(cp, "//TRANSLIT");[0m
      | [0;1;32m        ^~~~~~
[0m[1mcharsetConv.c:347:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  347 |         if(to_native == (iconv_t) -1)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  348 |                 to_native = iconv_open(li, wcharCp);[0m
      | [0;1;32m                                                    
[0m[1mcharsetConv.c:349:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  349 |         if(to_native == (iconv_t) -1)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  350 |                 fprintf(stderr, "Could not allocate iconv for %s\n", cp);[0m
      | [0;1;32m                                                                         
[0m[1mcharsetConv.c:350:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  350 |                 fprintf(stderr, "Could not allocate iconv for %s\n", cp);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:350:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  350 |                 fprintf(stderr, "Could not allocate iconv for %s\n", cp);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mcharsetConv.c:352:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  352 |         if(to_native == (iconv_t) -1)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  353 |                 exit(1);[0m
      | [0;1;32m                        
[0m[1mcharsetConv.c:412:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  412 |         memset(&ps, 0, sizeof(ps));[0m
      | [0;1;32m        ^~~~~~
[0m[1mcharsetConv.c:412:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  412 |         memset(&ps, 0, sizeof(ps));[0m
      | [0;1;32m        ^~~~~~
[0m[1mcharsetConv.c:422:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  422 |                         if(c >= '\xa0' && c < '\xff')[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m  423 |                                 wchar[i] = (wchar_t) (c & 0xff);[0m
  424 |                         else[0m
      | [0;32m                        } 
[0m[1mcharsetConv.c:424:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  424 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  425 |                                 wchar[i] = '_';[0m
      | [0;1;32m                                               
[0m[1mcharsetConv.c:426:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  426 |                         memset(&ps, 0, sizeof(ps));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mcharsetConv.c:426:4: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  426 |                         memset(&ps, 0, sizeof(ps));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mcharsetConv.c:429:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  429 |                 if(r == 0)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  430 |                         break;[0m
      | [0;1;32m                              
[0m[1mcharsetConv.c:433:74: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  433 |         if(mangled && ((end && native < end) || (!end && *native &&  i == len)))[0m
      | [0;1;32m                                                                                ^
[0m      | [0;32m                                                                                 {
[0m  434 |                 *mangled |= 3;[0m
      | [0;1;32m                              
[0m37 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[40/72][40.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpf7c9xiya.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/scsi_io.c
[1mscsi_io.c:74:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   74 |    memset(cdb, 0, sizeof cdb);[0m
      | [0;1;32m   ^~~~~~
[0m[1mscsi_io.c:74:4: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   74 |    memset(cdb, 0, sizeof cdb);[0m
      | [0;1;32m   ^~~~~~
[0m[1mscsi_io.c:75:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   75 |    memset(buf,0, sizeof(buf));[0m
      | [0;1;32m   ^~~~~~
[0m[1mscsi_io.c:75:4: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   75 |    memset(buf,0, sizeof(buf));[0m
      | [0;1;32m   ^~~~~~
[0m[1mscsi_io.c:86:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   86 |            if(This->tot_sectors < UINT32_MAX)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m   87 |                    This->tot_sectors++;[0m
      | [0;1;32m                                       
[0m[1mscsi_io.c:93:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   93 |            if (This->scsi_sector_size != 512)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m   94 |                    fprintf(stderr,"  (scsi_sector_size=%d)\n",This->scsi_sector_size);[0m
      | [0;1;32m                                                                                      
[0m[1mscsi_io.c:94:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   94 |                    fprintf(stderr,"  (scsi_sector_size=%d)\n",This->scsi_sector_size);[0m
      | [0;1;32m                   ^~~~~~~
[0m[1mscsi_io.c:94:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   94 |                    fprintf(stderr,"  (scsi_sector_size=%d)\n",This->scsi_sector_size);[0m
      | [0;1;32m                   ^~~~~~~
[0m[1mscsi_io.c:96:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |    } else[0m
      | [0;1;32m         ^
[0m      | [0;32m          {
[0m   97 |            return -1;[0m
      | [0;1;32m                     
[0m[1mscsi_io.c:106:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  106 |         if(bytes % sector_size)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  107 |                 sectors++;[0m
      | [0;1;32m                          
[0m[1mscsi_io.c:108:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  108 |         if(sectors > UINT32_MAX)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  109 |                 return UINT32_MAX;[0m
  110 |         else[0m
      | [0;32m        } 
[0m[1mscsi_io.c:110:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  111 |                 return (uint32_t) sectors;[0m
      | [0;1;32m                                          
[0m[1mscsi_io.c:137:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  137 |                 while (nsect*This->scsi_sector_size>len)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  138 |                         --nsect;[0m
      | [0;1;32m                                
[0m[1mscsi_io.c:140:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  140 |                         fprintf(stderr,"Scsi buffer too small\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mscsi_io.c:140:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  140 |                         fprintf(stderr,"Scsi buffer too small\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mscsi_io.c:145:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  145 |                         fprintf(stderr,"Unaligned write\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mscsi_io.c:145:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  145 |                         fprintf(stderr,"Unaligned write\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mscsi_io.c:158:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  158 |         if (nsect > max)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  159 |                 nsect=max;[0m
      | [0;1;32m                          
[0m[1mscsi_io.c:162:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  162 |         memset(cdb, 0, sizeof cdb);[0m
      | [0;1;32m        ^~~~~~
[0m[1mscsi_io.c:162:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  162 |         memset(cdb, 0, sizeof cdb);[0m
      | [0;1;32m        ^~~~~~
[0m[1mscsi_io.c:166:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  166 |                         cdb[0] = SCSI_READ;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  167 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mscsi_io.c:169:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  169 |                         cdb[0] = SCSI_WRITE;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  170 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mscsi_io.c:205:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  205 |         if(This->privileged)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  206 |                 reclaim_privs();[0m
      | [0;1;32m                                
[0m[1mscsi_io.c:211:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  211 |         if(This->privileged)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  212 |                 drop_privs();[0m
      | [0;1;32m                             
[0m[1mscsi_io.c:225:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  225 |         if (offset>0)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  226 |                 memmove(buf,buf+offset, nsect*This->scsi_sector_size-offset);[0m
      | [0;1;32m                                                                             
[0m[1mscsi_io.c:226:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  226 |                 memmove(buf,buf+offset, nsect*This->scsi_sector_size-offset);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mscsi_io.c:226:3: [0m[0;1;36mnote: [0mCall to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11[0m
  226 |                 memmove(buf,buf+offset, nsect*This->scsi_sector_size-offset);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mscsi_io.c:227:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  227 |         if (len==256) return 256;[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  228 |         else if (len==512) return 512;[0m
      | [0;32m        } 
[0m[1mscsi_io.c:228:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  228 |         else if (len==512) return 512;[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  229 |         else return (ssize_t)(nsect*This->scsi_sector_size-offset);[0m
      | [0;32m        } 
[0m[1mscsi_io.c:229:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  229 |         else return (ssize_t)(nsect*This->scsi_sector_size-offset);[0m
      | [0;1;32m            ^                                                      
[0m      | [0;32m             {
[0m[1mscsi_io.c:255:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  255 |         if(date || type || address)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  256 |                 fprintf(stderr, "Get_data call not supported\n");[0m
      | [0;1;32m                                                                 
[0m[1mscsi_io.c:256:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  256 |                 fprintf(stderr, "Get_data call not supported\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mscsi_io.c:256:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  256 |                 fprintf(stderr, "Get_data call not supported\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mscsi_io.c:257:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  257 |         if(size)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  258 |                 *size = This->device_size;[0m
      | [0;1;32m                                          
[0m[1mscsi_io.c:270:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  270 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  271 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mscsi_io.c:295:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  295 |         if (!IS_SCSI(dev))[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  296 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mscsi_io.c:303:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  303 |         memset((void*)This, 0, sizeof(ScsiDevice_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mscsi_io.c:303:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  303 |         memset((void*)This, 0, sizeof(ScsiDevice_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mscsi_io.c:308:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  308 |                 if(!(mode2 & NO_PRIV))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  309 |                         This->privileged = IS_PRIVILEGED(dev);[0m
      | [0;1;32m                                                              
[0m[1mscsi_io.c:314:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  314 |         if(dev)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  315 |                 This->postcmd = dev->postcmd;[0m
      | [0;1;32m                                             
[0m[1mscsi_io.c:316:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  316 |         if(IS_PRIVILEGED(dev) && !(mode2 & NO_PRIV))[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  317 |                 reclaim_privs();[0m
      | [0;1;32m                                
[0m[1mscsi_io.c:324:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  324 |         if(IS_PRIVILEGED(dev) && !(mode2 & NO_PRIV))[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  325 |                 drop_privs();[0m
      | [0;1;32m                             
[0m[1mscsi_io.c:330:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  330 |                         snprintf(errmsg, 199, "Can't open %s: %s",[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mscsi_io.c:330:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  330 |                         snprintf(errmsg, 199, "Can't open %s: %s",[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mscsi_io.c:340:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  340 |         if(IS_PRIVILEGED(dev) && !(mode2 & NO_PRIV))[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  341 |                 closeExec(This->fd);[0m
      | [0;1;32m                                    
[0m[1mscsi_io.c:343:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  343 |         if(LockDevice(This->fd, dev, locked, lockMode, errmsg) < 0)[0m
      | [0;1;32m                                                                   ^
[0m      | [0;32m                                                                    {
[0m  344 |                 goto exit_0;[0m
      | [0;1;32m                            
[0m[1mscsi_io.c:346:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  346 |         if(maxSize)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  347 |                 *maxSize = MAX_OFF_T_B(31+log_2(This->scsi_sector_size));[0m
      | [0;1;32m                                                                         
[0m[1mscsi_io.c:348:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  348 |         if(This->privileged)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  349 |                 reclaim_privs();[0m
      | [0;1;32m                                
[0m[1mscsi_io.c:351:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  351 |         if(This->privileged)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  352 |                 drop_privs();[0m
      | [0;1;32m                             
[0m[1mscsi_io.c:353:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  353 |         if(ret < 0)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  354 |                 goto exit_0;[0m
      | [0;1;32m                            
[0m42 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[41/72][41.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpspo_rzcm.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/direntry.c
[1mdirentry.c:26:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   26 |         memset(entry, 0, sizeof(direntry_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mdirentry.c:26:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   26 |         memset(entry, 0, sizeof(direntry_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mdirentry.c:78:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |                 if(isRootEntry(entry)) /* rootDir */[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m   79 |                         return length + 3;[0m
      | [0;1;32m                                          
[0m[1mdirentry.c:120:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  120 |                 if(!recurs)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  121 |                         putc('/', f);[0m
      | [0;1;32m                                     
[0m[1mdirentry.c:128:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  128 |                                 if (wcschr(NEED_ESCAPE, *ptr))[0m
      | [0;1;32m                                                              ^
[0m      | [0;32m                                                               {
[0m  129 |                                         putc('\\', f);[0m
      | [0;1;32m                                                      
[0m[1mdirentry.c:135:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  135 |                         fprintf(f, "/%s", tmp);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdirentry.c:135:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  135 |                         fprintf(f, "/%s", tmp);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdirentry.c:142:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  142 |         if (escape)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  143 |                 putc('"', f);[0m
      | [0;1;32m                             
[0m[1mdirentry.c:145:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  145 |         if(escape)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  146 |                 putc('"', f);[0m
      | [0;1;32m                             
[0m[1mdirentry.c:154:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  154 |                 if(!recurs)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  155 |                         putc('/', f);[0m
      | [0;1;32m                                     
[0m[1mdirentry.c:160:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |                 for(i=7; i>=0 && entry->dir.name[i] == ' ';i--);[0m
      | [0;1;32m                                                               ^
[0m      | [0;32m                                                                {
[0m[1mdirentry.c:161:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  161 |                 for(j=0; j<=i; j++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  162 |                         putc(entry->dir.name[j],f);[0m
      | [0;1;32m                                                   
[0m[1mdirentry.c:163:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  163 |                 for(i=2; i>=0 && entry->dir.ext[i] == ' ';i--);[0m
      | [0;1;32m                                                              ^
[0m      | [0;32m                                                               {
[0m[1mdirentry.c:164:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  164 |                 if(i > 0)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  165 |                         putc('.',f);[0m
      | [0;1;32m                                    
[0m[1mdirentry.c:166:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  166 |                 for(j=0; j<=i; j++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  167 |                         putc(entry->dir.ext[j],f);[0m
      | [0;1;32m                                                  
[0m[1mdirentry.c:186:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  186 |         if(!ret)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  187 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mdirentry.c:196:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  196 |                 if(inside == outside) /* both are the same */[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  197 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mdirentry.c:198:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  198 |                 if(isRootEntry(getDirentry(inside))) /* root directory */[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  199 |                         return 0;[0m
      | [0;1;32m                                 
[0m18 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[42/72][38.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpz16gu43t.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/floppyd_installtest.c
[1mfloppyd_installtest.c:58:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   58 |         if(write(handle, val, 4) < 4)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   59 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mfloppyd_installtest.c:85:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |                 if(filelen < 1)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m   86 |                     return AUTH_AUTHFAILED;[0m
      | [0;1;32m                                           
[0m[1mfloppyd_installtest.c:90:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |         if(write(sock, buf, 8) < 8)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m   91 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_installtest.c:112:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  112 |         fprintf(stderr, "Protocol Version=%d\n", protoversion);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd_installtest.c:112:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  112 |         fprintf(stderr, "Protocol Version=%d\n", protoversion);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd_installtest.c:114:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  114 |           fprintf(stderr, "Capabilities:%s%s\n",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mfloppyd_installtest.c:114:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  114 |           fprintf(stderr, "Capabilities:%s%s\n",[0m
      | [0;1;32m          ^~~~~~~
[0m[1mfloppyd_installtest.c:121:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  121 |                 if(write(sock, xcookie, filelen+4) < (ssize_t)(filelen+4))[0m
      | [0;1;32m                                                                          ^
[0m      | [0;32m                                                                           {
[0m  122 |                         return AUTH_IO_ERROR;[0m
      | [0;1;32m                                             
[0m[1mfloppyd_installtest.c:146:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  146 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m                               ^    
[0m      | [0;32m                                {
[0m[1mfloppyd_installtest.c:148:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  148 |         if (*p) p++;[0m
      | [0;1;32m               ^    
[0m      | [0;32m                {
[0m[1mfloppyd_installtest.c:159:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  159 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m                               ^    
[0m      | [0;32m                                {
[0m[1mfloppyd_installtest.c:161:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  161 |         if (*p) p++;[0m
      | [0;1;32m               ^    
[0m      | [0;32m                {
[0m[1mfloppyd_installtest.c:188:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  188 |                         memcpy(&ip, host->h_addr, sizeof(ip));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfloppyd_installtest.c:188:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  188 |                         memcpy(&ip, host->h_addr, sizeof(ip));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfloppyd_installtest.c:272:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  272 |         if (!rval) return -1;[0m
      | [0;1;32m                  ^          
[0m      | [0;32m                   {
[0m[1mfloppyd_installtest.c:277:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  277 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_installtest.c:277:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  277 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_installtest.c:277:3: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'display' [clang-analyzer-unix.Malloc][0m
  277 |                 fprintf(stderr,[0m
      | [0;1;32m                ^
[0m[1mfloppyd_installtest.c:258:13: [0m[0;1;36mnote: [0mAssuming 'argc' is >= 2[0m
  258 |         if (argc < 2) {[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mfloppyd_installtest.c:258:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  258 |         if (argc < 2) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:265:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  265 |         if (strcmp(name, "-f") == 0) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:265:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  265 |         if (strcmp(name, "-f") == 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:270:9: [0m[0;1;36mnote: [0mCalling 'get_host_and_port'[0m
  270 |         rval = get_host_and_port(name, &hostname, &display, &port);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:146:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  146 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1mfloppyd_installtest.c:146:19: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  146 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m                         ^
[0m[1mfloppyd_installtest.c:148:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  148 |         if (*p) p++;[0m
      | [0;1;32m            ^~
[0m[1mfloppyd_installtest.c:148:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  148 |         if (*p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:152:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  152 |         if (*port == 0) {[0m
      | [0;1;32m            ^~~~~~~~~~
[0m[1mfloppyd_installtest.c:152:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  152 |         if (*port == 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:156:13: [0m[0;1;36mnote: [0mMemory is allocated[0m
  156 |         *display = strdup(newname);[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:159:9: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
  159 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m               ^
[0m[1mfloppyd_installtest.c:159:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 160[0m
  159 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:161:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  161 |         if (*p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:166:16: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  166 |         if (!*newname || strcmp(newname, "unix") == 0) {[0m
      | [0;1;32m                      ^
[0m[1mfloppyd_installtest.c:270:9: [0m[0;1;36mnote: [0mReturned allocated memory via 3rd parameter[0m
  270 |         rval = get_host_and_port(name, &hostname, &display, &port);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:272:7: [0m[0;1;36mnote: [0m'rval' is 1[0m
  272 |         if (!rval) return -1;[0m
      | [0;1;32m             ^~~~
[0m[1mfloppyd_installtest.c:272:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  272 |         if (!rval) return -1;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:276:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  276 |         if (sock == -1) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:277:3: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'display'[0m
  277 |                 fprintf(stderr,[0m
      | [0;1;32m                ^
[0m[1mfloppyd_installtest.c:280:3: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'hostname' [clang-analyzer-unix.Malloc][0m
  280 |                 return -1;[0m
      | [0;1;32m                ^
[0m[1mfloppyd_installtest.c:258:13: [0m[0;1;36mnote: [0mAssuming 'argc' is >= 2[0m
  258 |         if (argc < 2) {[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mfloppyd_installtest.c:258:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  258 |         if (argc < 2) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:265:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  265 |         if (strcmp(name, "-f") == 0) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:265:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  265 |         if (strcmp(name, "-f") == 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:270:9: [0m[0;1;36mnote: [0mCalling 'get_host_and_port'[0m
  270 |         rval = get_host_and_port(name, &hostname, &display, &port);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:146:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  146 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1mfloppyd_installtest.c:146:19: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  146 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m                         ^
[0m[1mfloppyd_installtest.c:148:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  148 |         if (*p) p++;[0m
      | [0;1;32m            ^~
[0m[1mfloppyd_installtest.c:148:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  148 |         if (*p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:152:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  152 |         if (*port == 0) {[0m
      | [0;1;32m            ^~~~~~~~~~
[0m[1mfloppyd_installtest.c:152:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  152 |         if (*port == 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:159:9: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
  159 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m               ^
[0m[1mfloppyd_installtest.c:159:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 160[0m
  159 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:161:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  161 |         if (*p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:166:16: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  166 |         if (!*newname || strcmp(newname, "unix") == 0) {[0m
      | [0;1;32m                      ^
[0m[1mfloppyd_installtest.c:168:13: [0m[0;1;36mnote: [0mMemory is allocated[0m
  168 |                 newname = strdup("localhost");[0m
      | [0;1;32m                          ^~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:270:9: [0m[0;1;36mnote: [0mReturned allocated memory via 2nd parameter[0m
  270 |         rval = get_host_and_port(name, &hostname, &display, &port);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:272:7: [0m[0;1;36mnote: [0m'rval' is 1[0m
  272 |         if (!rval) return -1;[0m
      | [0;1;32m             ^~~~
[0m[1mfloppyd_installtest.c:272:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  272 |         if (!rval) return -1;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:276:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  276 |         if (sock == -1) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:280:3: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'hostname'[0m
  280 |                 return -1;[0m
      | [0;1;32m                ^
[0m[1mfloppyd_installtest.c:287:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  287 |             if(protoversion == FLOPPYD_PROTOCOL_VERSION_OLD)[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m  288 |                 break;[0m
      | [0;1;32m                      
[0m[1mfloppyd_installtest.c:298:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  298 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_installtest.c:298:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  298 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_installtest.c:300:12: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'AuthErrors' [clang-analyzer-security.ArrayBound][0m
  300 |                         "%s\n", AuthErrors[reply]);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:258:13: [0m[0;1;36mnote: [0mAssuming 'argc' is >= 2[0m
  258 |         if (argc < 2) {[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mfloppyd_installtest.c:258:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  258 |         if (argc < 2) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:265:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  265 |         if (strcmp(name, "-f") == 0) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:265:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  265 |         if (strcmp(name, "-f") == 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:272:6: [0m[0;1;36mnote: [0mAssuming 'rval' is not equal to 0[0m
  272 |         if (!rval) return -1;[0m
      | [0;1;32m            ^~~~~
[0m[1mfloppyd_installtest.c:272:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  272 |         if (!rval) return -1;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:276:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  276 |         if (sock == -1) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:284:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  284 |         while(1) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:287:9: [0m[0;1;36mnote: [0m'protoversion' is not equal to FLOPPYD_PROTOCOL_VERSION_OLD[0m
  287 |             if(protoversion == FLOPPYD_PROTOCOL_VERSION_OLD)[0m
      | [0;1;32m               ^~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:287:6: [0m[0;1;36mnote: [0mTaking false branch[0m
  287 |             if(protoversion == FLOPPYD_PROTOCOL_VERSION_OLD)[0m
      | [0;1;32m            ^
[0m[1mfloppyd_installtest.c:289:9: [0m[0;1;36mnote: [0m'reply' is not equal to AUTH_WRONGVERSION[0m
  289 |             if(reply == AUTH_WRONGVERSION) {[0m
      | [0;1;32m               ^~~~~
[0m[1mfloppyd_installtest.c:289:6: [0m[0;1;36mnote: [0mTaking false branch[0m
  289 |             if(reply == AUTH_WRONGVERSION) {[0m
      | [0;1;32m            ^
[0m[1mfloppyd_installtest.c:294:6: [0m[0;1;36mnote: [0m Execution continues on line 297[0m
  294 |             break;[0m
      | [0;1;32m            ^
[0m[1mfloppyd_installtest.c:297:6: [0m[0;1;36mnote: [0m'reply' is not equal to 0[0m
  297 |         if (reply != 0) {[0m
      | [0;1;32m            ^~~~~
[0m[1mfloppyd_installtest.c:297:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  297 |         if (reply != 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_installtest.c:300:12: [0m[0;1;36mnote: [0mAccess of 'AuthErrors' at index 6, while it holds only 5 'const char *' elements[0m
  300 |                         "%s\n", AuthErrors[reply]);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~
[0m[1mfloppyd_installtest.c:308:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  308 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_installtest.c:308:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  308 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_installtest.c:314:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  314 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_installtest.c:314:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  314 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m26 warnings generated.
Suppressed 6 warnings (6 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[43/72][3.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpnyuhf9m2.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/signal.c
[1msignal.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   67 |   memset(&new, 0, sizeof(new));[0m
      | [0;1;32m  ^~~~~~
[0m[1msignal.c:67:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   67 |   memset(&new, 0, sizeof(new));[0m
      | [0;1;32m  ^~~~~~
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[44/72][46.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpep28ty6v.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mdel.c
[1mmdel.c:48:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   48 |             if(error)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m   49 |                 break;[0m
      | [0;1;32m                      
[0m[1mmdel.c:61:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |         if(got_signal)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   62 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmdel.c:65:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   65 |                 fprintf(stderr, "Cannot remove root directory\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdel.c:65:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   65 |                 fprintf(stderr, "Cannot remove root directory\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdel.c:70:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   70 |                 fprintf(stderr,"Removing ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdel.c:70:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   70 |                 fprintf(stderr,"Removing ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdel.c:79:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   79 |                                      progname, tmp))[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m   80 |                         return ERROR_ONE;[0m
      | [0;1;32m                                         
[0m[1mmdel.c:82:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |         if (fatFreeWithDirentry(entry))[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   83 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmdel.c:102:2: [0m[0;1;35mwarning: [0m[1mValue stored to 'r' is never read [clang-analyzer-deadcode.DeadStores][0m
  102 |         r = 0;[0m
      | [0;1;32m        ^   ~
[0m[1mmdel.c:102:2: [0m[0;1;36mnote: [0mValue stored to 'r' is never read[0m
  102 |         r = 0;[0m
      | [0;1;32m        ^   ~
[0m[1mmdel.c:116:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  116 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmdel.c:116:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  116 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmdel.c:119:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  119 |                                         fprintf(stderr," non empty\n");[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmdel.c:119:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  119 |                                         fprintf(stderr," non empty\n");[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmdel.c:128:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  128 |                                 if( ret & ERROR_ONE)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  129 |                                         break;[0m
      | [0;1;32m                                              
[0m[1mmdel.c:134:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  134 |                 if (r == -2)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  135 |                         return ERROR_ONE;[0m
      | [0;1;32m                                         
[0m[1mmdel.c:136:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  136 |                 if(ret)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  137 |                         return ret;[0m
      | [0;1;32m                                   
[0m[1mmdel.c:145:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  145 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdel.c:145:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  145 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdel.c:147:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  147 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdel.c:147:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  147 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdel.c:160:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  161 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmdel.c:165:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  165 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  166 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdel.c:168:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  168 |                                 arg.verbose = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  169 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdel.c:171:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  171 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmdel.c:173:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  173 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmdel.c:177:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  177 |         if(argc == optind)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  178 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmdel.c:187:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  187 |                 mp.lookupflags = ACCEPT_PLAIN; /* mdel */[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  188 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mmdel.c:190:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  190 |                 mp.lookupflags = ACCEPT_DIR; /* mrd */[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  191 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mmdel.c:193:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  193 |                 mp.lookupflags = ACCEPT_DIR | ACCEPT_PLAIN; /* mdeltree */[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  194 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mmdel.c:199:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  199 |                 if(argv[i][0] && argv[i][1] == ':')[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  200 |                         b = 2;[0m
  201 |                 else[0m
      | [0;32m                } 
[0m[1mmdel.c:201:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  201 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  202 |                         b = 0;[0m
      | [0;1;32m                              
[0m[1mmdel.c:204:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  204 |                 if(l > 1 && argv[i][b+l-1] == '/')[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  205 |                         argv[i][b+l-1] = '\0';[0m
      | [0;1;32m                                              
[0m28 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[45/72][38.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpty2akzrn.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/dirCache.c
[1mdirCache.c:71:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   71 |         if(checkOnly)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m   72 |                 return bitmap[entry] & bit;[0m
   73 |         else {[0m
      | [0;32m        } 
[0m[1mdirCache.c:95:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |         if(dce->beginSlot != cache->nrHashed)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m   96 |                 return;[0m
      | [0;1;32m                       
[0m[1mdirCache.c:98:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   98 |         if(dce->longName)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m   99 |                 addNameToHash(cache, dce->longName);[0m
      | [0;1;32m                                                    
[0m[1mdirCache.c:114:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  114 |                 fprintf(stderr, "Bad slot %d\n", slot);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:114:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  114 |                 fprintf(stderr, "Bad slot %d\n", slot);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:124:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  124 |                 if(!cache->entries)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  125 |                         return -1;[0m
      | [0;1;32m                                  
[0m[1mdirCache.c:139:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  139 |                 fprintf(stderr, "Bad slot %d\n", slot);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:139:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  139 |                 fprintf(stderr, "Bad slot %d\n", slot);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:146:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  146 |                 if(!*dcp)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  147 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mdirCache.c:154:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  154 |                 memset( (*dcp)->bm0, 0, sizeof((*dcp)->bm0));[0m
      | [0;1;32m                ^~~~~~
[0m[1mdirCache.c:154:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  154 |                 memset( (*dcp)->bm0, 0, sizeof((*dcp)->bm0));[0m
      | [0;1;32m                ^~~~~~
[0m[1mdirCache.c:155:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  155 |                 memset( (*dcp)->bm1, 0, sizeof((*dcp)->bm1));[0m
      | [0;1;32m                ^~~~~~
[0m[1mdirCache.c:155:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  155 |                 memset( (*dcp)->bm1, 0, sizeof((*dcp)->bm1));[0m
      | [0;1;32m                ^~~~~~
[0m[1mdirCache.c:156:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  156 |                 memset( (*dcp)->bm2, 0, sizeof((*dcp)->bm1));[0m
      | [0;1;32m                ^~~~~~
[0m[1mdirCache.c:156:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  156 |                 memset( (*dcp)->bm2, 0, sizeof((*dcp)->bm1));[0m
      | [0;1;32m                ^~~~~~
[0m[1mdirCache.c:159:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  159 |                 if(growDirCache(*dcp, slot) < 0)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  160 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mdirCache.c:182:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  182 |                 fprintf(stderr, "Bad slots %d %d in free range\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:182:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  182 |                 fprintf(stderr, "Bad slots %d %d in free range\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:197:10: [0m[0;1;35mwarning: [0m[1mUse of memory after it is freed [clang-analyzer-unix.Malloc][0m
  197 |                 assert(entry->beginSlot == beginSlot);[0m
      | [0;1;32m                       ^
[0m[1mdirCache.c:365:5: [0m[0;1;36mnote: [0mAssuming 'cache' is non-null[0m
  365 |         if(cache) {[0m
      | [0;1;32m           ^~~~~
[0m[1mdirCache.c:365:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  365 |         if(cache) {[0m
      | [0;1;32m        ^
[0m[1mdirCache.c:367:5: [0m[0;1;36mnote: [0mCalling 'freeDirCacheRange'[0m
  367 |                 n=freeDirCacheRange(cache, 0, cache->nr_entries);[0m
      | [0;1;32m                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mdirCache.c:181:5: [0m[0;1;36mnote: [0mAssuming 'endSlot' is >= 'beginSlot'[0m
  181 |         if(endSlot < beginSlot) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~
[0m[1mdirCache.c:181:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  181 |         if(endSlot < beginSlot) {[0m
      | [0;1;32m        ^
[0m[1mdirCache.c:187:8: [0m[0;1;36mnote: [0mAssuming 'beginSlot' is < 'endSlot'[0m
  187 |         while(beginSlot < endSlot) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~
[0m[1mdirCache.c:187:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  187 |         while(beginSlot < endSlot) {[0m
      | [0;1;32m        ^
[0m[1mdirCache.c:189:6: [0m[0;1;36mnote: [0mAssuming 'entry' is non-null[0m
  189 |                 if(!entry) {[0m
      | [0;1;32m                   ^~~~~~
[0m[1mdirCache.c:189:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  189 |                 if(!entry) {[0m
      | [0;1;32m                ^
[0m[1mdirCache.c:197:10: [0m[0;1;36mnote: [0mAssuming 'beginSlot' is equal to field 'beginSlot'[0m
  197 |                 assert(entry->beginSlot == beginSlot);[0m
      | [0;1;32m                       ^
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^~~~
[0m[1mdirCache.c:197:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  197 |                 assert(entry->beginSlot == beginSlot);[0m
      | [0;1;32m                ^
[0m[1m/usr/include/assert.h:109:7: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m      ^
[0m[1mdirCache.c:200:6: [0m[0;1;36mnote: [0mAssuming 'clearEnd' is <= 'endSlot'[0m
  200 |                 if(clearEnd > endSlot)[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~
[0m[1mdirCache.c:200:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  200 |                 if(clearEnd > endSlot)[0m
      | [0;1;32m                ^
[0m[1mdirCache.c:204:23: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'clearEnd'[0m
  204 |                 for(i = clearBegin; i <clearEnd; i++)[0m
      | [0;1;32m                                    ^~~~~~~~~~~
[0m[1mdirCache.c:204:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 207[0m
  204 |                 for(i = clearBegin; i <clearEnd; i++)[0m
      | [0;1;32m                ^
[0m[1mdirCache.c:209:13: [0m[0;1;36mnote: [0mField 'beginSlot' is equal to field 'endSlot'[0m
  209 |                 if(entry->beginSlot == entry->endSlot) {[0m
      | [0;1;32m                          ^
[0m[1mdirCache.c:209:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  209 |                 if(entry->beginSlot == entry->endSlot) {[0m
      | [0;1;32m                ^
[0m[1mdirCache.c:211:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  211 |                         if(entry->endMarkPos != -1 &&[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mdirCache.c:211:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  211 |                         if(entry->endMarkPos != -1 &&[0m
      | [0;1;32m                                                   ^
[0m[1mdirCache.c:215:7: [0m[0;1;36mnote: [0mAssuming field 'longName' is null[0m
  215 |                         if(entry->longName)[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~
[0m[1mdirCache.c:215:4: [0m[0;1;36mnote: [0mTaking false branch[0m
  215 |                         if(entry->longName)[0m
      | [0;1;32m                        ^
[0m[1mdirCache.c:217:7: [0m[0;1;36mnote: [0mAssuming field 'shortName' is null[0m
  217 |                         if(entry->shortName)[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~
[0m[1mdirCache.c:217:4: [0m[0;1;36mnote: [0mTaking false branch[0m
  217 |                         if(entry->shortName)[0m
      | [0;1;32m                        ^
[0m[1mdirCache.c:219:4: [0m[0;1;36mnote: [0mMemory is released[0m
  219 |                         free(entry);[0m
      | [0;1;32m                        ^~~~~~~~~~~
[0m[1mdirCache.c:220:7: [0m[0;1;36mnote: [0m'needWriteEnd' is 0[0m
  220 |                         if(needWriteEnd) {[0m
      | [0;1;32m                           ^~~~~~~~~~~~
[0m[1mdirCache.c:220:4: [0m[0;1;36mnote: [0mTaking false branch[0m
  220 |                         if(needWriteEnd) {[0m
      | [0;1;32m                        ^
[0m[1mdirCache.c:187:8: [0m[0;1;36mnote: [0m'beginSlot' is < 'endSlot'[0m
  187 |         while(beginSlot < endSlot) {[0m
      | [0;1;32m              ^~~~~~~~~
[0m[1mdirCache.c:187:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  187 |         while(beginSlot < endSlot) {[0m
      | [0;1;32m        ^
[0m[1mdirCache.c:189:7: [0m[0;1;36mnote: [0m'entry' is non-null[0m
  189 |                 if(!entry) {[0m
      | [0;1;32m                    ^~~~~
[0m[1mdirCache.c:189:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  189 |                 if(!entry) {[0m
      | [0;1;32m                ^
[0m[1mdirCache.c:197:10: [0m[0;1;36mnote: [0mUse of memory after it is freed[0m
  197 |                 assert(entry->beginSlot == beginSlot);[0m
      | [0;1;32m                       ^
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^~~~
[0m[1mdirCache.c:200:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  200 |                 if(clearEnd > endSlot)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  201 |                         clearEnd = endSlot;[0m
      | [0;1;32m                                           
[0m[1mdirCache.c:204:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  204 |                 for(i = clearBegin; i <clearEnd; i++)[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m  205 |                         cache->entries[i] = 0;[0m
      | [0;1;32m                                              
[0m[1mdirCache.c:212:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  212 |                            entry->endMarkPos < (int) beginSlot)[0m
      | [0;1;32m                                                               ^
[0m      | [0;32m                                                                {
[0m  213 |                                 needWriteEnd = 1;[0m
      | [0;1;32m                                                 
[0m[1mdirCache.c:215:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  215 |                         if(entry->longName)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  216 |                                 free(entry->longName);[0m
      | [0;1;32m                                                      
[0m[1mdirCache.c:217:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  217 |                         if(entry->shortName)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  218 |                                 free(entry->shortName);[0m
      | [0;1;32m                                                       
[0m[1mdirCache.c:238:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  238 |         if(growDirCache(cache, endSlot) < 0)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  239 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mdirCache.c:242:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  242 |         if(!entry)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  243 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mdirCache.c:267:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  267 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:267:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  267 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:275:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  275 |         if(!entry)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  276 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mdirCache.c:280:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  280 |         if(longName)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  281 |                 entry->longName = wcsdup(longName);[0m
      | [0;1;32m                                                   
[0m[1mdirCache.c:298:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  298 |         if(slot == 0)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  299 |                 return;[0m
      | [0;1;32m                       
[0m[1mdirCache.c:304:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  304 |                 for(i=next->beginSlot; i < next->endSlot; i++)[0m
      | [0;1;32m                                                              ^
[0m      | [0;32m                                                               {
[0m  305 |                         cache->entries[i] = previous;[0m
      | [0;1;32m                                                     
[0m[1mdirCache.c:321:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  321 |         if(beginSlot < cache->nrHashed)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  322 |                 cache->nrHashed = beginSlot;[0m
      | [0;1;32m                                            
[0m[1mdirCache.c:325:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  325 |                 fprintf(stderr, "Bad slots %d %d in add free entry\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:325:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  325 |                 fprintf(stderr, "Bad slots %d %d in add free entry\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdirCache.c:330:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  330 |         if(endSlot == beginSlot)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  331 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mdirCache.c:333:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  333 |         if(isAtEnd)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  334 |                 entry->endMarkPos = (int) beginSlot;[0m
      | [0;1;32m                                                    
[0m[1mdirCache.c:354:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  354 |         if(growDirCache(cache, pos+1) < 0)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  355 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mdirCache.c:368:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  368 |                 if(n >= 0)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  369 |                         low_level_dir_write_end(Stream, n);[0m
      | [0;1;32m                                                           
[0m33 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[46/72][53.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpy2k0v90e.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mattrib.c
[1mmattrib.c:80:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   80 |         if(IS_ARCHIVE(entry))[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   81 |                 putchar('A');[0m
   82 |         else[0m
      | [0;32m        } 
[0m[1mmattrib.c:82:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   83 |                 putchar(' ');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:85:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |         if(IS_SYSTEM(entry))[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   86 |                 putchar('S');[0m
   87 |         else[0m
      | [0;32m        } 
[0m[1mmattrib.c:87:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   87 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   88 |                 putchar(' ');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:89:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   89 |         if(IS_HIDDEN(entry))[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   90 |                 putchar('H');[0m
   91 |         else[0m
      | [0;32m        } 
[0m[1mmattrib.c:91:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   91 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   92 |                 putchar(' ');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:93:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   93 |         if(IS_READONLY(entry))[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   94 |                 putchar('R');[0m
   95 |         else[0m
      | [0;32m        } 
[0m[1mmattrib.c:95:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   96 |                 putchar(' ');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:108:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  108 |         if(IS_ARCHIVE(entry))[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  109 |                 putchar('A');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:110:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |         if(IS_DIR(entry))[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  111 |                 putchar('D');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:112:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |         if(IS_SYSTEM(entry))[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  113 |                 putchar('S');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:114:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  114 |         if(IS_HIDDEN(entry))[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  115 |                 putchar('H');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:116:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  116 |         if(IS_READONLY(entry))[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  117 |                 putchar('R');[0m
      | [0;1;32m                             
[0m[1mmattrib.c:136:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  136 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmattrib.c:136:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  136 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmattrib.c:138:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  138 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmattrib.c:138:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  138 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmattrib.c:148:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  148 |                         return ATTR_ARCHIVE;[0m
      | [0;1;32m                        ^                  
[0m      | [0;32m                        {                  ;} 
[0m[1mmattrib.c:150:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  150 |                         return ATTR_HIDDEN;[0m
      | [0;1;32m                        ^                 
[0m      | [0;32m                        {                 ;} 
[0m[1mmattrib.c:152:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  152 |                         return ATTR_READONLY;[0m
      | [0;1;32m                        ^                   
[0m      | [0;32m                        {                   ;} 
[0m[1mmattrib.c:154:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  154 |                         return ATTR_SYSTEM;[0m
      | [0;1;32m                        ^                 
[0m      | [0;32m                        {                 ;} 
[0m[1mmattrib.c:156:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  156 |                         usage(1);[0m
      | [0;1;32m                        ^       
[0m      | [0;32m                        {       ;} 
[0m[1mmattrib.c:181:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  181 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  182 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmattrib.c:186:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  186 |                                 wantUsage = 1;[0m
      | [0;1;32m                                ^            
[0m      | [0;32m                                {            ;} 
[0m[1mmattrib.c:189:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  189 |                                 arg.remove &= ~letterToCode(c);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  190 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmattrib.c:192:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  192 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  193 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmattrib.c:195:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  195 |                                 replay = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  196 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmattrib.c:198:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  198 |                                 arg.recursive = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  199 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmattrib.c:201:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  201 |                                 concise = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  202 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmattrib.c:204:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  204 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmattrib.c:215:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  215 |                                 for(ptr = argv[optind] + 1; *ptr; ptr++)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  216 |                                         arg.add |= letterToCode(*ptr);[0m
  217 |                                 continue;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mmattrib.c:215:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  215 |                                 for(ptr = argv[optind] + 1; *ptr; ptr++)[0m
      | [0;1;32m                                                                        ^
[0m      | [0;32m                                                                         {
[0m  216 |                                         arg.add |= letterToCode(*ptr);[0m
      | [0;1;32m                                                                      
[0m[1mmattrib.c:219:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  219 |                                 for(ptr = argv[optind] + 1; *ptr; ptr++)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  220 |                                         arg.remove &= ~letterToCode(*ptr);[0m
  221 |                                 continue;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mmattrib.c:219:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  219 |                                 for(ptr = argv[optind] + 1; *ptr; ptr++)[0m
      | [0;1;32m                                                                        ^
[0m      | [0;32m                                                                         {
[0m  220 |                                         arg.remove &= ~letterToCode(*ptr);[0m
      | [0;1;32m                                                                          
[0m[1mmattrib.c:226:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  226 |         if(arg.remove == 0xff && !arg.add)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  227 |                 view = 1;[0m
      | [0;1;32m                         
[0m[1mmattrib.c:229:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  229 |         if (optind >= argc)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  230 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmattrib.c:241:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  241 |                 } else[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  242 |                         mp.callback = view_attrib;[0m
      | [0;1;32m                                                  
[0m[1mmattrib.c:249:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  249 |         if(arg.recursive)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  250 |                 mp.dirCallback = recursive_attrib;[0m
      | [0;1;32m                                                  
[0m[1mmattrib.c:254:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  254 |         if(arg.recursive)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  255 |                 mp.lookupflags |= DO_OPEN_DIRS | NO_DOTS;[0m
      | [0;1;32m                                                         
[0m39 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[47/72][68.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp7us6se88.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/devices.c
[1mdevices.c:135:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  135 |         if(IS_MFORMAT_ONLY(orig_dev))[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  136 |                 return 0; /* geometry only for mformatting ==> ok */[0m
      | [0;1;32m                                                                    
[0m[1mdevices.c:137:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  137 |         if(!orig_dev || !orig_dev->tracks || !dev || !dev->tracks)[0m
      | [0;1;32m                                                                  ^
[0m      | [0;32m                                                                   {
[0m  138 |                 return 0; /* no original device. This is ok */[0m
      | [0;1;32m                                                              
[0m[1mdevices.c:668:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  668 |         if(!message)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  669 |                 return;[0m
      | [0;1;32m                       
[0m[1mdevices.c:671:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  671 |         fprintf(stderr,"   ");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdevices.c:671:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  671 |         fprintf(stderr,"   ");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdevices.c:672:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  672 |         for (i=0; i< raw_cmd->cmd_count; i++)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  673 |                 fprintf(stderr,"%2.2x ",[0m
  674 |                         (int)raw_cmd->cmd[i] );[0m
      | [0;1;32m                                               
[0m[1mdevices.c:673:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  673 |                 fprintf(stderr,"%2.2x ",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:673:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  673 |                 fprintf(stderr,"%2.2x ",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:675:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  675 |         fprintf(stderr,"\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdevices.c:675:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  675 |         fprintf(stderr,"\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdevices.c:676:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  676 |         for (i=0; i< raw_cmd->reply_count; i++)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  677 |                 fprintf(stderr,"%2.2x ",[0m
  678 |                         (int)raw_cmd->reply[i] );[0m
      | [0;1;32m                                                 
[0m[1mdevices.c:677:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  677 |                 fprintf(stderr,"%2.2x ",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:677:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  677 |                 fprintf(stderr,"%2.2x ",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:679:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  679 |         fprintf(stderr,"\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdevices.c:679:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  679 |         fprintf(stderr,"\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mdevices.c:684:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  684 |                 if ((code & (1 << i)) && error_msg[i])[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m  685 |                         fprintf(stderr,"%s\n",[0m
  686 |                                 error_msg[i]);[0m
      | [0;1;32m                                              
[0m[1mdevices.c:685:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  685 |                         fprintf(stderr,"%s\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:685:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  685 |                         fprintf(stderr,"%s\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:701:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  701 |                         fprintf(stderr,"Short reply from FDC\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:701:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  701 |                         fprintf(stderr,"Short reply from FDC\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:709:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  709 |                         fprintf(stderr, "FDC busy, sleeping for a second\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:709:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  709 |                         fprintf(stderr, "FDC busy, sleeping for a second\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:709:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  709 |                         fprintf(stderr, "FDC busy, sleeping for a second\n");[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  710 |                         sleep(1);[0m
  711 |                         return 1;[0m
      | [0;1;32m                                
[0m      | [0;32m                                ;} 
[0m[1mdevices.c:713:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  713 |                         fprintf(stderr,"resetting controller\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:713:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  713 |                         fprintf(stderr,"resetting controller\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:713:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  713 |                         fprintf(stderr,"resetting controller\n");[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  714 |                         if(ioctl(fd, FDRESET, 2)  < 0){[0m
  715 |                                 perror("reset");[0m
  716 |                                 return -1;[0m
  717 |                         }[0m
  718 |                         return 1;[0m
      | [0;1;32m                                
[0m      | [0;32m                                ;} 
[0m[1mdevices.c:720:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  720 |                         perror(message);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  721 |                         return -1;[0m
      | [0;1;32m                                 
[0m      | [0;32m                                 ;} 
[0m[1mdevices.c:749:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  749 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  750 |                 *bytes = 0;[0m
      | [0;1;32m                           
[0m[1mdevices.c:754:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  754 |                         if ((raw_cmd->reply[0] & 0x38) == 0 &&[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  755 |                             (raw_cmd->reply[1]) == 0x80 &&[0m
  756 |                             (raw_cmd->reply[2]) == 0) {[0m
  757 |                                 *bytes += 1 << (7 + raw_cmd->cmd[5]);[0m
  758 |                                 break;[0m
  759 |                         }[0m
  760 | [0m
  761 |                         if ( raw_cmd->reply[1] & ST1_WP ){[0m
  762 |                                 *bytes = 0;[0m
  763 |                                 fprintf(stderr,[0m
  764 |                                         "This disk is write protected\n");[0m
  765 |                                 return -1;[0m
  766 |                         }[0m
  767 |                         if(!*bytes && do_print)[0m
  768 |                                 print_message(raw_cmd, "");[0m
  769 |                         return -1;[0m
      | [0;1;32m                                 
[0m      | [0;32m                                 ;} 
[0m[1mdevices.c:763:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  763 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mdevices.c:763:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  763 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mdevices.c:767:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  767 |                         if(!*bytes && do_print)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  768 |                                 print_message(raw_cmd, "");[0m
      | [0;1;32m                                                           
[0m[1mdevices.c:771:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  771 |                         *bytes = 0;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  772 |                         fprintf(stderr,[0m
  773 |                                 "invalid command given\n");[0m
  774 |                         return -1;[0m
      | [0;1;32m                                 
[0m      | [0;32m                                 ;} 
[0m[1mdevices.c:772:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  772 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:772:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  772 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:776:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  776 |                         *bytes = 0;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  777 |                         fprintf(stderr,[0m
  778 |                                 "abnormal termination caused by polling\n");[0m
  779 |                         return -1;[0m
      | [0;1;32m                                 
[0m      | [0;32m                                 ;} 
[0m[1mdevices.c:777:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  777 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:777:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  777 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:781:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  781 |                         break;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mdevices.c:784:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  784 |         if(raw_cmd->flags & FD_RAW_MORE)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  785 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mdevices.c:823:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  823 |         if (value & 0x7f)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  824 |                 v = FD_2M;[0m
  825 |         else[0m
      | [0;32m        } 
[0m[1mdevices.c:825:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  825 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  826 |                 v = 0;[0m
      | [0;1;32m                      
[0m[1mdevices.c:843:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  843 |         if ( ( MINOR(buf->st_rdev ) & 0x7f ) > 3 )[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  844 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mdevices.c:860:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  860 |                 fprintf(stderr, "Too many sectors for FAT %8lx\n",raw_sect);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:860:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  860 |                 fprintf(stderr, "Too many sectors for FAT %8lx\n",raw_sect);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:869:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  869 |                 fprintf(stderr, "Could not get sector size of device (%s)",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:869:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  869 |                 fprintf(stderr, "Could not get sector size of device (%s)",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:875:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  875 |         if(sec_size > 4096)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  876 |                 sec_size = 4096;[0m
      | [0;1;32m                                
[0m[1mdevices.c:889:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  889 |                 fprintf(stderr, "Could not get geometry of device (%s)",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:889:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  889 |                 fprintf(stderr, "Could not get geometry of device (%s)",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:895:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  895 |                 fprintf(stderr, "Could not get size of device (%s)",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:895:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  895 |                 fprintf(stderr, "Could not get size of device (%s)",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mdevices.c:901:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  901 |         if(sec_size < 0)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  902 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mdevices.c:905:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  905 |         while (dev->ssize < 0x7F && (128 << dev->ssize) < sec_size)[0m
      | [0;1;32m                                                                   ^
[0m      | [0;32m                                                                    {
[0m  906 |                 dev->ssize++;[0m
      | [0;1;32m                             
[0m[1mdevices.c:908:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  908 |         if(!heads)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  909 |                 heads = geom.heads;[0m
      | [0;1;32m                                   
[0m[1mdevices.c:910:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  910 |         if(!sectors)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  911 |                 sectors = geom.sectors;[0m
      | [0;1;32m                                       
[0m[1mdevices.c:918:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  918 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:918:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  918 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mdevices.c:927:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  927 |         if(!dev->tracks)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  928 |                 dev->tracks = ulong_to_sectors((size + dev->hidden % sect_per_track) / sect_per_track);[0m
      | [0;1;32m                                                                                                       
[0m[1mdevices.c:1103:5: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1103 |                 ))[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m 1104 |                 return compare_geom(dev, orig_dev);[0m
      | [0;1;32m                                                   
[0m[1mdevices.c:1113:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1113 |         if (get_parameters( fd, & floppy ) )[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m[1mdevices.c:1144:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1144 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m 1145 |                 dev->sectors = (uint16_t) SECTORS(floppy);[0m
      | [0;1;32m                                                          
[0m[1mdevices.c:1150:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1150 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m 1151 |                 dev->heads = (uint16_t) HEADS(floppy);[0m
      | [0;1;32m                                                      
[0m[1mdevices.c:1156:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1156 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m 1157 |                 dev->tracks = TRACKS(floppy);[0m
      | [0;1;32m                                             
[0m[1mdevices.c:1163:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1163 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m 1164 |                 dev->use_2m = USE_2M(floppy);[0m
      | [0;1;32m                                             
[0m[1mdevices.c:1166:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1166 |         if( ! (dev->ssize & 0x80) )[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m 1167 |                 dev->ssize = 0;[0m
      | [0;1;32m                               
[0m[1mdevices.c:1171:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1171 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m 1172 |                 dev->ssize = SSIZE(floppy);[0m
      | [0;1;32m                                           
[0m[1mdevices.c:1174:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1174 |         if(!change)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m 1175 |                 /* no change, succeed */[0m
 1176 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mdevices.c:1188:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1188 |         if ( dev->tracks > 41 )[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m 1189 |                 STRETCH(floppy) = 0;[0m
 1190 |         else[0m
      | [0;32m        } 
[0m[1mdevices.c:1190:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1190 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m 1191 |                 STRETCH(floppy) = 1;[0m
      | [0;1;32m                                    
[0m59 warnings generated.
Suppressed 6 warnings (6 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[48/72][77.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp3tut2bgw.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mcopy.c
[1mmcopy.c:96:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |         if(!ret)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   97 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmcopy.c:98:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   98 |         strcpy(ret, arg->unixTarget);[0m
      | [0;1;32m        ^~~~~~
[0m[1mmcopy.c:98:2: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
   98 |         strcpy(ret, arg->unixTarget);[0m
      | [0;1;32m        ^~~~~~
[0m[1mmcopy.c:99:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   99 |         strcat(ret, "/");[0m
      | [0;1;32m        ^~~~~~
[0m[1mmcopy.c:99:2: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
   99 |         strcat(ret, "/");[0m
      | [0;1;32m        ^~~~~~
[0m[1mmcopy.c:107:5: [0m[0;1;35mwarning: [0m[1mCall to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  107 |                   strncat(ret, target, ptrdiff(tmp,target));[0m
      | [0;1;32m                  ^~~~~~~
[0m[1mmcopy.c:107:5: [0m[0;1;36mnote: [0mCall to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11[0m
  107 |                   strncat(ret, target, ptrdiff(tmp,target));[0m
      | [0;1;32m                  ^~~~~~~
[0m[1mmcopy.c:108:5: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  108 |                   strcat(ret, "\\");[0m
      | [0;1;32m                  ^~~~~~
[0m[1mmcopy.c:108:5: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  108 |                   strcat(ret, "\\");[0m
      | [0;1;32m                  ^~~~~~
[0m[1mmcopy.c:111:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  111 |                 strcat(ret, target);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmcopy.c:111:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  111 |                 strcat(ret, target);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmcopy.c:125:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  125 |         if(stat(name, &buf) < 0)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  126 |                 return -1;[0m
  127 |         else[0m
      | [0;32m        } 
[0m[1mmcopy.c:127:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  127 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  128 |                 return 1 && S_ISDIR(buf.st_mode);[0m
      | [0;1;32m                                                 
[0m[1mmcopy.c:139:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  139 |                         return ERROR_ONE;[0m
      | [0;1;32m                        ^               
[0m      | [0;32m                        {               ;} 
[0m[1mmcopy.c:141:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  141 |                         break;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mmcopy.c:143:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  143 |                         return GOT_ONE;[0m
      | [0;1;32m                        ^             
[0m      | [0;32m                        {             ;} 
[0m[1mmcopy.c:145:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  145 |         } else if(errno != ENOENT)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  146 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmcopy.c:162:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  162 |         if(in[0] && in[1] == ':' )[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  163 |                 return dos_target_lookup(&arg->mp, in);[0m
  164 |         else[0m
      | [0;32m        } 
[0m[1mmcopy.c:164:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  164 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  165 |                 return unix_target_lookup(arg, in);[0m
      | [0;1;32m                                                   
[0m[1mmcopy.c:175:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  175 |         if(arg->type)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  176 |                 return _unix_write(mp, needfilter, "-");[0m
  177 |         else {[0m
      | [0;32m        } 
[0m[1mmcopy.c:203:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  203 |         if (!arg->preserveTime)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  204 |                 mtime = 0L;[0m
      | [0;1;32m                           
[0m[1mmcopy.c:210:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  210 |                                 fprintf(stderr, "File \"%s\" exists. To overwrite, try again, and explicitly specify target directory\n",unixFile);[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmcopy.c:210:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  210 |                                 fprintf(stderr, "File \"%s\" exists. To overwrite, try again, and explicitly specify target directory\n",unixFile);[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmcopy.c:219:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  219 |                                         fprintf(stderr,"\"%s\" is not a regular file\n",[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmcopy.c:219:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  219 |                                         fprintf(stderr,"\"%s\" is not a regular file\n",[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmcopy.c:229:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  229 |                                         fprintf(stderr, "Attempt to copy file on itself\n");[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmcopy.c:229:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  229 |                                         fprintf(stderr, "Attempt to copy file on itself\n");[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmcopy.c:243:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  243 |                 fprintf(stderr,"Copying ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:243:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  243 |                 fprintf(stderr,"Copying ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:245:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  245 |                 fprintf(stderr,"\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:245:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  245 |                 fprintf(stderr,"\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:257:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  257 |                 if(needfilter && arg->textmode)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  258 |                         Source = open_dos2unix(Source,arg->convertCharset);[0m
      | [0;1;32m                                                                           
[0m[1mmcopy.c:260:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  260 |                 if (Source)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  261 |                         ret = copyfile(Source, Target);[0m
  262 |                 else[0m
      | [0;32m                } 
[0m[1mmcopy.c:262:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  262 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  263 |                         ret = -1;[0m
      | [0;1;32m                                 
[0m[1mmcopy.c:267:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  267 |                         if(!arg->type)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  268 |                                 unlink(unixFile);[0m
      | [0;1;32m                                                 
[0m[1mmcopy.c:271:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  271 |                 if(!arg->type)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  272 |                         set_mtime(unixFile, mtime);[0m
      | [0;1;32m                                                   
[0m[1mmcopy.c:275:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  275 |                 fprintf(stderr,"%s\n", errmsg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:275:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  275 |                 fprintf(stderr,"%s\n", errmsg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:286:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  286 |                  ))[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  287 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmcopy.c:290:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  290 |                 if(MT_STAT(filename, &buf) < 0)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  291 |                         return -1;[0m
      | [0;1;32m                                  
[0m[1mmcopy.c:292:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  292 |                 if(S_ISDIR(buf.st_mode))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  293 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mmcopy.c:308:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  308 |         if (!arg->recursive && mp->basenameHasWildcard)[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  309 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmcopy.c:312:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  312 |         if (!arg->preserveTime)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  313 |                 mtime = 0L;[0m
      | [0;1;32m                           
[0m[1mmcopy.c:315:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  315 |                 fprintf(stderr,"Copying ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:315:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  315 |                 fprintf(stderr,"Copying ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:317:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  317 |                 fprintf(stderr, "\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:317:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  317 |                 fprintf(stderr, "\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:319:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  319 |         if(got_signal)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  320 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmcopy.c:340:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  340 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:340:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  340 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:386:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  386 |                 fprintf(stderr, "Can't stat source file\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:386:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  386 |                 fprintf(stderr, "Can't stat source file\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:391:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  391 |                 fprintf(stderr, "File \"%s\" too big\n", longname);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:391:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  391 |                 fprintf(stderr, "File \"%s\" too big\n", longname);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:396:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  396 |                 if (arg->verbose)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  397 |                         fprintf(stderr, "\"%s\" is a directory\n", longname);[0m
      | [0;1;32m                                                                             
[0m[1mmcopy.c:397:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  397 |                         fprintf(stderr, "\"%s\" is a directory\n", longname);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmcopy.c:397:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  397 |                         fprintf(stderr, "\"%s\" is a directory\n", longname);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmcopy.c:402:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  402 |         if(arg->verbose)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  403 |                 fprintf(stderr,"Copying %s\n", longname);[0m
      | [0;1;32m                                                         
[0m[1mmcopy.c:403:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  403 |                 fprintf(stderr,"Copying %s\n", longname);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:403:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  403 |                 fprintf(stderr,"Copying %s\n", longname);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:404:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  404 |         if(got_signal)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  405 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mmcopy.c:408:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  408 |         if (!getfreeMinBytes(arg->mp.targetDir, filesize))[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m  409 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mmcopy.c:412:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  412 |         if (arg->preserveTime)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  413 |                 now = date;[0m
  414 |         else[0m
      | [0;32m        } 
[0m[1mmcopy.c:414:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  414 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  415 |                 getTimeNow(&now);[0m
      | [0;1;32m                                 
[0m[1mmcopy.c:421:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  421 |                 fprintf(stderr,"Could not open Target\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:421:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  421 |                 fprintf(stderr,"Could not open Target\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:451:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  451 |         if(entry && arg->preserveAttributes)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  452 |                 arg->attr = entry->dir.attr;[0m
  453 |         else[0m
      | [0;32m        } 
[0m[1mmcopy.c:453:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  453 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  454 |                 arg->attr = ATTR_ARCHIVE;[0m
      | [0;1;32m                                         
[0m[1mmcopy.c:466:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  466 |         if(result == 1)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  467 |                 return GOT_ONE;[0m
  468 |         else[0m
      | [0;32m        } 
[0m[1mmcopy.c:468:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  468 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  469 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmcopy.c:479:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  479 |                 return OpenFileByDirentry(&entry);[0m
      | [0;1;32m                ^                                
[0m      | [0;32m                {                                ;} 
[0m[1mmcopy.c:481:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  481 |                 return NULL;[0m
      | [0;1;32m                ^          
[0m      | [0;32m                {          ;} 
[0m[1mmcopy.c:483:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  483 |                 return NULL;[0m
      | [0;1;32m                ^          
[0m      | [0;32m                {          ;} 
[0m[1mmcopy.c:497:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  497 |         if (!arg->recursive && mp->basenameHasWildcard)[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  498 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmcopy.c:501:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  501 |                 fprintf(stderr, "Cannot recursively copy directory ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:501:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  501 |                 fprintf(stderr, "Cannot recursively copy directory ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:503:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  503 |                 fprintf(stderr, " into one of its own subdirectories ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:503:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  503 |                 fprintf(stderr, " into one of its own subdirectories ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:505:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  505 |                 fprintf(stderr, "\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:505:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  505 |                 fprintf(stderr, "\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:511:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  511 |                 fprintf(stderr, "Can't stat source file\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:511:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  511 |                 fprintf(stderr, "Can't stat source file\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:515:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  515 |         if(!arg->type && arg->verbose)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  516 |                 fprintf(stderr,"Copying %s\n", mpGetBasename(mp));[0m
      | [0;1;32m                                                                  
[0m[1mmcopy.c:516:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  516 |                 fprintf(stderr,"Copying %s\n", mpGetBasename(mp));[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:516:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  516 |                 fprintf(stderr,"Copying %s\n", mpGetBasename(mp));[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmcopy.c:518:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  518 |         if(entry && arg->preserveAttributes)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  519 |                 arg->attr = entry->dir.attr;[0m
  520 |         else[0m
      | [0;32m        } 
[0m[1mmcopy.c:520:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  520 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  521 |                 arg->attr = 0;[0m
      | [0;1;32m                              
[0m[1mmcopy.c:532:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  532 |         if (arg->preserveTime)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  533 |                 now = date;[0m
  534 |         else[0m
      | [0;32m        } 
[0m[1mmcopy.c:534:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  534 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  535 |                 getTimeNow(&now);[0m
      | [0;1;32m                                 
[0m[1mmcopy.c:544:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  544 |                 if(!newArg.mp.targetDir)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  545 |                         newArg.mp.targetDir = createDir(mp->targetDir,[0m
  546 |                                                         targetName,[0m
  547 |                                                         &arg->ch, arg->attr,[0m
  548 |                                                         now);[0m
      | [0;1;32m                                                             
[0m[1mmcopy.c:549:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  549 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  550 |                 newArg.mp.targetDir = mp->targetDir;[0m
      | [0;1;32m                                                    
[0m[1mmcopy.c:552:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  552 |         if(!newArg.mp.targetDir)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  553 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmcopy.c:556:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  556 |         if(*targetName)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  557 |                 FREE(&newArg.mp.targetDir);[0m
      | [0;1;32m                                           
[0m[1mmcopy.c:575:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  575 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcopy.c:575:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  575 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcopy.c:577:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  577 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcopy.c:577:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  577 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcopy.c:579:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  579 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcopy.c:579:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  579 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcopy.c:606:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  606 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  607 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmcopy.c:611:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  611 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  612 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmcopy.c:616:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  616 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mmcopy.c:618:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  618 |                                 arg.preserveAttributes = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  619 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmcopy.c:621:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  621 |                                 arg.convertCharset = 1;[0m
      | [0;1;32m                                ^                     
[0m      | [0;32m                                {                     ;} 
[0m[1mmcopy.c:626:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  626 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mmcopy.c:628:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  628 |                                 arg.nowarn = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  629 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmcopy.c:631:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  631 |                                 arg.preserveTime = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  632 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmcopy.c:634:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  634 |                                 arg.verbose = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  635 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmcopy.c:637:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  637 |                                 fastquit = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  638 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmcopy.c:642:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  642 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mmcopy.c:644:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  644 |                                 handle_clash_options(&arg.ch, c);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  645 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmcopy.c:647:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  647 |                                 if(handle_clash_options(&arg.ch, *optarg))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  648 |                                         usage(1);[0m
  649 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmcopy.c:647:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  647 |                                 if(handle_clash_options(&arg.ch, *optarg))[0m
      | [0;1;32m                                                                          ^
[0m      | [0;32m                                                                           {
[0m  648 |                                         usage(1);[0m
      | [0;1;32m                                                 
[0m[1mmcopy.c:651:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  651 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmcopy.c:653:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  653 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmcopy.c:655:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  655 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mmcopy.c:660:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  660 |         if (argc - optind < 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  661 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmcopy.c:698:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  698 |                         fprintf(stderr,"%s: %s\n", target, strerror(errno));[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmcopy.c:698:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  698 |                         fprintf(stderr,"%s: %s\n", target, strerror(errno));[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmcopy.c:703:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  703 |                         fprintf(stderr,"Bad target %s\n", target);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmcopy.c:703:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  703 |                         fprintf(stderr,"Bad target %s\n", target);[0m
      | [0;1;32m                        ^~~~~~~
[0m94 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[49/72][51.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpjklx8q94.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mdoctorfat.c
[1mmdoctorfat.c:51:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |                 if(arg->setsize)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   52 |                         set_dword(entry->dir.size, arg->size);[0m
      | [0;1;32m                                                              
[0m[1mmdoctorfat.c:61:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   61 |         fprintf(stderr,"File does not reside on a Dos fs\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdoctorfat.c:61:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   61 |         fprintf(stderr,"File does not reside on a Dos fs\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdoctorfat.c:68:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   68 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdoctorfat.c:68:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   68 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdoctorfat.c:70:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   70 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdoctorfat.c:70:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   70 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdoctorfat.c:96:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   96 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   97 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmdoctorfat.c:103:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  103 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  104 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdoctorfat.c:106:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  106 |                                 arg.markbad = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  107 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdoctorfat.c:109:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  109 |                                 offset = strtoui(optarg,&endptr,0);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  110 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdoctorfat.c:112:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  112 |                                 arg.setsize=1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  113 |                                 arg.size = strtou32(optarg,&endptr,0);[0m
  114 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdoctorfat.c:116:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  116 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmdoctorfat.c:118:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  118 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmdoctorfat.c:123:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  123 |         if (argc - optind < 2)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  124 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmdoctorfat.c:138:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  138 |         if(ret)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  139 |                 exit(ret);[0m
      | [0;1;32m                          
[0m[1mmdoctorfat.c:155:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  155 |                         fprintf(stderr, "Not a number: %s\n", number);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmdoctorfat.c:155:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  155 |                         fprintf(stderr, "Not a number: %s\n", number);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmdoctorfat.c:163:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  163 |                         fprintf(stderr, "Not a number: %s\n", eptr);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmdoctorfat.c:163:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  163 |                         fprintf(stderr, "Not a number: %s\n", eptr);[0m
      | [0;1;32m                        ^~~~~~~
[0m17 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[50/72][91.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp_cv8b_wp.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mcat.c
[1mmcat.c:29:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   29 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:29:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   29 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:31:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   31 |         fprintf(stderr, "Usage: mcat [-V] [-w] device\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:31:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   31 |         fprintf(stderr, "Usage: mcat [-V] [-w] device\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:32:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   32 |         fprintf(stderr, "       -w write on device else read\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:32:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   32 |         fprintf(stderr, "       -w write on device else read\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:44:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   44 |         if(totalSize == 0)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   45 |                 return blocksize;[0m
      | [0;1;32m                                 
[0m[1mmcat.c:46:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   46 |         if((mt_off_t) blocksize > totalSize - address)[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m   47 |                 return (size_t) (totalSize - address);[0m
      | [0;1;32m                                                      
[0m[1mmcat.c:76:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   76 |                         mode = O_WRONLY;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m   77 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmcat.c:79:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   79 |                         set_cmd_line_image(optarg);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m   80 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmcat.c:82:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   82 |                         usage();[0m
      | [0;1;32m                        ^      
[0m      | [0;32m                        {      ;} 
[0m[1mmcat.c:86:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   86 |         if (argc - optind > 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   87 |                 usage();[0m
      | [0;1;32m                        
[0m[1mmcat.c:89:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   89 |                 if(!argv[optind][0] || argv[optind][1] != ':')[0m
      | [0;1;32m                                                              ^
[0m      | [0;32m                                                               {
[0m   90 |                         usage();[0m
      | [0;1;32m                                
[0m[1mmcat.c:97:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   97 |         sprintf(errmsg, "Drive '%c:' not supported", drive);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:97:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   97 |         sprintf(errmsg, "Drive '%c:' not supported", drive);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:101:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  101 |                 if (dev->drive != drive)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  102 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmcat.c:112:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |                 if( !Stream)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  113 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmcat.c:118:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  118 |         if ( dev->drive == 0 )[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  119 |                 goto exit_1;[0m
      | [0;1;32m                            
[0m[1mmcat.c:126:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  126 |                                         maxSize, 512, errmsg))[0m
      | [0;1;32m                                                              ^
[0m      | [0;32m                                                               {
[0m  127 |                         goto exit_1;[0m
      | [0;1;32m                                    
[0m[1mmcat.c:132:16: [0m[0;1;35mwarning: [0m[1mAccess to field 'Class' results in a dereference of a null pointer (loaded from variable 'Stream') [clang-analyzer-core.NullDereference][0m
  132 |                         ssize_t r = PWRITES(Stream, buf, address, len);[0m
      | [0;1;32m                                    ^
[0m[1m./stream.h:61:2: [0m[0;1;36mnote: [0mexpanded from macro 'PWRITES'[0m
   61 | ((stream)->Class->pwrite)( (stream), (char *) (buf), (address), (size) )[0m
      | [0;1;32m ^~~~~~~
[0m[1mmcat.c:69:6: [0m[0;1;36mnote: [0mAssuming 'argc' is >= 2[0m
   69 |         if (argc < 2) {[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmcat.c:69:2: [0m[0;1;36mnote: [0mTaking false branch[0m
   69 |         if (argc < 2) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:73:9: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
   73 |         while ((c = getopt(argc,argv, "wi:"))!= EOF) {[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmcat.c:73:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
   73 |         while ((c = getopt(argc,argv, "wi:"))!= EOF) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:74:3: [0m[0;1;36mnote: [0mControl jumps to 'case 119:'  at line 75[0m
   74 |                 switch (c) {[0m
      | [0;1;32m                ^
[0m[1mmcat.c:77:4: [0m[0;1;36mnote: [0m Execution continues on line 73[0m
   77 |                         break;[0m
      | [0;1;32m                        ^
[0m[1mmcat.c:73:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   73 |         while ((c = getopt(argc,argv, "wi:"))!= EOF) {[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmcat.c:73:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 86[0m
   73 |         while ((c = getopt(argc,argv, "wi:"))!= EOF) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:86:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   86 |         if (argc - optind > 1)[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~
[0m[1mmcat.c:86:2: [0m[0;1;36mnote: [0mTaking false branch[0m
   86 |         if (argc - optind > 1)[0m
      | [0;1;32m        ^
[0m[1mmcat.c:88:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   88 |         if(argc - optind == 1) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmcat.c:88:2: [0m[0;1;36mnote: [0mTaking false branch[0m
   88 |         if(argc - optind == 1) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:98:9: [0m[0;1;36mnote: [0mNull pointer value stored to 'Stream'[0m
   98 |         Stream = NULL;[0m
      | [0;1;32m        ^~~~~~~~~~~~~
[0m[1mmcat.c:99:9: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 118[0m
   99 |         for (dev=devices; dev->name; dev++) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:118:14: [0m[0;1;36mnote: [0mAssuming field 'drive' is not equal to 0[0m
  118 |         if ( dev->drive == 0 )[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~
[0m[1mmcat.c:118:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  118 |         if ( dev->drive == 0 )[0m
      | [0;1;32m        ^
[0m[1mmcat.c:121:6: [0m[0;1;36mnote: [0m'mode' is equal to O_WRONLY[0m
  121 |         if (mode == O_WRONLY) {[0m
      | [0;1;32m            ^~~~
[0m[1mmcat.c:121:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  121 |         if (mode == O_WRONLY) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:124:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  124 |                 if(chs_to_totsectors(&out_dev, errmsg) < 0 ||[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmcat.c:124:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mmcat.c:125:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  125 |                    check_if_sectors_fit(out_dev.tot_sectors,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  126 |                                         maxSize, 512, errmsg))[0m
      | [0;1;32m                                        ~~~~~~~~~~~~~~~~~~~~~
[0m[1mmcat.c:124:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  124 |                 if(chs_to_totsectors(&out_dev, errmsg) < 0 ||[0m
      | [0;1;32m                ^
[0m[1mmcat.c:129:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  129 |                 while ((len = fread(buf, 1,[0m
      | [0;1;32m                ^
[0m[1mmcat.c:132:16: [0m[0;1;36mnote: [0mAccess to field 'Class' results in a dereference of a null pointer (loaded from variable 'Stream')[0m
  132 |                         ssize_t r = PWRITES(Stream, buf, address, len);[0m
      | [0;1;32m                                    ^
[0m[1m./stream.h:61:2: [0m[0;1;36mnote: [0mexpanded from macro 'PWRITES'[0m
   61 | ((stream)->Class->pwrite)( (stream), (char *) (buf), (address), (size) )[0m
      | [0;1;32m ^~~~~~~
[0m[1mmcat.c:133:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  133 |                         fprintf(stderr, "Wrote to %d\n", (int) address);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmcat.c:133:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  133 |                         fprintf(stderr, "Wrote to %d\n", (int) address);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmcat.c:134:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  134 |                         if(r < 0)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  135 |                                 break;[0m
      | [0;1;32m                                      
[0m[1mmcat.c:140:17: [0m[0;1;35mwarning: [0m[1mAccess to field 'Class' results in a dereference of a null pointer (loaded from variable 'Stream') [clang-analyzer-core.NullDereference][0m
  140 |                 while ((len = PREADS(Stream, buf, address, BUF_SIZE)) > 0) {[0m
      | [0;1;32m                              ^
[0m[1m./stream.h:58:2: [0m[0;1;36mnote: [0mexpanded from macro 'PREADS'[0m
   58 | ((stream)->Class->pread)( (stream), (char *) (buf), (address), (size) )[0m
      | [0;1;32m ^~~~~~~
[0m[1mmcat.c:69:6: [0m[0;1;36mnote: [0mAssuming 'argc' is >= 2[0m
   69 |         if (argc < 2) {[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmcat.c:69:2: [0m[0;1;36mnote: [0mTaking false branch[0m
   69 |         if (argc < 2) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:73:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   73 |         while ((c = getopt(argc,argv, "wi:"))!= EOF) {[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmcat.c:73:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 86[0m
   73 |         while ((c = getopt(argc,argv, "wi:"))!= EOF) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:86:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   86 |         if (argc - optind > 1)[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~
[0m[1mmcat.c:86:2: [0m[0;1;36mnote: [0mTaking false branch[0m
   86 |         if (argc - optind > 1)[0m
      | [0;1;32m        ^
[0m[1mmcat.c:88:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   88 |         if(argc - optind == 1) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmcat.c:88:2: [0m[0;1;36mnote: [0mTaking false branch[0m
   88 |         if(argc - optind == 1) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:98:9: [0m[0;1;36mnote: [0mNull pointer value stored to 'Stream'[0m
   98 |         Stream = NULL;[0m
      | [0;1;32m        ^~~~~~~~~~~~~
[0m[1mmcat.c:99:9: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 118[0m
   99 |         for (dev=devices; dev->name; dev++) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:118:14: [0m[0;1;36mnote: [0mAssuming field 'drive' is not equal to 0[0m
  118 |         if ( dev->drive == 0 )[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~
[0m[1mmcat.c:118:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  118 |         if ( dev->drive == 0 )[0m
      | [0;1;32m        ^
[0m[1mmcat.c:121:6: [0m[0;1;36mnote: [0m'mode' is not equal to O_WRONLY[0m
  121 |         if (mode == O_WRONLY) {[0m
      | [0;1;32m            ^~~~
[0m[1mmcat.c:121:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  121 |         if (mode == O_WRONLY) {[0m
      | [0;1;32m        ^
[0m[1mmcat.c:140:17: [0m[0;1;36mnote: [0mAccess to field 'Class' results in a dereference of a null pointer (loaded from variable 'Stream')[0m
  140 |                 while ((len = PREADS(Stream, buf, address, BUF_SIZE)) > 0) {[0m
      | [0;1;32m                              ^
[0m[1m./stream.h:58:2: [0m[0;1;36mnote: [0mexpanded from macro 'PREADS'[0m
   58 | ((stream)->Class->pread)( (stream), (char *) (buf), (address), (size) )[0m
      | [0;1;32m ^~~~~~~
[0m[1mmcat.c:150:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  150 |         fprintf(stderr,"%s\n",errmsg);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmcat.c:150:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  150 |         fprintf(stderr,"%s\n",errmsg);[0m
      | [0;1;32m        ^~~~~~~
[0m22 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[51/72][92.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpae31mpsh.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/minfo.c
[1mminfo.c:30:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   30 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mminfo.c:30:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   30 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mminfo.c:32:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   32 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mminfo.c:32:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   32 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mminfo.c:42:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   42 |         if(BOOT_WORD(ext.fat32.infoSector) == MAX16)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m   43 |                 return;[0m
      | [0;1;32m                       
[0m[1mminfo.c:51:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |         if(DWORD(infosec->count) != MAX32)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m   52 |                 printf("free clusters=%u\n", DWORD(infosec->count));[0m
      | [0;1;32m                                                                    
[0m[1mminfo.c:53:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |         if(DWORD(infosec->pos) != MAX32)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m   54 |                 printf("last allocated cluster=%u\n", DWORD(infosec->pos));[0m
      | [0;1;32m                                                                           
[0m[1mminfo.c:82:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |         if(!BOOT_WORD(psect))[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   83 |                 printf("big size: %u sectors\n", BOOT_DWORD(bigsect));[0m
      | [0;1;32m                                                                      
[0m[1mminfo.c:115:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  115 |                 if(BOOT_WORD(ext.fat32.infoSector) != MAX16)[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m  116 |                         printf("infoSector location=%d\n",[0m
  117 |                                BOOT_WORD(ext.fat32.infoSector));[0m
      | [0;1;32m                                                                
[0m[1mminfo.c:118:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  118 |                 if(BOOT_WORD(ext.fat32.backupBoot) != MAX16)[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m  119 |                         printf("backup boot sector=%d\n",[0m
  120 |                                BOOT_WORD(ext.fat32.backupBoot));[0m
      | [0;1;32m                                                                
[0m[1mminfo.c:151:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  151 |         if(sect_per_track == 0)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  152 |                 return;[0m
      | [0;1;32m                       
[0m[1mminfo.c:157:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  157 |         if(tot_sectors == 0)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  158 |                 return;[0m
      | [0;1;32m                       
[0m[1mminfo.c:163:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  163 |                 if(media == 0xf0)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  164 |                         hidden = getHidden(boot);[0m
  165 |                 else[0m
      | [0;32m                } 
[0m[1mminfo.c:165:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  165 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  166 |                         hidden = 0;[0m
      | [0;1;32m                                   
[0m[1mminfo.c:181:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  181 |         if(haveBPB && (hidden || !tracks_match))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  182 |                 printf("-H %d ", hidden);[0m
      | [0;1;32m                                         
[0m[1mminfo.c:233:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  233 |         if((media & 0xff) != (tryMedia & 0xff))[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  234 |                 printf("-m %d ", (media & 0xff));[0m
      | [0;1;32m                                                 
[0m[1mminfo.c:237:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  237 |                 if(actual.backupBoot != tryFs.backupBoot)[0m
      | [0;1;32m                                                         ^
[0m      | [0;32m                                                          {
[0m  238 |                         printf("-K %d ", actual.backupBoot);[0m
      | [0;1;32m                                                            
[0m[1mminfo.c:241:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  241 |         if(imgFile != NULL)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  242 |                 printf("-i \"%s\" ", imgFile);[0m
      | [0;1;32m                                              
[0m[1mminfo.c:263:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  263 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  264 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mminfo.c:268:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  268 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  269 |                                 imgFile=optarg;[0m
  270 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mminfo.c:272:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  272 |                                 verbose = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  273 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mminfo.c:275:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  275 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mminfo.c:277:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  277 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mminfo.c:286:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  286 |                         if(have_drive)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  287 |                                 break;[0m
      | [0;1;32m                                      
[0m[1mminfo.c:290:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  290 |                         if(!argv[optind][0] || argv[optind][1] != ':')[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m  291 |                                 usage(1);[0m
      | [0;1;32m                                         
[0m[1mminfo.c:298:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  298 |                         fprintf(stderr, "Could not open drive %c:\n", drive);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mminfo.c:298:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  298 |                         fprintf(stderr, "Could not open drive %c:\n", drive);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mminfo.c:317:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  317 |                 if(haveBPB || verbose)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  318 |                         displayBPB(Stream, &boot);[0m
      | [0;1;32m                                                  
[0m[1mminfo.c:330:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  330 |                                 fprintf(stderr, "Out of memory error\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mminfo.c:330:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  330 |                                 fprintf(stderr, "Out of memory error\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m28 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[52/72][96.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpmf8xhmta.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mpartition.c
[1mmpartition.c:43:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   43 |         if(! heads || !sectors)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m   44 |                 head = sector = cyl = 0; /* linear mode */[0m
   45 |         else {[0m
      | [0;32m        } 
[0m[1mmpartition.c:51:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |                 if(offset > 1023)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m   52 |                         cyl = 1023;[0m
   53 |                 else[0m
      | [0;32m                } 
[0m[1mmpartition.c:53:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   54 |                         cyl = (uint16_t) offset;[0m
      | [0;1;32m                                                
[0m[1mmpartition.c:73:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   73 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:73:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   73 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:80:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   80 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:80:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   80 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:91:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   91 |         if(activate)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   92 |                 partTable->boot_ind = 0x80;[0m
   93 |         else[0m
      | [0;32m        } 
[0m[1mmpartition.c:93:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   93 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m   94 |                 partTable->boot_ind = 0;[0m
      | [0;1;32m                                        
[0m[1mmpartition.c:110:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |                         if(end-begin < 4096)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  111 |                                 fat_bits = 12;[0m
  112 |                         else[0m
      | [0;32m                        } 
[0m[1mmpartition.c:112:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  113 |                                 fat_bits = 16;[0m
      | [0;1;32m                                              
[0m[1mmpartition.c:121:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  121 |                 if (fat_bits == 32)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  122 |                         /* FAT 32 partition. For now, we disregard the[0m
  123 |                          * possibility of FAT 32 CHS partitions */[0m
  124 |                         type = 0x0C; /* Win95 FAT32, LBA */[0m
  125 |                 else if (end < 65536) {[0m
      | [0;32m                } 
[0m[1mmpartition.c:131:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  131 |                         if(fat_bits == 12)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  132 |                                 /* FAT 12 partition */[0m
  133 |                                 type = 0x01; /* DOS FAT12, CHS */[0m
  134 |                         else if (fat_bits == 16)[0m
      | [0;32m                        } 
[0m[1mmpartition.c:134:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  134 |                         else if (fat_bits == 16)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  135 |                                 /* FAT 16 partition */[0m
  136 |                                 type = 0x04; /* DOS FAT16, CHS */[0m
      | [0;1;32m                                                                 
[0m[1mmpartition.c:137:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  137 |                 } else if (end <  sectors * heads * 1024u)[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m  138 |                         /* FAT 12 or FAT16 partition above the 32M[0m
  139 |                          * mark but below the 1024 cylinder mark.[0m
  140 |                          * Indeed, there can be no CHS partition[0m
  141 |                          * beyond 1024 cylinders */[0m
  142 |                         type = 0x06; /* DOS BIG FAT16 or FAT12, CHS */[0m
  143 |                 else[0m
      | [0;32m                } 
[0m[1mmpartition.c:143:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  143 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  144 |                         type = 0x0E; /* Win95 BIG FAT16, LBA */[0m
      | [0;1;32m                                                               
[0m[1mmpartition.c:208:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  208 |     if (cylinders == 0) rv=-1;/* Give error if 0 cylinders */[0m
      | [0;1;32m                       ^                                     
[0m      | [0;32m                        {
[0m[1mmpartition.c:244:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  244 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmpartition.c:244:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  244 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmpartition.c:246:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  246 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmpartition.c:246:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  246 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmpartition.c:304:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  304 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  305 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmpartition.c:311:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  311 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  312 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:314:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  314 |                                 bootSector = optarg;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  315 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:320:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  320 |                                 open2flags |= NO_PRIV;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  321 |                                 activate = 1;[0m
  322 |                                 dirty = 1;[0m
  323 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:325:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  325 |                                 activate = -1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  326 |                                 dirty = 1;[0m
  327 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:329:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  329 |                                 doprint = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  330 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:332:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  332 |                                 do_remove = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  333 |                                 dirty = 1;[0m
  334 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:338:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  338 |                                 open2flags |= NO_PRIV;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  339 |                                 initialize = 1;[0m
  340 |                                 dirty = 1;[0m
  341 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:343:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  343 |                                 create = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  344 |                                 dirty = 1;[0m
  345 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:350:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  350 |                                 open2flags |= NO_PRIV;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  351 |                                 type = strtou8(optarg, &endptr, 0);[0m
  352 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:355:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  355 |                                 argtracks = atoui(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  356 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:358:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  358 |                                 argheads = atou16(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  359 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:361:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  361 |                                 argsectors = atou16(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  362 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:367:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  367 |                                 open2flags |= NO_PRIV;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  368 |                                 force = 1;[0m
  369 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:372:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  372 |                                 verbose++;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  373 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:375:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  375 |                                 begin_set = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  376 |                                 begin = strtoui(optarg, &endptr, 0);[0m
  377 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:379:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  379 |                                 size_set = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  380 |                                 length = parseSize(optarg);[0m
  381 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmpartition.c:384:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  384 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmpartition.c:390:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  390 |             !argv[optind][0] || argv[optind][1] != ':')[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  391 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmpartition.c:396:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  396 |         sprintf(errmsg, "Drive '%c:' not supported", drive);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmpartition.c:396:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  396 |         sprintf(errmsg, "Drive '%c:' not supported", drive);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmpartition.c:403:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  403 |                 if (dev->drive != drive)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  404 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmpartition.c:406:4: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  406 |                         sprintf(errmsg,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:406:4: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  406 |                         sprintf(errmsg,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:420:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  420 |                 if(initialize)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  421 |                         mode |= O_CREAT;[0m
      | [0;1;32m                                        
[0m[1mmpartition.c:432:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  432 |                         snprintf(errmsg,sizeof(errmsg)-1,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mmpartition.c:432:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  432 |                         snprintf(errmsg,sizeof(errmsg)-1,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mmpartition.c:445:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  445 |                         snprintf(errmsg, sizeof(errmsg)-1,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mmpartition.c:445:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  445 |                         snprintf(errmsg, sizeof(errmsg)-1,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mmpartition.c:455:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  455 |                 if(verbose>=2)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  456 |                         print_sector("Read sector", buf, 512);[0m
      | [0;1;32m                                                              
[0m[1mmpartition.c:463:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  463 |                 fprintf(stderr,"%s: %s\n", argv[0],errmsg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:463:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  463 |                 fprintf(stderr,"%s: %s\n", argv[0],errmsg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:469:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  469 |                 fprintf(stderr,"You should either indicate both the number of sectors and the number of heads,\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:469:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  469 |                 fprintf(stderr,"You should either indicate both the number of sectors and the number of heads,\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:470:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  470 |                 fprintf(stderr," or none of them\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:470:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  470 |                 fprintf(stderr," or none of them\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:487:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  487 |                 memset((char *)(partTable+1), 0, 4*sizeof(*partTable));[0m
      | [0;1;32m                ^~~~~~
[0m[1mmpartition.c:487:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  487 |                 memset((char *)(partTable+1), 0, 4*sizeof(*partTable));[0m
      | [0;1;32m                ^~~~~~
[0m[1mmpartition.c:493:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  493 |                 fprintf(stderr,"Boot signature not set\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:493:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  493 |                 fprintf(stderr,"Boot signature not set\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:494:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  494 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:494:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  494 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:501:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  501 |                 if(!tpartition->sys_ind)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  502 |                         fprintf(stderr,[0m
  503 |                                 "Partition for drive %c: does not exist\n",[0m
  504 |                                 drive);[0m
      | [0;1;32m                                       
[0m[1mmpartition.c:502:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  502 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:502:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  502 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:506:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  506 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:506:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  506 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:509:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  509 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:509:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  509 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:513:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  513 |                 memset(tpartition, 0, sizeof(*tpartition));[0m
      | [0;1;32m                ^~~~~~
[0m[1mmpartition.c:513:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  513 |                 memset(tpartition, 0, sizeof(*tpartition));[0m
      | [0;1;32m                ^~~~~~
[0m[1mmpartition.c:517:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  517 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:517:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  517 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:519:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  519 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:519:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  519 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:534:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  534 |                 if(!partition->sys_ind)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  535 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmpartition.c:537:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  537 |                 if(partition->boot_ind)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  538 |                         has_activated++;[0m
      | [0;1;32m                                        
[0m[1mmpartition.c:540:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  540 |                 if(i<dev->partition && !begin_set)[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  541 |                         begin = END(partition);[0m
      | [0;1;32m                                               
[0m[1mmpartition.c:558:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  558 |         if(verbose)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  559 |                 fprintf(stderr,"sectors: %d heads: %d %u\n",[0m
  560 |                         used_dev.sectors, used_dev.heads, tot_sectors);[0m
      | [0;1;32m                                                                       
[0m[1mmpartition.c:559:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  559 |                 fprintf(stderr,"sectors: %d heads: %d %u\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:559:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  559 |                 fprintf(stderr,"sectors: %d heads: %d %u\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:573:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  573 |                 if(!begin && !begin_set)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  574 |                         begin = used_dev.sectors ? used_dev.sectors : 2048;[0m
      | [0;1;32m                                                                           
[0m[1mmpartition.c:582:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  582 |                         fprintf(stderr,"Unknown size\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:582:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  582 |                         fprintf(stderr,"Unknown size\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:589:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  589 |                         fprintf(stderr, "Begin larger than end\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:589:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  589 |                         fprintf(stderr, "Begin larger than end\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:596:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  596 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:596:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  596 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:610:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  610 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:610:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  610 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:616:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  616 |                                         tpartition->boot_ind=0x80;[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                        {
[0m  617 |                                         break;[0m
      | [0;1;32m                                             
[0m      | [0;32m                                             ;} 
[0m[1mmpartition.c:619:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  619 |                                         tpartition->boot_ind=0x00;[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                        {
[0m  620 |                                         break;[0m
      | [0;1;32m                                             
[0m      | [0;32m                                             ;} 
[0m[1mmpartition.c:631:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  631 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:631:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  631 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:631:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  631 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  632 |                                 "Warning: no active (bootable) partition present\n");[0m
  633 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmpartition.c:635:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  635 |                         break;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mmpartition.c:637:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  637 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:637:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  637 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:637:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  637 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  638 |                                 "Warning: %d active (bootable) partitions present\n",[0m
  639 |                                 has_activated);[0m
  640 |                         fprintf(stderr,[0m
  641 |                                 "Usually, a disk should have exactly one active partition\n");[0m
  642 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmpartition.c:640:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  640 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:640:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  640 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:646:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  646 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:646:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  646 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmpartition.c:649:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  649 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:649:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  649 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:670:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  670 |                 if(verbose>=2)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  671 |                         print_sector("Writing sector", buf, 512);[0m
      | [0;1;32m                                                                 
[0m[1mmpartition.c:673:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  673 |                         fprintf(stderr,"Error writing partition table");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:673:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  673 |                         fprintf(stderr,"Error writing partition table");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmpartition.c:676:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  676 |                 if(verbose>=3)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  677 |                         print_sector("Sector written", buf, 512);[0m
      | [0;1;32m                                                                 
[0m81 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[53/72][91.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpigvnvof5.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/partition.c
[1mpartition.c:50:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   50 |         if(!partition->sys_ind)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m   51 |                 return 0; /* Partition not allocated => ok */[0m
      | [0;1;32m                                                             
[0m[1mpartition.c:53:67: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |            (start < END(partition) || END(partition) < BEGIN(partition)))[0m
      | [0;1;32m                                                                         ^
[0m      | [0;32m                                                                          {
[0m   54 |                 /* overlap */[0m
   55 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mpartition.c:63:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   63 |         for(i=1; i <= until; i++)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m   64 |                 if(overlapCheck(partTable, i, start, end))[0m
   65 |                         return i;[0m
      | [0;1;32m                                 
[0m[1mpartition.c:64:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   64 |                 if(overlapCheck(partTable, i, start, end))[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m   65 |                         return i;[0m
      | [0;1;32m                                 
[0m[1mpartition.c:85:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |                 if(!partition->sys_ind)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   86 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mpartition.c:87:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   87 |                 if(partition->boot_ind)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   88 |                         (*has_activated)++;[0m
      | [0;1;32m                                           
[0m[1mpartition.c:91:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   91 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:91:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   91 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:98:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   98 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:98:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   98 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:105:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  105 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:105:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  105 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:110:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |                         if(i==target_partition)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  111 |                                 putchar('*');[0m
  112 |                         else[0m
      | [0;32m                        } 
[0m[1mpartition.c:112:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  113 |                                 putchar(' ');[0m
      | [0;1;32m                                             
[0m[1mpartition.c:133:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  133 |         if(start > This->size)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  134 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mpartition.c:143:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  143 |         if(limit_size(This, start, &len) < 0)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  144 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mpartition.c:152:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  152 |         if(limit_size(This, start, &len) < 0)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  153 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mpartition.c:164:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  164 |                 if(ret < 0)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  165 |                         return ret;[0m
      | [0;1;32m                                   
[0m[1mpartition.c:167:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  167 |         if(size)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  168 |                 *size = This->size * 512;[0m
      | [0;1;32m                                         
[0m[1mpartition.c:178:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  178 |         if(!dev->tot_sectors)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  179 |                 dev->tot_sectors = This->nbSect;[0m
      | [0;1;32m                                                
[0m[1mpartition.c:208:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  208 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mpartition.c:208:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  208 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mpartition.c:210:7: [0m[0;1;35mwarning: [0m[1mAccess to field 'partition' results in a dereference of a null pointer (loaded from variable 'dev') [clang-analyzer-core.NullDereference][0m
  210 |                     dev->partition);[0m
      | [0;1;32m                    ^~~
[0m[1mpartition.c:207:5: [0m[0;1;36mnote: [0mAssuming 'dev' is null[0m
  207 |         if(!dev || (dev->partition > 4) || (dev->partition <= 0)) {[0m
      | [0;1;32m           ^~~~
[0m[1mpartition.c:207:10: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  207 |         if(!dev || (dev->partition > 4) || (dev->partition <= 0)) {[0m
      | [0;1;32m                ^
[0m[1mpartition.c:210:7: [0m[0;1;36mnote: [0mAccess to field 'partition' results in a dereference of a null pointer (loaded from variable 'dev')[0m
  210 |                     dev->partition);[0m
      | [0;1;32m                    ^~~
[0m[1mpartition.c:219:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  219 |         memset((void*)This, 0, sizeof(Partition_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mpartition.c:219:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  219 |         memset((void*)This, 0, sizeof(Partition_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mpartition.c:224:63: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  224 |         if (force_pread(This->head.Next, (char*) buf, 0, 512) != 512)[0m
      | [0;1;32m                                                                     ^
[0m      | [0;32m                                                                      {
[0m  225 |                 goto exit_0;[0m
      | [0;1;32m                            
[0m[1mpartition.c:228:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  228 |                 if(errmsg)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  229 |                         sprintf(errmsg,[0m
  230 |                                 "Device does not have a BIOS partition table\n");[0m
      | [0;1;32m                                                                                 
[0m[1mpartition.c:229:4: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  229 |                         sprintf(errmsg,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:229:4: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  229 |                         sprintf(errmsg,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:235:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  235 |                 if(errmsg)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  236 |                         sprintf(errmsg,[0m
  237 |                                 "Partition %d does not exist\n",[0m
  238 |                                 dev->partition);[0m
      | [0;1;32m                                                
[0m[1mpartition.c:236:4: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  236 |                         sprintf(errmsg,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:236:4: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  236 |                         sprintf(errmsg,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mpartition.c:245:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  245 |                         if(errmsg)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  246 |                                 sprintf(errmsg,"init: Big disks not supported");[0m
      | [0;1;32m                                                                                
[0m[1mpartition.c:246:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  246 |                                 sprintf(errmsg,"init: Big disks not supported");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mpartition.c:246:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  246 |                                 sprintf(errmsg,"init: Big disks not supported");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mpartition.c:258:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  258 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mpartition.c:258:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  258 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mpartition.c:260:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  260 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mpartition.c:260:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  260 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mpartition.c:262:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  262 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mpartition.c:262:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  262 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mpartition.c:266:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  266 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mpartition.c:266:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  266 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m33 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[54/72][101.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp2v3p1w3l.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mlabel.c
[1mmlabel.c:36:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   36 |         memset(ans, ' ', sizeof(*ans)-1);[0m
      | [0;1;32m        ^~~~~~
[0m[1mmlabel.c:36:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   36 |         memset(ans, ' ', sizeof(*ans)-1);[0m
      | [0;1;32m        ^~~~~~
[0m[1mmlabel.c:42:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   42 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   43 |                 *mangled = 0;[0m
      | [0;1;32m                             
[0m[1mmlabel.c:47:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   47 |                 if(iswlower((wint_t)wbuffer[i]))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m   48 |                         have_lower = 1;[0m
      | [0;1;32m                                       
[0m[1mmlabel.c:49:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   49 |                 if(iswupper((wint_t)wbuffer[i]))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m   50 |                         have_upper = 1;[0m
      | [0;1;32m                                       
[0m[1mmlabel.c:51:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |                 if(!preserve_case)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m   52 |                         wbuffer[i] = ch_towupper(wbuffer[i]);[0m
      | [0;1;32m                                                             
[0m[1mmlabel.c:64:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   64 |         if (have_lower && have_upper)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   65 |                 *mangled = 1;[0m
      | [0;1;32m                             
[0m[1mmlabel.c:97:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   97 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmlabel.c:97:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   97 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmlabel.c:99:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   99 |         fprintf(stderr, "Usage: %s [-vscVn] [-N serial] drive:\n", progname);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmlabel.c:99:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   99 |         fprintf(stderr, "Usage: %s [-vscVn] [-N serial] drive:\n", progname);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmlabel.c:140:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  140 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  141 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmlabel.c:145:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  145 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  146 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmlabel.c:148:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  148 |                                 verbose = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  149 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmlabel.c:151:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  151 |                                 clear = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  152 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmlabel.c:154:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  154 |                                 show = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  155 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmlabel.c:157:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  157 |                                 set_serial = SER_RANDOM;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  158 |                                 init_random();[0m
  159 |                                 serial=(uint32_t) random();[0m
  160 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmlabel.c:162:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  162 |                                 set_serial = SER_SET;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  163 |                                 errno=0;[0m
  164 |                                 serial = strtou32(optarg, &eptr, 16);[0m
  165 |                                 if(*eptr) {[0m
  166 |                                         fprintf(stderr,[0m
  167 |                                                 "%s not a valid serial number\n",[0m
  168 |                                                 optarg);[0m
  169 |                                         exit(1);[0m
  170 |                                 }[0m
  171 |                                 check_number_parse_errno((char)c, optarg, eptr);[0m
  172 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmlabel.c:166:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  166 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmlabel.c:166:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  166 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmlabel.c:174:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  174 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmlabel.c:176:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  176 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmlabel.c:180:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  180 |         if (argc - optind > 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  181 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmlabel.c:183:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  183 |             if(!argv[optind][0] || argv[optind][1] != ':')[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m  184 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmlabel.c:192:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  192 |                 fprintf(stderr, "Label too long\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:192:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  192 |                 fprintf(stderr, "Label too long\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:204:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  204 |                 fprintf(stderr, "Both clear and new label specified\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:204:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  204 |                 fprintf(stderr, "Both clear and new label specified\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:214:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  214 |                 fprintf(stderr, "%s: Cannot initialize drive\n", argv[0]);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:214:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  214 |                 fprintf(stderr, "%s: Cannot initialize drive\n", argv[0]);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:228:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  228 |                 if(isNotFound(&entry))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  229 |                         printf(" Volume has no label\n");[0m
  230 |                 else if (*longname)[0m
      | [0;32m                } 
[0m[1mmlabel.c:230:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  230 |                 else if (*longname)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  231 |                         printf(" Volume label is %s (abbr=%s)\n",[0m
  232 |                                longname, shortname);[0m
  233 |                 else[0m
      | [0;32m                } 
[0m[1mmlabel.c:233:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  233 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  234 |                         printf(" Volume label is %s\n",  shortname);[0m
      | [0;1;32m                                                                    
[0m[1mmlabel.c:243:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  243 |                 fprintf(stderr,"Enter the new volume label : ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:243:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  243 |                 fprintf(stderr,"Enter the new volume label : ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:245:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  245 |                         fprintf(stderr, "\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmlabel.c:245:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  245 |                         fprintf(stderr, "\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmlabel.c:252:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  252 |                 if(longname[0])[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  253 |                         longname[strlen(newLabel)-1] = '\0';[0m
      | [0;1;32m                                                            
[0m[1mmlabel.c:257:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  257 |                 fprintf(stderr,"New label too long\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:257:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  257 |                 fprintf(stderr,"New label too long\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmlabel.c:264:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  264 |                 if(interactive && newLabel[0] == '\0')[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m  265 |                         if(ask_confirmation("Delete volume label (y/n): ")){[0m
  266 |                                 FREE(&RootDir);[0m
  267 |                                 exit(0);[0m
  268 |                         }[0m
      | [0;1;32m                         
[0m[1mmlabel.c:286:5: [0m[0;1;35mwarning: [0m[1mThe left operand of '<<' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult][0m
  286 |         if(WORD_S(fatlen)) {[0m
      | [0;1;32m           ^
[0m[1m./msdos.h:199:20: [0m[0;1;36mnote: [0mexpanded from macro 'WORD_S'[0m
  199 | #define WORD_S(x) (WORD(boot.boot.x))[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~
[0m[1m./msdos.h:36:78: [0m[0;1;36mnote: [0mexpanded from macro 'WORD'[0m
   36 | #define WORD(x) ((uint16_t)((unsigned char)(x)[0] + (((unsigned char)(x)[1]) << 8)))[0m
      | [0;1;32m                                                                     ~~~~~~  ^
[0m[1mmlabel.c:140:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  140 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mmlabel.c:140:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  140 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:142:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  142 |         while ((c = getopt(argc, argv, "i:vcsnN:h")) != EOF) {[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmlabel.c:142:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 180[0m
  142 |         while ((c = getopt(argc, argv, "i:vcsnN:h")) != EOF) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:180:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  180 |         if (argc - optind > 1)[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~
[0m[1mmlabel.c:180:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  180 |         if (argc - optind > 1)[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:182:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  182 |         if(argc - optind == 1) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmlabel.c:182:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  182 |         if(argc - optind == 1) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:191:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  191 |         if(strlen(newLabel) > VBUFSIZE) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:197:17: [0m[0;1;36mnote: [0m'show' is 0[0m
  197 |         interactive = !show && !clear &&!newLabel[0] &&[0m
      | [0;1;32m                       ^~~~
[0m[1mmlabel.c:197:16: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
  197 |         interactive = !show && !clear &&!newLabel[0] &&[0m
      | [0;1;32m                      ^
[0m[1mmlabel.c:197:26: [0m[0;1;36mnote: [0m'clear' is 0[0m
  197 |         interactive = !show && !clear &&!newLabel[0] &&[0m
      | [0;1;32m                                ^~~~~
[0m[1mmlabel.c:197:16: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
  197 |         interactive = !show && !clear &&!newLabel[0] &&[0m
      | [0;1;32m                      ^
[0m[1mmlabel.c:197:16: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mmlabel.c:199:6: [0m[0;1;36mnote: [0m'clear' is 0[0m
  199 |         if(!clear && !newLabel[0]) {[0m
      | [0;1;32m            ^~~~~
[0m[1mmlabel.c:199:5: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
  199 |         if(!clear && !newLabel[0]) {[0m
      | [0;1;32m           ^
[0m[1mmlabel.c:199:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  199 |         if(!clear && !newLabel[0]) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:202:5: [0m[0;1;36mnote: [0m'clear' is 0[0m
  202 |         if(clear && newLabel[0]) {[0m
      | [0;1;32m           ^~~~~
[0m[1mmlabel.c:202:11: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  202 |         if(clear && newLabel[0]) {[0m
      | [0;1;32m                 ^
[0m[1mmlabel.c:208:33: [0m[0;1;36mnote: [0m'isRop' is non-null[0m
  208 |         RootDir = open_root_dir(drive, isRop ? 0 : O_RDWR, isRop);[0m
      | [0;1;32m                                       ^~~~~
[0m[1mmlabel.c:208:33: [0m[0;1;36mnote: [0m'?' condition is true[0m
[1mmlabel.c:209:5: [0m[0;1;36mnote: [0mAssuming 'isRo' is not equal to 0[0m
  209 |         if(isRo) {[0m
      | [0;1;32m           ^~~~
[0m[1mmlabel.c:209:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  209 |         if(isRo) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:213:5: [0m[0;1;36mnote: [0mAssuming 'RootDir' is non-null[0m
  213 |         if(!RootDir) {[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mmlabel.c:213:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  213 |         if(!RootDir) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:222:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  222 |         if (r == -2) {[0m
      | [0;1;32m            ^~~~~~~
[0m[1mmlabel.c:222:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  222 |         if (r == -2) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:227:5: [0m[0;1;36mnote: [0m'show' is 1[0m
  227 |         if(show || interactive){[0m
      | [0;1;32m           ^~~~
[0m[1mmlabel.c:227:10: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  227 |         if(show || interactive){[0m
      | [0;1;32m                ^
[0m[1mmlabel.c:228:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  228 |                 if(isNotFound(&entry))[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~
[0m[1mmlabel.c:228:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  228 |                 if(isNotFound(&entry))[0m
      | [0;1;32m                ^
[0m[1mmlabel.c:239:5: [0m[0;1;36mnote: [0m'interactive' is 0[0m
  239 |         if(interactive){[0m
      | [0;1;32m           ^~~~~~~~~~~
[0m[1mmlabel.c:239:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  239 |         if(interactive){[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:256:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  256 |         if(strlen(newLabel) > 11) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:262:7: [0m[0;1;36mnote: [0m'show' is 1[0m
  262 |         if((!show || newLabel[0]) && !isNotFound(&entry)){[0m
      | [0;1;32m             ^~~~
[0m[1mmlabel.c:262:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  262 |         if((!show || newLabel[0]) && !isNotFound(&entry)){[0m
      | [0;1;32m            ^
[0m[1mmlabel.c:262:28: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  262 |         if((!show || newLabel[0]) && !isNotFound(&entry)){[0m
      | [0;1;32m                                  ^
[0m[1mmlabel.c:273:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  273 |         if (newLabel[0] != '\0') {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:280:8: [0m[0;1;36mnote: [0m'show' is 1[0m
  280 |         if( (!show || newLabel[0]) || set_serial != SER_NONE) {[0m
      | [0;1;32m              ^~~~
[0m[1mmlabel.c:280:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  280 |         if( (!show || newLabel[0]) || set_serial != SER_NONE) {[0m
      | [0;1;32m             ^
[0m[1mmlabel.c:280:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  280 |         if( (!show || newLabel[0]) || set_serial != SER_NONE) {[0m
      | [0;1;32m            ^
[0m[1mmlabel.c:280:32: [0m[0;1;36mnote: [0m'set_serial' is equal to SER_NONE[0m
  280 |         if( (!show || newLabel[0]) || set_serial != SER_NONE) {[0m
      | [0;1;32m                                      ^~~~~~~~~~
[0m[1mmlabel.c:280:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  280 |         if( (!show || newLabel[0]) || set_serial != SER_NONE) {[0m
      | [0;1;32m        ^
[0m[1mmlabel.c:286:5: [0m[0;1;36mnote: [0mThe left operand of '<<' is a garbage value[0m
  286 |         if(WORD_S(fatlen)) {[0m
      | [0;1;32m           ^
[0m[1m./msdos.h:199:20: [0m[0;1;36mnote: [0mexpanded from macro 'WORD_S'[0m
  199 | #define WORD_S(x) (WORD(boot.boot.x))[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~
[0m[1m./msdos.h:36:78: [0m[0;1;36mnote: [0mexpanded from macro 'WORD'[0m
   36 | #define WORD(x) ((uint16_t)((unsigned char)(x)[0] + (((unsigned char)(x)[1]) << 8)))[0m
      | [0;1;32m                                                                     ~~~~~~  ^
[0m[1mmlabel.c:296:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  296 |                 if(!newLabel[0])[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  297 |                         shrtLabel = "NO NAME    ";[0m
  298 |                 else[0m
      | [0;32m                } 
[0m[1mmlabel.c:298:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  298 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  299 |                         shrtLabel = newLabel;[0m
      | [0;1;32m                                             
[0m[1mmlabel.c:304:4: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  304 |                         strncpy(labelBlock->label, dosname.base, 8);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmlabel.c:304:4: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  304 |                         strncpy(labelBlock->label, dosname.base, 8);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmlabel.c:305:4: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  305 |                         strncpy(labelBlock->label+8, dosname.ext, 3);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmlabel.c:305:4: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  305 |                         strncpy(labelBlock->label+8, dosname.ext, 3);[0m
      | [0;1;32m                        ^~~~~~~
[0m38 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[55/72][98.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpjnahx274.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mzip.c
[1mmzip.c:63:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   63 |         if(priv)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   64 |                 reclaim_privs();[0m
      | [0;1;32m                                
[0m[1mmzip.c:66:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   66 |         if(priv)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   67 |                 drop_privs();[0m
      | [0;1;32m                             
[0m[1mmzip.c:87:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   87 |                 fprintf (stderr, "%s: stat(%s) failed: %s.\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmzip.c:87:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   87 |                 fprintf (stderr, "%s: stat(%s) failed: %s.\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmzip.c:92:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   92 |         if (!S_ISBLK (st_dev.st_mode)) /* not a block device, cannot[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m   93 |                                         * be mounted */[0m
   94 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmzip.c:101:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  101 |                 fprintf (stderr, "%s: can't open %s.\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmzip.c:101:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  101 |                 fprintf (stderr, "%s: can't open %s.\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmzip.c:134:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  134 |                                 fprintf (stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmzip.c:134:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  134 |                                 fprintf (stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmzip.c:160:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  160 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmzip.c:160:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  160 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmzip.c:163:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  163 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmzip.c:163:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  163 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmzip.c:257:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  257 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  258 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmzip.c:262:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  262 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  263 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:265:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  265 |                                 if (get_real_uid()) {[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  266 |                                         fprintf(stderr,[0m
  267 |                                                 "Only root can use force. Sorry.\n");[0m
  268 |                                         exit(1);[0m
  269 |                                 }[0m
  270 |                                 request |= ZIP_FORCE;[0m
  271 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:266:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  266 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmzip.c:266:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  266 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmzip.c:273:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  273 |                                 request |= ZIP_EJECT;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  274 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:276:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  276 |                                 request |= ZIP_STATUS;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  277 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:280:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  280 |                                 setMode(ZIP_RO_PW);[0m
      | [0;1;32m                                ^                 
[0m      | [0;32m                                {                 ;} 
[0m[1mmzip.c:251:2: [0m[0;1;36mnote: [0mexpanded from macro 'setMode'[0m
  251 |         if(request & ZIP_MODE_CHANGE) usage(1); \[0m
      | [0;1;32m        ^
[0m[1mmzip.c:282:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  282 |                                 setMode(ZIP_RO);[0m
      | [0;1;32m                                ^              
[0m      | [0;32m                                {              ;} 
[0m[1mmzip.c:251:2: [0m[0;1;36mnote: [0mexpanded from macro 'setMode'[0m
  251 |         if(request & ZIP_MODE_CHANGE) usage(1); \[0m
      | [0;1;32m        ^
[0m[1mmzip.c:284:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  284 |                                 setMode(ZIP_RW);[0m
      | [0;1;32m                                ^              
[0m      | [0;32m                                {              ;} 
[0m[1mmzip.c:251:2: [0m[0;1;36mnote: [0mexpanded from macro 'setMode'[0m
  251 |         if(request & ZIP_MODE_CHANGE) usage(1); \[0m
      | [0;1;32m        ^
[0m[1mmzip.c:286:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  286 |                                 setMode(ZIP_PW);[0m
      | [0;1;32m                                ^              
[0m      | [0;32m                                {              ;} 
[0m[1mmzip.c:251:2: [0m[0;1;36mnote: [0mexpanded from macro 'setMode'[0m
  251 |         if(request & ZIP_MODE_CHANGE) usage(1); \[0m
      | [0;1;32m        ^
[0m[1mmzip.c:288:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  288 |                                 setMode(ZIP_UNLOCK_TIL_EJECT);[0m
      | [0;1;32m                                ^                            
[0m      | [0;32m                                {                            ;} 
[0m[1mmzip.c:251:2: [0m[0;1;36mnote: [0mexpanded from macro 'setMode'[0m
  251 |         if(request & ZIP_MODE_CHANGE) usage(1); \[0m
      | [0;1;32m        ^
[0m[1mmzip.c:290:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  290 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmzip.c:292:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  292 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmzip.c:297:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  297 |         if (request == ZIP_NIX) request = ZIP_STATUS;  /* default action */[0m
      | [0;1;32m                               ^                                           
[0m      | [0;32m                                {
[0m[1mmzip.c:301:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  301 |              (!argv[optind][0] || argv[optind][1] != ':')))[0m
      | [0;1;32m                                                           ^
[0m      | [0;32m                                                            {
[0m  302 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmzip.c:323:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  323 |                 if (dev->drive != drive)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  324 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmzip.c:329:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  329 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:329:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  329 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:335:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  335 |                 if(IS_PRIVILEGED(dev))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  336 |                         reclaim_privs();[0m
      | [0;1;32m                                        
[0m[1mmzip.c:343:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  343 |                 if(IS_PRIVILEGED(dev))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  344 |                         drop_privs();[0m
      | [0;1;32m                                     
[0m[1mmzip.c:349:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  349 |                 if (fd == -1)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  350 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmzip.c:353:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  353 |                 if (!(request & (ZIP_MODE_CHANGE | ZIP_STATUS)))[0m
      | [0;1;32m                                                                ^
[0m      | [0;32m                                                                 {
[0m  354 |                         /* if no mode change or ZIP specific status is[0m
  355 |                          * involved, the command (eject) is applicable[0m
  356 |                          * on all drives */[0m
  357 |                         break;[0m
      | [0;1;32m                              
[0m[1mmzip.c:389:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  389 |                         fprintf(stderr,"Skipping drive with vendor='");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:389:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  389 |                         fprintf(stderr,"Skipping drive with vendor='");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:392:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  392 |                         fprintf(stderr,"' product='");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:392:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  392 |                         fprintf(stderr,"' product='");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:395:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  395 |                         fprintf(stderr,"'\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:395:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  395 |                         fprintf(stderr,"'\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:404:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  404 |                 fprintf(stderr, "%s: drive '%c:' is not a Zip or Jaz drive\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmzip.c:404:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  404 |                 fprintf(stderr, "%s: drive '%c:' is not a Zip or Jaz drive\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmzip.c:409:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  409 |         if (request & (ZIP_MODE_CHANGE | ZIP_STATUS))[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m  410 |                 oldMode = get_zip_status(IS_PRIVILEGED(dev), fd, extra_data);[0m
      | [0;1;32m                                                                             
[0m[1mmzip.c:415:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  415 |                    (oldMode & ZIP_UNLOCK_TIL_EJECT))[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  416 |                         request &= ~ZIP_MODE_CHANGE;[0m
      | [0;1;32m                                                    
[0m[1mmzip.c:420:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  420 |                 if(!(newMode & 0x01) && newMode == oldMode)[0m
      | [0;1;32m                                                           ^
[0m      | [0;32m                                                            {
[0m  421 |                         request &= ~ZIP_MODE_CHANGE;[0m
      | [0;1;32m                                                    
[0m[1mmzip.c:441:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  441 |                         if ((s = strchr(passwd, '\n'))) *s = '\0';  /* chomp */[0m
      | [0;1;32m                                                       ^                       
[0m      | [0;32m                                                        {
[0m[1mmzip.c:451:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  451 |                         if ((s = strchr(passwd, '\n'))) *s = '\0';  /* chomp */[0m
      | [0;1;32m                                                       ^                       
[0m      | [0;32m                                                        {
[0m[1mmzip.c:455:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  455 |                                 if (ret == -1) perror("passwd: ");[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  456 |                                 else fprintf(stderr, "wrong password\n");[0m
      | [0;32m                                } 
[0m[1mmzip.c:456:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  456 |                                 else fprintf(stderr, "wrong password\n");[0m
      | [0;1;32m                                    ^                                    
[0m      | [0;32m                                     {
[0m[1mmzip.c:456:10: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  456 |                                 else fprintf(stderr, "wrong password\n");[0m
      | [0;1;32m                                     ^~~~~~~
[0m[1mmzip.c:456:10: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  456 |                                 else fprintf(stderr, "wrong password\n");[0m
      | [0;1;32m                                     ^~~~~~~
[0m[1mmzip.c:462:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  462 |                                 fprintf(stderr, "wrong password\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmzip.c:462:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  462 |                                 fprintf(stderr, "wrong password\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmzip.c:471:4: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  471 |                         strncpy(first_try, passwd,PASSWORD_LEN);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:471:4: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  471 |                         strncpy(first_try, passwd,PASSWORD_LEN);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmzip.c:474:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  474 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmzip.c:474:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  474 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmzip.c:483:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  483 |                 if(newMode == ZIP_UNLOCK_TIL_EJECT)[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  484 |                         newMode |= oldMode;[0m
      | [0;1;32m                                           
[0m[1mmzip.c:488:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  488 |                         if (ret == -1) perror("set passwd: ");[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  489 |                         else fprintf(stderr, "password not changed\n");[0m
      | [0;32m                        } 
[0m[1mmzip.c:489:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  489 |                         else fprintf(stderr, "password not changed\n");[0m
      | [0;1;32m                            ^                                          
[0m      | [0;32m                             {
[0m[1mmzip.c:489:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  489 |                         else fprintf(stderr, "password not changed\n");[0m
      | [0;1;32m                             ^~~~~~~
[0m[1mmzip.c:489:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  489 |                         else fprintf(stderr, "password not changed\n");[0m
      | [0;1;32m                             ^~~~~~~
[0m[1mmzip.c:502:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  502 |                 if(oldMode & 8)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  503 |                         unlocked = " and unlocked until eject";[0m
  504 |                 else[0m
      | [0;32m                } 
[0m[1mmzip.c:504:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  504 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  505 |                         unlocked = "";[0m
      | [0;1;32m                                      
[0m[1mmzip.c:508:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  508 |                                 printf("Drive '%c:' is not write-protected\n",[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  509 |                                        drive);[0m
  510 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:512:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  512 |                                 printf("Drive '%c:' is write-protected%s\n",[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  513 |                                        drive, unlocked);[0m
  514 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:516:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  516 |                                 printf("Drive '%c:' is password write-protected%s\n",[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  517 |                                        drive, unlocked);[0m
  518 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:520:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  520 |                                 printf("Drive '%c:' is password protected%s\n",[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  521 |                                        drive, unlocked);[0m
  522 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:524:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  524 |                                 printf("Unknown protection mode %d of drive '%c:'\n",[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  525 |                                        oldMode, drive);[0m
  526 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmzip.c:531:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  531 |                 if(request & ZIP_FORCE)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  532 |                         if(door_command(IS_PRIVILEGED(dev), fd,[0m
  533 |                                         SCSI_ALLOW_MEDIUM_REMOVAL, 0,[0m
  534 |                                         extra_data) < 0) {[0m
  535 |                                 perror("door unlock: ");[0m
  536 |                                 exit(1);[0m
  537 |                         }[0m
      | [0;1;32m                         
[0m61 warnings generated.
Suppressed 5 warnings (5 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[56/72][109.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpa_c2ig7_.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/match.c
[1mmatch.c:43:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   43 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   44 |                 *reverse=0;[0m
      | [0;1;32m                           
[0m[1mmatch.c:46:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   46 |                 if(!first)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m   47 |                         /* Malformed pattern, range not closed */[0m
   48 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mmatch.c:53:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   53 |                                 if(ch == first || ch == '-')[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m   54 |                                         found = 1;[0m
      | [0;1;32m                                                  
[0m[1mmatch.c:60:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   60 |                         if(ch >= first && ch <= last)[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m   61 |                                 found = 1;[0m
      | [0;1;32m                                          
[0m[1mmatch.c:64:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   64 |                         if(ch == first)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m   65 |                                 found = 1;[0m
      | [0;1;32m                                          
[0m[1mmatch.c:76:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |         if(out)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m   77 |                 *out = *s;[0m
      | [0;1;32m                          
[0m[1mmatch.c:78:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |         if(is_in_range(*s, p, &reverse))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m   79 |                 return 1 ^ reverse;[0m
      | [0;1;32m                                   
[0m[1mmatch.c:80:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   80 |         if(compfn == exactcmp)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   81 |                 return reverse;[0m
      | [0;1;32m                               
[0m[1mmatch.c:83:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   83 |                 if(out)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   84 |                         *out = (wchar_t)towlower((wint_t)*s);[0m
      | [0;1;32m                                                             
[0m[1mmatch.c:88:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   88 |                 if(out)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   89 |                         *out = (wchar_t)towupper((wint_t)*s);[0m
      | [0;1;32m                                                             
[0m[1mmatch.c:103:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  103 |                                 if (*s == '\0')[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  104 |                                         return(0);[0m
  105 |                                 if(out)[0m
  106 |                                         *(out++) = *s;[0m
  107 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmatch.c:103:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  103 |                                 if (*s == '\0')[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  104 |                                         return(0);[0m
      | [0;1;32m                                                  
[0m[1mmatch.c:105:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  105 |                                 if(out)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  106 |                                         *(out++) = *s;[0m
      | [0;1;32m                                                      
[0m[1mmatch.c:109:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  109 |                                 while (*p == '*' && length) {[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  110 |                                         p++;[0m
  111 |                                         length--;[0m
  112 |                                 }[0m
  113 | [0m
  114 |                                         /* search for next char in pattern */[0m
  115 |                                 while(*s) {[0m
  116 |                                         if(_match(s, p, out, Case, length,[0m
  117 |                                                   compfn))[0m
  118 |                                                 return 1;[0m
  119 |                                         if(out)[0m
  120 |                                                 *out++ = *s;[0m
  121 |                                         s++;[0m
  122 |                                 }[0m
  123 |                                 continue;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mmatch.c:117:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  117 |                                                   compfn))[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m  118 |                                                 return 1;[0m
      | [0;1;32m                                                         
[0m[1mmatch.c:119:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  119 |                                         if(out)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  120 |                                                 *out++ = *s;[0m
      | [0;1;32m                                                            
[0m[1mmatch.c:125:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  125 |                                 p++;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  126 |                                 length--;[0m
  127 |                                 if(!parse_range(&p, s, out++, compfn))[0m
  128 |                                         return 0;[0m
  129 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmatch.c:127:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  127 |                                 if(!parse_range(&p, s, out++, compfn))[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m  128 |                                         return 0;[0m
      | [0;1;32m                                                 
[0m[1mmatch.c:131:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  131 |                                 p++;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  132 |                                 length--;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mmatch.c:135:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  135 |                                 if (!compfn(*s,*p))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  136 |                                         return(0);[0m
  137 |                                 if(out)[0m
  138 |                                         *(out++) = *p;[0m
  139 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmatch.c:135:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  135 |                                 if (!compfn(*s,*p))[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  136 |                                         return(0);[0m
      | [0;1;32m                                                  
[0m[1mmatch.c:137:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  137 |                                 if(out)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  138 |                                         *(out++) = *p;[0m
      | [0;1;32m                                                      
[0m[1mmatch.c:145:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  145 |         if(out)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  146 |                 *out = '\0';[0m
      | [0;1;32m                            
[0m[1mmatch.c:149:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |         if (*s != '\0')[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  150 |                 return(0);[0m
  151 |         else[0m
      | [0;32m        } 
[0m[1mmatch.c:151:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  151 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  152 |                 return(1);[0m
      | [0;1;32m                          
[0m[1mmatch.c:160:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |         if(Case)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  161 |                 compfn = casecmp;[0m
  162 |         else[0m
      | [0;32m        } 
[0m[1mmatch.c:162:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  162 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  163 |                 /*compfn = exactcmp;*/[0m
  164 |                 compfn = casecmp;[0m
      | [0;1;32m                                 
[0m29 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[57/72][113.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpn3_vgv6b.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mbadblocks.c
[1mmbadblocks.c:31:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   31 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmbadblocks.c:31:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   31 |         fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmbadblocks.c:33:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   33 |         fprintf(stderr, "Usage: %s: [-c clusterList] [-s sectorList] [-c] [-V] device\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmbadblocks.c:33:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   33 |         fprintf(stderr, "Usage: %s: [-c clusterList] [-s sectorList] [-c] [-V] device\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmbadblocks.c:40:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   40 |                 fprintf(stderr, "Only one of the -c or -s options may be given\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:40:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   40 |                 fprintf(stderr, "Only one of the -c or -s options may be given\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:55:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   55 |                 fprintf(stderr, "Cluster %d already marked\n", offset);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:55:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   55 |                 fprintf(stderr, "Cluster %d already marked\n", offset);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:57:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   57 |                 fprintf(stderr, "Cluster %d is busy\n", offset);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:57:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   57 |                 fprintf(stderr, "Cluster %d is busy\n", offset);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:67:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   67 |         if(i % 10 == 0)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   68 |                 fprintf(stderr, "                     \r%d/%d\r", i, total);[0m
      | [0;1;32m                                                                            
[0m[1mmbadblocks.c:68:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   68 |                 fprintf(stderr, "                     \r%d/%d\r", i, total);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:68:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   68 |                 fprintf(stderr, "                     \r%d/%d\r", i, total);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:79:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   79 |         if(Fs->fat_decode((Fs_t*)Fs, cluster))[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m   80 |                 /* cluster busy, or already marked */[0m
   81 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmbadblocks.c:86:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   86 |                 if(ret < 0 || (size_t) ret < in_len )[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m   87 |                         bad = 1;[0m
      | [0;1;32m                                
[0m[1mmbadblocks.c:90:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |                 if(ret < (off_t) in_len )[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m   91 |                         bad = 1;[0m
   92 |                 else if(buffer) {[0m
      | [0;32m                } 
[0m[1mmbadblocks.c:94:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   94 |                         for(i=0; i<in_len; i++)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m   95 |                                 if(in_buf[i] != buffer[i]) {[0m
   96 |                                         bad = 1;[0m
   97 |                                         break;[0m
   98 |                                 }[0m
      | [0;1;32m                                 
[0m[1mmbadblocks.c:128:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  128 |                         set_cmd_line_image(optarg);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  129 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmbadblocks.c:131:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  131 |                         checkListTwice(filename);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  132 |                         filename = strdup(optarg);[0m
  133 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmbadblocks.c:135:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  135 |                         checkListTwice(filename);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  136 |                         filename = strdup(optarg);[0m
  137 |                         sectorMode = 1;[0m
  138 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmbadblocks.c:140:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  140 |                         startSector = atoui(optarg);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  141 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmbadblocks.c:143:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  143 |                         endSector = atoui(optarg);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  144 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmbadblocks.c:146:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  146 |                         writeMode = 1;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  147 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mmbadblocks.c:149:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  149 |                         usage(0);[0m
      | [0;1;32m                        ^       
[0m      | [0;32m                        {       ;} 
[0m[1mmbadblocks.c:151:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  151 |                         usage(1);[0m
      | [0;1;32m                        ^       
[0m      | [0;32m                        {       ;} 
[0m[1mmbadblocks.c:162:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  162 |                 fprintf(stderr,"%s: Cannot initialize drive\n", argv[0]);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:162:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  162 |                 fprintf(stderr,"%s: Cannot initialize drive\n", argv[0]);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmbadblocks.c:196:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  196 |                         fprintf(stderr,"end of file in file_read\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmbadblocks.c:196:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  196 |                         fprintf(stderr,"end of file in file_read\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmbadblocks.c:205:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  205 |         if(startSector < 2)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  206 |                 startSector = 2;[0m
      | [0;1;32m                                
[0m[1mmbadblocks.c:207:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  207 |         if(endSector > Fs->num_clus + 2 || endSector <= 0)[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m  208 |                 endSector = Fs->num_clus + 2;[0m
      | [0;1;32m                                             
[0m[1mmbadblocks.c:215:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  215 |                         fprintf(stderr, "Could not open %s (%s)\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmbadblocks.c:215:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  215 |                         fprintf(stderr, "Could not open %s (%s)\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmbadblocks.c:223:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  223 |                         if(sectorMode)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  224 |                                 offset = (offset-Fs->clus_start)/Fs->cluster_size + 2;[0m
      | [0;1;32m                                                                                      
[0m[1mmbadblocks.c:226:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  226 |                                 fprintf(stderr, "Sector before start\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmbadblocks.c:226:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  226 |                                 fprintf(stderr, "Sector before start\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmbadblocks.c:228:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  228 |                                 fprintf(stderr, "Sector beyond end\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmbadblocks.c:228:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  228 |                                 fprintf(stderr, "Sector beyond end\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmbadblocks.c:237:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  237 |                 if(dev->Next)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  238 |                         dev = dev->Next;[0m
      | [0;1;32m                                        
[0m[1mmbadblocks.c:244:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  244 |                                 if(got_signal)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  245 |                                         break;[0m
      | [0;1;32m                                              
[0m[1mmbadblocks.c:254:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  254 |                         if(!got_signal)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  255 |                                 DISCARD(dev);[0m
      | [0;1;32m                                             
[0m[1mmbadblocks.c:259:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  259 |                                 if(got_signal)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  260 |                                         break;[0m
      | [0;1;32m                                              
[0m[1mmbadblocks.c:270:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  270 |                                 if(got_signal)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  271 |                                         break;[0m
      | [0;1;32m                                              
[0m34 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[58/72][82.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpmpbvz_9x.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/remap.c
[1mremap.c:48:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   48 |         for(i=0; i < This->mapSize - 1; i++)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m   49 |                 if(*start < This->map[i+1].remapped) {[0m
   50 |                         limitSizeToOffT(len, This->map[i+1].remapped - *start);[0m
   51 |                         break;[0m
   52 |                 }[0m
      | [0;1;32m                 
[0m[1mremap.c:61:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |         if(remap(This, &start, &len)==DATA)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m   62 |                 return PREADS(This->head.Next, buf, start, len);[0m
   63 |         else {[0m
      | [0;32m        } 
[0m[1mremap.c:64:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   64 |                 memset(buf, 0, len);[0m
      | [0;1;32m                ^~~~~~
[0m[1mremap.c:64:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   64 |                 memset(buf, 0, len);[0m
      | [0;1;32m                ^~~~~~
[0m[1mremap.c:73:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |         if(remap(This, &start, &len)==DATA)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m   74 |                 return PWRITES(This->head.Next, buf, start, len);[0m
   75 |         else {[0m
      | [0;32m        } 
[0m[1mremap.c:83:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   83 |                                 fprintf(stderr, "Bad data written to unmapped sectors\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mremap.c:83:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   83 |                                 fprintf(stderr, "Bad data written to unmapped sectors\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mremap.c:95:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |         if(This->map)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m   96 |                 free(This->map);[0m
      | [0;1;32m                                
[0m[1mremap.c:145:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  145 |                         break;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mremap.c:148:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  148 |                         ptr++;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  149 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mremap.c:151:4: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  151 |                         sprintf(errmsg, "Bad number %s\n", ptr);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mremap.c:151:4: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  151 |                         sprintf(errmsg, "Bad number %s\n", ptr);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mremap.c:151:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  151 |                         sprintf(errmsg, "Bad number %s\n", ptr);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  152 |                         return -1;[0m
      | [0;1;32m                                 
[0m      | [0;32m                                 ;} 
[0m[1mremap.c:162:8: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of the heap area [clang-analyzer-security.ArrayBound][0m
  162 |                                 m->orig = orig;[0m
      | [0;1;32m                                   ^
[0m[1mremap.c:185:6: [0m[0;1;36mnote: [0mAssuming 'This' is non-null[0m
  185 |         if (!This){[0m
      | [0;1;32m            ^~~~~
[0m[1mremap.c:185:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  185 |         if (!This){[0m
      | [0;1;32m        ^
[0m[1mremap.c:194:5: [0m[0;1;36mnote: [0m'nrItems' is >= 0[0m
  194 |         if(nrItems < 0) {[0m
      | [0;1;32m           ^~~~~~~
[0m[1mremap.c:194:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  194 |         if(nrItems < 0) {[0m
      | [0;1;32m        ^
[0m[1mremap.c:200:5: [0m[0;1;36mnote: [0mAssuming field 'map' is non-null[0m
  200 |         if(!This->map) {[0m
      | [0;1;32m           ^~~~~~~~~~
[0m[1mremap.c:200:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  200 |         if(!This->map) {[0m
      | [0;1;32m        ^
[0m[1mremap.c:205:2: [0m[0;1;36mnote: [0mCalling 'process_map'[0m
  205 |         process_map(This, map, 0, errmsg);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mremap.c:121:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  121 |         while(!atEnd) {[0m
      | [0;1;32m        ^
[0m[1mremap.c:124:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  124 |                 if(*ptr=='\0') {[0m
      | [0;1;32m                ^
[0m[1mremap.c:127:13: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  127 |                 } else if(!strncmp(ptr, "skip", 4)) {[0m
      | [0;1;32m                          ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mremap.c:127:10: [0m[0;1;36mnote: [0mTaking false branch[0m
  127 |                 } else if(!strncmp(ptr, "skip", 4)) {[0m
      | [0;1;32m                       ^
[0m[1mremap.c:130:10: [0m[0;1;36mnote: [0mTaking true branch[0m
  130 |                 } else if(!strncmp(ptr, "zero", 4)) {[0m
      | [0;1;32m                       ^
[0m[1mremap.c:142:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 143[0m
  142 |                 switch(*ptr) {[0m
      | [0;1;32m                ^
[0m[1mremap.c:145:4: [0m[0;1;36mnote: [0m Execution continues on line 155[0m
  145 |                         break;[0m
      | [0;1;32m                        ^
[0m[1mremap.c:155:6: [0m[0;1;36mnote: [0m'type' is not equal to POS[0m
  155 |                 if(type == POS) {[0m
      | [0;1;32m                   ^~~~
[0m[1mremap.c:155:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  155 |                 if(type == POS) {[0m
      | [0;1;32m                ^
[0m[1mremap.c:159:6: [0m[0;1;36mnote: [0m'type' is not equal to SKIP[0m
  159 |                 if(type != SKIP) {[0m
      | [0;1;32m                   ^~~~
[0m[1mremap.c:159:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  159 |                 if(type != SKIP) {[0m
      | [0;1;32m                ^
[0m[1mremap.c:160:8: [0m[0;1;36mnote: [0m'countOnly' is 0[0m
  160 |                         if(!countOnly) {[0m
      | [0;1;32m                            ^~~~~~~~~
[0m[1mremap.c:160:4: [0m[0;1;36mnote: [0mTaking true branch[0m
  160 |                         if(!countOnly) {[0m
      | [0;1;32m                        ^
[0m[1mremap.c:169:6: [0m[0;1;36mnote: [0m'type' is equal to ZERO[0m
  169 |                 if(type != ZERO) {[0m
      | [0;1;32m                   ^~~~
[0m[1mremap.c:169:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  169 |                 if(type != ZERO) {[0m
      | [0;1;32m                ^
[0m[1mremap.c:121:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  121 |         while(!atEnd) {[0m
      | [0;1;32m        ^
[0m[1mremap.c:124:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  124 |                 if(*ptr=='\0') {[0m
      | [0;1;32m                ^
[0m[1mremap.c:142:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 143[0m
  142 |                 switch(*ptr) {[0m
      | [0;1;32m                ^
[0m[1mremap.c:145:4: [0m[0;1;36mnote: [0m Execution continues on line 155[0m
  145 |                         break;[0m
      | [0;1;32m                        ^
[0m[1mremap.c:155:6: [0m[0;1;36mnote: [0m'type' is not equal to POS[0m
  155 |                 if(type == POS) {[0m
      | [0;1;32m                   ^~~~
[0m[1mremap.c:155:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  155 |                 if(type == POS) {[0m
      | [0;1;32m                ^
[0m[1mremap.c:159:6: [0m[0;1;36mnote: [0m'type' is not equal to SKIP[0m
  159 |                 if(type != SKIP) {[0m
      | [0;1;32m                   ^~~~
[0m[1mremap.c:159:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  159 |                 if(type != SKIP) {[0m
      | [0;1;32m                ^
[0m[1mremap.c:160:8: [0m[0;1;36mnote: [0m'countOnly' is 0[0m
  160 |                         if(!countOnly) {[0m
      | [0;1;32m                            ^~~~~~~~~
[0m[1mremap.c:160:4: [0m[0;1;36mnote: [0mTaking true branch[0m
  160 |                         if(!countOnly) {[0m
      | [0;1;32m                        ^
[0m[1mremap.c:162:8: [0m[0;1;36mnote: [0mAccess of the heap area at index 1, while it holds only a single 'struct map' element[0m
  162 |                                 m->orig = orig;[0m
      | [0;1;32m                                ~~~^~~~
[0m[1mremap.c:189:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  189 |         memset((void*)This, 0, sizeof(Remap_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mremap.c:189:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  189 |         memset((void*)This, 0, sizeof(Remap_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mremap.c:207:59: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  207 |         if(adjust_tot_sectors(dev, This->net_offset, errmsg) < 0)[0m
      | [0;1;32m                                                                 ^
[0m      | [0;32m                                                                  {
[0m  208 |                 goto exit_1;[0m
      | [0;1;32m                            
[0m15 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[59/72][100.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpq07z3l_w.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/xdf_io.c
[1mxdf_io.c:132:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  132 |                                 return bytes;[0m
      | [0;1;32m                                ^           
[0m      | [0;32m                                {           ;} 
[0m[1mxdf_io.c:134:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  134 |                                 raw_cmd++;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  135 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mxdf_io.c:137:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  137 |                                 if(bytes)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  138 |                                         return bytes;[0m
  139 |                                 else[0m
  140 |                                         return 0;[0m
      | [0;1;32m                                                
[0m      | [0;32m                                                ;} 
[0m[1mxdf_io.c:137:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  137 |                                 if(bytes)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  138 |                                         return bytes;[0m
  139 |                                 else[0m
      | [0;32m                                } 
[0m[1mxdf_io.c:139:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  139 |                                 else[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  140 |                                         return 0;[0m
      | [0;1;32m                                                 
[0m[1mxdf_io.c:153:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  153 |         if(!nr)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  154 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mxdf_io.c:158:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  158 |                                 return -1;[0m
      | [0;1;32m                                ^        
[0m      | [0;32m                                {        ;} 
[0m[1mxdf_io.c:160:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  160 |                                 j++;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  161 |                                 continue;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mxdf_io.c:163:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  163 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mxdf_io.c:165:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  165 |                 if((ret=analyze_reply(raw_cmd, j)) > 0)[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  166 |                         return ret; /* ok */[0m
      | [0;1;32m                                            
[0m[1mxdf_io.c:169:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  169 |                 fprintf(stderr,"Too many errors, giving up\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mxdf_io.c:169:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  169 |                 fprintf(stderr,"Too many errors, giving up\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mxdf_io.c:195:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  195 |                 if(direction== MT_READ)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  196 |                         memset(This->buffer + ptr * This->sector_size, 0,[0m
  197 |                                128u << REC.sizecode);[0m
      | [0;1;32m                                                     
[0m[1mxdf_io.c:196:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  196 |                         memset(This->buffer + ptr * This->sector_size, 0,[0m
      | [0;1;32m                        ^~~~~~
[0m[1mxdf_io.c:196:4: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  196 |                         memset(This->buffer + ptr * This->sector_size, 0,[0m
      | [0;1;32m                        ^~~~~~
[0m[1mxdf_io.c:208:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  208 |                 if(*nr)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  209 |                         RR_SETCONT(request+(*nr)-1);[0m
      | [0;1;32m                                                    
[0m[1mxdf_io.c:235:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  235 |         if(!REC.valid)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  236 |                 add_to_request(This, ptr, request, nr, MT_READ, compactify);[0m
      | [0;1;32m                                                                            
[0m[1mxdf_io.c:257:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  257 |         if(!This->track_valid)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  258 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mxdf_io.c:261:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  261 |         for(ptr=0; ptr < This->last_sector; ptr=REC.end)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  262 |                 if(REC.dirty)[0m
  263 |                         add_to_request(This, ptr,[0m
  264 |                                        requests, &nr,[0m
  265 |                                        MT_WRITE, &compactify);[0m
      | [0;1;32m                                                              
[0m[1mxdf_io.c:262:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  262 |                 if(REC.dirty)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  263 |                         add_to_request(This, ptr,[0m
  264 |                                        requests, &nr,[0m
  265 |                                        MT_WRITE, &compactify);[0m
      | [0;1;32m                                                              
[0m[1mxdf_io.c:268:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  268 |         if(bytes < 0)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  269 |                 return bytes;[0m
      | [0;1;32m                             
[0m[1mxdf_io.c:273:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  273 |         for(ptr=0; ptr < This->last_sector; ptr=REC.end)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  274 |                 if(REC.dirty) {[0m
  275 |                         if(bytes >= REC.end - REC.begin) {[0m
  276 |                                 bytes -= REC.end - REC.begin;[0m
  277 |                                 REC.dirty = 0;[0m
  278 |                         } else[0m
  279 |                                 return 1;[0m
  280 |                 }[0m
      | [0;1;32m                 
[0m[1mxdf_io.c:278:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  278 |                         } else[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  279 |                                 return 1;[0m
      | [0;1;32m                                         
[0m[1mxdf_io.c:291:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  291 |                 if(ret < 0)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  292 |                         return ret;[0m
      | [0;1;32m                                   
[0m[1mxdf_io.c:310:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  310 |         for(ptr=REC.begin; ptr < end ; ptr = REC.end)[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m  311 |                 add_to_request_if_invalid(This, ptr, requests, &nr,[0m
  312 |                                           &compactify);[0m
      | [0;1;32m                                                       
[0m[1mxdf_io.c:314:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  314 |         if(bytes < 0)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  315 |                 return bytes;[0m
      | [0;1;32m                             
[0m[1mxdf_io.c:322:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  322 |                         } else if(ptr > begin)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  323 |                                 return ptr * This->sector_size;[0m
  324 |                         else[0m
      | [0;32m                        } 
[0m[1mxdf_io.c:324:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  324 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  325 |                                 return -1;[0m
      | [0;1;32m                                          
[0m[1mxdf_io.c:341:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  341 |                 if(!REC.phantom)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  342 |                         REC.dirty = 1;[0m
      | [0;1;32m                                      
[0m[1mxdf_io.c:355:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  355 |            lend < END(END(lbegin)))[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  356 |                 /* contiguous end & begin, load them in one go */[0m
  357 |                 return load_data(This, begin, end, 4);[0m
      | [0;1;32m                                                      
[0m[1mxdf_io.c:361:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  361 |                 if(ret < 0)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  362 |                         return ret;[0m
      | [0;1;32m                                   
[0m[1mxdf_io.c:367:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  367 |                 if(ret < 0)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  368 |                         return BEGIN(lend) * This->sector_size;[0m
      | [0;1;32m                                                               
[0m[1mxdf_io.c:417:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  417 |         for(n = 0; n < size; ptr++,n++)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  418 |                 REC.phantom = 1;[0m
      | [0;1;32m                                
[0m[1mxdf_io.c:434:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  434 |         if(where + len > track_size)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  435 |                 *end = track_size;[0m
  436 |         else[0m
      | [0;32m        } 
[0m[1mxdf_io.c:436:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  436 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  437 |                 *end = (uint32_t) (where + len);[0m
      | [0;1;32m                                                
[0m[1mxdf_io.c:439:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  439 |         if(This->current_track == track && !boot)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  440 |                 /* already OK, return immediately */[0m
  441 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mxdf_io.c:442:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  442 |         if(!boot)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  443 |                 flush_dirty(This);[0m
      | [0;1;32m                                  
[0m[1mxdf_io.c:444:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  444 |         if(track >= 80)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  445 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mxdf_io.c:497:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  497 |                 if(This->rootskip)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  498 |                         sector++;[0m
      | [0;1;32m                                 
[0m[1mxdf_io.c:518:68: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  518 |         if(decompose(This, truncBytes32(where), len, &begin, &end, 0) < 0)[0m
      | [0;1;32m                                                                          ^
[0m      | [0;32m                                                                           {
[0m  519 |                 /* Read beyond end of device */[0m
  520 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mxdf_io.c:522:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  522 |         if(ret < 0 || (size_t) ret < begin)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  523 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mxdf_io.c:525:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  525 |         memcpy(buf, This->buffer + begin, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1mxdf_io.c:525:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  525 |         memcpy(buf, This->buffer + begin, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1mxdf_io.c:543:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  543 |         if(len2 < 0)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  544 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mxdf_io.c:548:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  548 |         memcpy(This->buffer + begin, buf, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1mxdf_io.c:548:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  548 |         memcpy(This->buffer + begin, buf, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1mxdf_io.c:581:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  581 |                compare(dev->sectors, 48))[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  582 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mxdf_io.c:585:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  585 |             if(compare(dev->heads, 2))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  586 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mxdf_io.c:594:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  594 |                    (!IS_MFORMAT_ONLY(dev) && compare(dev->sectors, sect)))[0m
      | [0;1;32m                                                                          ^
[0m      | [0;32m                                                                           {
[0m  595 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mxdf_io.c:613:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  613 |         if(check_geom(This, dev))[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  614 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mxdf_io.c:643:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  643 |                    check_geom(NULL, dev)))[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  644 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mxdf_io.c:647:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  647 |         if (!This)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  648 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mxdf_io.c:656:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  656 |         if(dev)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  657 |                 This->postcmd = dev->postcmd;[0m
      | [0;1;32m                                             
[0m[1mxdf_io.c:660:13: [0m[0;1;35mwarning: [0m[1mAccess to field 'mode' results in a dereference of a null pointer (loaded from variable 'dev') [clang-analyzer-core.NullDereference][0m
  660 |                         ((mode | dev->mode) & ~O_ACCMODE) |[0m
      | [0;1;32m                                 ^~~
[0m[1mxdf_io.c:642:5: [0m[0;1;36mnote: [0mAssuming 'dev' is null[0m
  642 |         if(dev && ((!SHOULD_USE_XDF(dev) && !getenv("MTOOLS_USE_XDF")) ||[0m
      | [0;1;32m           ^~~
[0m[1mxdf_io.c:642:9: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  642 |         if(dev && ((!SHOULD_USE_XDF(dev) && !getenv("MTOOLS_USE_XDF")) ||[0m
      | [0;1;32m               ^
[0m[1mxdf_io.c:647:6: [0m[0;1;36mnote: [0mAssuming 'This' is non-null[0m
  647 |         if (!This)[0m
      | [0;1;32m            ^~~~~
[0m[1mxdf_io.c:647:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  647 |         if (!This)[0m
      | [0;1;32m        ^
[0m[1mxdf_io.c:656:5: [0m[0;1;36mnote: [0m'dev' is null[0m
  656 |         if(dev)[0m
      | [0;1;32m           ^~~
[0m[1mxdf_io.c:656:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  656 |         if(dev)[0m
      | [0;1;32m        ^
[0m[1mxdf_io.c:660:13: [0m[0;1;36mnote: [0mAccess to field 'mode' results in a dereference of a null pointer (loaded from variable 'dev')[0m
  660 |                         ((mode | dev->mode) & ~O_ACCMODE) |[0m
      | [0;1;32m                                 ^~~
[0m[1mxdf_io.c:664:3: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  664 |                 snprintf(errmsg,199,"xdf floppy: open: \"%s\"", strerror(errno));[0m
      | [0;1;32m                ^~~~~~~~
[0m[1mxdf_io.c:664:3: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  664 |                 snprintf(errmsg,199,"xdf floppy: open: \"%s\"", strerror(errno));[0m
      | [0;1;32m                ^~~~~~~~
[0m[1mxdf_io.c:673:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  673 |         if(This->drive < 0)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  674 |                 goto exit_1;[0m
      | [0;1;32m                            
[0m[1mxdf_io.c:678:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  678 |         if (!This->buffer)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  679 |                 goto exit_1;[0m
      | [0;1;32m                            
[0m[1mxdf_io.c:684:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  684 |         if(!This->track_map)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  685 |                 goto exit_2;[0m
      | [0;1;32m                            
[0m[1mxdf_io.c:690:3: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  690 |                 snprintf(errmsg,199,"xdf floppy: device \"%s\" busy:",[0m
      | [0;1;32m                ^~~~~~~~
[0m[1mxdf_io.c:690:3: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  690 |                 snprintf(errmsg,199,"xdf floppy: device \"%s\" busy:",[0m
      | [0;1;32m                ^~~~~~~~
[0m[1mxdf_io.c:705:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  705 |                 if(load_data(This, 0, 1, 4) < 0)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  706 |                         goto exit_3;[0m
      | [0;1;32m                                    
[0m[1mxdf_io.c:713:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  713 |                 fprintf(stderr, "Fat size %d too large\n", fatSize);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mxdf_io.c:713:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  713 |                 fprintf(stderr, "Fat size %d too large\n", fatSize);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mxdf_io.c:728:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  728 |         if(type == NUMBER(xdf_table))[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  729 |                 goto exit_3;[0m
      | [0;1;32m                            
[0m[1mxdf_io.c:738:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  738 |         if(dev)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  739 |                 set_geom(This, dev);[0m
      | [0;1;32m                                    
[0m64 warnings generated.
Suppressed 5 warnings (5 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[60/72][119.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpg2z6m6t2.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mk_direntry.c
[1mmk_direntry.c:48:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   48 |         if (dn->base[0] == '\xE5')[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m   49 |                 dn->base[0] = '\x05';[0m
      | [0;1;32m                                     
[0m[1mmk_direntry.c:78:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |         if(!opentty(0))[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   79 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmk_direntry.c:84:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   84 |                 fprintf(stderr, "New %s name for \"%s\": ",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:84:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   84 |                 fprintf(stderr, "New %s name for \"%s\": ",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:87:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   87 |                 if (! fgets(tname, 4*MAX_VNAMELEN+1, opentty(0)))[0m
      | [0;1;32m                                                                 ^
[0m      | [0;32m                                                                  {
[0m   88 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mmk_direntry.c:90:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   90 |                 if (isprimary)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m   91 |                         strcpy(longname, tname);[0m
   92 |                 else[0m
      | [0;32m                } 
[0m[1mmk_direntry.c:91:4: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   91 |                         strcpy(longname, tname);[0m
      | [0;1;32m                        ^~~~~~
[0m[1mmk_direntry.c:91:4: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
   91 |                         strcpy(longname, tname);[0m
      | [0;1;32m                        ^~~~~~
[0m[1mmk_direntry.c:92:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   92 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   93 |                         mangled = convert_to_shortname(cp,[0m
   94 |                                                        ch, tname, shortname);[0m
      | [0;1;32m                                                                             
[0m[1mmk_direntry.c:156:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  156 |         if (!isprimary)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  157 |                 name = unix_normalize(cp, name_buffer,[0m
  158 |                                       dosname, sizeof(*dosname));[0m
  159 |         else[0m
      | [0;32m        } 
[0m[1mmk_direntry.c:159:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  159 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  160 |                 name = longname;[0m
      | [0;1;32m                                
[0m[1mmk_direntry.c:164:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  164 |                 fprintf(stderr, "%s file name \"%s\" %s.\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:164:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  164 |                 fprintf(stderr, "%s file name \"%s\" %s.\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:166:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  166 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:166:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  166 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:168:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  168 |                 if(!no_overwrite)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  169 |                         fprintf(stderr,"o)verwrite O)verwrite-all");[0m
      | [0;1;32m                                                                    
[0m[1mmk_direntry.c:169:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  169 |                         fprintf(stderr,"o)verwrite O)verwrite-all");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmk_direntry.c:169:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  169 |                         fprintf(stderr,"o)verwrite O)verwrite-all");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmk_direntry.c:170:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  170 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:170:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  170 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:172:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  172 |                 if(!no_overwrite)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  173 |                         fprintf(stderr,"oO");[0m
      | [0;1;32m                                             
[0m[1mmk_direntry.c:173:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  173 |                         fprintf(stderr,"oO");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmk_direntry.c:173:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  173 |                         fprintf(stderr,"oO");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmk_direntry.c:174:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  174 |                 fprintf(stderr,"sSq): ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:174:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  174 |                 fprintf(stderr,"sSq): ");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:181:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  181 |                         if(rep == EOF)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  182 |                                 ans[0] = 'q';[0m
  183 |                         else[0m
      | [0;32m                        } 
[0m[1mmk_direntry.c:183:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  183 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  184 |                                 ans[0] = (char) rep;[0m
      | [0;1;32m                                                    
[0m[1mmk_direntry.c:186:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  186 |                         if(fgets(ans, 9, opentty(0)) == NULL)[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m  187 |                                 ans[0] = 'q';[0m
      | [0;1;32m                                             
[0m[1mmk_direntry.c:192:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  192 |                                 a = NAMEMATCH_AUTORENAME;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  193 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmk_direntry.c:195:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  195 |                                 if(isprimary)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  196 |                                         a = NAMEMATCH_PRENAME;[0m
  197 |                                 else[0m
  198 |                                         a = NAMEMATCH_RENAME;[0m
  199 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmk_direntry.c:195:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  195 |                                 if(isprimary)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  196 |                                         a = NAMEMATCH_PRENAME;[0m
  197 |                                 else[0m
      | [0;32m                                } 
[0m[1mmk_direntry.c:197:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  197 |                                 else[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  198 |                                         a = NAMEMATCH_RENAME;[0m
      | [0;1;32m                                                             
[0m[1mmk_direntry.c:201:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  201 |                                 if(no_overwrite)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  202 |                                         continue;[0m
  203 |                                 a = NAMEMATCH_OVERWRITE;[0m
  204 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmk_direntry.c:201:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  201 |                                 if(no_overwrite)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  202 |                                         continue;[0m
      | [0;1;32m                                                 
[0m[1mmk_direntry.c:206:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  206 |                                 a = NAMEMATCH_SKIP;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  207 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmk_direntry.c:209:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  209 |                                 perm = 0;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  210 |                                 a = NAMEMATCH_QUIT;[0m
  211 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmk_direntry.c:213:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  213 |                                 perm = 0;[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmk_direntry.c:219:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  219 |         if (perm)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  220 |                 ch->namematch_default[isprimary] = a;[0m
      | [0;1;32m                                                     
[0m[1mmk_direntry.c:227:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  227 |         if(a == NAMEMATCH_OVERWRITE)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  228 |                 ch->action[isprimary] = NAMEMATCH_NONE;[0m
      | [0;1;32m                                                       
[0m[1mmk_direntry.c:269:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  269 |                 got_signal = 1;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  270 |                 return NAMEMATCH_SKIP;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmk_direntry.c:272:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  272 |                 return NAMEMATCH_SKIP;[0m
      | [0;1;32m                ^                    
[0m      | [0;32m                {                    ;} 
[0m[1mmk_direntry.c:281:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  281 |                 return action;[0m
      | [0;1;32m                ^            
[0m      | [0;32m                {            ;} 
[0m[1mmk_direntry.c:288:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  288 |                 if (isprimary) {[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  289 |                         autorename_long(longname, 1);[0m
  290 |                         return NAMEMATCH_PRENAME;[0m
  291 |                 } else {[0m
  292 |                         autorename_short(dosname, 1);[0m
  293 |                         return NAMEMATCH_RENAME;[0m
  294 |                 }[0m
      | [0;1;32m                 
[0m      | [0;32m                 ;} 
[0m[1mmk_direntry.c:296:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  296 |                 if(no_overwrite)[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  297 |                         return NAMEMATCH_SKIP;[0m
  298 |                 else[0m
  299 |                         return NAMEMATCH_OVERWRITE;[0m
      | [0;1;32m                                                  
[0m      | [0;32m                                                  ;} 
[0m[1mmk_direntry.c:296:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  296 |                 if(no_overwrite)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  297 |                         return NAMEMATCH_SKIP;[0m
  298 |                 else[0m
      | [0;32m                } 
[0m[1mmk_direntry.c:298:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  298 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  299 |                         return NAMEMATCH_OVERWRITE;[0m
      | [0;1;32m                                                   
[0m[1mmk_direntry.c:312:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  312 |         for(; *string && len--; string++)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  313 |                 if((*string < ' ' && *string != '\005' && !(*string & 0x80)) ||[0m
  314 |                    strchr(illegals, *string))[0m
  315 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mmk_direntry.c:314:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  314 |                    strchr(illegals, *string))[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  315 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mmk_direntry.c:325:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  325 |         for (i = 0; i < sizeof(dev3)/sizeof(*dev3); i++)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  326 |                 if (!strncasecmp(ans, dev3[i], 3) &&[0m
  327 |                     ((islong && !ans[3]) ||[0m
  328 |                      (!islong && !strncmp(ans+3,"     ",5))))[0m
  329 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mmk_direntry.c:328:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  328 |                      (!islong && !strncmp(ans+3,"     ",5))))[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m  329 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mmk_direntry.c:331:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  331 |         for (i = 0; i < sizeof(dev4)/sizeof(*dev4); i++)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  332 |                 if (!strncasecmp(ans, dev4[i], 3) &&[0m
  333 |                     (ans[3] >= '1' && ans[3] <= '4') &&[0m
  334 |                     ((islong && !ans[4]) ||[0m
  335 |                      (!islong && !strncmp(ans+4,"    ",4))))[0m
  336 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mmk_direntry.c:335:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  335 |                      (!islong && !strncmp(ans+4,"    ",4))))[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m  336 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mmk_direntry.c:388:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  388 |                                 return NAMEMATCH_ERROR;[0m
      | [0;1;32m                                ^                     
[0m      | [0;32m                                {                     ;} 
[0m[1mmk_direntry.c:391:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  391 |                                 return NAMEMATCH_SKIP;[0m
      | [0;1;32m                                ^                    
[0m      | [0;32m                                {                    ;} 
[0m[1mmk_direntry.c:395:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  395 |                                 return NAMEMATCH_GREW;[0m
      | [0;1;32m                                ^                    
[0m      | [0;32m                                {                    ;} 
[0m[1mmk_direntry.c:399:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  399 |                                 return NAMEMATCH_SUCCESS; /* Success */[0m
      | [0;1;32m                                ^                       
[0m      | [0;32m                                {                       ;} 
[0m[1mmk_direntry.c:438:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  438 |                 } else[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  439 |                         return NAMEMATCH_RENAME;[0m
      | [0;1;32m                                                
[0m[1mmk_direntry.c:444:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  444 |                         if (error)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  445 |                             return NAMEMATCH_ERROR;[0m
      | [0;1;32m                                                   
[0m[1mmk_direntry.c:454:22: [0m[0;1;35mwarning: [0m[1mThe left operand of '&' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult][0m
  454 |                 if((entry.dir.attr & 0x5) &&[0m
      | [0;1;32m                                   ^
[0m[1mmk_direntry.c:657:5: [0m[0;1;36mnote: [0mAssuming '_argname' is non-null[0m
  657 |         if(_argname)[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mmk_direntry.c:657:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  657 |         if(_argname)[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:661:5: [0m[0;1;36mnote: [0mAssuming '_shortname' is non-null[0m
  661 |         if(_shortname)[0m
      | [0;1;32m           ^~~~~~~~~~
[0m[1mmk_direntry.c:661:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  661 |         if(_shortname)[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:665:8: [0m[0;1;36mnote: [0mCalling '_mwrite_one'[0m
  665 |         ret = _mwrite_one(Dir, argname, shortname, cb, arg, ch);[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:550:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  550 |         if(isSpecial(argname)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:550:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  550 |         if(isSpecial(argname)) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:555:5: [0m[0;1;36mnote: [0mAssuming field 'name_converter' is not equal to dos_name[0m
  555 |         if(ch->name_converter == dos_name) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:555:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  555 |         if(ch->name_converter == dos_name) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:562:5: [0m[0;1;36mnote: [0mAssuming 'shortname' is null[0m
  562 |         if(shortname){[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmk_direntry.c:562:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  562 |         if(shortname){[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:571:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m            ^~~~~~~~~~
[0m[1mmk_direntry.c:571:6: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mmk_direntry.c:571:21: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:571:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:581:5: [0m[0;1;36mnote: [0m'shortname' is null[0m
  581 |         if(shortname) {[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmk_direntry.c:581:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  581 |         if(shortname) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:594:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  594 |         while (1) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mCalling 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:357:28: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  357 |         pessimisticShortRename = (ch->action[0] == NAMEMATCH_AUTORENAME);[0m
      | [0;1;32m                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:31: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m                                     ^
[0m[1mmk_direntry.c:453:6: [0m[0;1;36mnote: [0mAssuming 'ret' is equal to NAMEMATCH_OVERWRITE[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:453:6: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mmk_direntry.c:453:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:454:22: [0m[0;1;36mnote: [0mThe left operand of '&' is a garbage value[0m
  454 |                 if((entry.dir.attr & 0x5) &&[0m
      | [0;1;32m                    ~~~~~~~~~~~~~~ ^
[0m[1mmk_direntry.c:455:73: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  455 |                    (ask_confirmation("file is read only, overwrite anyway (y/n) ? ")))[0m
      | [0;1;32m                                                                                      ^
[0m      | [0;32m                                                                                       {
[0m  456 |                         return NAMEMATCH_RENAME;[0m
      | [0;1;32m                                                
[0m[1mmk_direntry.c:458:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  458 |                 if(fatFreeWithDirentry(&entry))[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  459 |                         return NAMEMATCH_ERROR;[0m
      | [0;1;32m                                               
[0m[1mmk_direntry.c:495:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  495 |         if (fat_error(Dir))[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  496 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmk_direntry.c:499:9: [0m[0;1;35mwarning: [0m[1mBranch condition evaluates to a garbage value [clang-analyzer-core.uninitialized.Branch][0m
  499 |         assert(ssp->got_slots);[0m
      | [0;1;32m               ^
[0m[1mmk_direntry.c:657:5: [0m[0;1;36mnote: [0mAssuming '_argname' is null[0m
  657 |         if(_argname)[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mmk_direntry.c:657:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  657 |         if(_argname)[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:661:5: [0m[0;1;36mnote: [0mAssuming '_shortname' is non-null[0m
  661 |         if(_shortname)[0m
      | [0;1;32m           ^~~~~~~~~~
[0m[1mmk_direntry.c:661:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  661 |         if(_shortname)[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:665:8: [0m[0;1;36mnote: [0mCalling '_mwrite_one'[0m
  665 |         ret = _mwrite_one(Dir, argname, shortname, cb, arg, ch);[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:550:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  550 |         if(isSpecial(argname)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:550:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  550 |         if(isSpecial(argname)) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:555:5: [0m[0;1;36mnote: [0mAssuming field 'name_converter' is not equal to dos_name[0m
  555 |         if(ch->name_converter == dos_name) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:555:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  555 |         if(ch->name_converter == dos_name) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:562:5: [0m[0;1;36mnote: [0mAssuming 'shortname' is non-null[0m
  562 |         if(shortname){[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmk_direntry.c:562:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  562 |         if(shortname){[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:564:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  564 |                 if(ch->use_longname & 1){[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:564:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  564 |                 if(ch->use_longname & 1){[0m
      | [0;1;32m                ^
[0m[1mmk_direntry.c:571:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m            ^~~~~~~~~~
[0m[1mmk_direntry.c:571:17: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m                       ^
[0m[1mmk_direntry.c:581:5: [0m[0;1;36mnote: [0m'shortname' is null[0m
  581 |         if(shortname) {[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmk_direntry.c:581:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  581 |         if(shortname) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:594:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  594 |         while (1) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mCalling 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:357:28: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  357 |         pessimisticShortRename = (ch->action[0] == NAMEMATCH_AUTORENAME);[0m
      | [0;1;32m                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:31: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m                                     ^
[0m[1mmk_direntry.c:453:6: [0m[0;1;36mnote: [0m'ret' is not equal to NAMEMATCH_OVERWRITE[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m            ^~~
[0m[1mmk_direntry.c:453:33: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m                                       ^
[0m[1mmk_direntry.c:480:2: [0m[0;1;36mnote: [0mReturning without writing to 'ssp->got_slots'[0m
  480 |         return ret;[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mReturning from 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:595:3: [0m[0;1;36mnote: [0mControl jumps to 'case NAMEMATCH_PRENAME:'  at line 604[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                ^
[0m[1mmk_direntry.c:609:5: [0m[0;1;36mnote: [0m Execution continues on line 594[0m
  609 |                                 continue;[0m
      | [0;1;32m                                ^
[0m[1mmk_direntry.c:594:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  594 |         while (1) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mCalling 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:31: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m                                     ^
[0m[1mmk_direntry.c:453:6: [0m[0;1;36mnote: [0m'ret' is not equal to NAMEMATCH_OVERWRITE[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m            ^~~
[0m[1mmk_direntry.c:453:33: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m                                       ^
[0m[1mmk_direntry.c:480:2: [0m[0;1;36mnote: [0mReturning without writing to 'ssp->got_slots'[0m
  480 |         return ret;[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mReturning from 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:595:3: [0m[0;1;36mnote: [0mControl jumps to 'case NAMEMATCH_PRENAME:'  at line 604[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                ^
[0m[1mmk_direntry.c:609:5: [0m[0;1;36mnote: [0m Execution continues on line 594[0m
  609 |                                 continue;[0m
      | [0;1;32m                                ^
[0m[1mmk_direntry.c:594:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  594 |         while (1) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mCalling 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:31: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m                                     ^
[0m[1mmk_direntry.c:453:6: [0m[0;1;36mnote: [0m'ret' is not equal to NAMEMATCH_OVERWRITE[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m            ^~~
[0m[1mmk_direntry.c:453:33: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m                                       ^
[0m[1mmk_direntry.c:480:2: [0m[0;1;36mnote: [0mReturning without writing to 'ssp->got_slots'[0m
  480 |         return ret;[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mReturning from 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:595:3: [0m[0;1;36mnote: [0mControl jumps to 'case NAMEMATCH_PRENAME:'  at line 604[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                ^
[0m[1mmk_direntry.c:609:5: [0m[0;1;36mnote: [0m Execution continues on line 594[0m
  609 |                                 continue;[0m
      | [0;1;32m                                ^
[0m[1mmk_direntry.c:594:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  594 |         while (1) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mCalling 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:31: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m                                     ^
[0m[1mmk_direntry.c:453:6: [0m[0;1;36mnote: [0mAssuming 'ret' is not equal to NAMEMATCH_OVERWRITE[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:453:33: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m                                       ^
[0m[1mmk_direntry.c:480:2: [0m[0;1;36mnote: [0mReturning without writing to 'ssp->got_slots'[0m
  480 |         return ret;[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mReturning from 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:595:3: [0m[0;1;36mnote: [0mControl jumps to 'case NAMEMATCH_SUCCESS:'  at line 630[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                ^
[0m[1mmk_direntry.c:631:12: [0m[0;1;36mnote: [0mCalling 'write_slots'[0m
  631 |                                 return write_slots(Dir, &dosname, longname,[0m
      | [0;1;32m                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  632 |                                                    &scan, cb, arg,[0m
      | [0;1;32m                                                   ~~~~~~~~~~~~~~~
[0m  633 |                                                    ch->use_longname);[0m
      | [0;1;32m                                                   ~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:495:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  495 |         if (fat_error(Dir))[0m
      | [0;1;32m            ^~~~~~~~~~~~~~
[0m[1mmk_direntry.c:495:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  495 |         if (fat_error(Dir))[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:499:9: [0m[0;1;36mnote: [0mBranch condition evaluates to a garbage value[0m
  499 |         assert(ssp->got_slots);[0m
      | [0;1;32m               ^
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^~~~
[0m[1mmk_direntry.c:514:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  514 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  515 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmk_direntry.c:525:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  525 |         for(p=name; *p; p++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  526 |                 if (*p != ' ')[0m
  527 |                         non_space = p;[0m
      | [0;1;32m                                      
[0m[1mmk_direntry.c:526:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  526 |                 if (*p != ' ')[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  527 |                         non_space = p;[0m
      | [0;1;32m                                      
[0m[1mmk_direntry.c:528:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  528 |         if(name[0])[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  529 |                 non_space[1] = '\0';[0m
      | [0;1;32m                                    
[0m[1mmk_direntry.c:551:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  551 |                 fprintf(stderr, "Cannot create entry named . or ..\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:551:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  551 |                 fprintf(stderr, "Cannot create entry named . or ..\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmk_direntry.c:556:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  556 |                 if(shortname)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  557 |                         stripspaces(shortname);[0m
      | [0;1;32m                                               
[0m[1mmk_direntry.c:558:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  558 |                 if(argname)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  559 |                         stripspaces(argname);[0m
      | [0;1;32m                                             
[0m[1mmk_direntry.c:571:6: [0m[0;1;35mwarning: [0m[1mArray access (from variable 'argname') results in a null pointer dereference [clang-analyzer-core.NullDereference][0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m            ^
[0m[1mmk_direntry.c:657:5: [0m[0;1;36mnote: [0mAssuming '_argname' is null[0m
  657 |         if(_argname)[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mmk_direntry.c:657:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  657 |         if(_argname)[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:660:3: [0m[0;1;36mnote: [0mNull pointer value stored to 'argname'[0m
  660 |                 argname = 0;[0m
      | [0;1;32m                ^~~~~~~~~~~
[0m[1mmk_direntry.c:661:5: [0m[0;1;36mnote: [0mAssuming '_shortname' is null[0m
  661 |         if(_shortname)[0m
      | [0;1;32m           ^~~~~~~~~~
[0m[1mmk_direntry.c:661:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  661 |         if(_shortname)[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:665:25: [0m[0;1;36mnote: [0mPassing null pointer value via 2nd parameter 'argname'[0m
  665 |         ret = _mwrite_one(Dir, argname, shortname, cb, arg, ch);[0m
      | [0;1;32m                               ^~~~~~~
[0m[1mmk_direntry.c:665:8: [0m[0;1;36mnote: [0mCalling '_mwrite_one'[0m
  665 |         ret = _mwrite_one(Dir, argname, shortname, cb, arg, ch);[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:550:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  550 |         if(isSpecial(argname)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:550:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  550 |         if(isSpecial(argname)) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:555:5: [0m[0;1;36mnote: [0mAssuming field 'name_converter' is not equal to dos_name[0m
  555 |         if(ch->name_converter == dos_name) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:555:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  555 |         if(ch->name_converter == dos_name) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:562:5: [0m[0;1;36mnote: [0m'shortname' is null[0m
  562 |         if(shortname){[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmk_direntry.c:562:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  562 |         if(shortname){[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:571:6: [0m[0;1;36mnote: [0mArray access (from variable 'argname') results in a null pointer dereference[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m            ^~~~~~~
[0m[1mmk_direntry.c:579:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  579 |         strncpy(longname, dstname, VBUFSIZE-1);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmk_direntry.c:579:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  579 |         strncpy(longname, dstname, VBUFSIZE-1);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmk_direntry.c:584:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  584 |                 if(strcmp(shortname, longname))[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  585 |                         ch->use_longname |= 1;[0m
      | [0;1;32m                                              
[0m[1mmk_direntry.c:597:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  597 |                                 return -1;      /* Non-file-specific error,[0m
      | [0;1;32m                                ^        
[0m      | [0;32m                                {        ;} 
[0m[1mmk_direntry.c:601:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  601 |                                 return -1;      /* Skip file (user request or[0m
      | [0;1;32m                                ^        
[0m      | [0;32m                                {        ;} 
[0m[1mmk_direntry.c:605:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  605 |                                 ch->use_longname =[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  606 |                                         convert_to_shortname(cp, ch,[0m
  607 |                                                              longname,[0m
  608 |                                                              &dosname);[0m
  609 |                                 continue;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mmk_direntry.c:611:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  611 |                                 continue;       /* Renamed file, loop again */[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmk_direntry.c:617:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  617 |                                 if (expanded) { /* Already tried this[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  618 |                                                  * once, no good */[0m
  619 |                                         fprintf(stderr,[0m
  620 |                                                 "%s: No directory slots\n",[0m
  621 |                                                 progname);[0m
  622 |                                         return -1;[0m
  623 |                                 }[0m
  624 |                                 expanded = 1;[0m
  625 | [0m
  626 |                                 if (dir_grow(Dir, scan.max_entry))[0m
  627 |                                         return -1;[0m
  628 |                                 continue;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mmk_direntry.c:619:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  619 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmk_direntry.c:619:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  619 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmk_direntry.c:626:9: [0m[0;1;35mwarning: [0m[1m2nd function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage][0m
  626 |                                 if (dir_grow(Dir, scan.max_entry))[0m
      | [0;1;32m                                    ^
[0m[1mmk_direntry.c:657:5: [0m[0;1;36mnote: [0mAssuming '_argname' is null[0m
  657 |         if(_argname)[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mmk_direntry.c:657:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  657 |         if(_argname)[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:661:5: [0m[0;1;36mnote: [0mAssuming '_shortname' is non-null[0m
  661 |         if(_shortname)[0m
      | [0;1;32m           ^~~~~~~~~~
[0m[1mmk_direntry.c:661:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  661 |         if(_shortname)[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:665:8: [0m[0;1;36mnote: [0mCalling '_mwrite_one'[0m
  665 |         ret = _mwrite_one(Dir, argname, shortname, cb, arg, ch);[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:550:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  550 |         if(isSpecial(argname)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:550:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  550 |         if(isSpecial(argname)) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:555:5: [0m[0;1;36mnote: [0mAssuming field 'name_converter' is not equal to dos_name[0m
  555 |         if(ch->name_converter == dos_name) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:555:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  555 |         if(ch->name_converter == dos_name) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:562:5: [0m[0;1;36mnote: [0mAssuming 'shortname' is non-null[0m
  562 |         if(shortname){[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmk_direntry.c:562:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  562 |         if(shortname){[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:564:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  564 |                 if(ch->use_longname & 1){[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:564:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  564 |                 if(ch->use_longname & 1){[0m
      | [0;1;32m                ^
[0m[1mmk_direntry.c:571:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m            ^~~~~~~~~~
[0m[1mmk_direntry.c:571:6: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mmk_direntry.c:571:21: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:571:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  571 |         if (argname[0] && (argname[1] == ':')) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:581:5: [0m[0;1;36mnote: [0m'shortname' is null[0m
  581 |         if(shortname) {[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmk_direntry.c:581:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  581 |         if(shortname) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:594:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  594 |         while (1) {[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mCalling 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:357:28: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  357 |         pessimisticShortRename = (ch->action[0] == NAMEMATCH_AUTORENAME);[0m
      | [0;1;32m                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:361:31: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  361 |         if((is_reserved(longname,1)) ||[0m
      | [0;1;32m                                     ^
[0m[1mmk_direntry.c:453:6: [0m[0;1;36mnote: [0mAssuming 'ret' is not equal to NAMEMATCH_OVERWRITE[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:453:33: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  453 |         if (ret == NAMEMATCH_OVERWRITE && match_pos > -1){[0m
      | [0;1;32m                                       ^
[0m[1mmk_direntry.c:480:2: [0m[0;1;36mnote: [0mReturning without writing to 'ssp->max_entry'[0m
  480 |         return ret;[0m
      | [0;1;32m        ^
[0m[1mmk_direntry.c:595:15: [0m[0;1;36mnote: [0mReturning from 'get_slots'[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:595:3: [0m[0;1;36mnote: [0mControl jumps to 'case NAMEMATCH_GREW:'  at line 613[0m
  595 |                 switch((ret=get_slots(Dir, &dosname, longname, &scan, ch))){[0m
      | [0;1;32m                ^
[0m[1mmk_direntry.c:617:9: [0m[0;1;36mnote: [0m'expanded' is 0[0m
  617 |                                 if (expanded) { /* Already tried this[0m
      | [0;1;32m                                    ^~~~~~~~
[0m[1mmk_direntry.c:617:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  617 |                                 if (expanded) { /* Already tried this[0m
      | [0;1;32m                                ^
[0m[1mmk_direntry.c:626:9: [0m[0;1;36mnote: [0m2nd function call argument is an uninitialized value[0m
  626 |                                 if (dir_grow(Dir, scan.max_entry))[0m
      | [0;1;32m                                    ^             ~~~~~~~~~~~~~~
[0m[1mmk_direntry.c:626:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  626 |                                 if (dir_grow(Dir, scan.max_entry))[0m
      | [0;1;32m                                                                  ^
[0m      | [0;32m                                                                   {
[0m  627 |                                         return -1;[0m
      | [0;1;32m                                                  
[0m[1mmk_direntry.c:637:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  637 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmk_direntry.c:637:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  637 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmk_direntry.c:640:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  640 |                                 return -1;[0m
      | [0;1;32m                                ^        
[0m      | [0;32m                                {        ;} 
[0m[1mmk_direntry.c:657:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  657 |         if(_argname)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  658 |                 argname = strdup(_argname);[0m
  659 |         else[0m
      | [0;32m        } 
[0m[1mmk_direntry.c:659:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  659 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  660 |                 argname = 0;[0m
      | [0;1;32m                            
[0m[1mmk_direntry.c:661:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  661 |         if(_shortname)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  662 |                 shortname = strdup(_shortname);[0m
  663 |         else[0m
      | [0;32m        } 
[0m[1mmk_direntry.c:663:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  663 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  664 |                 shortname = 0;[0m
      | [0;1;32m                              
[0m[1mmk_direntry.c:666:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  666 |         if(argname)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  667 |                 free(argname);[0m
      | [0;1;32m                              
[0m[1mmk_direntry.c:668:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  668 |         if(shortname)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  669 |                 free(shortname);[0m
      | [0;1;32m                                
[0m[1mmk_direntry.c:688:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  688 |         if(isupper(c))[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  689 |                 isprimary = 0;[0m
  690 |         else[0m
      | [0;32m        } 
[0m[1mmk_direntry.c:690:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  690 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  691 |                 isprimary = 1;[0m
      | [0;1;32m                              
[0m[1mmk_direntry.c:696:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  696 |                         ch->namematch_default[isprimary] = NAMEMATCH_OVERWRITE;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  697 |                         return 0;[0m
      | [0;1;32m                                
[0m      | [0;32m                                ;} 
[0m[1mmk_direntry.c:700:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  700 |                         ch->namematch_default[isprimary] = NAMEMATCH_RENAME;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  701 |                         return 0;[0m
      | [0;1;32m                                
[0m      | [0;32m                                ;} 
[0m[1mmk_direntry.c:704:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  704 |                         ch->namematch_default[isprimary] = NAMEMATCH_SKIP;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  705 |                         return 0;[0m
      | [0;1;32m                                
[0m      | [0;32m                                ;} 
[0m[1mmk_direntry.c:707:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  707 |                         ch->namematch_default[isprimary] = NAMEMATCH_NONE;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  708 |                         return 0;[0m
      | [0;1;32m                                
[0m      | [0;32m                                ;} 
[0m[1mmk_direntry.c:710:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  710 |                         ch->namematch_default[isprimary] = NAMEMATCH_AUTORENAME;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  711 |                         return 0;[0m
      | [0;1;32m                                
[0m      | [0;32m                                ;} 
[0m[1mmk_direntry.c:713:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  713 |                         return -1;[0m
      | [0;1;32m                        ^        
[0m      | [0;32m                        {        ;} 
[0m[1mmk_direntry.c:718:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  718 |         strncpy(dir->name, dn->base, 8);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmk_direntry.c:718:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  718 |         strncpy(dir->name, dn->base, 8);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmk_direntry.c:719:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  719 |         strncpy(dir->ext, dn->ext, 3);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmk_direntry.c:719:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  719 |         strncpy(dir->ext, dn->ext, 3);[0m
      | [0;1;32m        ^~~~~~~
[0m93 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[61/72][117.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp0wimmt52.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/init.c
[1minit.c:50:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   50 |         if(!size)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m   51 |                 size = BOOTSIZE;[0m
      | [0;1;32m                                
[0m[1minit.c:52:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   52 |         if(size > MAX_BOOT)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   53 |                 size = MAX_BOOT;[0m
      | [0;1;32m                                
[0m[1minit.c:55:71: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   55 |         if (force_pread(Stream, boot->characters, 0, size) != (ssize_t) size)[0m
      | [0;1;32m                                                                             ^
[0m      | [0;32m                                                                              {
[0m   56 |                 return -1;[0m
      | [0;1;32m                          
[0m[1minit.c:61:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   61 |                 memset(boot->bytes+boot_sector_size, 0,[0m
      | [0;1;32m                ^~~~~~
[0m[1minit.c:61:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   61 |                 memset(boot->bytes+boot_sector_size, 0,[0m
      | [0;1;32m                ^~~~~~
[0m[1minit.c:110:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |                 if (force_pread(St,temp,512,512) == 512)[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  111 |                         media = (unsigned char) temp[0];[0m
  112 |                 else[0m
      | [0;32m                } 
[0m[1minit.c:112:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  113 |                         media = 0;[0m
      | [0;1;32m                                  
[0m[1minit.c:114:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  114 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  115 |                 media += 0x100;[0m
      | [0;1;32m                               
[0m[1minit.c:122:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  122 |         while(Fs && Fs->Class != &FsClass)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  123 |                 Fs = Fs->Next;[0m
      | [0;1;32m                              
[0m[1minit.c:157:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  157 |                         fprintf(stderr, "The devil is in the details: zero number of heads or sectors\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1minit.c:157:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  157 |                         fprintf(stderr, "The devil is in the details: zero number of heads or sectors\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1minit.c:162:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  162 |                 if(tot_sectors % sect_per_track)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  163 |                         /* round size up */[0m
  164 |                         dev->tracks++;[0m
      | [0;1;32m                                      
[0m[1minit.c:183:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  183 |                         for (sum=0, j=63; j < BootP; j++)[0m
      | [0;1;32m                                                         ^
[0m      | [0;32m                                                          {
[0m  184 |                                 sum += boot->bytes[j];/* checksum */[0m
      | [0;1;32m                                                                    
[0m[1minit.c:193:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  193 |                 if(setDeviceFromOldDos(media, dev) < 0)[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  194 |                         exit(1);[0m
      | [0;1;32m                                
[0m[1minit.c:251:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  251 |                 if(retry_write)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  252 |                         mode |= O_RDWR;[0m
      | [0;1;32m                                       
[0m[1minit.c:280:9: [0m[0;1;35mwarning: [0m[1mAlthough the value stored to 'r' is used in the enclosing expression, the value is never actually read from 'r' [clang-analyzer-deadcode.DeadStores][0m
  280 |                         if ((r=read_boot(Stream, boot, out_dev->blocksize)) < 0){[0m
      | [0;1;32m                             ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1minit.c:280:9: [0m[0;1;36mnote: [0mAlthough the value stored to 'r' is used in the enclosing expression, the value is never actually read from 'r'[0m
  280 |                         if ((r=read_boot(Stream, boot, out_dev->blocksize)) < 0){[0m
      | [0;1;32m                             ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1minit.c:281:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  281 |                                 sprintf(errmsg,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1minit.c:281:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  281 |                                 sprintf(errmsg,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1minit.c:289:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  289 |                                 if (boot->boot.jump[2]=='L')[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m  290 |                                         sprintf(errmsg,[0m
  291 |                                                 "diskette %c: is Linux LILO, not DOS",[0m
  292 |                                                 dev->drive);[0m
  293 |                                 else[0m
      | [0;32m                                } 
[0m[1minit.c:290:6: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  290 |                                         sprintf(errmsg,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1minit.c:290:6: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  290 |                                         sprintf(errmsg,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1minit.c:293:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  293 |                                 else[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  294 |                                         sprintf(errmsg,"init %c: non DOS media", dev->drive);[0m
      | [0;1;32m                                                                                             
[0m[1minit.c:294:6: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  294 |                                         sprintf(errmsg,"init %c: non DOS media", dev->drive);[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1minit.c:294:6: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  294 |                                         sprintf(errmsg,"init %c: non DOS media", dev->drive);[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1minit.c:311:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  311 |                         if(errno)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  312 | #ifdef HAVE_SNPRINTF[0m
  313 |                                 snprintf(errmsg, 199,[0m
  314 |                                          "Can't set disk parameters for %c: %s",[0m
  315 |                                          dev->drive, strerror(errno));[0m
  316 | #else[0m
  317 |                         sprintf(errmsg,[0m
  318 |                                 "Can't set disk parameters for %c: %s",[0m
  319 |                                 dev->drive, strerror(errno));[0m
  320 | #endif[0m
  321 |                         else[0m
      | [0;32m                        } 
[0m[1minit.c:313:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  313 |                                 snprintf(errmsg, 199,[0m
      | [0;1;32m                                ^~~~~~~~
[0m[1minit.c:313:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  313 |                                 snprintf(errmsg, 199,[0m
      | [0;1;32m                                ^~~~~~~~
[0m[1minit.c:321:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  321 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  322 |                                 sprintf(errmsg,[0m
  323 |                                         "Can't set disk parameters for %c",[0m
  324 |                                         dev->drive);[0m
      | [0;1;32m                                                    
[0m[1minit.c:322:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  322 |                                 sprintf(errmsg,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1minit.c:322:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  322 |                                 sprintf(errmsg,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1minit.c:347:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  347 |         if(tot_sectors <= Fs->clus_start)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  348 |                 return -1;[0m
      | [0;1;32m                          
[0m[1minit.c:377:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  377 |         sprintf(errmsg, "Drive '%c:' not supported", drive);[0m
      | [0;1;32m        ^~~~~~~
[0m[1minit.c:377:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  377 |         sprintf(errmsg, "Drive '%c:' not supported", drive);[0m
      | [0;1;32m        ^~~~~~~
[0m[1minit.c:383:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  383 |                 if (dev->drive != drive)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  384 |                         continue;[0m
      | [0;1;32m                                 
[0m[1minit.c:392:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  392 |                         if(isRop)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  393 |                                 *isRop = isRo;[0m
      | [0;1;32m                                              
[0m[1minit.c:399:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  399 |         fprintf(stderr,"%s\n",errmsg);[0m
      | [0;1;32m        ^~~~~~~
[0m[1minit.c:399:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  399 |         fprintf(stderr,"%s\n",errmsg);[0m
      | [0;1;32m        ^~~~~~~
[0m[1minit.c:418:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  418 |                         fprintf(stderr, "Unknown media byte %02x\n", media);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1minit.c:418:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  418 |                         fprintf(stderr, "Unknown media byte %02x\n", media);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1minit.c:436:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  436 |                         fprintf(stderr,"init: sector size too big\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1minit.c:436:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  436 |                         fprintf(stderr,"init: sector size too big\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1minit.c:443:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  443 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1minit.c:443:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  443 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1minit.c:456:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  456 |                 if(!tot_sectors)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  457 |                         tot_sectors = BOOT_DWORD(bigsect);[0m
      | [0;1;32m                                                          
[0m[1minit.c:480:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  480 |         if(calc_num_clus(This, tot_sectors) < 0)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  481 |                 /* Too few sectors */[0m
  482 |                 return 0;[0m
      | [0;1;32m                         
[0m[1minit.c:506:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  506 |         if (!This)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  507 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1minit.c:519:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  519 |         if(!This->head.Next)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  520 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1minit.c:533:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  533 |                 fprintf(stderr, "%s", errmsg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1minit.c:533:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  533 |                 fprintf(stderr, "%s", errmsg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1minit.c:539:2: [0m[0;1;35mwarning: [0m[1mValue stored to 'disk_size' is never read [clang-analyzer-deadcode.DeadStores][0m
  539 |         disk_size = (dev.tracks) ? cylinder_size : 512;[0m
      | [0;1;32m        ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1minit.c:539:2: [0m[0;1;36mnote: [0mValue stored to 'disk_size' is never read[0m
  539 |         disk_size = (dev.tracks) ? cylinder_size : 512;[0m
      | [0;1;32m        ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1minit.c:558:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  558 |                 if(dev.sectors % 2)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  559 |                         disk_size <<= 1;[0m
      | [0;1;32m                                        
[0m[1minit.c:562:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  562 |         if (disk_size % 2)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  563 |                 disk_size *= 2;[0m
      | [0;1;32m                               
[0m[1minit.c:565:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  565 |         if(!dev.blocksize || dev.blocksize < This->sector_size)[0m
      | [0;1;32m                                                               ^
[0m      | [0;32m                                                                {
[0m  566 |                 blocksize = This->sector_size;[0m
  567 |         else[0m
      | [0;32m        } 
[0m[1minit.c:567:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  567 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  568 |                 blocksize = dev.blocksize;[0m
      | [0;1;32m                                          
[0m[1minit.c:575:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  575 |                 if (Buffer != NULL)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  576 |                         This->head.Next = Buffer;[0m
  577 |                 else[0m
      | [0;32m                } 
[0m[1minit.c:577:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  577 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  578 |                         perror("init: allocate buffer");[0m
      | [0;1;32m                                                        
[0m[1minit.c:583:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  583 |                 fprintf(stderr, "Error reading FAT\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1minit.c:583:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  583 |                 fprintf(stderr, "Error reading FAT\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1minit.c:593:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  593 |                 fprintf(stderr, "Error setting code page\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1minit.c:593:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  593 |                 fprintf(stderr, "Error setting code page\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1minit.c:607:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  607 |         if(This->head.Class != &FsClass)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  608 |                 return getDrive(GetFs(Stream));[0m
  609 |         else[0m
      | [0;32m        } 
[0m[1minit.c:609:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  609 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  610 |                 return This->drive;[0m
      | [0;1;32m                                   
[0m[1minit.c:623:63: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  623 |         if(size > 0 && getfreeMinClusters((Stream_t *)Fs, size) != 1)[0m
      | [0;1;32m                                                                     ^
[0m      | [0;32m                                                                      {
[0m  624 |                 return -1;[0m
      | [0;1;32m                          
[0m50 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[62/72][113.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpcsp3gvy2.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/floppyd_io.c
[1mfloppyd_io.c:85:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   85 |         if(newlen < 1 || newlen > UINT16_MAX)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m   86 |                 return AUTH_AUTHFAILED;[0m
      | [0;1;32m                                       
[0m[1mfloppyd_io.c:92:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   92 |         if(write(sock, buf, 8) < 8)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m   93 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:105:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  105 |         if(l >= 8)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  106 |                 floppyd->version = read_dword(sock);[0m
      | [0;1;32m                                                    
[0m[1mfloppyd_io.c:107:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  107 |         if(l >= 12)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  108 |                 floppyd->capabilities = read_dword(sock);[0m
      | [0;1;32m                                                         
[0m[1mfloppyd_io.c:111:65: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  111 |         if(write(sock, xcookie, filelen+4) < ((ssize_t) (filelen + 4)))[0m
      | [0;1;32m                                                                       ^
[0m      | [0;32m                                                                        {
[0m  112 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:134:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  134 |         if(write(fd, buf, 13) < 13)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  135 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:152:19: [0m[0;1;35mwarning: [0m[1mAlthough the value stored to 'l' is used in the enclosing expression, the value is never actually read from 'l' [clang-analyzer-deadcode.DeadStores][0m
  152 |                 for (start = 0, l = 0; start < gotlen; start += l) {[0m
      | [0;1;32m                                ^   ~
[0m[1mfloppyd_io.c:152:19: [0m[0;1;36mnote: [0mAlthough the value stored to 'l' is used in the enclosing expression, the value is never actually read from 'l'[0m
  152 |                 for (start = 0, l = 0; start < gotlen; start += l) {[0m
      | [0;1;32m                                ^   ~
[0m[1mfloppyd_io.c:154:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  154 |                         if( ret < 0)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  155 |                                 return -1;[0m
      | [0;1;32m                                          
[0m[1mfloppyd_io.c:180:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  180 |         if(write(fd, buf, 9) < 9)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  181 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:183:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  183 |         if(ret == -1 || (size_t) ret < len)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  184 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:197:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  197 |             if (errno == EBADF)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  198 |                 errno = EROFS;[0m
      | [0;1;32m                              
[0m[1mfloppyd_io.c:218:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  218 |         if(write(fd, buf, 17) < 17)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  219 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:248:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  248 |         if(write(fd, buf, 21) < 21)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  249 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:261:2: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
  261 |         return gotlen.v;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:355:9: [0m[0;1;36mnote: [0mCalling 'floppyd_io'[0m
  355 |         return floppyd_io(Stream, buf, where, len, floppyd_writer);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:313:6: [0m[0;1;36mnote: [0mAssuming 'where' is not equal to field 'lastwhere'[0m
  313 |         if (where != This->lastwhere ){[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:313:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  313 |         if (where != This->lastwhere ){[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:315:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  315 |                 if(This->capabilities & FLOPPYD_CAP_LARGE_SEEK) {[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:315:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  315 |                 if(This->capabilities & FLOPPYD_CAP_LARGE_SEEK) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd_io.c:316:7: [0m[0;1;36mnote: [0mCalling 'floppyd_lseek64'[0m
  316 |                         if(floppyd_lseek64( This->fd, where, SEEK_SET) < 0 ){[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:248:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  248 |         if(write(fd, buf, 21) < 21)[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:248:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  248 |         if(write(fd, buf, 21) < 21)[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:251:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  251 |         if (read_dword(fd) != 12) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:251:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  251 |         if (read_dword(fd) != 12) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:261:2: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
  261 |         return gotlen.v;[0m
      | [0;1;32m        ^      ~~~~~~~~
[0m[1mfloppyd_io.c:277:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  277 |         if((mode & O_ACCMODE) == O_RDONLY)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  278 |                 buf[4] = OP_OPRO;[0m
  279 |         else[0m
      | [0;32m        } 
[0m[1mfloppyd_io.c:279:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  279 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  280 |                 buf[4] = OP_OPRW;[0m
      | [0;1;32m                                 
[0m[1mfloppyd_io.c:284:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  284 |         if(write(This->fd, buf, 13) < 13)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  285 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:325:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  325 |                                 fprintf(stderr, "Seek position out of range\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mfloppyd_io.c:325:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  325 |                                 fprintf(stderr, "Seek position out of range\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mfloppyd_io.c:369:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  369 |         if(write(This->fd, buf, 10) < 10)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  370 |                 return AUTH_IO_ERROR;[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:392:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  392 |                 if(write(This->fd, buf, 5) < 5)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  393 |                         return AUTH_IO_ERROR;[0m
      | [0;1;32m                                             
[0m[1mfloppyd_io.c:419:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  419 |         if(date)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  420 |                 /* unknown, and irrelevant anyways */[0m
  421 |                 *date = 0;[0m
      | [0;1;32m                          
[0m[1mfloppyd_io.c:422:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  422 |         if(size)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  423 |                 /* the size derived from the geometry */[0m
  424 |                 *size = This->size;[0m
      | [0;1;32m                                   
[0m[1mfloppyd_io.c:425:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  425 |         if(type)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  426 |                 *type = 0; /* not a directory */[0m
      | [0;1;32m                                                
[0m[1mfloppyd_io.c:427:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  427 |         if(address)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  428 |                 *address = 0;[0m
      | [0;1;32m                             
[0m[1mfloppyd_io.c:459:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  459 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m                               ^    
[0m      | [0;32m                                {
[0m[1mfloppyd_io.c:461:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  461 |         if (*p) p++;[0m
      | [0;1;32m               ^    
[0m      | [0;32m                {
[0m[1mfloppyd_io.c:465:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  465 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  466 |           *port = strtou16(p, &p, 0);[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:467:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  467 |         if(*p == '/')[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  468 |           p++;[0m
      | [0;1;32m              
[0m[1mfloppyd_io.c:470:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  470 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  471 |           *drive = strtosi(p, &p, 0);[0m
      | [0;1;32m                                     
[0m[1mfloppyd_io.c:476:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  476 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m                               ^    
[0m      | [0;32m                                {
[0m[1mfloppyd_io.c:478:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  478 |         if (*p) p++;[0m
      | [0;1;32m               ^    
[0m      | [0;32m                {
[0m[1mfloppyd_io.c:504:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  504 |                         memcpy(&ip, host->h_addr, sizeof(ip));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfloppyd_io.c:504:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  504 |                         memcpy(&ip, host->h_addr, sizeof(ip));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfloppyd_io.c:569:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  570 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mfloppyd_io.c:589:3: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  589 |                 sprintf(errmsg,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_io.c:589:3: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  589 |                 sprintf(errmsg,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_io.c:615:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  615 |         if (!rval) return -1;[0m
      | [0;1;32m                  ^          
[0m      | [0;32m                   {
[0m[1mfloppyd_io.c:624:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  624 |                         snprintf(errmsg, 200,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mfloppyd_io.c:624:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  624 |                         snprintf(errmsg, 200,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mfloppyd_io.c:624:4: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'display' [clang-analyzer-unix.Malloc][0m
  624 |                         snprintf(errmsg, 200,[0m
      | [0;1;32m                        ^
[0m[1mfloppyd_io.c:569:6: [0m[0;1;36mnote: [0mAssuming 'dev' is non-null[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m            ^~~~
[0m[1mfloppyd_io.c:569:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mfloppyd_io.c:569:15: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:569:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:573:6: [0m[0;1;36mnote: [0mAssuming 'This' is non-null[0m
  573 |         if (!This){[0m
      | [0;1;32m            ^~~~~
[0m[1mfloppyd_io.c:573:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  573 |         if (!This){[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:582:13: [0m[0;1;36mnote: [0mCalling 'ConnectToFloppyd'[0m
  582 |         This->fd = ConnectToFloppyd(This, name, errmsg);[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:610:13: [0m[0;1;36mnote: [0mCalling 'get_host_and_port_and_drive'[0m
  610 |         int rval = get_host_and_port_and_drive(name, &hostname, &display,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  611 |                                                &port, &floppyd->drive);[0m
      | [0;1;32m                                               ~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:459:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  459 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1mfloppyd_io.c:459:19: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  459 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m                         ^
[0m[1mfloppyd_io.c:461:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  461 |         if (*p) p++;[0m
      | [0;1;32m            ^~
[0m[1mfloppyd_io.c:461:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  461 |         if (*p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:465:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  465 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mfloppyd_io.c:465:15: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  465 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m                     ^
[0m[1mfloppyd_io.c:467:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  467 |         if(*p == '/')[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mfloppyd_io.c:467:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  467 |         if(*p == '/')[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:470:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  470 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mfloppyd_io.c:470:15: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  470 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m                     ^
[0m[1mfloppyd_io.c:473:13: [0m[0;1;36mnote: [0mMemory is allocated[0m
  473 |         *display = strdup(newname);[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:476:9: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
  476 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m               ^
[0m[1mfloppyd_io.c:476:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 477[0m
  476 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:478:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  478 |         if (*p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:483:16: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  483 |         if (!*newname || strcmp(newname, "unix") == 0) {[0m
      | [0;1;32m                      ^
[0m[1mfloppyd_io.c:610:13: [0m[0;1;36mnote: [0mReturned allocated memory via 3rd parameter[0m
  610 |         int rval = get_host_and_port_and_drive(name, &hostname, &display,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  611 |                                                &port, &floppyd->drive);[0m
      | [0;1;32m                                               ~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:615:7: [0m[0;1;36mnote: [0m'rval' is 1[0m
  615 |         if (!rval) return -1;[0m
      | [0;1;32m             ^~~~
[0m[1mfloppyd_io.c:615:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  615 |         if (!rval) return -1;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:619:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  619 |         while(1) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:622:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  622 |                 if (sock == -1) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd_io.c:624:4: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'display'[0m
  624 |                         snprintf(errmsg, 200,[0m
      | [0;1;32m                        ^
[0m[1mfloppyd_io.c:632:4: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'hostname' [clang-analyzer-unix.Malloc][0m
  632 |                         return -1;[0m
      | [0;1;32m                        ^
[0m[1mfloppyd_io.c:569:6: [0m[0;1;36mnote: [0mAssuming 'dev' is non-null[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m            ^~~~
[0m[1mfloppyd_io.c:569:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mfloppyd_io.c:569:15: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:569:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:573:6: [0m[0;1;36mnote: [0mAssuming 'This' is non-null[0m
  573 |         if (!This){[0m
      | [0;1;32m            ^~~~~
[0m[1mfloppyd_io.c:573:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  573 |         if (!This){[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:582:13: [0m[0;1;36mnote: [0mCalling 'ConnectToFloppyd'[0m
  582 |         This->fd = ConnectToFloppyd(This, name, errmsg);[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:610:13: [0m[0;1;36mnote: [0mCalling 'get_host_and_port_and_drive'[0m
  610 |         int rval = get_host_and_port_and_drive(name, &hostname, &display,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  611 |                                                &port, &floppyd->drive);[0m
      | [0;1;32m                                               ~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:459:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  459 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m               ^~~~~~~~~
[0m[1mfloppyd_io.c:459:19: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  459 |         while (*p != '/' && *p) p++;[0m
      | [0;1;32m                         ^
[0m[1mfloppyd_io.c:461:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  461 |         if (*p) p++;[0m
      | [0;1;32m            ^~
[0m[1mfloppyd_io.c:461:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  461 |         if (*p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:465:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  465 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mfloppyd_io.c:465:15: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  465 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m                     ^
[0m[1mfloppyd_io.c:467:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  467 |         if(*p == '/')[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mfloppyd_io.c:467:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  467 |         if(*p == '/')[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:470:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  470 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mfloppyd_io.c:470:15: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  470 |         if(*p >= '0' && *p <= '9')[0m
      | [0;1;32m                     ^
[0m[1mfloppyd_io.c:476:9: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
  476 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m               ^
[0m[1mfloppyd_io.c:476:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 477[0m
  476 |         while (*p != ':' && *p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:478:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  478 |         if (*p) p++;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:483:16: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  483 |         if (!*newname || strcmp(newname, "unix") == 0) {[0m
      | [0;1;32m                      ^
[0m[1mfloppyd_io.c:485:13: [0m[0;1;36mnote: [0mMemory is allocated[0m
  485 |                 newname = strdup("localhost");[0m
      | [0;1;32m                          ^~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:610:13: [0m[0;1;36mnote: [0mReturned allocated memory via 2nd parameter[0m
  610 |         int rval = get_host_and_port_and_drive(name, &hostname, &display,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  611 |                                                &port, &floppyd->drive);[0m
      | [0;1;32m                                               ~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:615:7: [0m[0;1;36mnote: [0m'rval' is 1[0m
  615 |         if (!rval) return -1;[0m
      | [0;1;32m             ^~~~
[0m[1mfloppyd_io.c:615:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  615 |         if (!rval) return -1;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:619:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  619 |         while(1) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:622:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  622 |                 if (sock == -1) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd_io.c:632:4: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'hostname'[0m
  632 |                         return -1;[0m
      | [0;1;32m                        ^
[0m[1mfloppyd_io.c:636:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  636 |                 if(floppyd->version == FLOPPYD_PROTOCOL_VERSION_OLD)[0m
      | [0;1;32m                                                                    ^
[0m      | [0;32m                                                                     {
[0m  637 |                         break;[0m
      | [0;1;32m                              
[0m[1mfloppyd_io.c:647:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  647 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_io.c:647:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  647 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfloppyd_io.c:649:12: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'AuthErrors' [clang-analyzer-security.ArrayBound][0m
  649 |                         "%s\n", AuthErrors[reply]);[0m
      | [0;1;32m                                ^
[0m[1mfloppyd_io.c:569:6: [0m[0;1;36mnote: [0mAssuming 'dev' is non-null[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m            ^~~~
[0m[1mfloppyd_io.c:569:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mfloppyd_io.c:569:15: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:569:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  569 |         if (!dev ||  !(dev->misc_flags & FLOPPYD_FLAG))[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:573:6: [0m[0;1;36mnote: [0mAssuming 'This' is non-null[0m
  573 |         if (!This){[0m
      | [0;1;32m            ^~~~~
[0m[1mfloppyd_io.c:573:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  573 |         if (!This){[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:582:13: [0m[0;1;36mnote: [0mCalling 'ConnectToFloppyd'[0m
  582 |         This->fd = ConnectToFloppyd(This, name, errmsg);[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd_io.c:615:6: [0m[0;1;36mnote: [0mAssuming 'rval' is not equal to 0[0m
  615 |         if (!rval) return -1;[0m
      | [0;1;32m            ^~~~~
[0m[1mfloppyd_io.c:615:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  615 |         if (!rval) return -1;[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:619:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  619 |         while(1) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:622:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  622 |                 if (sock == -1) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd_io.c:636:15: [0m[0;1;36mnote: [0mField 'version' is not equal to FLOPPYD_PROTOCOL_VERSION_OLD[0m
  636 |                 if(floppyd->version == FLOPPYD_PROTOCOL_VERSION_OLD)[0m
      | [0;1;32m                            ^
[0m[1mfloppyd_io.c:636:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  636 |                 if(floppyd->version == FLOPPYD_PROTOCOL_VERSION_OLD)[0m
      | [0;1;32m                ^
[0m[1mfloppyd_io.c:638:6: [0m[0;1;36mnote: [0m'reply' is not equal to AUTH_WRONGVERSION[0m
  638 |                 if(reply == AUTH_WRONGVERSION) {[0m
      | [0;1;32m                   ^~~~~
[0m[1mfloppyd_io.c:638:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  638 |                 if(reply == AUTH_WRONGVERSION) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd_io.c:643:3: [0m[0;1;36mnote: [0m Execution continues on line 646[0m
  643 |                 break;[0m
      | [0;1;32m                ^
[0m[1mfloppyd_io.c:646:6: [0m[0;1;36mnote: [0m'reply' is not equal to 0[0m
  646 |         if (reply != 0) {[0m
      | [0;1;32m            ^~~~~
[0m[1mfloppyd_io.c:646:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  646 |         if (reply != 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd_io.c:649:12: [0m[0;1;36mnote: [0mAccess of 'AuthErrors' at index 4294967295, while it holds only 7 'const char *' elements[0m
  649 |                         "%s\n", AuthErrors[reply]);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~
[0m47 warnings generated.
Suppressed 6 warnings (6 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[63/72][105.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp5d9xxwt9.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/stream.c
[1mstream.c:26:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   26 |         if(*len > (size_t) maxLen)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m   27 | #else[0m
   28 |         if(*len > maxLen)[0m
   29 | #endif[0m
   30 |                 *len = (size_t) maxLen;[0m
      | [0;1;32m                                       
[0m[1mstream.c:44:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   44 |                 if(Stream->Class->flush)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m   45 |                         ret |= Stream->Class->flush(Stream);[0m
      | [0;1;32m                                                            
[0m[1mstream.c:46:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   46 |                 if(Stream->Next)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   47 |                         ret |= flush_stream(Stream->Next);[0m
      | [0;1;32m                                                          
[0m[1mstream.c:54:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   54 |         if(Stream)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m   55 |                 Stream->refs++;[0m
      | [0;1;32m                               
[0m[1mstream.c:63:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   63 |         if(!*Stream)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   64 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mstream.c:66:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   66 |                 if((*Stream)->Class->flush)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m   67 |                         ret |= (*Stream)->Class->flush(*Stream);[0m
      | [0;1;32m                                                                
[0m[1mstream.c:68:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |                 if((*Stream)->Class->freeFunc)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m   69 |                         ret |= (*Stream)->Class->freeFunc(*Stream);[0m
      | [0;1;32m                                                                   
[0m[1mstream.c:70:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   70 |                 if((*Stream)->Next)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m   71 |                         ret |= free_stream(&(*Stream)->Next);[0m
      | [0;1;32m                                                             
[0m[1mstream.c:123:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  123 |         if(!dev->tot_sectors)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  124 |                 /* tot_sectors not set, do nothing */[0m
  125 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mstream.c:130:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |                 if(errmsg)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  131 |                         sprintf(errmsg,"init: Offset bigger than base image");[0m
      | [0;1;32m                                                                              
[0m[1mstream.c:131:4: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  131 |                         sprintf(errmsg,"init: Offset bigger than base image");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mstream.c:131:4: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  131 |                         sprintf(errmsg,"init: Offset bigger than base image");[0m
      | [0;1;32m                        ^~~~~~~
[0m13 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[64/72][128.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpd365sx1u.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/fat.c
[1mfat.c:73:8: [0m[0;1;35mwarning: [0m[1mCall to 'calloc' has an allocation size of 0 bytes [clang-analyzer-optin.portability.UnixAPI][0m
   73 |         map = NewArray(nr_entries, FatMap_t);[0m
      | [0;1;32m              ^
[0m[1m./mtools.h:188:38: [0m[0;1;36mnote: [0mexpanded from macro 'NewArray'[0m
  188 | #define NewArray(size,type) ((type*)(calloc((size),sizeof(type))))[0m
      | [0;1;32m                                     ^
[0m[1mfat.c:526:5: [0m[0;1;36mnote: [0mAssuming 'buf' is non-null[0m
  526 |         if(!buf) {[0m
      | [0;1;32m           ^~~~
[0m[1mfat.c:526:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  526 |         if(!buf) {[0m
      | [0;1;32m        ^
[0m[1mfat.c:530:11: [0m[0;1;36mnote: [0mAssuming 'i' is < field 'num_fat'[0m
  530 |         for(i=0; i< Stream->num_fat; i++) {[0m
      | [0;1;32m                 ^~~~~~~~~~~~~~~~~~
[0m[1mfat.c:530:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  530 |         for(i=0; i< Stream->num_fat; i++) {[0m
      | [0;1;32m        ^
[0m[1mfat.c:532:14: [0m[0;1;36mnote: [0mAssuming 'j' is >= field 'fat_len'[0m
  532 |                 for(j = 0; j < Stream->fat_len; j++) {[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~
[0m[1mfat.c:532:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 530[0m
  532 |                 for(j = 0; j < Stream->fat_len; j++) {[0m
      | [0;1;32m                ^
[0m[1mfat.c:530:11: [0m[0;1;36mnote: [0mAssuming 'i' is >= field 'num_fat'[0m
  530 |         for(i=0; i< Stream->num_fat; i++) {[0m
      | [0;1;32m                 ^~~~~~~~~~~~~~~~~~
[0m[1mfat.c:530:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 560[0m
  530 |         for(i=0; i< Stream->num_fat; i++) {[0m
      | [0;1;32m        ^
[0m[1mfat.c:561:19: [0m[0;1;36mnote: [0mCalling 'GetFatMap'[0m
  561 |         Stream->FatMap = GetFatMap(Stream);[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~~~~
[0m[1mfat.c:72:2: [0m[0;1;36mnote: [0mThe value 0 is assigned to 'nr_entries'[0m
   72 |         nr_entries = (Stream->fat_len + SECT_PER_ENTRY - 1) / SECT_PER_ENTRY;[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfat.c:73:8: [0m[0;1;36mnote: [0mCall to 'calloc' has an allocation size of 0 bytes[0m
   73 |         map = NewArray(nr_entries, FatMap_t);[0m
      | [0;1;32m              ^
[0m[1m./mtools.h:188:38: [0m[0;1;36mnote: [0mexpanded from macro 'NewArray'[0m
  188 | #define NewArray(size,type) ((type*)(calloc((size),sizeof(type))))[0m
      | [0;1;32m                                     ^      ~~~~~~
[0m[1mfat.c:74:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   74 |         if(!map)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   75 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfat.c:89:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   89 |         if(offset >= Stream->fat_len)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   90 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mfat.c:120:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  120 |         if(ret < 0)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  121 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfat.c:130:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  130 |                 if(ret < (int) This->sector_size)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  131 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mfat.c:148:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  148 |         if(dupe && !This->writeAllFats)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  149 |                 return This->sector_size;[0m
      | [0;1;32m                                         
[0m[1mfat.c:166:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  166 |         if(locate(This,sector, &slot, &bit) < 0)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  167 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfat.c:183:4: [0m[0;1;35mwarning: [0m[1mResult of 'malloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'fatBitMask' [clang-analyzer-unix.MallocSizeof][0m
  183 |                         malloc(This->sector_size * SECT_PER_ENTRY);[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfat.c:183:4: [0m[0;1;36mnote: [0mResult of 'malloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'fatBitMask'[0m
  183 |                         malloc(This->sector_size * SECT_PER_ENTRY);[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfat.c:184:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  184 |                 if(!This->FatMap[slot].data)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  185 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mfat.c:186:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  186 |                 memset(This->FatMap[slot].data, 0xee,[0m
      | [0;1;32m                ^~~~~~
[0m[1mfat.c:186:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  186 |                 memset(This->FatMap[slot].data, 0xee,[0m
      | [0;1;32m                ^~~~~~
[0m[1mfat.c:199:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  199 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mfat.c:199:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  199 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mfat.c:203:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  203 |                         if(This->FatMap[slot].valid)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  204 |                             /* Set recurs if there have already been[0m
  205 |                              * sectors loaded in this bitmap long[0m
  206 |                              */[0m
  207 |                             recurs = 1;[0m
      | [0;1;32m                                       
[0m[1mfat.c:212:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  212 |                 if(ret == 0)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  213 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mfat.c:215:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  215 |                 for(i=0; (int) i < ret; i++)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  216 |                         This->FatMap[slot].valid |= ONE << (bit + i);[0m
      | [0;1;32m                                                                     
[0m[1mfat.c:218:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  218 |                 if(!recurs && ret == 1)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  219 |                         /* do some prefetching, if we happened to only[0m
  220 |                          * get one sector */[0m
  221 |                         loadSector(This, sector+1, mode, 1);[0m
      | [0;1;32m                                                            
[0m[1mfat.c:222:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  222 |                 if(!recurs && batchmode)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  223 |                         for(i=0; i < 1024; i++)[0m
  224 |                                 loadSector(This, sector+i, mode, 1);[0m
      | [0;1;32m                                                                    
[0m[1mfat.c:223:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  223 |                         for(i=0; i < 1024; i++)[0m
      | [0;1;32m                                               ^
[0m      | [0;32m                                                {
[0m  224 |                                 loadSector(This, sector+i, mode, 1);[0m
      | [0;1;32m                                                                    
[0m[1mfat.c:245:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  245 |            Stream->lastFatAccessMode >= mode)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  246 |                 ret = Stream->lastFatSectorData;[0m
      | [0;1;32m                                                
[0m[1mfat.c:249:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  249 |                 if(!ret)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  250 |                         return 0;[0m
      | [0;1;32m                                 
[0m[1mfat.c:265:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  265 |         if(!address)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  266 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mfat.c:296:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  296 |                 fprintf(stderr,"[1] Bad address %d\n", num);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:296:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  296 |                 fprintf(stderr,"[1] Bad address %d\n", num);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:300:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  300 |         if (num & 1)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  301 |                 return ((uint32_t)byte1 << 4) | (((uint32_t)byte0 & 0xf0)>>4);[0m
  302 |         else[0m
      | [0;32m        } 
[0m[1mfat.c:302:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  302 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  303 |                 return (((uint32_t)byte1 & 0xf) << 8) | (uint32_t)byte0;[0m
      | [0;1;32m                                                                        
[0m[1mfat.c:340:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  340 |         if(!address)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  341 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfat.c:349:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  349 |                 fprintf(stderr, "FAT16 code %x too big\n", code);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:349:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  349 |                 fprintf(stderr, "FAT16 code %x too big\n", code);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:371:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  371 |         if(!address)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  372 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfat.c:382:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  382 |                 fprintf(stderr, "FAT16 code %x too big\n", code);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:382:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  382 |                 fprintf(stderr, "FAT16 code %x too big\n", code);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:401:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  401 |         if(!address)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  402 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfat.c:421:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  421 |         if(!address)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  422 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mfat.c:450:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  450 |         if (!This->fat_dirty)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  451 |                 return;[0m
      | [0;1;32m                       
[0m[1mfat.c:454:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  454 |         if (This->fat_error)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  455 |                 dups = 1;[0m
      | [0;1;32m                         
[0m[1mfat.c:468:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  468 |                                 if(!(This->FatMap[slot].dirty & (ONE << bit)))[0m
      | [0;1;32m                                                                              ^
[0m      | [0;32m                                                                               {
[0m  469 |                                         continue;[0m
      | [0;1;32m                                                 
[0m[1mfat.c:476:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  476 |                                                 fprintf(stderr,[0m
      | [0;1;32m                                                ^~~~~~~
[0m[1mfat.c:476:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  476 |                                                 fprintf(stderr,[0m
      | [0;1;32m                                                ^~~~~~~
[0m[1mfat.c:482:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  482 |                                 if(i==dups-1)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  483 |                                         This->FatMap[slot].dirty &= ~(ONE<<bit);[0m
      | [0;1;32m                                                                                
[0m[1mfat.c:495:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  495 |                         fprintf(stderr,"Trouble reading the info sector\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:495:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  495 |                         fprintf(stderr,"Trouble reading the info sector\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:496:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  496 |                         memset(infoSector->filler1, 0, sizeof(infoSector->filler1));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfat.c:496:4: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  496 |                         memset(infoSector->filler1, 0, sizeof(infoSector->filler1));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfat.c:497:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  497 |                         memset(infoSector->filler2, 0, sizeof(infoSector->filler2));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfat.c:497:4: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  497 |                         memset(infoSector->filler2, 0, sizeof(infoSector->filler2));[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfat.c:505:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  505 |                    (signed int) This->sector_size)[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  506 |                         fprintf(stderr,"Trouble writing the info sector\n");[0m
      | [0;1;32m                                                                            
[0m[1mfat.c:506:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  506 |                         fprintf(stderr,"Trouble writing the info sector\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:506:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  506 |                         fprintf(stderr,"Trouble writing the info sector\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:533:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  533 |                         if(j <= 1)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  534 |                                 memset(buf, 0, Stream->sector_size);[0m
      | [0;1;32m                                                                    
[0m[1mfat.c:534:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  534 |                                 memset(buf, 0, Stream->sector_size);[0m
      | [0;1;32m                                ^~~~~~
[0m[1mfat.c:534:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  534 |                                 memset(buf, 0, Stream->sector_size);[0m
      | [0;1;32m                                ^~~~~~
[0m[1mfat.c:538:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  538 |                                 if(Stream->fat_bits > 12)[0m
      | [0;1;32m                                                         ^
[0m      | [0;32m                                                          {
[0m  539 |                                         buf[3] = 0xff;[0m
      | [0;1;32m                                                      
[0m[1mfat.c:552:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  552 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mfat.c:552:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  552 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mfat.c:616:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  616 |         if(haveBigFatLen)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  617 |                 /* This is how Windows 10 behaves, despite[0m
  618 |                    fatgen103's stern assertion otherwise */[0m
  619 |                 set_fat32(This);[0m
  620 |         else if(This->num_clus < FAT12)[0m
      | [0;32m        } 
[0m[1mfat.c:620:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  620 |         else if(This->num_clus < FAT12)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  621 |                 set_fat12(This);[0m
  622 |         else if(This->num_clus < FAT16)[0m
      | [0;32m        } 
[0m[1mfat.c:622:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  622 |         else if(This->num_clus < FAT16)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  623 |                 set_fat16(This);[0m
  624 |         else[0m
      | [0;32m        } 
[0m[1mfat.c:624:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  624 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  625 |                 set_fat32(This);[0m
      | [0;1;32m                                
[0m[1mfat.c:637:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  637 |         if(mtools_skip_check)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  638 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfat.c:642:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  642 |                 fprintf(stderr, "Too few sectors in FAT\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:642:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  642 |                 fprintf(stderr, "Too few sectors in FAT\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:651:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  651 |                 fprintf(stderr, "Too many clusters in FAT\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:651:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  651 |                 fprintf(stderr, "Too many clusters in FAT\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:655:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  655 |         if(tocheck > 4096)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  656 |                 tocheck = 4096;[0m
      | [0;1;32m                               
[0m[1mfat.c:661:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  661 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:661:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  661 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:663:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  663 |                         fprintf(stderr,"Probably non MS-DOS disk\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:663:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  663 |                         fprintf(stderr,"Probably non MS-DOS disk\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:687:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  687 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:687:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  687 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:692:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  692 |         if(mtools_skip_check)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  693 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfat.c:695:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  695 |         if(!address[0] && !address[1] && !address[2])[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m  696 |                 /* Some Atari disks have zeroes where Dos has media descriptor[0m
  697 |                  * and 0xff.  Do not consider this as an error */[0m
  698 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfat.c:703:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  703 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:703:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  703 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:711:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  711 |                 fprintf(stderr,"Initial bytes of fat is not 0xff\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:711:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  711 |                 fprintf(stderr,"Initial bytes of fat is not 0xff\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:756:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  756 |         if(nodups)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  757 |                 This->num_fat = 1;[0m
      | [0;1;32m                                  
[0m[1mfat.c:759:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  759 |         if(check_media_type(This, boot))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  760 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mfat.c:762:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  762 |         if(This->fat_bits == 16)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  763 |                 /* third FAT byte must be 0xff */[0m
  764 |                 if(!mtools_skip_check && readByte(This, 3) != 0xff)[0m
  765 |                         return -1;[0m
      | [0;1;32m                                  
[0m[1mfat.c:764:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  764 |                 if(!mtools_skip_check && readByte(This, 3) != 0xff)[0m
      | [0;1;32m                                                                   ^
[0m      | [0;32m                                                                    {
[0m  765 |                         return -1;[0m
      | [0;1;32m                                  
[0m[1mfat.c:784:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  784 |         if(This->fat_bits <= 16)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  785 |                 return old_fat_read(This, boot, nodups);[0m
  786 |         else[0m
      | [0;32m        } 
[0m[1mfat.c:786:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  786 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  787 |                 return fat_32_read(This, boot);[0m
      | [0;1;32m                                               
[0m[1mfat.c:797:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  797 |                 fprintf(stderr, "Bad FAT entry %d at %d\n", ret, pos);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:797:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  797 |                 fprintf(stderr, "Bad FAT entry %d at %d\n", ret, pos);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:808:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  808 |         if(This->freeSpace != MAX32)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  809 |                 This->freeSpace--;[0m
      | [0;1;32m                                  
[0m[1mfat.c:816:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  816 |         if(This->freeSpace != MAX32)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  817 |                 This->freeSpace++;[0m
      | [0;1;32m                                  
[0m[1mfat.c:824:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  824 |         if(This->freeSpace != MAX32)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  825 |                 This->freeSpace--;[0m
      | [0;1;32m                                  
[0m[1mfat.c:833:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  833 |                 if(oldvalue)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  834 |                         This->freeSpace++;[0m
      | [0;1;32m                                          
[0m[1mfat.c:835:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  835 |                 if(value)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  836 |                         This->freeSpace--;[0m
      | [0;1;32m                                          
[0m[1mfat.c:844:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  844 |         if(This->last != MAX32)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  845 |                 last = This->last;[0m
      | [0;1;32m                                  
[0m[1mfat.c:848:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  848 |             last >= This->num_clus+1)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  849 |                 last = 1;[0m
      | [0;1;32m                         
[0m[1mfat.c:853:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  853 |                 if(r == 1)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  854 |                         goto exit_0;[0m
      | [0;1;32m                                    
[0m[1mfat.c:863:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  863 |                 if(r == 1)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  864 |                         goto exit_0;[0m
      | [0;1;32m                                    
[0m[1mfat.c:872:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  872 |         fprintf(stderr,"No free cluster %d %d\n", This->preallocatedClusters,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat.c:872:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  872 |         fprintf(stderr,"No free cluster %d %d\n", This->preallocatedClusters,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat.c:876:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  876 |         fprintf(stderr, "FAT error\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat.c:876:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  876 |         fprintf(stderr, "FAT error\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat.c:897:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  897 |         if(This->fat_error)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  898 |                 fprintf(stderr,"Fat error detected\n");[0m
      | [0;1;32m                                                       
[0m[1mfat.c:898:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  898 |                 fprintf(stderr,"Fat error detected\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:898:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  898 |                 fprintf(stderr,"Fat error detected\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:908:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  908 |         if(This->fat_bits == 32)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  909 |                 return This->rootCluster;[0m
  910 |         else[0m
      | [0;32m        } 
[0m[1mfat.c:910:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  910 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  911 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfat.c:933:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  933 |                         if (!r)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  934 |                                 total++;[0m
      | [0;1;32m                                        
[0m[1mfat.c:953:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  953 |         if(batchmode && This->freeSpace == MAX32)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  954 |                 getfree(Stream);[0m
      | [0;1;32m                                
[0m[1mfat.c:957:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  957 |                 if(This->freeSpace >= size)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  958 |                         return 1;[0m
  959 |                 else {[0m
      | [0;32m                } 
[0m[1mfat.c:960:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  960 |                         fprintf(stderr, "Disk full\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:960:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  960 |                         fprintf(stderr, "Disk full\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfat.c:974:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  974 |         if ( last < 2 || last >= This->num_clus + 2)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  975 |                 last = 1;[0m
      | [0;1;32m                         
[0m[1mfat.c:981:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  981 |                 if (!r)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  982 |                         total++;[0m
      | [0;1;32m                                
[0m[1mfat.c:983:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  983 |                 if(total >= size)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  984 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mfat.c:991:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  991 |                 if (!r)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  992 |                         total++;[0m
      | [0;1;32m                                
[0m[1mfat.c:993:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  993 |                 if(total >= size)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  994 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mfat.c:996:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  996 |         fprintf(stderr, "Disk full\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat.c:996:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  996 |         fprintf(stderr, "Disk full\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat.c:1000:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1000 |         fprintf(stderr, "FAT error\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat.c:1000:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1000 |         fprintf(stderr, "FAT error\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfat.c:1012:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1012 |         if(size % (This->sector_size * This->cluster_size))[0m
      | [0;1;32m                                                           ^
[0m      | [0;32m                                                            {
[0m 1013 |                 size2++;[0m
      | [0;1;32m                        
[0m[1mfat.c:1015:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1015 |                 fprintf(stderr, "Requested size too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:1015:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1015 |                 fprintf(stderr, "Requested size too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfat.c:1042:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1042 |                 for(i=0; i< nr_entries; i++)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m 1043 |                         if(This->FatMap[i].data)[0m
 1044 |                                 free(This->FatMap[i].data);[0m
      | [0;1;32m                                                           
[0m[1mfat.c:1043:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1043 |                         if(This->FatMap[i].data)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m 1044 |                                 free(This->FatMap[i].data);[0m
      | [0;1;32m                                                           
[0m[1mfat.c:1047:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1047 |         if(This->cp)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m 1048 |                 cp_close(This->cp);[0m
      | [0;1;32m                                   
[0m98 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[65/72][134.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpklj62g3s.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mformat.c
[1m./msdos.h:83:2: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'boot.boot.jump' [clang-analyzer-security.ArrayBound][0m
   83 |         data[0] = (value >>  0) & 0xff;[0m
      | [0;1;32m        ^
[0m[1mmformat.c:927:6: [0m[0;1;36mnote: [0mAssuming 'Fs' is non-null[0m
  927 |         if (!Fs) {[0m
      | [0;1;32m            ^~~
[0m[1mmformat.c:927:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  927 |         if (!Fs) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:932:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  932 |         if(getenv("MTOOLS_DIR_LEN")) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:937:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  937 |         if(getenv("MTOOLS_NFATS")) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:946:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  946 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:946:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  946 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m        ^
[0m[1mmformat.c:948:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  948 |         while ((c = getopt(argc,argv,[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~
[0m  949 |                            "i:148f:t:n:v:qu"[0m
      | [0;1;32m                           ~~~~~~~~~~~~~~~~~
[0m  950 |                            "b:kK:R:B:r:L:I:FCc:Xh:s:T:l:N:H:M:S:2:30:Aad:m:"))!= EOF) {[0m
      | [0;1;32m                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:948:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 1130[0m
  948 |         while ((c = getopt(argc,argv,[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1130:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1130 |         if (argc - optind > 1)[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1130:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1130 |         if (argc - optind > 1)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1132:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1132 |         if(argc - optind == 1) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1132:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1132 |         if(argc - optind == 1) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1138:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1138 |             if(drive != ':') {[0m
      | [0;1;32m               ^~~~~~~~~~~~
[0m[1mmformat.c:1138:6: [0m[0;1;36mnote: [0mTaking false branch[0m
 1138 |             if(drive != ':') {[0m
      | [0;1;32m            ^
[0m[1mmformat.c:1146:5: [0m[0;1;36mnote: [0m'argtracks' is 0[0m
 1146 |         if(argtracks && tot_sectors) {[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmformat.c:1146:15: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 1146 |         if(argtracks && tot_sectors) {[0m
      | [0;1;32m                     ^
[0m[1mmformat.c:1152:5: [0m[0;1;36mnote: [0m'create' is 0[0m
 1152 |         if(create && format_xdf) {[0m
      | [0;1;32m           ^~~~~~
[0m[1mmformat.c:1152:12: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 1152 |         if(create && format_xdf) {[0m
      | [0;1;32m                  ^
[0m[1mmformat.c:1161:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1161 |         for(dev=devices;dev->drive;dev++) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1164:7: [0m[0;1;36mnote: [0mAssuming 'drive' is equal to field 'drive'[0m
 1164 |                 if (dev->drive != drive)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1164:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1164 |                 if (dev->drive != drive)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1168:28: [0m[0;1;36mnote: [0m'argtracks' is 0[0m
 1168 |                 SET_INT(used_dev.tracks, argtracks);[0m
      | [0;1;32m                                         ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1168:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1168 |                 SET_INT(used_dev.tracks, argtracks);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1169:27: [0m[0;1;36mnote: [0m'argheads' is 0[0m
 1169 |                 SET_INT(used_dev.heads, argheads);[0m
      | [0;1;32m                                        ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1169:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1169 |                 SET_INT(used_dev.heads, argheads);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1170:29: [0m[0;1;36mnote: [0m'argsectors' is 0[0m
 1170 |                 SET_INT(used_dev.sectors, argsectors);[0m
      | [0;1;32m                                          ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1170:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1170 |                 SET_INT(used_dev.sectors, argsectors);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1171:28: [0m[0;1;36mnote: [0m'arguse_2m' is 0[0m
 1171 |                 SET_INT(used_dev.use_2m, arguse_2m);[0m
      | [0;1;32m                                         ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1171:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1171 |                 SET_INT(used_dev.use_2m, arguse_2m);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1172:27: [0m[0;1;36mnote: [0m'argssize' is 2[0m
 1172 |                 SET_INT(used_dev.ssize, argssize);[0m
      | [0;1;32m                                        ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1172:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 1172 |                 SET_INT(used_dev.ssize, argssize);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1173:6: [0m[0;1;36mnote: [0m'hs_set' is 0[0m
 1173 |                 if(hs_set)[0m
      | [0;1;32m                   ^~~~~~
[0m[1mmformat.c:1173:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1173 |                 if(hs_set)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1182:6: [0m[0;1;36mnote: [0m'format_xdf' is 0[0m
 1182 |                 if(format_xdf)[0m
      | [0;1;32m                   ^~~~~~~~~~
[0m[1mmformat.c:1182:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1182 |                 if(format_xdf)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1186:6: [0m[0;1;36mnote: [0m'tot_sectors' is 0[0m
 1186 |                 if(tot_sectors)[0m
      | [0;1;32m                   ^~~~~~~~~~~
[0m[1mmformat.c:1186:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1186 |                 if(tot_sectors)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1201:6: [0m[0;1;36mnote: [0mAssuming field 'Next' is non-null[0m
 1201 |                 if(Fs->head.Next && info.FatSize) {[0m
      | [0;1;32m                   ^~~~~~~~~~~~~
[0m[1mmformat.c:1201:6: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mmformat.c:1201:23: [0m[0;1;36mnote: [0mAssuming field 'FatSize' is 0[0m
 1201 |                 if(Fs->head.Next && info.FatSize) {[0m
      | [0;1;32m                                    ^~~~~~~~~~~~
[0m[1mmformat.c:1201:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1201 |                 if(Fs->head.Next && info.FatSize) {[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1209:17: [0m[0;1;36mnote: [0mField 'Next' is non-null[0m
 1209 |                 if (!Fs->head.Next)[0m
      | [0;1;32m                              ^
[0m[1mmformat.c:1209:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1209 |                 if (!Fs->head.Next)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1212:6: [0m[0;1;36mnote: [0m'tot_sectors' is 0[0m
 1212 |                 if(tot_sectors)[0m
      | [0;1;32m                   ^~~~~~~~~~~
[0m[1mmformat.c:1212:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1212 |                 if(tot_sectors)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1217:6: [0m[0;1;36mnote: [0mAssuming field 'blocksize' is 0[0m
 1217 |                 if(!used_dev.blocksize || used_dev.blocksize < Fs->sector_size)[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1217:26: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
 1217 |                 if(!used_dev.blocksize || used_dev.blocksize < Fs->sector_size)[0m
      | [0;1;32m                                       ^
[0m[1mmformat.c:1222:6: [0m[0;1;36mnote: [0mAssuming 'blocksize' is <= MAX_SECTOR[0m
 1222 |                 if(blocksize > MAX_SECTOR)[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1222:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1222 |                 if(blocksize > MAX_SECTOR)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1225:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1225 |                 if(chs_to_totsectors(&used_dev, errmsg) < 0 ||[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1225:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mmformat.c:1226:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1226 |                    check_if_sectors_fit(dev->tot_sectors, maxSize, blocksize,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1227 |                                         errmsg) < 0) {[0m
      | [0;1;32m                                        ~~~~~~~~~~~
[0m[1mmformat.c:1225:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1225 |                 if(chs_to_totsectors(&used_dev, errmsg) < 0 ||[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1232:7: [0m[0;1;36mnote: [0m'tot_sectors' is 0[0m
 1232 |                 if(!tot_sectors)[0m
      | [0;1;32m                    ^~~~~~~~~~~
[0m[1mmformat.c:1232:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 1232 |                 if(!tot_sectors)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1236:8: [0m[0;1;36mnote: [0m'create' is 0[0m
 1236 |                 if (!create &&[0m
      | [0;1;32m                     ^~~~~~
[0m[1mmformat.c:1236:7: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1236 |                 if (!create &&[0m
      | [0;1;32m                    ^
[0m[1mmformat.c:1237:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1237 |                     PREADS(Fs->head.Next,[0m
      | [0;1;32m                    ^
[0m[1m./stream.h:57:44: [0m[0;1;36mnote: [0mexpanded from macro 'PREADS'[0m
   57 | #define PREADS(stream, buf, address, size) \[0m
      | [0;1;32m                                           ^
[0m[1mmformat.c:1236:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1236 |                 if (!create &&[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1252:3: [0m[0;1;36mnote: [0m Execution continues on line 1256[0m
 1252 |                 break;[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1256:7: [0m[0;1;36mnote: [0mAssuming field 'drive' is not equal to 0[0m
 1256 |         if ( dev->drive == 0 ){[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~
[0m[1mmformat.c:1256:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1256 |         if ( dev->drive == 0 ){[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1262:5: [0m[0;1;36mnote: [0mAssuming 'tot_sectors' is not equal to 0[0m
 1262 |         if(tot_sectors == 0) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~
[0m[1mmformat.c:1262:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1262 |         if(tot_sectors == 0) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1268:6: [0m[0;1;36mnote: [0m'create' is 0[0m
 1268 |         if (create) {[0m
      | [0;1;32m            ^~~~~~
[0m[1mmformat.c:1268:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1268 |         if (create) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1275:5: [0m[0;1;36mnote: [0m'bootSector' is null[0m
 1275 |         if(bootSector) {[0m
      | [0;1;32m           ^~~~~~~~~~
[0m[1mmformat.c:1275:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1275 |         if(bootSector) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1292:6: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmformat.c:1292:5: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m           ^
[0m[1mmformat.c:1292:18: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m                        ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1292:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1301:6: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1301 |         if(!keepBoot)[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmformat.c:1301:2: [0m[0;1;36mnote: [0mTaking true branch[0m
 1301 |         if(!keepBoot)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1308:2: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 1327[0m
 1308 |         switch(calc_fs_parameters(&used_dev, fat32, tot_sectors, Fs,[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1327:6: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1327 |         if(!keepBoot && !(used_dev.use_2m & 0x7f)) {[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmformat.c:1327:5: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1327 |         if(!keepBoot && !(used_dev.use_2m & 0x7f)) {[0m
      | [0;1;32m           ^
[0m[1mmformat.c:1327:18: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1327 |         if(!keepBoot && !(used_dev.use_2m & 0x7f)) {[0m
      | [0;1;32m                        ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1327:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1327 |         if(!keepBoot && !(used_dev.use_2m & 0x7f)) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1341:5: [0m[0;1;36mnote: [0mAssuming field 'fat_bits' is not equal to 32[0m
 1341 |         if(Fs->fat_bits == 32) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1341:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1341 |         if(Fs->fat_bits == 32) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1373:5: [0m[0;1;36mnote: [0mAssuming field 'cp' is not equal to NULL[0m
 1373 |         if(Fs->cp == NULL)[0m
      | [0;1;32m           ^~~~~~~~~~~~~~
[0m[1mmformat.c:1373:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1373 |         if(Fs->cp == NULL)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1376:5: [0m[0;1;36mnote: [0m'haveMediaDesc' is false[0m
 1376 |         if(haveMediaDesc)[0m
      | [0;1;32m           ^~~~~~~~~~~~~
[0m[1mmformat.c:1376:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1376 |         if(haveMediaDesc)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1378:5: [0m[0;1;36mnote: [0m'haveBiosDisk' is false[0m
 1378 |         if(haveBiosDisk)[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mmformat.c:1378:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1378 |         if(haveBiosDisk)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1380:12: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1380 |         else if (!keepBoot)[0m
      | [0;1;32m                  ^~~~~~~~
[0m[1mmformat.c:1380:7: [0m[0;1;36mnote: [0mTaking true branch[0m
 1380 |         else if (!keepBoot)[0m
      | [0;1;32m             ^
[0m[1mmformat.c:1383:28: [0m[0;1;36mnote: [0mAssuming field 'descr' is not equal to 248[0m
 1383 |                 labelBlock->physdrive = (boot.boot.descr == 0xf8) ? 0x80 : 0x00;[0m
      | [0;1;32m                                         ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1383:27: [0m[0;1;36mnote: [0m'?' condition is false[0m
 1383 |                 labelBlock->physdrive = (boot.boot.descr == 0xf8) ? 0x80 : 0x00;[0m
      | [0;1;32m                                        ^
[0m[1mmformat.c:1387:7: [0m[0;1;36mnote: [0m'serial_set' is 0[0m
 1387 |         if (!serial_set || Atari)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1mmformat.c:1387:18: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
 1387 |         if (!serial_set || Atari)[0m
      | [0;1;32m                        ^
[0m[1mmformat.c:1389:7: [0m[0;1;36mnote: [0m'serial_set' is 0[0m
 1389 |         if (!serial_set)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1mmformat.c:1389:2: [0m[0;1;36mnote: [0mTaking true branch[0m
 1389 |         if (!serial_set)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1393:9: [0m[0;1;36mnote: [0m'?' condition is false[0m
 1393 |                       label[0] ? label : "NO NAME    ", 0,[0m
      | [0;1;32m                      ^
[0m[1mmformat.c:1407:5: [0m[0;1;36mnote: [0mAssuming 'bootOffset' is not equal to 0[0m
 1407 |         if(!bootOffset) {[0m
      | [0;1;32m           ^~~~~~~~~~~
[0m[1mmformat.c:1407:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1407 |         if(!bootOffset) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1411:5: [0m[0;1;36mnote: [0m'Atari' is 0[0m
 1411 |         if(Atari) {[0m
      | [0;1;32m           ^~~~~
[0m[1mmformat.c:1411:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1411 |         if(Atari) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1418:6: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1418 |         if(!keepBoot && bootOffset <= UINT16_MAX)[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmformat.c:1418:5: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1418 |         if(!keepBoot && bootOffset <= UINT16_MAX)[0m
      | [0;1;32m           ^
[0m[1mmformat.c:1418:18: [0m[0;1;36mnote: [0m'bootOffset' is <= UINT16_MAX[0m
 1418 |         if(!keepBoot && bootOffset <= UINT16_MAX)[0m
      | [0;1;32m                        ^~~~~~~~~~
[0m[1mmformat.c:1418:2: [0m[0;1;36mnote: [0mTaking true branch[0m
 1418 |         if(!keepBoot && bootOffset <= UINT16_MAX)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1419:3: [0m[0;1;36mnote: [0mCalling 'inst_boot_prg'[0m
 1419 |                 inst_boot_prg(&boot, (uint16_t)bootOffset);[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:160:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  160 |         if(offset - 2 < 0x80) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~
[0m[1mmformat.c:160:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  160 |         if(offset - 2 < 0x80) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:171:2: [0m[0;1;36mnote: [0mCalling 'set_word'[0m
  171 |         set_word(boot->boot.jump + offset + 20, offset + 24);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./msdos.h:83:2: [0m[0;1;36mnote: [0mAccess of 'boot.boot.jump' at an overflowing index, while it holds only 3 'unsigned char' elements[0m
   83 |         data[0] = (value >>  0) & 0xff;[0m
      | [0;1;32m        ^~~~~~~
[0m[1m./mtools.h:139:22: [0m[0;1;35mwarning: [0m[1mSubtraction of two pointers that do not point into the same array is undefined behavior [clang-analyzer-security.PointerSub][0m
  139 |         return (size_t) (end-begin);[0m
      | [0;1;32m                            ^
[0m[1m./msdos.h:149:21: [0m[0;1;36mnote: [0mObject at the left-hand side of subtraction[0m
  149 |         struct label_blk_t labelBlock;[0m
      | [0;1;32m                           ^~~~~~~~~~
[0m[1m./msdos.h:190:16: [0m[0;1;36mnote: [0mArray at the right-hand side of subtraction[0m
  190 |         unsigned char bytes[MAX_BOOT];[0m
      | [0;1;32m                      ^~~~~
[0m[1mmformat.c:927:6: [0m[0;1;36mnote: [0mAssuming 'Fs' is non-null[0m
  927 |         if (!Fs) {[0m
      | [0;1;32m            ^~~
[0m[1mmformat.c:927:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  927 |         if (!Fs) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:932:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  932 |         if(getenv("MTOOLS_DIR_LEN")) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:937:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  937 |         if(getenv("MTOOLS_NFATS")) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:946:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  946 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:946:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  946 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m        ^
[0m[1mmformat.c:948:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  948 |         while ((c = getopt(argc,argv,[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~
[0m  949 |                            "i:148f:t:n:v:qu"[0m
      | [0;1;32m                           ~~~~~~~~~~~~~~~~~
[0m  950 |                            "b:kK:R:B:r:L:I:FCc:Xh:s:T:l:N:H:M:S:2:30:Aad:m:"))!= EOF) {[0m
      | [0;1;32m                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:948:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 1130[0m
  948 |         while ((c = getopt(argc,argv,[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1130:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1130 |         if (argc - optind > 1)[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1130:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1130 |         if (argc - optind > 1)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1132:5: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1132 |         if(argc - optind == 1) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1132:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1132 |         if(argc - optind == 1) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1138:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1138 |             if(drive != ':') {[0m
      | [0;1;32m               ^~~~~~~~~~~~
[0m[1mmformat.c:1138:6: [0m[0;1;36mnote: [0mTaking false branch[0m
 1138 |             if(drive != ':') {[0m
      | [0;1;32m            ^
[0m[1mmformat.c:1146:5: [0m[0;1;36mnote: [0m'argtracks' is 0[0m
 1146 |         if(argtracks && tot_sectors) {[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mmformat.c:1146:15: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 1146 |         if(argtracks && tot_sectors) {[0m
      | [0;1;32m                     ^
[0m[1mmformat.c:1152:5: [0m[0;1;36mnote: [0m'create' is 0[0m
 1152 |         if(create && format_xdf) {[0m
      | [0;1;32m           ^~~~~~
[0m[1mmformat.c:1152:12: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 1152 |         if(create && format_xdf) {[0m
      | [0;1;32m                  ^
[0m[1mmformat.c:1161:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1161 |         for(dev=devices;dev->drive;dev++) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1164:7: [0m[0;1;36mnote: [0mAssuming 'drive' is equal to field 'drive'[0m
 1164 |                 if (dev->drive != drive)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1164:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1164 |                 if (dev->drive != drive)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1168:28: [0m[0;1;36mnote: [0m'argtracks' is 0[0m
 1168 |                 SET_INT(used_dev.tracks, argtracks);[0m
      | [0;1;32m                                         ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1168:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1168 |                 SET_INT(used_dev.tracks, argtracks);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1169:27: [0m[0;1;36mnote: [0m'argheads' is 0[0m
 1169 |                 SET_INT(used_dev.heads, argheads);[0m
      | [0;1;32m                                        ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1169:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1169 |                 SET_INT(used_dev.heads, argheads);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1170:29: [0m[0;1;36mnote: [0m'argsectors' is 0[0m
 1170 |                 SET_INT(used_dev.sectors, argsectors);[0m
      | [0;1;32m                                          ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1170:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1170 |                 SET_INT(used_dev.sectors, argsectors);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1171:28: [0m[0;1;36mnote: [0m'arguse_2m' is 0[0m
 1171 |                 SET_INT(used_dev.use_2m, arguse_2m);[0m
      | [0;1;32m                                         ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1171:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1171 |                 SET_INT(used_dev.use_2m, arguse_2m);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1172:27: [0m[0;1;36mnote: [0m'argssize' is 2[0m
 1172 |                 SET_INT(used_dev.ssize, argssize);[0m
      | [0;1;32m                                        ^
[0m[1m./mtools.h:118:4: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  118 | if(source)target=source[0m
      | [0;1;32m   ^~~~~~
[0m[1mmformat.c:1172:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 1172 |                 SET_INT(used_dev.ssize, argssize);[0m
      | [0;1;32m                ^
[0m[1m./mtools.h:117:33: [0m[0;1;36mnote: [0mexpanded from macro 'SET_INT'[0m
  117 | #define SET_INT(target, source) \[0m
      | [0;1;32m                                ^
[0m[1mmformat.c:1173:6: [0m[0;1;36mnote: [0m'hs_set' is 0[0m
 1173 |                 if(hs_set)[0m
      | [0;1;32m                   ^~~~~~
[0m[1mmformat.c:1173:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1173 |                 if(hs_set)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1182:6: [0m[0;1;36mnote: [0m'format_xdf' is 0[0m
 1182 |                 if(format_xdf)[0m
      | [0;1;32m                   ^~~~~~~~~~
[0m[1mmformat.c:1182:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1182 |                 if(format_xdf)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1186:6: [0m[0;1;36mnote: [0m'tot_sectors' is 0[0m
 1186 |                 if(tot_sectors)[0m
      | [0;1;32m                   ^~~~~~~~~~~
[0m[1mmformat.c:1186:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1186 |                 if(tot_sectors)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1201:6: [0m[0;1;36mnote: [0mAssuming field 'Next' is non-null[0m
 1201 |                 if(Fs->head.Next && info.FatSize) {[0m
      | [0;1;32m                   ^~~~~~~~~~~~~
[0m[1mmformat.c:1201:6: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mmformat.c:1201:23: [0m[0;1;36mnote: [0mAssuming field 'FatSize' is 0[0m
 1201 |                 if(Fs->head.Next && info.FatSize) {[0m
      | [0;1;32m                                    ^~~~~~~~~~~~
[0m[1mmformat.c:1201:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1201 |                 if(Fs->head.Next && info.FatSize) {[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1209:17: [0m[0;1;36mnote: [0mField 'Next' is non-null[0m
 1209 |                 if (!Fs->head.Next)[0m
      | [0;1;32m                              ^
[0m[1mmformat.c:1209:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1209 |                 if (!Fs->head.Next)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1212:6: [0m[0;1;36mnote: [0m'tot_sectors' is 0[0m
 1212 |                 if(tot_sectors)[0m
      | [0;1;32m                   ^~~~~~~~~~~
[0m[1mmformat.c:1212:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1212 |                 if(tot_sectors)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1217:6: [0m[0;1;36mnote: [0mAssuming field 'blocksize' is 0[0m
 1217 |                 if(!used_dev.blocksize || used_dev.blocksize < Fs->sector_size)[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1217:26: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
 1217 |                 if(!used_dev.blocksize || used_dev.blocksize < Fs->sector_size)[0m
      | [0;1;32m                                       ^
[0m[1mmformat.c:1222:6: [0m[0;1;36mnote: [0mAssuming 'blocksize' is <= MAX_SECTOR[0m
 1222 |                 if(blocksize > MAX_SECTOR)[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1222:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1222 |                 if(blocksize > MAX_SECTOR)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1225:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1225 |                 if(chs_to_totsectors(&used_dev, errmsg) < 0 ||[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1225:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mmformat.c:1226:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1226 |                    check_if_sectors_fit(dev->tot_sectors, maxSize, blocksize,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1227 |                                         errmsg) < 0) {[0m
      | [0;1;32m                                        ~~~~~~~~~~~
[0m[1mmformat.c:1225:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1225 |                 if(chs_to_totsectors(&used_dev, errmsg) < 0 ||[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1232:7: [0m[0;1;36mnote: [0m'tot_sectors' is 0[0m
 1232 |                 if(!tot_sectors)[0m
      | [0;1;32m                    ^~~~~~~~~~~
[0m[1mmformat.c:1232:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 1232 |                 if(!tot_sectors)[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1236:8: [0m[0;1;36mnote: [0m'create' is 0[0m
 1236 |                 if (!create &&[0m
      | [0;1;32m                     ^~~~~~
[0m[1mmformat.c:1236:7: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1236 |                 if (!create &&[0m
      | [0;1;32m                    ^
[0m[1mmformat.c:1237:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1237 |                     PREADS(Fs->head.Next,[0m
      | [0;1;32m                    ^
[0m[1m./stream.h:57:44: [0m[0;1;36mnote: [0mexpanded from macro 'PREADS'[0m
   57 | #define PREADS(stream, buf, address, size) \[0m
      | [0;1;32m                                           ^
[0m[1mmformat.c:1236:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1236 |                 if (!create &&[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1252:3: [0m[0;1;36mnote: [0m Execution continues on line 1256[0m
 1252 |                 break;[0m
      | [0;1;32m                ^
[0m[1mmformat.c:1256:7: [0m[0;1;36mnote: [0mAssuming field 'drive' is not equal to 0[0m
 1256 |         if ( dev->drive == 0 ){[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~
[0m[1mmformat.c:1256:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1256 |         if ( dev->drive == 0 ){[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1262:5: [0m[0;1;36mnote: [0mAssuming 'tot_sectors' is not equal to 0[0m
 1262 |         if(tot_sectors == 0) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~
[0m[1mmformat.c:1262:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1262 |         if(tot_sectors == 0) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1268:6: [0m[0;1;36mnote: [0m'create' is 0[0m
 1268 |         if (create) {[0m
      | [0;1;32m            ^~~~~~
[0m[1mmformat.c:1268:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1268 |         if (create) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1275:5: [0m[0;1;36mnote: [0m'bootSector' is null[0m
 1275 |         if(bootSector) {[0m
      | [0;1;32m           ^~~~~~~~~~
[0m[1mmformat.c:1275:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1275 |         if(bootSector) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1292:6: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmformat.c:1292:5: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m           ^
[0m[1mmformat.c:1292:18: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m                        ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1292:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1301:6: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1301 |         if(!keepBoot)[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmformat.c:1301:2: [0m[0;1;36mnote: [0mTaking true branch[0m
 1301 |         if(!keepBoot)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1308:2: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 1327[0m
 1308 |         switch(calc_fs_parameters(&used_dev, fat32, tot_sectors, Fs,[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1327:6: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1327 |         if(!keepBoot && !(used_dev.use_2m & 0x7f)) {[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mmformat.c:1327:5: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 1327 |         if(!keepBoot && !(used_dev.use_2m & 0x7f)) {[0m
      | [0;1;32m           ^
[0m[1mmformat.c:1327:18: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1327 |         if(!keepBoot && !(used_dev.use_2m & 0x7f)) {[0m
      | [0;1;32m                        ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1327:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1327 |         if(!keepBoot && !(used_dev.use_2m & 0x7f)) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1341:5: [0m[0;1;36mnote: [0mAssuming field 'fat_bits' is not equal to 32[0m
 1341 |         if(Fs->fat_bits == 32) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1341:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1341 |         if(Fs->fat_bits == 32) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1373:5: [0m[0;1;36mnote: [0mAssuming field 'cp' is not equal to NULL[0m
 1373 |         if(Fs->cp == NULL)[0m
      | [0;1;32m           ^~~~~~~~~~~~~~
[0m[1mmformat.c:1373:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1373 |         if(Fs->cp == NULL)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1376:5: [0m[0;1;36mnote: [0m'haveMediaDesc' is false[0m
 1376 |         if(haveMediaDesc)[0m
      | [0;1;32m           ^~~~~~~~~~~~~
[0m[1mmformat.c:1376:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1376 |         if(haveMediaDesc)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1378:5: [0m[0;1;36mnote: [0m'haveBiosDisk' is false[0m
 1378 |         if(haveBiosDisk)[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mmformat.c:1378:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1378 |         if(haveBiosDisk)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1380:12: [0m[0;1;36mnote: [0m'keepBoot' is 0[0m
 1380 |         else if (!keepBoot)[0m
      | [0;1;32m                  ^~~~~~~~
[0m[1mmformat.c:1380:7: [0m[0;1;36mnote: [0mTaking true branch[0m
 1380 |         else if (!keepBoot)[0m
      | [0;1;32m             ^
[0m[1mmformat.c:1383:28: [0m[0;1;36mnote: [0mAssuming field 'descr' is not equal to 248[0m
 1383 |                 labelBlock->physdrive = (boot.boot.descr == 0xf8) ? 0x80 : 0x00;[0m
      | [0;1;32m                                         ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mmformat.c:1383:27: [0m[0;1;36mnote: [0m'?' condition is false[0m
 1383 |                 labelBlock->physdrive = (boot.boot.descr == 0xf8) ? 0x80 : 0x00;[0m
      | [0;1;32m                                        ^
[0m[1mmformat.c:1387:7: [0m[0;1;36mnote: [0m'serial_set' is 0[0m
 1387 |         if (!serial_set || Atari)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1mmformat.c:1387:18: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
 1387 |         if (!serial_set || Atari)[0m
      | [0;1;32m                        ^
[0m[1mmformat.c:1389:7: [0m[0;1;36mnote: [0m'serial_set' is 0[0m
 1389 |         if (!serial_set)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1mmformat.c:1389:2: [0m[0;1;36mnote: [0mTaking true branch[0m
 1389 |         if (!serial_set)[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1393:9: [0m[0;1;36mnote: [0m'?' condition is false[0m
 1393 |                       label[0] ? label : "NO NAME    ", 0,[0m
      | [0;1;32m                      ^
[0m[1mmformat.c:1407:5: [0m[0;1;36mnote: [0mAssuming 'bootOffset' is 0[0m
 1407 |         if(!bootOffset) {[0m
      | [0;1;32m           ^~~~~~~~~~~
[0m[1mmformat.c:1407:2: [0m[0;1;36mnote: [0mTaking true branch[0m
 1407 |         if(!bootOffset) {[0m
      | [0;1;32m        ^
[0m[1mmformat.c:1408:16: [0m[0;1;36mnote: [0mCalling 'ptrdiff'[0m
 1408 |                 bootOffset = ptrdiff((char *) labelBlock, (char*)boot.bytes) +[0m
      | [0;1;32m                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./mtools.h:139:22: [0m[0;1;36mnote: [0mSubtraction of two pointers that do not point into the same array is undefined behavior[0m
  139 |         return (size_t) (end-begin);[0m
      | [0;1;32m                         ~~~^~~~~~
[0m[1mmformat.c:78:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   78 |                 strncpy(boot->boot.banner, "2M-STV04", 8);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:78:3: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
   78 |                 strncpy(boot->boot.banner, "2M-STV04", 8);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:81:56: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   81 |                 if ( dev->sectors % ( ((1 << dev->ssize) + 3) >> 2 ))[0m
      | [0;1;32m                                                                     ^
[0m      | [0;32m                                                                      {
[0m   82 |                         boot->boot.ext.old.wt = 1;[0m
   83 |                 else[0m
      | [0;32m                } 
[0m[1mmformat.c:83:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   83 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m   84 |                         boot->boot.ext.old.wt = 0;[0m
      | [0;1;32m                                                  
[0m[1mmformat.c:87:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   87 |                 if (boot->boot.ext.old.rate_any== 2 )[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m   88 |                         boot->boot.ext.old.rate_any= 1;[0m
      | [0;1;32m                                                       
[0m[1mmformat.c:95:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |                 for(j=1; j<= sectors0; j++)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m   96 |                         boot->bytes[i++] = j;[0m
      | [0;1;32m                                             
[0m[1mmformat.c:107:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  107 |                         while ( sector2 < (1 << size2) >> 2 )[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m  108 |                                 size2--;[0m
      | [0;1;32m                                        
[0m[1mmformat.c:121:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  121 |                         while ( sector2 < 1 << ( size2 - 2) )[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m  122 |                                 size2--;[0m
      | [0;1;32m                                        
[0m[1mmformat.c:131:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  131 |                 for (sum=0, j=64; j<i; j++)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  132 |                         sum += boot->bytes[j];/* checksum */[0m
      | [0;1;32m                                                            
[0m[1mmformat.c:140:4: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  140 |                         strncpy(boot->boot.banner, mformat_banner, 8);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmformat.c:140:4: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  140 |                         strncpy(boot->boot.banner, mformat_banner, 8);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmformat.c:159:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  159 |         memcpy(boot->bytes + offset, bootprog, sizeof(bootprog));[0m
      | [0;1;32m        ^~~~~~
[0m[1mmformat.c:159:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  159 |         memcpy(boot->bytes + offset, bootprog, sizeof(bootprog));[0m
      | [0;1;32m        ^~~~~~
[0m[1mmformat.c:190:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  190 |                 fprintf(stderr,"Could not open root directory\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:190:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  190 |                 fprintf(stderr,"Could not open root directory\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:194:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  194 |         memset(buf, '\0', Fs->sector_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mmformat.c:194:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  194 |         memset(buf, '\0', Fs->sector_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mmformat.c:201:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  201 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  202 |                 dirlen = Fs->dir_len;[0m
      | [0;1;32m                                     
[0m[1mmformat.c:203:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  203 |         for (i = 0; i < dirlen; i++)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  204 |                 PWRITES(RootDir, buf, sectorsToBytes(Fs, i),[0m
  205 |                         Fs->sector_size);[0m
      | [0;1;32m                                         
[0m[1mmformat.c:208:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  208 |         if(label[0])[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  209 |                 mwrite_one(RootDir,label, 0, labelit, NULL,&ch);[0m
      | [0;1;32m                                                                
[0m[1mmformat.c:212:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  212 |         if(Fs->fat_bits == 32)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  213 |                 set_word(boot->boot.dirents, 0);[0m
  214 |         else[0m
      | [0;32m        } 
[0m[1mmformat.c:214:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  214 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  215 |                 set_word(boot->boot.dirents,[0m
  216 |                          (uint16_t) (Fs->dir_len * (Fs->sector_size / 32)));[0m
      | [0;1;32m                                                                            
[0m[1mmformat.c:249:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  249 |         if(tot_sectors < clus_start)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  250 |                 return -2;[0m
      | [0;1;32m                          
[0m[1mmformat.c:258:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  258 |            Fs->cluster_size % 2 == 0)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  259 |                 rem_sect--;[0m
      | [0;1;32m                           
[0m[1mmformat.c:287:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  287 |                 if(rem_sect > 256 * FAT12)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  288 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mmformat.c:290:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  290 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  291 |                 /* Avoid numerical overflows, divide the denominator[0m
  292 |                  * rather than multiplying the numerator */[0m
  293 |                 denominator = denominator / fat_nybbles;[0m
      | [0;1;32m                                                        
[0m[1mmformat.c:365:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  365 |                 if(Fs->fat_start <= 6)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  366 |                         Fs->backupBoot = Fs->fat_start - 1;[0m
  367 |                 else[0m
      | [0;32m                } 
[0m[1mmformat.c:367:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  367 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  368 |                         Fs->backupBoot=6;[0m
      | [0;1;32m                                         
[0m[1mmformat.c:372:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  372 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:372:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  372 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:378:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  378 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:378:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  378 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:425:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  425 |                 minClus = 1;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  426 |                 maxClus = FAT12;[0m
  427 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mmformat.c:429:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  429 |                 minClus = 4096;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  430 |                 maxClus = FAT16;[0m
  431 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mmformat.c:433:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  433 |                 minClus = FAT16;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  434 |                 maxClus = FAT32;[0m
  435 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mmformat.c:444:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  444 |                 fprintf(stderr, "FAT=%d Cluster=%d%s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:444:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  444 |                 fprintf(stderr, "FAT=%d Cluster=%d%s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:451:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  451 |                 if(fit != 0)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  452 |                         return fit;[0m
      | [0;1;32m                                   
[0m[1mmformat.c:460:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  460 |                 if(calc_num_clus(Fs, tot_sectors) < 0)[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m  461 |                         return -2;[0m
      | [0;1;32m                                  
[0m[1mmformat.c:462:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  462 |                 if(Fs->num_clus < minClus)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  463 |                         return -1; /* Not enough clusters => loop[0m
[1mmformat.c:470:59: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  470 |                         if(Fs->num_clus >= FAT32 || !clusters_fit_into_fat(Fs))[0m
      | [0;1;32m                                                                               ^
[0m      | [0;32m                                                                                {
[0m  471 |                                 return 2; /* Caller should should pick a[0m
[1mmformat.c:476:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  476 |                 if(Fs->num_clus < maxClus)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  477 |                         break;[0m
      | [0;1;32m                              
[0m[1mmformat.c:478:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  478 |                 if(!may_pad)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  479 |                         return 1;[0m
      | [0;1;32m                                 
[0m[1mmformat.c:516:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  516 |                         if(dir_grow > waste)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  517 |                                 dir_grow = waste;[0m
      | [0;1;32m                                                 
[0m[1mmformat.c:530:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  530 |                         if(dir_shrink > dir_grow)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  531 |                                 dir_shrink = dir_grow;[0m
      | [0;1;32m                                                      
[0m[1mmformat.c:575:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  575 |                         fprintf(stderr, "Fat bits 32 requested on command line, but %d in device description\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmformat.c:575:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  575 |                         fprintf(stderr, "Fat bits 32 requested on command line, but %d in device description\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmformat.c:584:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  584 |             (may_change_boot_size || Fs->fat_start == 1) )[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m  585 |                 params = getOldDosByParams(dev->tracks,dev->heads,dev->sectors,[0m
  586 |                                            Fs->dir_len, Fs->cluster_size);[0m
      | [0;1;32m                                                                          
[0m[1mmformat.c:604:62: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  604 |         if(dev->hidden || tot_sectors % (dev->sectors * dev->heads))[0m
      | [0;1;32m                                                                    ^
[0m      | [0;32m                                                                     {
[0m  605 |                 *descr = 0xf8;[0m
  606 |         else[0m
      | [0;32m        } 
[0m[1mmformat.c:606:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  606 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  607 |                 *descr = 0xf0;[0m
      | [0;1;32m                              
[0m[1mmformat.c:610:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  610 |         if(Fs->fat_bits == 0)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  611 |                 /* If fat_bits not specified by device or command[0m
  612 |                  * line, start with a 12-bit FAT */[0m
  613 |                 Fs->fat_bits = 12;[0m
      | [0;1;32m                                  
[0m[1mmformat.c:615:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  615 |                 if(tot_sectors < 2400 && dev->heads == 2)[0m
      | [0;1;32m                                                         ^
[0m      | [0;32m                                                          {
[0m  616 |                         /* double sided double density floppies */[0m
  617 |                         Fs->cluster_size = 2;[0m
  618 |                 else if(may_change_fat_len && Fs->fat_bits == 32)[0m
      | [0;32m                } 
[0m[1mmformat.c:618:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  618 |                 else if(may_change_fat_len && Fs->fat_bits == 32)[0m
      | [0;1;32m                                                                 ^
[0m      | [0;32m                                                                  {
[0m  619 |                         /* FAT32 => start with 8 */[0m
  620 |                         Fs->cluster_size = 8;[0m
  621 |                 else[0m
      | [0;32m                } 
[0m[1mmformat.c:621:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  621 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  622 |                         /* In all other cases, start with 1 */[0m
  623 |                         Fs->cluster_size = 1;[0m
      | [0;1;32m                                             
[0m[1mmformat.c:629:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  629 |                         if (dev->heads == 1)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  630 |                                 Fs->dir_len = 4;[0m
  631 |                         else[0m
      | [0;32m                        } 
[0m[1mmformat.c:631:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  631 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  632 |                                 Fs->dir_len = 7;[0m
      | [0;1;32m                                                
[0m[1mmformat.c:633:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  633 |                 } else if(tot_sectors <= 3840)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  634 |                         /* High density floppies */[0m
  635 |                         Fs->dir_len = 14;[0m
  636 |                 else if(tot_sectors <= 7680)[0m
      | [0;32m                } 
[0m[1mmformat.c:636:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  636 |                 else if(tot_sectors <= 7680)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  637 |                         /* extra density floppies */[0m
  638 |                         Fs->dir_len = 15;[0m
  639 |                 else[0m
      | [0;32m                } 
[0m[1mmformat.c:639:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  639 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  640 |                         Fs->dir_len = 32;[0m
      | [0;1;32m                                         
[0m[1mmformat.c:647:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  647 |                         if(Fs->fat_bits == 32)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  648 |                                 Fs->fat_start = 32;[0m
  649 |                         else[0m
      | [0;32m                        } 
[0m[1mmformat.c:649:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  649 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  650 |                                 Fs->fat_start = 1;[0m
      | [0;1;32m                                                  
[0m[1mmformat.c:653:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  653 |                 if(Fs->fat_bits == 32)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  654 |                         Fs->dir_len = 0;[0m
  655 |                 else if(Fs->dir_len == 0)[0m
      | [0;32m                } 
[0m[1mmformat.c:655:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  655 |                 else if(Fs->dir_len == 0)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  656 |                         Fs->dir_len = saved_dir_len;[0m
      | [0;1;32m                                                    
[0m[1mmformat.c:687:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  687 |                         fprintf(stderr, " fit=%d\n", fit);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmformat.c:687:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  687 |                         fprintf(stderr, " fit=%d\n", fit);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmformat.c:689:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  689 |                 if(fit == 0)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  690 |                         break;[0m
      | [0;1;32m                              
[0m[1mmformat.c:691:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  691 |                 if(fit == -2)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  692 |                         return -1;[0m
      | [0;1;32m                                  
[0m[1mmformat.c:705:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  705 |                         if(fat32Requested)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  706 |                                 break;[0m
      | [0;1;32m                                      
[0m[1mmformat.c:709:5: [0m[0;1;35mwarning: [0m[1mValue stored to 'fat32Requested' is never read [clang-analyzer-deadcode.DeadStores][0m
  709 |                                 fat32Requested=1;[0m
      | [0;1;32m                                ^              ~
[0m[1mmformat.c:709:5: [0m[0;1;36mnote: [0mValue stored to 'fat32Requested' is never read[0m
  709 |                                 fat32Requested=1;[0m
      | [0;1;32m                                ^              ~
[0m[1mmformat.c:722:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  722 |                         if(!may_change_fat_bits || Fs->fat_bits == 12)[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m  723 |                                 return -2;[0m
      | [0;1;32m                                          
[0m[1mmformat.c:727:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  727 |                                 Fs->fat_bits=12;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  728 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:730:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  730 |                                 Fs->fat_bits=16;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  731 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:746:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  746 |                                 if(may_change_cluster_size)[0m
      | [0;1;32m                                                           ^
[0m      | [0;32m                                                            {
[0m  747 |                                         Fs->cluster_size = 1;[0m
      | [0;1;32m                                                             
[0m[1mmformat.c:755:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  755 |                                 if(may_change_cluster_size)[0m
      | [0;1;32m                                                           ^
[0m      | [0;32m                                                            {
[0m  756 |                                         Fs->cluster_size =[0m
  757 |                                                 may_change_fat_len ? 8 : 1;[0m
      | [0;1;32m                                                                           
[0m[1mmformat.c:781:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  781 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:781:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  781 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:789:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  789 |         if(Fs->fat_bits == 32)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  790 |                 fat32_specific_init(Fs);[0m
      | [0;1;32m                                        
[0m[1mmformat.c:796:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  796 |         memset(Fs, 0, sizeof(*Fs));[0m
      | [0;1;32m        ^~~~~~
[0m[1mmformat.c:796:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  796 |         memset(Fs, 0, sizeof(*Fs));[0m
      | [0;1;32m        ^~~~~~
[0m[1mmformat.c:834:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  834 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  835 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mmformat.c:841:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  841 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:841:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  841 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:843:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  843 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:843:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  843 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:928:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  928 |                 fprintf(stderr, "Out of memory\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:928:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  928 |                 fprintf(stderr, "Out of memory\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:934:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  934 |           if(Fs->dir_len <= 0)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  935 |             Fs->dir_len=0;[0m
      | [0;1;32m                          
[0m[1mmformat.c:939:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  939 |           if(Fs->num_fat <= 0)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  940 |             Fs->num_fat=2;[0m
      | [0;1;32m                          
[0m[1mmformat.c:946:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  946 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  947 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmformat.c:955:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  955 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  956 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:960:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  960 |                                 argheads = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  961 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:963:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  963 |                                 argsectors = 9;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  964 |                                 argtracks = 40;[0m
  965 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:967:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  967 |                                 argsectors = 8;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  968 |                                 argtracks = 40;[0m
  969 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:971:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  971 |                                 r=old_dos_size_to_geom(atoul(optarg),[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  972 |                                                        &argtracks, &argheads,[0m
  973 |                                                        &argsectors);[0m
  974 |                                 if(r) {[0m
  975 |                                         fprintf(stderr,[0m
  976 |                                                 "Bad size %s\n", optarg);[0m
  977 |                                         exit(1);[0m
  978 |                                 }[0m
  979 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:975:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  975 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmformat.c:975:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  975 |                                         fprintf(stderr,[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmformat.c:981:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  981 |                                 argtracks = atou16(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  982 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:985:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  985 |                                 tot_sectors = parseSize(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  986 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:991:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  991 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mmformat.c:995:5: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  995 |                                 strncpy(label, optarg, VBUFSIZE-1);[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmformat.c:995:5: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  995 |                                 strncpy(label, optarg, VBUFSIZE-1);[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmformat.c:996:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  996 |                                 label[VBUFSIZE-1] = '\0';[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  997 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1003:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1003 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmformat.c:1003:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1003 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmformat.c:1005:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1005 |                                 exit(1);[0m
      | [0;1;32m                                ^      
[0m      | [0;32m                                {      ;} 
[0m[1mmformat.c:1008:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1008 |                                 haveBiosDisk=1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1009 |                                 biosDisk = atou8(optarg);[0m
      | [0;1;32m                                                        
[0m      | [0;32m                                                        ;} 
[0m[1mmformat.c:1014:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1014 |                                 fat32 = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1015 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1019:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1019 |                                 argssize = atou8(optarg) | 0x80;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1020 |                                 if(argssize < 0x80)[0m
 1021 |                                         usage(1);[0m
 1022 |                                 if(argssize >= 0x87) {[0m
 1023 |                                         fprintf(stderr, "argssize must be less than 6\n");[0m
 1024 |                                         usage(1);[0m
 1025 |                                 }[0m
 1026 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1020:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1020 |                                 if(argssize < 0x80)[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m 1021 |                                         usage(1);[0m
      | [0;1;32m                                                 
[0m[1mmformat.c:1023:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1023 |                                         fprintf(stderr, "argssize must be less than 6\n");[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmformat.c:1023:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1023 |                                         fprintf(stderr, "argssize must be less than 6\n");[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mmformat.c:1030:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1030 |                                 format_xdf = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1031 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1035:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1035 |                                 arguse_2m = 0xff;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1036 |                                 sectors0 = atou8(optarg);[0m
 1037 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1039:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1039 |                                 arguse_2m = 0x80;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1040 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1043:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1043 |                                 rate_0 = atou8(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1044 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1046:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1046 |                                 rate_any = atou8(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1047 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1050:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1050 |                                 msize = atou16(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1051 |                                 if(msize != 512 &&[0m
 1052 |                                    msize != 1024 &&[0m
 1053 |                                    msize != 2048 &&[0m
 1054 |                                    msize != 4096) {[0m
 1055 |                                   fprintf(stderr, "Only sector sizes of 512, 1024, 2048 or 4096 bytes are allowed\n");[0m
 1056 |                                   usage(1);[0m
 1057 |                                 }[0m
 1058 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1055:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1055 |                                   fprintf(stderr, "Only sector sizes of 512, 1024, 2048 or 4096 bytes are allowed\n");[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1mmformat.c:1055:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1055 |                                   fprintf(stderr, "Only sector sizes of 512, 1024, 2048 or 4096 bytes are allowed\n");[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1mmformat.c:1061:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1061 |                                 serial = strtou32(optarg,&endptr,16);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1062 |                                 serial_set = 1;[0m
 1063 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1065:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1065 |                                 Atari = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1066 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1069:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1069 |                                 create = O_CREAT | O_TRUNC;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1070 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1073:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1073 |                                 hs = atoui(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1074 |                                 hs_set = 1;[0m
 1075 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1078:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1078 |                                 fsVersion = strtou16(optarg,&endptr,0);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1079 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1082:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1082 |                                 Fs->cluster_size = atou8(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1083 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1086:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1086 |                                 Fs->dir_len = strtou16(optarg,&endptr,0);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1087 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1089:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1089 |                                 Fs->fat_len = strtoui(optarg,&endptr,0);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1090 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1093:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1093 |                                 bootSector = optarg;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1094 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1096:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1096 |                                 keepBoot = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1097 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1099:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1099 |                                 Fs->backupBoot = atou16(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1100 |                                 if(Fs->backupBoot < 2) {[0m
 1101 |                                   fprintf(stderr, "Backupboot must be greater than 2\n");[0m
 1102 |                                   exit(1);[0m
 1103 |                                 }[0m
 1104 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1101:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1101 |                                   fprintf(stderr, "Backupboot must be greater than 2\n");[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1mmformat.c:1101:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1101 |                                   fprintf(stderr, "Backupboot must be greater than 2\n");[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1mmformat.c:1106:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1106 |                                 Fs->fat_start = atou8(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1107 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1109:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1109 |                                 argheads = atou16(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1110 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1112:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1112 |                                 Fs->num_fat = atou8(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1113 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1115:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1115 |                                 mediaDesc = strtou8(optarg,&endptr,0);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1116 |                                 if(*endptr)[0m
 1117 |                                         mediaDesc = strtou8(optarg,&endptr,16);[0m
 1118 |                                 if(optarg == endptr || *endptr) {[0m
 1119 |                                   fprintf(stderr, "Bad mediadesc %s\n", optarg);[0m
 1120 |                                   exit(1);[0m
 1121 |                                 }[0m
 1122 |                                 haveMediaDesc=true;[0m
 1123 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmformat.c:1116:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1116 |                                 if(*endptr)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m 1117 |                                         mediaDesc = strtou8(optarg,&endptr,16);[0m
      | [0;1;32m                                                                               
[0m[1mmformat.c:1119:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1119 |                                   fprintf(stderr, "Bad mediadesc %s\n", optarg);[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1mmformat.c:1119:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1119 |                                   fprintf(stderr, "Bad mediadesc %s\n", optarg);[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1mmformat.c:1125:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1125 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmformat.c:1130:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1130 |         if (argc - optind > 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m 1131 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmformat.c:1133:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1133 |             if(!argv[optind][0] || argv[optind][1] != ':')[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m 1134 |                 usage(1);[0m
      | [0;1;32m                         
[0m[1mmformat.c:1141:8: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1141 |               fprintf(stderr, "Drive letter missing\n");[0m
      | [0;1;32m              ^~~~~~~
[0m[1mmformat.c:1141:8: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1141 |               fprintf(stderr, "Drive letter missing\n");[0m
      | [0;1;32m              ^~~~~~~
[0m[1mmformat.c:1147:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1147 |                 fprintf(stderr, "Only one of -t or -T may be specified\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1147:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1147 |                 fprintf(stderr, "Only one of -t or -T may be specified\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1153:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1153 |                 fprintf(stderr,"Create and XDF can't be used together\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1153:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1153 |                 fprintf(stderr,"Create and XDF can't be used together\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1159:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1159 |         sprintf(errmsg, "Drive '%c:' not supported", drive);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:1159:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
 1159 |         sprintf(errmsg, "Drive '%c:' not supported", drive);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:1164:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1164 |                 if (dev->drive != drive)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m 1165 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmformat.c:1173:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1173 |                 if(hs_set)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m 1174 |                         used_dev.hidden = hs;[0m
      | [0;1;32m                                             
[0m[1mmformat.c:1182:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1182 |                 if(format_xdf)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m 1183 |                         used_dev.misc_flags |= USE_XDF_FLAG;[0m
      | [0;1;32m                                                            
[0m[1mmformat.c:1186:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1186 |                 if(tot_sectors)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m 1187 |                         used_dev.tot_sectors = tot_sectors;[0m
      | [0;1;32m                                                           
[0m[1mmformat.c:1202:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1202 |                         if(!Fs->fat_len)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m 1203 |                                 Fs->fat_len = info.FatSize;[0m
      | [0;1;32m                                                           
[0m[1mmformat.c:1204:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1204 |                         if(!Fs->dir_len)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m 1205 |                                 Fs->dir_len = info.RootDirSize;[0m
      | [0;1;32m                                                               
[0m[1mmformat.c:1209:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1209 |                 if (!Fs->head.Next)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m 1210 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmformat.c:1212:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1212 |                 if(tot_sectors)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m 1213 |                         used_dev.tot_sectors = tot_sectors;[0m
      | [0;1;32m                                                           
[0m[1mmformat.c:1217:66: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1217 |                 if(!used_dev.blocksize || used_dev.blocksize < Fs->sector_size)[0m
      | [0;1;32m                                                                               ^
[0m      | [0;32m                                                                                {
[0m 1218 |                         blocksize = Fs->sector_size;[0m
 1219 |                 else[0m
      | [0;32m                } 
[0m[1mmformat.c:1219:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1219 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m 1220 |                         blocksize = used_dev.blocksize;[0m
      | [0;1;32m                                                       
[0m[1mmformat.c:1222:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1222 |                 if(blocksize > MAX_SECTOR)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m 1223 |                         blocksize = MAX_SECTOR;[0m
      | [0;1;32m                                               
[0m[1mmformat.c:1232:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1232 |                 if(!tot_sectors)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m 1233 |                         tot_sectors = used_dev.tot_sectors;[0m
      | [0;1;32m                                                           
[0m[1mmformat.c:1241:4: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1241 |                         snprintf(errmsg, sizeof(errmsg)-1,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mmformat.c:1241:4: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
 1241 |                         snprintf(errmsg, sizeof(errmsg)-1,[0m
      | [0;1;32m                        ^~~~~~~~
[0m[1mmformat.c:1258:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1258 |                 fprintf(stderr,"%s: %s\n", argv[0],errmsg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1258:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1258 |                 fprintf(stderr,"%s: %s\n", argv[0],errmsg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1263:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1263 |                 fprintf(stderr, "Disk size not known\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1263:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1263 |                 fprintf(stderr, "Disk size not known\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1292:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1292 |         if(!keepBoot && !(used_dev.use_2m & 0x7f))[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m 1293 |                 memset(boot.characters, '\0', Fs->sector_size);[0m
      | [0;1;32m                                                               
[0m[1mmformat.c:1293:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1293 |                 memset(boot.characters, '\0', Fs->sector_size);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmformat.c:1293:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1293 |                 memset(boot.characters, '\0', Fs->sector_size);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmformat.c:1301:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1301 |         if(!keepBoot)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m 1302 |                 set_word(&boot.bytes[510], 0xaa55);[0m
      | [0;1;32m                                                   
[0m[1mmformat.c:1311:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1311 |                 fprintf(stderr, "Too few sectors\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1311:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1311 |                 fprintf(stderr, "Too few sectors\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1311:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1311 |                 fprintf(stderr, "Too few sectors\n");[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m 1312 |                 exit(1);[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1mmformat.c:1314:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1314 |                 fprintf(stderr, "Too few clusters for %d bit fat\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1314:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1314 |                 fprintf(stderr, "Too few clusters for %d bit fat\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1314:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1314 |                 fprintf(stderr, "Too few clusters for %d bit fat\n",[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m 1315 |                         Fs->fat_bits);[0m
 1316 |                 exit(1);[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1mmformat.c:1318:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1318 |                 fprintf(stderr, "Too many clusters for %d bit FAT\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1318:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1318 |                 fprintf(stderr, "Too many clusters for %d bit FAT\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1318:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1318 |                 fprintf(stderr, "Too many clusters for %d bit FAT\n",[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m 1319 |                         Fs->fat_bits);[0m
 1320 |                 exit(1);[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1mmformat.c:1322:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1322 |                 fprintf(stderr, "Too many clusters for fat length %d\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1322:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1322 |                 fprintf(stderr, "Too many clusters for fat length %d\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1322:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1322 |                 fprintf(stderr, "Too many clusters for fat length %d\n",[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m 1323 |                         Fs->fat_len);[0m
 1324 |                 exit(1);[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1mmformat.c:1373:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1373 |         if(Fs->cp == NULL)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m 1374 |                 exit(1);[0m
      | [0;1;32m                        
[0m[1mmformat.c:1376:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1376 |         if(haveMediaDesc)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m 1377 |                 boot.boot.descr=mediaDesc;[0m
      | [0;1;32m                                          
[0m[1mmformat.c:1378:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1378 |         if(haveBiosDisk)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m 1379 |                 labelBlock->physdrive = biosDisk;[0m
 1380 |         else if (!keepBoot)[0m
      | [0;32m        } 
[0m[1mmformat.c:1380:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1380 |         else if (!keepBoot)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m 1381 |                 /* only set physdrive if we don't have a template[0m
 1382 |                  * bootsector */[0m
 1383 |                 labelBlock->physdrive = (boot.boot.descr == 0xf8) ? 0x80 : 0x00;[0m
      | [0;1;32m                                                                                
[0m[1mmformat.c:1387:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1387 |         if (!serial_set || Atari)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m 1388 |                 init_random();[0m
      | [0;1;32m                              
[0m[1mmformat.c:1389:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1389 |         if (!serial_set)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m 1390 |                 serial=(uint32_t) random();[0m
      | [0;1;32m                                           
[0m[1mmformat.c:1395:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1395 |         strncpy(labelBlock->label, shortlabel.base, 8);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:1395:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
 1395 |         strncpy(labelBlock->label, shortlabel.base, 8);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:1396:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1396 |         strncpy(labelBlock->label+8, shortlabel.ext, 3);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:1396:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
 1396 |         strncpy(labelBlock->label+8, shortlabel.ext, 3);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:1397:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1397 |         sprintf(labelBlock->fat_type, "FAT%2.2d  ", Fs->fat_bits);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:1397:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
 1397 |         sprintf(labelBlock->fat_type, "FAT%2.2d  ", Fs->fat_bits);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmformat.c:1418:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1418 |         if(!keepBoot && bootOffset <= UINT16_MAX)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m 1419 |                 inst_boot_prg(&boot, (uint16_t)bootOffset);[0m
      | [0;1;32m                                                           
[0m[1mmformat.c:1428:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1428 |         if(used_dev.use_2m & 0x7f)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m 1429 |                 Fs->num_fat = 1;[0m
      | [0;1;32m                                
[0m[1mmformat.c:1437:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1437 |         if(used_dev.misc_flags & USE_XDF_FLAG)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m 1438 |                 for(i=0;[0m
 1439 |                     i < (info.BadSectors+Fs->cluster_size-1)/Fs->cluster_size;[0m
 1440 |                     i++)[0m
 1441 |                         fatEncode(Fs, i+2, 0xfff7);[0m
      | [0;1;32m                                                   
[0m[1mmformat.c:1440:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1440 |                     i++)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m 1441 |                         fatEncode(Fs, i+2, 0xfff7);[0m
      | [0;1;32m                                                   
[0m[1mmformat.c:1446:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1446 |                 fprintf(stderr, "Error writing boot sector\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1446:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1446 |                 fprintf(stderr, "Error writing boot sector\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1454:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1454 |                         fprintf(stderr, "Error writing backup boot sector\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmformat.c:1454:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1454 |                         fprintf(stderr, "Error writing backup boot sector\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmformat.c:1461:58: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1461 |         if(format_xdf && isatty(0) && !getenv("MTOOLS_USE_XDF"))[0m
      | [0;1;32m                                                                ^
[0m      | [0;32m                                                                 {
[0m 1462 |                 fprintf(stderr,[0m
 1463 |                         "Note:\n"[0m
 1464 |                         "Remember to set the \"MTOOLS_USE_XDF\" environmental\n"[0m
 1465 |                         "variable before accessing this disk\n\n"[0m
 1466 |                         "Bourne shell syntax (sh, ash, bash, ksh, zsh etc):\n"[0m
 1467 |                         " export MTOOLS_USE_XDF=1\n\n"[0m
 1468 |                         "C shell syntax (csh and tcsh):\n"[0m
 1469 |                         " setenv MTOOLS_USE_XDF 1\n" );[0m
      | [0;1;32m                                                       
[0m[1mmformat.c:1462:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1462 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmformat.c:1462:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1462 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m172 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[66/72][134.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpjg24blw5.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/file.c
[1mfile.c:68:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   68 |         while(Stream->Class != &FileClass)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m   69 |                 Stream = Stream->Next;[0m
      | [0;1;32m                                      
[0m[1mfile.c:98:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   98 |         if(bytes % clus_size)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   99 |                 ret++;[0m
      | [0;1;32m                      
[0m[1mfile.c:122:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  122 |         if(neededClusters < currentClusters)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  123 |                 neededPrealloc = 0;[0m
  124 |         else[0m
      | [0;32m        } 
[0m[1mfile.c:124:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  124 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  125 |                 neededPrealloc = neededClusters - currentClusters;[0m
      | [0;1;32m                                                                  
[0m[1mfile.c:129:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  129 |                 if(r)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  130 |                         return r;[0m
      | [0;1;32m                                 
[0m[1mfile.c:143:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  143 |                 fprintf(stderr, "loop detected! oldrel=%d newrel=%d abs=%d\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfile.c:143:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  143 |                 fprintf(stderr, "loop detected! oldrel=%d newrel=%d abs=%d\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfile.c:174:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  174 |                 if(_loopDetect(&oldrel, rel, &oldabs, block) < 0)[0m
      | [0;1;32m                                                                 ^
[0m      | [0;32m                                                                  {
[0m  175 |                         block = 1;[0m
      | [0;1;32m                                  
[0m[1mfile.c:220:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  220 |                                 if (begin != end)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  221 |                                         printf("-%lu", end);[0m
      | [0;1;32m                                                            
[0m[1mfile.c:232:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  232 |                 if(loopDetect(This, rel, n) < 0)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  233 |                         n = 1;[0m
      | [0;1;32m                              
[0m[1mfile.c:236:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  236 |                 if (begin != end)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  237 |                         printf("-%lu", end);[0m
      | [0;1;32m                                            
[0m[1mfile.c:260:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  260 |                 if(loopDetect(This, rel, n) < 0)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  261 |                         return;[0m
      | [0;1;32m                               
[0m[1mfile.c:262:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  262 |                 if(n > _getFs(This)->last_fat)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  263 |                         return;[0m
      | [0;1;32m                               
[0m[1mfile.c:287:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  287 |         if (isReadonly)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  288 |                 maximize(*len, This->FileSize - where);[0m
      | [0;1;32m                                                       
[0m[1mfile.c:289:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  289 |         if (*len == 0 )[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  290 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfile.c:329:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  329 |                         fprintf(stderr,"Fat problem while decoding %d %x\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfile.c:329:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  329 |                         fprintf(stderr,"Fat problem while decoding %d %x\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfile.c:333:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  333 |                 if(CurCluNr == RelCluNr + NrClu)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  334 |                         break;[0m
      | [0;1;32m                              
[0m[1mfile.c:350:56: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  350 |                 if (CurCluNr >= RelCluNr && NewCluNr != AbsCluNr + 1)[0m
      | [0;1;32m                                                                     ^
[0m      | [0;32m                                                                      {
[0m  351 |                         break;[0m
      | [0;1;32m                              
[0m[1mfile.c:374:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  374 |                 fprintf(stderr, "cluster too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfile.c:374:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  374 |                 fprintf(stderr, "cluster too big\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mfile.c:397:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  397 |         if (*len == 0)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  398 |             return 0;[0m
      | [0;1;32m                     
[0m[1mfile.c:416:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  416 |         if(err <= 0)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  417 |                 return err;[0m
      | [0;1;32m                           
[0m[1mfile.c:419:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  419 |         if(ret < 0)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  420 |                 return ret;[0m
      | [0;1;32m                           
[0m[1mfile.c:439:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  439 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  440 |                 len = (uint32_t) ilen;[0m
      | [0;1;32m                                      
[0m[1mfile.c:443:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  443 |         if( err <= 0)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  444 |                 return err;[0m
      | [0;1;32m                           
[0m[1mfile.c:445:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  445 |         if(batchmode)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  446 |                 ret = force_pwrite(Disk, buf, pos, len);[0m
  447 |         else[0m
      | [0;32m        } 
[0m[1mfile.c:447:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  447 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  448 |                 ret = PWRITES(Disk, buf, pos, len);[0m
      | [0;1;32m                                                   
[0m[1mfile.c:449:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  449 |         if(ret < 0)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  450 |                 /* Error occured */[0m
  451 |                 return ret;[0m
      | [0;1;32m                           
[0m[1mfile.c:452:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  452 |         if((uint32_t)ret > requestedLen)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  453 |                 /* More data than requested may be written to lower[0m
  454 |                  * levels if batch mode is active, in order to "pad"[0m
  455 |                  * the last cluster of a file, so that we don't have[0m
  456 |                  * to read that back from disk */[0m
  457 |                 bytesWritten = requestedLen;[0m
  458 |         else[0m
      | [0;32m        } 
[0m[1mfile.c:458:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  458 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  459 |                 bytesWritten = (uint32_t)ret;[0m
      | [0;1;32m                                             
[0m[1mfile.c:461:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  461 |         if (This->where > This->FileSize )[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  462 |                 This->FileSize = This->where;[0m
      | [0;1;32m                                             
[0m[1mfile.c:502:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  502 |         if (!(DOS_YEAR(dir) % 4) && DOS_MONTH(dir) < 3)[0m
      | [0;1;32m                                                       ^
[0m      | [0;32m                                                        {
[0m  503 |                 accum--;[0m
      | [0;1;32m                        
[0m[1mfile.c:550:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  550 |         if(date)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  551 |                 *date = conv_stamp(& This->direntry.dir);[0m
      | [0;1;32m                                                         
[0m[1mfile.c:552:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  552 |         if(size)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  553 |                 *size = to_mt_off_t(This->FileSize);[0m
      | [0;1;32m                                                    
[0m[1mfile.c:554:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  554 |         if(type)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  555 |                 *type = This->direntry.dir.attr & ATTR_DIR;[0m
      | [0;1;32m                                                           
[0m[1mfile.c:556:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  556 |         if(address)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  557 |                 *address = This->FirstAbsCluNr;[0m
      | [0;1;32m                                               
[0m[1mfile.c:601:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  601 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  602 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfile.c:621:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  621 |         if(This->FirstAbsCluNr)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  622 |                 return This->FirstAbsCluNr;[0m
      | [0;1;32m                                           
[0m[1mfile.c:623:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  623 |         if(isRootDir((Stream_t *) This))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  624 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mfile.c:679:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  679 |                 if(first || (entry && !IS_DIR(entry)))[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m  680 |                         Pattern.map = normal_map;[0m
  681 |                 else[0m
      | [0;32m                } 
[0m[1mfile.c:681:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  681 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  682 |                         Pattern.map = root_map;[0m
      | [0;1;32m                                               
[0m[1mfile.c:696:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  696 |         if (!File)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  697 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mfile.c:705:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  705 |         if(isRootEntry(entry))[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  706 |                 File->direntry.Dir = (Stream_t *) File; /* root directory */[0m
  707 |         else[0m
      | [0;32m        } 
[0m[1mfile.c:707:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  707 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  708 |                 COPY(File->direntry.Dir);[0m
      | [0;1;32m                                         
[0m[1mfile.c:710:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  710 |         if(first || (entry && !IS_DIR(entry)))[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  711 |                 File->map = normal_map;[0m
  712 |         else[0m
      | [0;32m        } 
[0m[1mfile.c:712:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  712 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  713 |                 File->map = root_map; /* FAT 12/16 root directory */[0m
      | [0;1;32m                                                                    
[0m[1mfile.c:714:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  714 |         if(first == 1)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  715 |                 File->FirstAbsCluNr = 0;[0m
  716 |         else[0m
      | [0;32m        } 
[0m[1mfile.c:716:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  716 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  717 |                 File->FirstAbsCluNr = first;[0m
      | [0;1;32m                                            
[0m[1mfile.c:733:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  733 |         if(!*Dir)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  734 |                 return;[0m
      | [0;1;32m                       
[0m[1mfile.c:761:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  761 |         memset(&entry, 0, sizeof(direntry_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mfile.c:761:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  761 |         memset(&entry, 0, sizeof(direntry_t));[0m
      | [0;1;32m        ^~~~~~
[0m[1mfile.c:770:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  770 |         if(num)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  771 |                 size = countBytes(Dir, num);[0m
  772 |         else {[0m
      | [0;32m        } 
[0m[1mfile.c:790:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  790 |         if(!first && IS_DIR(entry))[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  791 |                 return OpenRoot(entry->Dir);[0m
      | [0;1;32m                                            
[0m[1mfile.c:792:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  792 |         if (IS_DIR(entry))[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  793 |                 size = countBytes(entry->Dir, first);[0m
  794 |         else[0m
      | [0;32m        } 
[0m[1mfile.c:794:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  794 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  795 |                 size = FILE_SIZE(&entry->dir);[0m
      | [0;1;32m                                              
[0m[1mfile.c:799:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  799 |                 if(first == 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  800 |                         dir_grow(file, 0);[0m
      | [0;1;32m                                          
[0m55 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[67/72][134.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpzp4sus3c.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mdir.c
[1mmdir.c:72:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   72 |         sprintf(year, "%04d", DOS_YEAR(dir));[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdir.c:72:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   72 |         sprintf(year, "%04d", DOS_YEAR(dir));[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdir.c:73:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   73 |         sprintf(day, "%02d", DOS_DAY(dir));[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdir.c:73:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   73 |         sprintf(day, "%02d", DOS_DAY(dir));[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdir.c:74:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   74 |         sprintf(month, "%02d", DOS_MONTH(dir));[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdir.c:74:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   74 |         sprintf(month, "%02d", DOS_MONTH(dir));[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdir.c:108:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  108 |                 if (hour > 12)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  109 |                         hour = hour - 12;[0m
      | [0;1;32m                                         
[0m[1mmdir.c:110:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  110 |                 if (hour == 0)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  111 |                         hour = 12;[0m
      | [0;1;32m                                  
[0m[1mmdir.c:112:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  113 |                 am_pm = ' ';[0m
      | [0;1;32m                            
[0m[1mmdir.c:133:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  133 |         if (*buf == NULL)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  134 |                 return "";[0m
      | [0;1;32m                          
[0m[1mmdir.c:144:3: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  144 |                 sprintf(*buf, "%.*lu%09lu", (int)(size-9), numhi, numlo);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:144:3: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  144 |                 sprintf(*buf, "%.*lu%09lu", (int)(size-9), numhi, numlo);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:146:3: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  146 |                 sprintf(*buf, "%.*lu", (int) size, numlo);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:146:3: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  146 |                 sprintf(*buf, "%.*lu", (int) size, numlo);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:149:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |         for (srcp=*buf; srcp[1] != '\0'; ++srcp)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  150 |                 if (srcp[0] == '0')[0m
  151 |                         srcp[0] = ' ';[0m
  152 |                 else[0m
  153 |                         break;[0m
      | [0;1;32m                              
[0m[1mmdir.c:150:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  150 |                 if (srcp[0] == '0')[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  151 |                         srcp[0] = ' ';[0m
  152 |                 else[0m
      | [0;32m                } 
[0m[1mmdir.c:152:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  152 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  153 |                         break;[0m
      | [0;1;32m                              
[0m[1mmdir.c:169:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  169 |                 if (dstp + 3 < (*buf) + len)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  170 |                         /* use spaces instead of dots: they please both[0m
  171 |                          * Americans and Europeans */[0m
  172 |                         dstp[3] = ' ';[0m
      | [0;1;32m                                      
[0m[1mmdir.c:190:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  190 |         if(concise)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  191 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmdir.c:204:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  204 |         } else if (*longname)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  205 |                 printf(" Volume in drive %c is %s (abbr=%s)",[0m
  206 |                        drive, longname, shortname);[0m
  207 |         else[0m
      | [0;32m        } 
[0m[1mmdir.c:207:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  207 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  208 |                 printf(" Volume in drive %c is %s",[0m
  209 |                        drive, shortname);[0m
      | [0;1;32m                                         
[0m[1mmdir.c:222:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  222 |         if(!filesInDir)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  223 |                 printf("No files\n");[0m
  224 |         else {[0m
      | [0;32m        } 
[0m[1mmdir.c:227:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  227 |                 if(files == 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  228 |                         putchar(' ');[0m
  229 |                 else[0m
      | [0;32m                } 
[0m[1mmdir.c:229:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  229 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  230 |                         putchar('s');[0m
      | [0;1;32m                                     
[0m[1mmdir.c:233:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  233 |                 if(s1)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  234 |                         free(s1);[0m
      | [0;1;32m                                 
[0m[1mmdir.c:242:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  242 |         if(!currentDrive)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  243 |                 return;[0m
      | [0;1;32m                       
[0m[1mmdir.c:255:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  255 |                                 fprintf(stderr, "Fat error\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmdir.c:255:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  255 |                                 fprintf(stderr, "Fat error\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmdir.c:266:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  266 |                         if(s1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  267 |                                 free(s1);[0m
      | [0;1;32m                                         
[0m[1mmdir.c:279:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  279 |         if(currentDrive == drive)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  280 |                 return 0; /* still the same */[0m
      | [0;1;32m                                              
[0m[1mmdir.c:286:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  286 |         if (r)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  287 |                 return r;[0m
      | [0;1;32m                         
[0m[1mmdir.c:300:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  300 |         if(!currentDir)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  301 |                 return;[0m
      | [0;1;32m                       
[0m[1mmdir.c:304:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  304 |                 if(dirPath && dirPath != emptyString)[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m  305 |                         free(dynDirPath);[0m
      | [0;1;32m                                         
[0m[1mmdir.c:306:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  306 |                 if(wide)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  307 |                         putchar('\n');[0m
      | [0;1;32m                                      
[0m[1mmdir.c:309:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  309 |                 if(!concise)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  310 |                         printSummary(filesInDir, bytesInDir);[0m
      | [0;1;32m                                                             
[0m[1mmdir.c:319:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  319 |         if(currentDir == Dir)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  320 |                 return 0; /* still the same directory */[0m
      | [0;1;32m                                                        
[0m[1mmdir.c:326:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  326 |         if(r)[0m
      | [0;1;32m             ^
[0m      | [0;32m              {
[0m  327 |                 return r;[0m
      | [0;1;32m                         
[0m[1mmdir.c:331:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  331 |         if(!dynDirPath)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  332 |                 dirPath=emptyString;[0m
  333 |         else {[0m
      | [0;32m        } 
[0m[1mmdir.c:334:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  334 |                 if(!dynDirPath[3] && concise)[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  335 |                         dynDirPath[2]='\0';[0m
      | [0;1;32m                                           
[0m[1mmdir.c:340:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  340 |         if(!concise)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  341 |                 printf("\nDirectory for %s\n", dirPath);[0m
      | [0;1;32m                                                        
[0m[1mmdir.c:343:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  343 |         if(!wide && !concise)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  344 |                 printf("\n");[0m
      | [0;1;32m                             
[0m[1mmdir.c:363:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  363 |         if(!all && (entry->dir.attr & 0x6))[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  364 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmdir.c:366:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  366 |         if(concise && isSpecialW(entry->name))[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  367 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mmdir.c:370:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  370 |         if (r)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  371 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmdir.c:373:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  373 |                 if(filesInDir % 5)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  374 |                         putchar(' ');[0m
  375 |                 else[0m
      | [0;32m                } 
[0m[1mmdir.c:375:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  375 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  376 |                         putchar('\n');[0m
      | [0;1;32m                                      
[0m[1mmdir.c:381:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  381 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  382 |                 size = FILE_SIZE(&entry->dir);[0m
      | [0;1;32m                                              
[0m[1mmdir.c:386:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  386 |            mtools_ignore_short_case)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  387 |                 Case |= BASECASE | EXTCASE;[0m
      | [0;1;32m                                           
[0m[1mmdir.c:392:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  392 |                 for(i=0; i<3;i++)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  393 |                         ext[i] = ch_towlower(ext[i]);[0m
      | [0;1;32m                                                     
[0m[1mmdir.c:403:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  403 |                 for(i=0; i<8;i++)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  404 |                         name[i] = ch_towlower(name[i]);[0m
      | [0;1;32m                                                       
[0m[1mmdir.c:408:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  408 |                 if(IS_DIR(entry))[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  409 |                         printf("[%s]%*s", mdir_shortname,[0m
  410 |                                (int) (15 - 2 - strlen(mdir_shortname)), "");[0m
  411 |                 else[0m
      | [0;32m                } 
[0m[1mmdir.c:411:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  411 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  412 |                         printf("%-15s", mdir_shortname);[0m
      | [0;1;32m                                                        
[0m[1mmdir.c:419:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  419 |                 if (name[0] == ' ')[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  420 |                         printf("             ");[0m
  421 |                 else if(mtools_dotted_dir)[0m
      | [0;32m                } 
[0m[1mmdir.c:421:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  421 |                 else if(mtools_dotted_dir)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  422 |                         printf("%-12s ", mdir_shortname);[0m
  423 |                 else[0m
      | [0;32m                } 
[0m[1mmdir.c:423:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  423 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  424 |                         printf("%s %s ", tmpBasename, tmpExt);[0m
      | [0;1;32m                                                              
[0m[1mmdir.c:426:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  426 |                 if(IS_DIR(entry))[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  427 |                         printf("<DIR>    ");[0m
  428 |                 else[0m
      | [0;32m                } 
[0m[1mmdir.c:428:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  428 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  429 |                         printf(" %8ld", (long) size);[0m
      | [0;1;32m                                                     
[0m[1mmdir.c:435:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  435 |                 if(debug)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  436 |                         printf(" %s %d ", tmpBasename, START(&entry->dir));[0m
      | [0;1;32m                                                                           
[0m[1mmdir.c:438:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  438 |                 if(*mdir_longname)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  439 |                         printf(" %s", mdir_longname);[0m
      | [0;1;32m                                                     
[0m[1mmdir.c:447:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  447 |                 if(IS_DIR(entry))[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  448 |                         putchar('/');[0m
      | [0;1;32m                                     
[0m[1mmdir.c:474:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  474 |                 if(r)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  475 |                         return ERROR_ONE;[0m
      | [0;1;32m                                         
[0m[1mmdir.c:524:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  524 |                 fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:524:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  524 |                 fprintf(stderr, "Mtools version %s, dated %s\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:526:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  526 |                 fprintf(stderr, "Usage: %s: [-V] [-w] [-a] [-b] [-s] [-f] msdosdirectory\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:526:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  526 |                 fprintf(stderr, "Usage: %s: [-V] [-w] [-a] [-b] [-s] [-f] msdosdirectory\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:528:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  528 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:528:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  528 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmdir.c:546:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  546 |         if(helpFlag(argc, argv))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  547 |                 usage(0);[0m
      | [0;1;32m                         
[0m[1mmdir.c:551:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  551 |                                 set_cmd_line_image(optarg);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  552 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdir.c:554:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  554 |                                 wide = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  555 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdir.c:557:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  557 |                                 all = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  558 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdir.c:563:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  563 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mmdir.c:567:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  567 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mmdir.c:569:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  569 |                                 fast = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  570 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdir.c:572:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  572 |                                 debug = 1;[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  573 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mmdir.c:580:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  580 |                                 usage(0);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m[1mmdir.c:582:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  582 |                                 usage(1);[0m
      | [0;1;32m                                ^       
[0m      | [0;32m                                {       ;} 
[0m70 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[68/72][134.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpe7xohqee.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mainloop.c
[1mmainloop.c:43:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   43 |                 if(fp)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   44 |                         fclose(fp);[0m
      | [0;1;32m                                   
[0m[1mmainloop.c:46:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   46 |                 strcpy(ans+1, ":/");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:46:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
   46 |                 strcpy(ans+1, ":/");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:55:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   55 |                 memcpy(ans, buf, 2);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:55:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   55 |                 memcpy(ans, buf, 2);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:60:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   60 |                 strcpy(ans+1, ":");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:60:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
   60 |                 strcpy(ans+1, ":");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:64:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   64 |                 strcat(ans, "/");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:64:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
   64 |                 strcat(ans, "/");[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:65:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   65 |                 strcat(ans, s);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:65:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
   65 |                 strcat(ans, s);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:66:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   66 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   67 |                 strcat(ans, s);[0m
      | [0;1;32m                               
[0m[1mmainloop.c:67:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   67 |                 strcat(ans, s);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:67:3: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
   67 |                 strcat(ans, s);[0m
      | [0;1;32m                ^~~~~~
[0m[1mmainloop.c:78:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |         if (strlen(ans) == 3)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   79 |                 return(ans);[0m
      | [0;1;32m                            
[0m[1mmainloop.c:81:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   81 |         if (*--s == '/')[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m   82 |                 *s = '\0';[0m
      | [0;1;32m                          
[0m[1mmainloop.c:136:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  136 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmainloop.c:136:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  136 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmainloop.c:142:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  142 |                         if(! (mp->lookupflags & ACCEPT_DIR))[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m  143 |                                 return 0;[0m
      | [0;1;32m                                         
[0m[1mmainloop.c:148:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  148 |         if(isdir)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  149 |                 ret = mp->dirCallback(0, mp);[0m
  150 |         else[0m
      | [0;32m        } 
[0m[1mmainloop.c:150:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  150 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  151 |                 ret = mp->unixcallback(mp);[0m
      | [0;1;32m                                           
[0m[1mmainloop.c:182:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  182 |         if(got_signal)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  183 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmainloop.c:188:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  188 |                                 lookupState->Dir = OpenFileByDirentry(direntry);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  189 |                                 lookupState->nbDirs++;[0m
  190 |                                 /* dump the container, we have[0m
  191 |                                  * better now */[0m
  192 |                                 FREE(&lookupState->container);[0m
  193 |                                 return 0;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mmainloop.c:195:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  195 |                                 FREE(&lookupState->Dir);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  196 |                                 fprintf(stderr,"Ambiguous\n");[0m
  197 |                                 return STOP_NOW | ERROR_ONE;[0m
      | [0;1;32m                                                           
[0m      | [0;32m                                                           ;} 
[0m[1m./stream.h:85:22: [0m[0;1;36mnote: [0mexpanded from macro 'FREE'[0m
   85 | #define FREE(stream) \[0m
      | [0;1;32m                     ^
[0m[1mmainloop.c:196:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  196 |                                 fprintf(stderr,"Ambiguous\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmainloop.c:196:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  196 |                                 fprintf(stderr,"Ambiguous\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmainloop.c:199:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  199 |                                 return STOP_NOW | ERROR_ONE;[0m
      | [0;1;32m                                ^                          
[0m      | [0;32m                                {                          ;} 
[0m[1mmainloop.c:205:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  205 |                 if(mp->lookupflags & (DO_OPEN | DO_OPEN_DIRS))[0m
      | [0;1;32m                                                              ^
[0m      | [0;32m                                                               {
[0m  206 |                         MyFile = mp->File = OpenFileByDirentry(direntry);[0m
      | [0;1;32m                                                                         
[0m[1mmainloop.c:213:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  213 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmainloop.c:213:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  213 |                                 fprintf(stderr,[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mmainloop.c:253:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  253 |                         if(got_signal)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  254 |                                 break;[0m
      | [0;1;32m                                      
[0m[1mmainloop.c:256:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  256 |                         if(IS_DIR(&entry))[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  257 |                                 ret |= mp->dirCallback(&entry,mp);[0m
  258 |                         else[0m
      | [0;32m                        } 
[0m[1mmainloop.c:258:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  258 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  259 |                                 ret |= mp->callback(&entry, mp);[0m
      | [0;1;32m                                                                
[0m[1mmainloop.c:262:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  262 |                 if (fat_error(Dir))[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  263 |                         ret |= ERROR_ONE;[0m
      | [0;1;32m                                         
[0m[1mmainloop.c:264:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  264 |                 if(mp->fast_quit && (ret & ERROR_ONE))[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m  265 |                         break;[0m
      | [0;1;32m                              
[0m[1mmainloop.c:267:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  267 |         if (r == -2)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  268 |             return ERROR_ONE;[0m
      | [0;1;32m                             
[0m[1mmainloop.c:269:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  269 |         if(got_signal)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  270 |                 ret |= ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmainloop.c:304:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  304 |                         if(!filename1)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  305 |                                 break;[0m
      | [0;1;32m                                      
[0m[1mmainloop.c:366:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  366 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  367 |                 lookupflags = ACCEPT_DIR | DO_OPEN | NO_DOTS;[0m
      | [0;1;32m                                                             
[0m[1mmainloop.c:379:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  379 |                 if(checkForDot(lookupflags, entry.name))[0m
      | [0;1;32m                                                        ^
[0m      | [0;32m                                                         {
[0m  380 |                         /* while following the path, ignore the[0m
  381 |                          * special entries if they were not[0m
  382 |                          * explicitly given */[0m
  383 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mmainloop.c:395:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  395 |                 if(doing_mcwd)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  396 |                         break;[0m
      | [0;1;32m                              
[0m[1mmainloop.c:398:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  398 |         if (r == -2)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  399 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmainloop.c:400:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  400 |         if(got_signal)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  401 |                 return ret | ERROR_ONE;[0m
      | [0;1;32m                                       
[0m[1mmainloop.c:402:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  402 |         if(doing_mcwd && !have_one)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  403 |                 return NO_CWD;[0m
      | [0;1;32m                              
[0m[1mmainloop.c:420:2: [0m[0;1;35mwarning: [0m[1mValue stored to 'drive' is never read [clang-analyzer-deadcode.DeadStores][0m
  420 |         drive='\0';[0m
      | [0;1;32m        ^     ~~~~
[0m[1mmainloop.c:420:2: [0m[0;1;36mnote: [0mValue stored to 'drive' is never read[0m
  420 |         drive='\0';[0m
      | [0;1;32m        ^     ~~~~
[0m[1mmainloop.c:425:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  425 |                 if(mp->mcwd[0] == drive)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  426 |                         cwd = mp->mcwd+2;[0m
      | [0;1;32m                                         
[0m[1mmainloop.c:434:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  434 |         if(*pathname=='/') /* absolute path name */[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  435 |                 cwd = "";[0m
      | [0;1;32m                         
[0m[1mmainloop.c:438:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  438 |         if(!mp->File)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  439 |                 return ERROR_ONE;[0m
      | [0;1;32m                                 
[0m[1mmainloop.c:443:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  443 |            isUniqueTarget(mp->targetName))[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  444 |                 DeferredFileP = &DeferredFile;[0m
      | [0;1;32m                                              
[0m[1mmainloop.c:483:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  483 |         if(ret & ERROR_ONE)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  484 |                 return ret;[0m
      | [0;1;32m                           
[0m[1mmainloop.c:496:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  496 |                         fprintf(stderr,"%s: no match for target\n", arg);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmainloop.c:496:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  496 |                         fprintf(stderr,"%s: no match for target\n", arg);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmainloop.c:496:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  496 |                         fprintf(stderr,"%s: no match for target\n", arg);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  497 |                         return MISSED_ONE;[0m
      | [0;1;32m                                         
[0m      | [0;32m                                         ;} 
[0m[1mmainloop.c:499:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  499 |                         mp->targetName = strdup(lookupState.filename);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  500 |                         mp->targetDir = lookupState.container;[0m
  501 |                         return ret;[0m
      | [0;1;32m                                  
[0m      | [0;32m                                  ;} 
[0m[1mmainloop.c:504:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  504 |                         fprintf(stderr, "Ambiguous %s\n", arg);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmainloop.c:504:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  504 |                         fprintf(stderr, "Ambiguous %s\n", arg);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmainloop.c:504:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  504 |                         fprintf(stderr, "Ambiguous %s\n", arg);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  505 |                         return ERROR_ONE;[0m
      | [0;1;32m                                        
[0m      | [0;32m                                        ;} 
[0m[1mmainloop.c:517:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  517 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmainloop.c:517:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  517 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmainloop.c:524:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  524 |                 if ( got_signal )[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  525 |                         break;[0m
      | [0;1;32m                              
[0m[1mmainloop.c:534:65: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  534 |                                          || argv[i][1] != ':' ))[0m
      | [0;1;32m                                                                ^
[0m      | [0;32m                                                                 {
[0m  535 |                         ret = unix_loop(0, mp, argv[i], 1);[0m
  536 |                 else[0m
      | [0;32m                } 
[0m[1mmainloop.c:536:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  536 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  537 |                         ret = dos_loop(mp, argv[i]);[0m
      | [0;1;32m                                                    
[0m[1mmainloop.c:541:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  541 |                         fprintf(stderr, "%s: File \"%s\" not found\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmainloop.c:541:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  541 |                         fprintf(stderr, "%s: File \"%s\" not found\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mmainloop.c:546:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  546 |                 if(mp->fast_quit && (Bret & (MISSED_ONE | ERROR_ONE)))[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m  547 |                         break;[0m
      | [0;1;32m                              
[0m[1mmainloop.c:550:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  550 |         if(Bret & ERROR_ONE)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  551 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mmainloop.c:552:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  552 |         if ((Bret & GOT_ONE) && ( Bret & MISSED_ONE))[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m  553 |                 return 2;[0m
      | [0;1;32m                         
[0m[1mmainloop.c:554:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  554 |         if (Bret & MISSED_ONE)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  555 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mmainloop.c:561:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  561 |         if(entry)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  562 |                 return mp->callback(entry, mp);[0m
  563 |         else[0m
      | [0;32m        } 
[0m[1mmainloop.c:563:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  563 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  564 |                 return mp->unixcallback(mp);[0m
      | [0;1;32m                                            
[0m[1mmainloop.c:590:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  590 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  591 |                 return _basename(mp->unixSourceName);[0m
      | [0;1;32m                                                     
[0m[1mmainloop.c:596:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  596 |         if(mp->direntry)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  597 |                 fprintPwd(fp, mp->direntry, 0);[0m
  598 |         else[0m
      | [0;32m        } 
[0m[1mmainloop.c:598:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  598 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  599 |                 fprintf(fp,"%s",mp->originalArg);[0m
      | [0;1;32m                                                 
[0m[1mmainloop.c:599:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  599 |                 fprintf(fp,"%s",mp->originalArg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmainloop.c:599:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  599 |                 fprintf(fp,"%s",mp->originalArg);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mmainloop.c:606:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  606 |         if(mp->targetName)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  607 |                 return mp->targetName;[0m
  608 |         else[0m
      | [0;32m        } 
[0m[1mmainloop.c:608:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  608 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  609 |                 return mpGetBasename(mp);[0m
      | [0;1;32m                                         
[0m65 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[69/72][170.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp5ulq8cnx.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/floppyd.c
[1m./byte_dword.h:24:15: [0m[0;1;35mwarning: [0m[1mArray access (from variable 'val') results in a null pointer dereference [clang-analyzer-core.NullDereference][0m
   24 |         l = (Dword)((val[0] << 24) + (val[1] << 16) + (val[2] << 8) + val[3]);[0m
      | [0;1;32m                     ^
[0m[1mfloppyd.c:771:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  771 |         for (;;) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:777:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 783[0m
  777 |                 while ((new_sock = accept(sock, (struct sockaddr *)&addr, &len)) < 0){}[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:783:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 790[0m
  783 |                 switch (fork()) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:795:5: [0m[0;1;36mnote: [0mCalling 'serve_client'[0m
  795 |                                 serve_client(new_sock, device_name, n_dev, 0);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1080:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1080 |                 if(setsockopt(sockhandle, SOL_SOCKET,[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1090:5: [0m[0;1;36mnote: [0m'close_stderr' is 0[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mfloppyd.c:1090:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1104:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1104 |         if (!do_auth(sock, &version)) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1120:9: [0m[0;1;36mnote: [0mCalling 'newPacket'[0m
 1120 |         parm = newPacket();[0m
      | [0;1;32m               ^~~~~~~~~~~
[0m[1mfloppyd.c:278:2: [0m[0;1;36mnote: [0mNull pointer value stored to field 'data'[0m
  278 |         packet->data = NULL;[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1120:9: [0m[0;1;36mnote: [0mReturning from 'newPacket'[0m
 1120 |         parm = newPacket();[0m
      | [0;1;32m               ^~~~~~~~~~~
[0m[1mfloppyd.c:1126:5: [0m[0;1;36mnote: [0m'version' is not equal to FLOPPYD_PROTOCOL_VERSION_OLD[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m           ^~~~~~~
[0m[1mfloppyd.c:1126:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1144:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1144 |         while(!stopLoop) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1151:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1155:7: [0m[0;1;36mnote: [0mCalling 'recv_packet'[0m
 1155 |                     recv_packet(parm, sock, MAX_DATA_REQUEST);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:342:6: [0m[0;1;36mnote: [0m'length' is > 'maxlength'[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m            ^~~~~~
[0m[1mfloppyd.c:342:25: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m                               ^
[0m[1mfloppyd.c:343:3: [0m[0;1;36mnote: [0mReturning without writing to 'packet->data'[0m
  343 |                 return 0;[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1155:7: [0m[0;1;36mnote: [0mReturning from 'recv_packet'[0m
 1155 |                     recv_packet(parm, sock, MAX_DATA_REQUEST);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1171:3: [0m[0;1;36mnote: [0mControl jumps to 'case OP_SEEK:'  at line 1238[0m
 1171 |                 switch(opcode->data[0]) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1244:19: [0m[0;1;36mnote: [0mCalling 'get_dword'[0m
 1244 |                                       (off_t) get_dword(parm, 0),[0m
      | [0;1;32m                                              ^~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:393:20: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'val'[0m
  393 |         return byte2dword(packet->data+my_index);[0m
      | [0;1;32m                          ^~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:393:9: [0m[0;1;36mnote: [0mCalling 'byte2dword'[0m
  393 |         return byte2dword(packet->data+my_index);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./byte_dword.h:24:15: [0m[0;1;36mnote: [0mArray access (from variable 'val') results in a null pointer dereference[0m
   24 |         l = (Dword)((val[0] << 24) + (val[1] << 16) + (val[2] << 8) + val[3]);[0m
      | [0;1;32m                     ^~~
[0m[1m./byte_dword.h:41:6: [0m[0;1;35mwarning: [0m[1mArray access (from variable 'val') results in a null pointer dereference [clang-analyzer-core.NullDereference][0m
   41 |         l = val[0];[0m
      | [0;1;32m            ^
[0m[1mfloppyd.c:771:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  771 |         for (;;) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:777:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 783[0m
  777 |                 while ((new_sock = accept(sock, (struct sockaddr *)&addr, &len)) < 0){}[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:783:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 790[0m
  783 |                 switch (fork()) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:795:5: [0m[0;1;36mnote: [0mCalling 'serve_client'[0m
  795 |                                 serve_client(new_sock, device_name, n_dev, 0);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1080:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1080 |                 if(setsockopt(sockhandle, SOL_SOCKET,[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1090:5: [0m[0;1;36mnote: [0m'close_stderr' is 0[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mfloppyd.c:1090:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1104:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1104 |         if (!do_auth(sock, &version)) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1120:9: [0m[0;1;36mnote: [0mCalling 'newPacket'[0m
 1120 |         parm = newPacket();[0m
      | [0;1;32m               ^~~~~~~~~~~
[0m[1mfloppyd.c:278:2: [0m[0;1;36mnote: [0mNull pointer value stored to field 'data'[0m
  278 |         packet->data = NULL;[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1120:9: [0m[0;1;36mnote: [0mReturning from 'newPacket'[0m
 1120 |         parm = newPacket();[0m
      | [0;1;32m               ^~~~~~~~~~~
[0m[1mfloppyd.c:1126:5: [0m[0;1;36mnote: [0m'version' is not equal to FLOPPYD_PROTOCOL_VERSION_OLD[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m           ^~~~~~~
[0m[1mfloppyd.c:1126:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1144:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1144 |         while(!stopLoop) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1151:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1155:7: [0m[0;1;36mnote: [0mCalling 'recv_packet'[0m
 1155 |                     recv_packet(parm, sock, MAX_DATA_REQUEST);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:342:6: [0m[0;1;36mnote: [0m'length' is > 'maxlength'[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m            ^~~~~~
[0m[1mfloppyd.c:342:25: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m                               ^
[0m[1mfloppyd.c:343:3: [0m[0;1;36mnote: [0mReturning without writing to 'packet->data'[0m
  343 |                 return 0;[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1155:7: [0m[0;1;36mnote: [0mReturning from 'recv_packet'[0m
 1155 |                     recv_packet(parm, sock, MAX_DATA_REQUEST);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1171:3: [0m[0;1;36mnote: [0mControl jumps to 'case OP_SEEK64:'  at line 1250[0m
 1171 |                 switch(opcode->data[0]) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1251:5: [0m[0;1;36mnote: [0mTaking false branch[0m
 1251 |                                 if(sizeof(mt_off_t) < 8) {[0m
      | [0;1;32m                                ^
[0m[1mfloppyd.c:1263:18: [0m[0;1;36mnote: [0mCalling 'get_qword'[0m
 1263 |                                          (mt_off_t) get_qword(parm,0),[0m
      | [0;1;32m                                                    ^~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:397:20: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'val'[0m
  397 |         return byte2qword(packet->data+my_index);[0m
      | [0;1;32m                          ^~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:397:9: [0m[0;1;36mnote: [0mCalling 'byte2qword'[0m
  397 |         return byte2qword(packet->data+my_index);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./byte_dword.h:41:6: [0m[0;1;36mnote: [0mArray access (from variable 'val') results in a null pointer dereference[0m
   41 |         l = val[0];[0m
      | [0;1;32m            ^~~
[0m[1mfloppyd.c:163:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  163 |                 memcpy(buffer, buf->in_buffer+buf->in_start, nbytes);[0m
      | [0;1;32m                ^~~~~~
[0m[1mfloppyd.c:163:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  163 |                 memcpy(buffer, buf->in_buffer+buf->in_start, nbytes);[0m
      | [0;1;32m                ^~~~~~
[0m[1mfloppyd.c:168:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  168 |                 if (buf->in_valid)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  169 |                         memcpy(buffer, buf->in_buffer+buf->in_start,[0m
  170 |                                    buf->in_valid);[0m
      | [0;1;32m                                                  
[0m[1mfloppyd.c:169:4: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  169 |                         memcpy(buffer, buf->in_buffer+buf->in_start,[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfloppyd.c:169:4: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  169 |                         memcpy(buffer, buf->in_buffer+buf->in_start,[0m
      | [0;1;32m                        ^~~~~~
[0m[1mfloppyd.c:187:6: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  187 |                                         memcpy(buffer, buf->in_buffer,[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:187:6: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  187 |                                         memcpy(buffer, buf->in_buffer,[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:193:6: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  193 |                                         memcpy(buffer, buf->in_buffer, nbytes);[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:193:6: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  193 |                                         memcpy(buffer, buf->in_buffer, nbytes);[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:213:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  213 |         memcpy(buf->out_buffer+buf->out_valid, buffer, nbytes);[0m
      | [0;1;32m        ^~~~~~
[0m[1mfloppyd.c:213:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  213 |         memcpy(buf->out_buffer+buf->out_valid, buffer, nbytes);[0m
      | [0;1;32m        ^~~~~~
[0m[1mfloppyd.c:286:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  286 |         if(packet->data)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  287 |                 free(packet->data);[0m
      | [0;1;32m                                   
[0m[1mfloppyd.c:293:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  293 |         if(packet->data)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  294 |                 free(packet->data);[0m
      | [0;1;32m                                   
[0m[1mfloppyd.c:309:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  309 |         memset(packet->data, 0, l);[0m
      | [0;1;32m        ^~~~~~
[0m[1mfloppyd.c:309:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  309 |         memset(packet->data, 0, l);[0m
      | [0;1;32m        ^~~~~~
[0m[1mfloppyd.c:346:2: [0m[0;1;35mwarning: [0m[1mValue stored to 'l' is never read [clang-analyzer-deadcode.DeadStores][0m
  346 |         l = 0;[0m
      | [0;1;32m        ^   ~
[0m[1mfloppyd.c:346:2: [0m[0;1;36mnote: [0mValue stored to 'l' is never read[0m
  346 |         l = 0;[0m
      | [0;1;32m        ^   ~
[0m[1mfloppyd.c:374:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  374 |         if(ret < 0)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  375 |                 return ret;[0m
      | [0;1;32m                           
[0m[1mfloppyd.c:406:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  406 |     if (*len < c + 3u)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  407 |         return -1;[0m
      | [0;1;32m                  
[0m[1mfloppyd.c:515:3: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'reply' [clang-analyzer-unix.Malloc][0m
  515 |                 close(fd);[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:771:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  771 |         for (;;) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:777:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 783[0m
  777 |                 while ((new_sock = accept(sock, (struct sockaddr *)&addr, &len)) < 0){}[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:783:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 790[0m
  783 |                 switch (fork()) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:795:5: [0m[0;1;36mnote: [0mCalling 'serve_client'[0m
  795 |                                 serve_client(new_sock, device_name, n_dev, 0);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1080:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1080 |                 if(setsockopt(sockhandle, SOL_SOCKET,[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1090:5: [0m[0;1;36mnote: [0m'close_stderr' is 0[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mfloppyd.c:1090:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1104:7: [0m[0;1;36mnote: [0mCalling 'do_auth'[0m
 1104 |         if (!do_auth(sock, &version)) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:429:17: [0m[0;1;36mnote: [0mCalling 'newPacket'[0m
  429 |         Packet reply = newPacket();[0m
      | [0;1;32m                       ^~~~~~~~~~~
[0m[1mfloppyd.c:277:11: [0m[0;1;36mnote: [0mMemory is allocated[0m
  277 |         packet = New(struct Packet);[0m
      | [0;1;32m                 ^
[0m[1m./mtools.h:185:28: [0m[0;1;36mnote: [0mexpanded from macro 'New'[0m
  185 | #define New(type) ((type*)(calloc(1,sizeof(type))))[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:429:17: [0m[0;1;36mnote: [0mReturned allocated memory[0m
  429 |         Packet reply = newPacket();[0m
      | [0;1;32m                       ^~~~~~~~~~~
[0m[1mfloppyd.c:431:2: [0m[0;1;36mnote: [0mCalling 'make_new'[0m
  431 |         make_new(reply, 4);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:302:6: [0m[0;1;36mnote: [0m'l' is >= field 'alloc_size'[0m
  302 |         if (l < packet->alloc_size) {[0m
      | [0;1;32m            ^
[0m[1mfloppyd.c:302:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  302 |         if (l < packet->alloc_size) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:306:2: [0m[0;1;36mnote: [0mCalling 'kill_packet'[0m
  306 |         kill_packet(packet);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:293:13: [0m[0;1;36mnote: [0mField 'data' is null[0m
  293 |         if(packet->data)[0m
      | [0;1;32m                   ^
[0m[1mfloppyd.c:293:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  293 |         if(packet->data)[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:298:1: [0m[0;1;36mnote: [0mReturning without deallocating memory or storing the pointer for later deallocation[0m
  298 | }[0m
      | [0;1;32m^
[0m[1mfloppyd.c:306:2: [0m[0;1;36mnote: [0mReturning from 'kill_packet'[0m
  306 |         kill_packet(packet);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:431:2: [0m[0;1;36mnote: [0mReturning from 'make_new'[0m
  431 |         make_new(reply, 4);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:433:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  433 |         if (!recv_packet(proto_version, sock, 4)) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:442:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  442 |         if (*version > FLOPPYD_PROTOCOL_VERSION ||[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:442:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mfloppyd.c:443:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  443 |             *version < FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:442:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  442 |         if (*version > FLOPPYD_PROTOCOL_VERSION ||[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:452:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  452 |         if(*version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:452:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  452 |         if(*version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:469:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  469 |         if (!recv_packet(mit_cookie, sock, MAX_XAUTHORITY_LENGTH)) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:479:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  479 |         if(fd == -1) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:514:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  514 |         if(write(fd, template, len+8) < (ssize_t) (len + 8)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:514:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  514 |         if(write(fd, template, len+8) < (ssize_t) (len + 8)) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:515:3: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'reply'[0m
  515 |                 close(fd);[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:605:6: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  605 |                                         memcpy(&ip, host->h_addr, sizeof(ip));[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:605:6: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  605 |                                         memcpy(&ip, host->h_addr, sizeof(ip));[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:788:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  788 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mfloppyd.c:795:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  795 |                                 serve_client(new_sock, device_name, n_dev, 0);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  796 |                                 exit(0);[0m
      | [0;1;32m                                       
[0m      | [0;32m                                       ;} 
[0m[1mfloppyd.c:804:3: [0m[0;1;35mwarning: [0m[1mValue stored to 'new_sock' is never read [clang-analyzer-deadcode.DeadStores][0m
  804 |                 new_sock = -1;[0m
      | [0;1;32m                ^          ~~
[0m[1mfloppyd.c:804:3: [0m[0;1;36mnote: [0mValue stored to 'new_sock' is never read[0m
  804 |                 new_sock = -1;[0m
      | [0;1;32m                ^          ~~
[0m[1mfloppyd.c:816:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  816 |                         fprintf(stderr, "%s: %s\n", prog, opt);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfloppyd.c:816:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  816 |                         fprintf(stderr, "%s: %s\n", prog, opt);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mfloppyd.c:818:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  818 |         fprintf(stderr, "usage: %s [-s port [-r user] [-b ipaddr]] devicename [Names of local host]\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:818:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  818 |         fprintf(stderr, "usage: %s [-s port [-r user] [-b ipaddr]] devicename [Names of local host]\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:820:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  820 |         fprintf(stderr, "    -d          Run as a server (default port 5703 + DISPLAY)\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:820:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  820 |         fprintf(stderr, "    -d          Run as a server (default port 5703 + DISPLAY)\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:821:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  821 |         fprintf(stderr, "    -s port     Run as a server bound to the specified port.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:821:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  821 |         fprintf(stderr, "    -s port     Run as a server bound to the specified port.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:822:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  822 |         fprintf(stderr, "    -r user     Run as the specified user in server mode.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:822:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  822 |         fprintf(stderr, "    -r user     Run as the specified user in server mode.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:823:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  823 |         fprintf(stderr, "    -b ipaddr   Bind to the specified ipaddr in server mode.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:823:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  823 |         fprintf(stderr, "    -b ipaddr   Bind to the specified ipaddr in server mode.\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:824:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  824 |         fprintf(stderr, "    -l          Do not attempt to connect to localhost:0 to validate connection\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:824:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  824 |         fprintf(stderr, "    -l          Do not attempt to connect to localhost:0 to validate connection\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:832:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  832 |         sprintf(result, ":%d.0", dispNr);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:832:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  832 |         sprintf(result, ":%d.0", dispNr);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mfloppyd.c:856:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  856 |         if(argc > 1 && !strcmp(argv[0], "--help"))[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  857 |                 usage(argv[0], NULL, 0);[0m
      | [0;1;32m                                        
[0m[1mfloppyd.c:863:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  863 |                                                 run_as_server = 1;[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                {
[0m  864 |                                                 break;[0m
      | [0;1;32m                                                     
[0m      | [0;32m                                                     ;} 
[0m[1mfloppyd.c:866:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  866 |                                                 run_as_server = 1;[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                {
[0m  867 |                                                 bind_port = getportnum(optarg);[0m
  868 |                                                 break;[0m
      | [0;1;32m                                                     
[0m      | [0;32m                                                     ;} 
[0m[1mfloppyd.c:871:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  871 |                                                 free(username); username = strdup(optarg);[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                {
[0m  872 |                                                 run_uid = getuserid(optarg);[0m
  873 |                                                 run_gid = getgroupid(run_uid);[0m
  874 |                                                 break;[0m
      | [0;1;32m                                                     
[0m      | [0;32m                                                     ;} 
[0m[1mfloppyd.c:877:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  877 |                                                 run_as_server = 1;[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                {
[0m  878 |                                                 bind_ip = getipaddress(optarg);[0m
  879 |                                                 break;[0m
      | [0;1;32m                                                     
[0m      | [0;32m                                                     ;} 
[0m[1mfloppyd.c:881:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  881 |                                                 dispName = strdup(optarg);[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                {
[0m  882 |                                                 break;[0m
      | [0;1;32m                                                     
[0m      | [0;32m                                                     ;} 
[0m[1mfloppyd.c:885:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  885 |                                                 usage(argv[0], NULL, 0);[0m
      | [0;1;32m                                                ^                      
[0m      | [0;32m                                                {                      ;} 
[0m[1mfloppyd.c:887:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  887 |                                                 usage(argv[0], NULL, 1);[0m
      | [0;1;32m                                                ^                      
[0m      | [0;32m                                                {                      ;} 
[0m[1mfloppyd.c:899:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  899 |         if(dispName == NULL)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  900 |                 dispName = getenv("DISPLAY");[0m
      | [0;1;32m                                             
[0m[1mfloppyd.c:901:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  901 |         if(dispName==NULL && bind_port != 0)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  902 |                 dispName=makeDisplayName((unsigned short)(bind_port - 5703));[0m
      | [0;1;32m                                                                             
[0m[1mfloppyd.c:903:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  903 |         if(dispName==NULL)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  904 |                 dispName=":0";[0m
      | [0;1;32m                              
[0m[1mfloppyd.c:909:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  909 |                 if(p != NULL)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  910 |                         bind_port += atoi(p+1);[0m
      | [0;1;32m                                               
[0m[1mfloppyd.c:957:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  957 |                                         perror("fork()");[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                        {
[0m  958 |                                         exit(1);[0m
      | [0;1;32m                                               
[0m      | [0;32m                                               ;} 
[0m[1mfloppyd.c:964:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  964 |                                         signal(SIGHUP, SIG_IGN);[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                        {
[0m[1mfloppyd.c:977:6: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'setgid' is not checked.  If an error occurs in 'setgid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
  977 |                                         setgid(run_gid);[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:977:6: [0m[0;1;36mnote: [0mThe return value from the call to 'setgid' is not checked.  If an error occurs in 'setgid', the following code may execute with unexpected privileges[0m
  977 |                                         setgid(run_gid);[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:979:6: [0m[0;1;35mwarning: [0m[1mThe return value from the call to 'setuid' is not checked.  If an error occurs in 'setuid', the following code may execute with unexpected privileges [clang-analyzer-security.insecureAPI.UncheckedReturn][0m
  979 |                                         setuid(run_uid);[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:979:6: [0m[0;1;36mnote: [0mThe return value from the call to 'setuid' is not checked.  If an error occurs in 'setuid', the following code may execute with unexpected privileges[0m
  979 |                                         setuid(run_uid);[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mfloppyd.c:1009:2: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'username' [clang-analyzer-unix.Malloc][0m
 1009 |         signal(SIGHUP, alarm_signal);[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:845:21: [0m[0;1;36mnote: [0mMemory is allocated[0m
  845 |         char*                   username = strdup("nobody");[0m
      | [0;1;32m                                           ^~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:856:5: [0m[0;1;36mnote: [0mAssuming 'argc' is <= 1[0m
  856 |         if(argc > 1 && !strcmp(argv[0], "--help"))[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mfloppyd.c:856:14: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  856 |         if(argc > 1 && !strcmp(argv[0], "--help"))[0m
      | [0;1;32m                    ^
[0m[1mfloppyd.c:858:9: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  858 |         while ((arg = getopt(argc, argv, "ds:r:b:x:h")) != EOF)[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:858:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 891[0m
  858 |         while ((arg = getopt(argc, argv, "ds:r:b:x:h")) != EOF)[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:891:5: [0m[0;1;36mnote: [0mAssuming 'optind' is >= 'argc'[0m
  891 |         if(optind < argc) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~
[0m[1mfloppyd.c:891:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  891 |         if(optind < argc) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:899:5: [0m[0;1;36mnote: [0mAssuming 'dispName' is not equal to NULL[0m
  899 |         if(dispName == NULL)[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:899:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  899 |         if(dispName == NULL)[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:901:5: [0m[0;1;36mnote: [0m'dispName' is not equal to NULL[0m
  901 |         if(dispName==NULL && bind_port != 0)[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mfloppyd.c:901:20: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  901 |         if(dispName==NULL && bind_port != 0)[0m
      | [0;1;32m                          ^
[0m[1mfloppyd.c:903:5: [0m[0;1;36mnote: [0m'dispName' is not equal to NULL[0m
  903 |         if(dispName==NULL)[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mfloppyd.c:903:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  903 |         if(dispName==NULL)[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:906:5: [0m[0;1;36mnote: [0m'bind_port' is equal to 0[0m
  906 |         if(bind_port == 0) {[0m
      | [0;1;32m           ^~~~~~~~~
[0m[1mfloppyd.c:906:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  906 |         if(bind_port == 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:909:6: [0m[0;1;36mnote: [0mAssuming 'p' is equal to NULL[0m
  909 |                 if(p != NULL)[0m
      | [0;1;32m                   ^~~~~~~~~
[0m[1mfloppyd.c:909:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  909 |                 if(p != NULL)[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:913:6: [0m[0;1;36mnote: [0m'run_as_server' is 0[0m
  913 |         if(!run_as_server) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~
[0m[1mfloppyd.c:913:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  913 |         if(!run_as_server) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:918:58: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  918 |                 if(getsockname(0, (struct sockaddr*) &addr, &len) >= 0 &&[0m
      | [0;1;32m                                                                       ^
[0m[1mfloppyd.c:929:6: [0m[0;1;36mnote: [0m'run_as_server' is 0[0m
  929 |         if (run_as_server && (bind_ip == INADDR_NONE)) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~
[0m[1mfloppyd.c:929:20: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  929 |         if (run_as_server && (bind_ip == INADDR_NONE)) {[0m
      | [0;1;32m                          ^
[0m[1mfloppyd.c:932:6: [0m[0;1;36mnote: [0m'run_as_server' is 0[0m
  932 |         if (run_as_server && (bind_port == 0))  {[0m
      | [0;1;32m            ^~~~~~~~~~~~~
[0m[1mfloppyd.c:932:20: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  932 |         if (run_as_server && (bind_port == 0))  {[0m
      | [0;1;32m                          ^
[0m[1mfloppyd.c:940:6: [0m[0;1;36mnote: [0m'run_as_server' is 0[0m
  940 |         if (run_as_server) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~
[0m[1mfloppyd.c:940:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  940 |         if (run_as_server) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1009:2: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'username'[0m
 1009 |         signal(SIGHUP, alarm_signal);[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1173:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1173 |                                 if(get_length(parm) >= 4)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m[1mfloppyd.c:1173:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1173 |                                 if(get_length(parm) >= 4)[0m
      | [0;1;32m                                                         ^
[0m      | [0;32m                                                          {
[0m 1174 |                                         dev_nr = get_dword(parm,0);[0m
 1175 |                                 else[0m
      | [0;32m                                } 
[0m[1mfloppyd.c:1175:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1175 |                                 else[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m 1176 |                                         dev_nr = 0;[0m
      | [0;1;32m                                                   
[0m[1mfloppyd.c:1196:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1196 |                                 if(get_length(parm) >= 4)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m[1mfloppyd.c:1196:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1196 |                                 if(get_length(parm) >= 4)[0m
      | [0;1;32m                                                         ^
[0m      | [0;32m                                                          {
[0m 1197 |                                         dev_nr = get_dword(parm,0);[0m
 1198 |                                 else[0m
      | [0;32m                                } 
[0m[1mfloppyd.c:1198:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1198 |                                 else[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m 1199 |                                         dev_nr = 0;[0m
      | [0;1;32m                                                   
[0m[1mfloppyd.c:1217:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1217 |                                 if(read_packet(parm, devFd,[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1218 |                                                get_dword(parm, 0)) < 0)[0m
 1219 |                                         send_reply(devFd, sock, DWORD_ERR);[0m
 1220 |                                 else {[0m
 1221 |                                         send_reply(devFd, sock,[0m
 1222 |                                                    get_length(parm));[0m
 1223 |                                         send_packet(parm, sock);[0m
 1224 |                                 }[0m
 1225 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mfloppyd.c:1218:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1218 |                                                get_dword(parm, 0)) < 0)[0m
      | [0;1;32m                                                                       ^
[0m      | [0;32m                                                                        {
[0m 1219 |                                         send_reply(devFd, sock, DWORD_ERR);[0m
 1220 |                                 else {[0m
      | [0;32m                                } 
[0m[1mfloppyd.c:1230:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1230 |                                 if(readOnly) {[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1231 |                                         errno = -EROFS;[0m
 1232 |                                         rval = -1;[0m
 1233 |                                 } else {[0m
 1234 |                                         rval = write_packet(parm, devFd);[0m
 1235 |                                 }[0m
 1236 |                                 send_reply(devFd, sock, (Dword) rval);[0m
 1237 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mfloppyd.c:1243:5: [0m[0;1;35mwarning: [0m[1mThe 1st argument to 'lseek' is -1 but should be >= 0 [clang-analyzer-unix.StdCLibraryFunctions][0m
 1243 |                                 lseek(devFd,[0m
      | [0;1;32m                                ^
[0m[1mfloppyd.c:771:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  771 |         for (;;) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:777:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 783[0m
  777 |                 while ((new_sock = accept(sock, (struct sockaddr *)&addr, &len)) < 0){}[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:783:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 790[0m
  783 |                 switch (fork()) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:795:5: [0m[0;1;36mnote: [0mCalling 'serve_client'[0m
  795 |                                 serve_client(new_sock, device_name, n_dev, 0);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1080:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1080 |                 if(setsockopt(sockhandle, SOL_SOCKET,[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1090:5: [0m[0;1;36mnote: [0m'close_stderr' is 0[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mfloppyd.c:1090:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1104:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1104 |         if (!do_auth(sock, &version)) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1122:2: [0m[0;1;36mnote: [0mThe value -1 is assigned to 'devFd'[0m
 1122 |         devFd = -1;[0m
      | [0;1;32m        ^~~~~~~~~~
[0m[1mfloppyd.c:1126:5: [0m[0;1;36mnote: [0m'version' is not equal to FLOPPYD_PROTOCOL_VERSION_OLD[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m           ^~~~~~~
[0m[1mfloppyd.c:1126:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1144:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1144 |         while(!stopLoop) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1151:8: [0m[0;1;36mnote: [0mCalling 'recv_packet'[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:342:6: [0m[0;1;36mnote: [0mAssuming 'length' is <= 'maxlength'[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:342:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mfloppyd.c:342:28: [0m[0;1;36mnote: [0m'length' is not equal to -1[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m                                  ^~~~~~
[0m[1mfloppyd.c:342:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:347:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  347 |         for (start = 0; start < length; start += l) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:348:7: [0m[0;1;36mnote: [0mAssigning value, which participates in a condition later[0m
  348 |                 l = buf_read(fp, packet->data+start, length-start);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:349:7: [0m[0;1;36mnote: [0mAssuming 'l' is not equal to 0[0m
  349 |                 if (l == 0) {[0m
      | [0;1;32m                    ^~~~~~
[0m[1mfloppyd.c:349:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  349 |                 if (l == 0) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:347:18: [0m[0;1;36mnote: [0m'start' is >= 'length'[0m
  347 |         for (start = 0; start < length; start += l) {[0m
      | [0;1;32m                        ^~~~~
[0m[1mfloppyd.c:347:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 353[0m
  347 |         for (start = 0; start < length; start += l) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:353:14: [0m[0;1;36mnote: [0mField 'len' is not equal to 0[0m
  353 |         if (packet->len == 0) {[0m
      | [0;1;32m                    ^
[0m[1mfloppyd.c:353:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  353 |         if (packet->len == 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1151:8: [0m[0;1;36mnote: [0mReturning from 'recv_packet'[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1151:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1171:3: [0m[0;1;36mnote: [0mControl jumps to 'case OP_SEEK:'  at line 1238[0m
 1171 |                 switch(opcode->data[0]) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1243:5: [0m[0;1;36mnote: [0mThe 1st argument to 'lseek' is -1 but should be >= 0[0m
 1243 |                                 lseek(devFd,[0m
      | [0;1;32m                                ^     ~~~~~
[0m[1mfloppyd.c:1243:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1243 |                                 lseek(devFd,[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1244 |                                       (off_t) get_dword(parm, 0),[0m
 1245 |                                       (int) get_dword(parm, 4));[0m
 1246 |                                 send_reply(devFd,[0m
 1247 |                                            sock,[0m
 1248 |                                            (Dword) lseek(devFd, 0, SEEK_CUR));[0m
 1249 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mfloppyd.c:1251:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1251 |                                 if(sizeof(mt_off_t) < 8) {[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m[1mfloppyd.c:1273:5: [0m[0;1;35mwarning: [0m[1mThe 1st argument to 'fsync' is -1 but should be >= 0 [clang-analyzer-unix.StdCLibraryFunctions][0m
 1273 |                                 fsync(devFd);[0m
      | [0;1;32m                                ^
[0m[1mfloppyd.c:771:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  771 |         for (;;) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:777:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 783[0m
  777 |                 while ((new_sock = accept(sock, (struct sockaddr *)&addr, &len)) < 0){}[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:783:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 790[0m
  783 |                 switch (fork()) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:795:5: [0m[0;1;36mnote: [0mCalling 'serve_client'[0m
  795 |                                 serve_client(new_sock, device_name, n_dev, 0);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1080:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1080 |                 if(setsockopt(sockhandle, SOL_SOCKET,[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1090:5: [0m[0;1;36mnote: [0m'close_stderr' is 0[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mfloppyd.c:1090:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1104:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1104 |         if (!do_auth(sock, &version)) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1122:2: [0m[0;1;36mnote: [0mThe value -1 is assigned to 'devFd'[0m
 1122 |         devFd = -1;[0m
      | [0;1;32m        ^~~~~~~~~~
[0m[1mfloppyd.c:1126:5: [0m[0;1;36mnote: [0m'version' is not equal to FLOPPYD_PROTOCOL_VERSION_OLD[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m           ^~~~~~~
[0m[1mfloppyd.c:1126:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1144:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1144 |         while(!stopLoop) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1151:8: [0m[0;1;36mnote: [0mCalling 'recv_packet'[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:342:6: [0m[0;1;36mnote: [0mAssuming 'length' is <= 'maxlength'[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:342:6: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mfloppyd.c:342:28: [0m[0;1;36mnote: [0m'length' is not equal to -1[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m                                  ^~~~~~
[0m[1mfloppyd.c:342:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  342 |         if (length > maxlength || length == 0xffffffff ) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:347:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  347 |         for (start = 0; start < length; start += l) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:348:7: [0m[0;1;36mnote: [0mAssigning value, which participates in a condition later[0m
  348 |                 l = buf_read(fp, packet->data+start, length-start);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:349:7: [0m[0;1;36mnote: [0mAssuming 'l' is not equal to 0[0m
  349 |                 if (l == 0) {[0m
      | [0;1;32m                    ^~~~~~
[0m[1mfloppyd.c:349:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  349 |                 if (l == 0) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:347:18: [0m[0;1;36mnote: [0m'start' is >= 'length'[0m
  347 |         for (start = 0; start < length; start += l) {[0m
      | [0;1;32m                        ^~~~~
[0m[1mfloppyd.c:347:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 353[0m
  347 |         for (start = 0; start < length; start += l) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:353:14: [0m[0;1;36mnote: [0mField 'len' is not equal to 0[0m
  353 |         if (packet->len == 0) {[0m
      | [0;1;32m                    ^
[0m[1mfloppyd.c:353:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  353 |         if (packet->len == 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1151:8: [0m[0;1;36mnote: [0mReturning from 'recv_packet'[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1151:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1171:3: [0m[0;1;36mnote: [0mControl jumps to 'case OP_FLUSH:'  at line 1269[0m
 1171 |                 switch(opcode->data[0]) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1273:5: [0m[0;1;36mnote: [0mThe 1st argument to 'fsync' is -1 but should be >= 0[0m
 1273 |                                 fsync(devFd);[0m
      | [0;1;32m                                ^     ~~~~~
[0m[1mfloppyd.c:1273:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1273 |                                 fsync(devFd);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1274 |                                 send_reply(devFd, sock, 0);[0m
 1275 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mfloppyd.c:1281:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1281 |                                 close(devFd);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1282 |                                 needSendReply = 1;[0m
 1283 |                                 rval = devFd;[0m
 1284 |                                 devFd = -1;[0m
 1285 |                                 stopLoop = 1;[0m
 1286 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mfloppyd.c:1289:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1289 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mfloppyd.c:1311:3: [0m[0;1;35mwarning: [0m[1mValue stored to 'devFd' is never read [clang-analyzer-deadcode.DeadStores][0m
 1311 |                 devFd = -1;[0m
      | [0;1;32m                ^       ~~
[0m[1mfloppyd.c:1311:3: [0m[0;1;36mnote: [0mValue stored to 'devFd' is never read[0m
 1311 |                 devFd = -1;[0m
      | [0;1;32m                ^       ~~
[0m[1mfloppyd.c:1319:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1319 |         if(needSendReply)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m 1320 |             send_reply(rval, sock, 0);[0m
      | [0;1;32m                                      
[0m[1mfloppyd.c:1320:6: [0m[0;1;35mwarning: [0m[1mUse of memory after it is freed [clang-analyzer-unix.Malloc][0m
 1320 |             send_reply(rval, sock, 0);[0m
      | [0;1;32m            ^
[0m[1mfloppyd.c:771:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  771 |         for (;;) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:777:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 783[0m
  777 |                 while ((new_sock = accept(sock, (struct sockaddr *)&addr, &len)) < 0){}[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:783:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 790[0m
  783 |                 switch (fork()) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:795:5: [0m[0;1;36mnote: [0mCalling 'serve_client'[0m
  795 |                                 serve_client(new_sock, device_name, n_dev, 0);[0m
      | [0;1;32m                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1080:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1080 |                 if(setsockopt(sockhandle, SOL_SOCKET,[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1090:5: [0m[0;1;36mnote: [0m'close_stderr' is 0[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mfloppyd.c:1090:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1090 |         if(close_stderr) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1096:9: [0m[0;1;36mnote: [0mCalling 'new_io_buffer'[0m
 1096 |         sock = new_io_buffer(sockhandle);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:135:11: [0m[0;1;36mnote: [0mMemory is allocated[0m
  135 |         buffer = New(struct io_buffer);[0m
      | [0;1;32m                 ^
[0m[1m./mtools.h:185:28: [0m[0;1;36mnote: [0mexpanded from macro 'New'[0m
  185 | #define New(type) ((type*)(calloc(1,sizeof(type))))[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1096:9: [0m[0;1;36mnote: [0mReturned allocated memory[0m
 1096 |         sock = new_io_buffer(sockhandle);[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1104:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1104 |         if (!do_auth(sock, &version)) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1126:5: [0m[0;1;36mnote: [0m'version' is not equal to FLOPPYD_PROTOCOL_VERSION_OLD[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m           ^~~~~~~
[0m[1mfloppyd.c:1126:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1126 |         if(version == FLOPPYD_PROTOCOL_VERSION_OLD) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1144:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1144 |         while(!stopLoop) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1151:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1151 |                 if (!recv_packet(opcode, sock, 1)) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1171:3: [0m[0;1;36mnote: [0mControl jumps to 'case OP_CLOSE:'  at line 1276[0m
 1171 |                 switch(opcode->data[0]) {[0m
      | [0;1;32m                ^
[0m[1mfloppyd.c:1286:5: [0m[0;1;36mnote: [0m Execution continues on line 1298[0m
 1286 |                                 break;[0m
      | [0;1;32m                                ^
[0m[1mfloppyd.c:1144:2: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 1309[0m
 1144 |         while(!stopLoop) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1309:6: [0m[0;1;36mnote: [0m'devFd' is < 0[0m
 1309 |         if (devFd >= 0) {[0m
      | [0;1;32m            ^~~~~
[0m[1mfloppyd.c:1309:2: [0m[0;1;36mnote: [0mTaking false branch[0m
 1309 |         if (devFd >= 0) {[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1314:2: [0m[0;1;36mnote: [0mCalling 'free_io_buffer'[0m
 1314 |         free_io_buffer(sock);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:155:2: [0m[0;1;36mnote: [0mMemory is released[0m
  155 |         free(buffer);[0m
      | [0;1;32m        ^~~~~~~~~~~~
[0m[1mfloppyd.c:1314:2: [0m[0;1;36mnote: [0mReturning; memory was released via 1st parameter[0m
 1314 |         free_io_buffer(sock);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~
[0m[1mfloppyd.c:1319:5: [0m[0;1;36mnote: [0m'needSendReply' is 1[0m
 1319 |         if(needSendReply)[0m
      | [0;1;32m           ^~~~~~~~~~~~~
[0m[1mfloppyd.c:1319:2: [0m[0;1;36mnote: [0mTaking true branch[0m
 1319 |         if(needSendReply)[0m
      | [0;1;32m        ^
[0m[1mfloppyd.c:1320:6: [0m[0;1;36mnote: [0mUse of memory after it is freed[0m
 1320 |             send_reply(rval, sock, 0);[0m
      | [0;1;32m            ^                ~~~~
[0m68 warnings generated.
Suppressed 5 warnings (5 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[70/72][168.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmplkamnfa3.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/buffer.c
[1mbuffer.c:72:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   72 |         if (!Buffer->dirty)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m   73 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mbuffer.c:92:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   92 |                 fprintf(stderr,"buffer_flush: short write\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:92:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   92 |                 fprintf(stderr,"buffer_flush: short write\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:103:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  103 |         if(_buf_flush(Buffer) < 0)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  104 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mbuffer.c:143:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  143 |                 if(invalidate_buffer(This, start) < 0)[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m  144 |                         return ERROR;[0m
      | [0;1;32m                                     
[0m[1mbuffer.c:160:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |         if(!len)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  161 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mbuffer.c:169:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  169 |                         maximize(length, This->size - This->cur_size);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  170 | [0m
  171 |                         /* read it! */[0m
  172 |                         ret=PREADS(This->head.Next,[0m
  173 |                                    This->buf + This->cur_size,[0m
  174 |                                    This->current + (mt_off_t) This->cur_size,[0m
  175 |                                    length);[0m
  176 |                         if ( ret < 0 )[0m
  177 |                                 return ret;[0m
  178 |                         This->cur_size += (size_t) ret;[0m
  179 |                         if (This->current+(mt_off_t)This->cur_size < start) {[0m
  180 |                                 fprintf(stderr, "Short buffer fill\n");[0m
  181 |                                 exit(1);[0m
  182 |                         }[0m
  183 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1m./mtools.h:44:31: [0m[0;1;36mnote: [0mexpanded from macro 'maximize'[0m
   44 | #define maximize(target, max) do { \[0m
      | [0;1;32m                              ^
[0m[1mbuffer.c:176:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  176 |                         if ( ret < 0 )[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  177 |                                 return ret;[0m
      | [0;1;32m                                           
[0m[1mbuffer.c:180:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  180 |                                 fprintf(stderr, "Short buffer fill\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mbuffer.c:180:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  180 |                                 fprintf(stderr, "Short buffer fill\n");[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mbuffer.c:186:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  186 |                         break;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mbuffer.c:188:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  188 |                         return -1;[0m
      | [0;1;32m                        ^        
[0m      | [0;32m                        {        ;} 
[0m[1mbuffer.c:194:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  194 |         memcpy(buf, disk_ptr, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1mbuffer.c:194:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  194 |         memcpy(buf, disk_ptr, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1mbuffer.c:205:10: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  205 |         if(!len)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  206 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mbuffer.c:224:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  224 |                         if(start % (mt_off_t) This->cylinderSize ||[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m[1mbuffer.c:236:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  236 |                                 if ( ret < 0 )[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  237 |                                         return ret;[0m
      | [0;1;32m                                                   
[0m[1mbuffer.c:240:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  240 |                                   fprintf(stderr, "Weird: read size ("SSZF") not a multiple of sector size (%d)\n", bytes_read, (int) This->sectorSize);[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1mbuffer.c:240:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  240 |                                   fprintf(stderr, "Weird: read size ("SSZF") not a multiple of sector size (%d)\n", bytes_read, (int) This->sectorSize);[0m
      | [0;1;32m                                  ^~~~~~~
[0m[1mbuffer.c:243:6: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  243 |                                         fprintf(stderr, "Nothing left\n");[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mbuffer.c:243:6: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  243 |                                         fprintf(stderr, "Nothing left\n");[0m
      | [0;1;32m                                        ^~~~~~~
[0m[1mbuffer.c:250:6: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  250 |                                         memset(This->buf,0,readSize);[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mbuffer.c:250:6: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  250 |                                         memset(This->buf,0,readSize);[0m
      | [0;1;32m                                        ^~~~~~
[0m[1mbuffer.c:261:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  261 |                         len = ROUND_DOWN(len, This->sectorSize);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  262 |                         offset = OFFSET;[0m
  263 |                         maximize(len, This->size - offset);[0m
  264 |                         This->cur_size += len;[0m
  265 |                         if(This->head.Next->Class->pre_allocate)[0m
  266 |                                 PRE_ALLOCATE(This->head.Next, cur_end(This));[0m
  267 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mbuffer.c:265:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  265 |                         if(This->head.Next->Class->pre_allocate)[0m
      | [0;1;32m                                                                ^
[0m      | [0;32m                                                                 {
[0m  266 |                                 PRE_ALLOCATE(This->head.Next, cur_end(This));[0m
      | [0;1;32m                                                                             
[0m[1mbuffer.c:273:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  273 |                         offset = OFFSET;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  274 |                         maximize(len, This->cur_size - offset);[0m
  275 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mbuffer.c:277:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  277 |                         return -1;[0m
      | [0;1;32m                        ^        
[0m      | [0;32m                        {        ;} 
[0m[1mbuffer.c:293:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  293 |         memcpy(disk_ptr, buf, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1mbuffer.c:293:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  293 |         memcpy(disk_ptr, buf, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1mbuffer.c:294:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  294 |         if(!This->dirty || offset < This->dirty_pos)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  295 |                 This->dirty_pos = ROUND_DOWN(offset, This->sectorSize);[0m
      | [0;1;32m                                                                       
[0m[1mbuffer.c:296:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  296 |         if(!This->dirty || offset + len > This->dirty_end)[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m  297 |                 This->dirty_end = ROUND_UP(offset + len, This->sectorSize);[0m
      | [0;1;32m                                                                           
[0m[1mbuffer.c:300:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  300 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:300:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  300 |                 fprintf(stderr,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:306:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  306 |                 fprintf(stderr, "offset + len + grain - 1 = %x\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:306:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  306 |                 fprintf(stderr, "offset + len + grain - 1 = %x\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:308:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  308 |                 fprintf(stderr, "ROUNDOWN(offset + len + grain - 1) = %x\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:308:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  308 |                 fprintf(stderr, "ROUNDOWN(offset + len + grain - 1) = %x\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:311:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  311 |                 fprintf(stderr, "This->dirty = %d\n", This->dirty);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:311:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  311 |                 fprintf(stderr, "This->dirty = %d\n", This->dirty);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:324:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  324 |         if (!This->ever_dirty)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  325 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mbuffer.c:327:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  327 |         if(ret == 0)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  328 |                 This->ever_dirty = 0;[0m
      | [0;1;32m                                     
[0m[1mbuffer.c:337:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  337 |         if(This->buf)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  338 |                 free(This->buf);[0m
      | [0;1;32m                                
[0m[1mbuffer.c:371:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  371 |                 fprintf(stderr, "size not multiple of cylinder size\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:371:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  371 |                 fprintf(stderr, "size not multiple of cylinder size\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:375:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  375 |                 fprintf(stderr, "cylinder size not multiple of sector size\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:375:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  375 |                 fprintf(stderr, "cylinder size not multiple of sector size\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mbuffer.c:380:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  380 |         if(!Buffer)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  381 |                 return 0;[0m
      | [0;1;32m                         
[0m36 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[71/72][184.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmpverf57jl.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/config.c
[1mconfig.c:186:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  186 |     if(C == NULL)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  187 |         C = newlocale(LC_CTYPE_MASK, "C", NULL);[0m
      | [0;1;32m                                                
[0m[1mconfig.c:222:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  222 |     if(default_drive == ':')[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  223 |         return; /* we have an image */[0m
      | [0;1;32m                                      
[0m[1mconfig.c:225:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  225 |        default_drive > drive)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  226 |         default_drive = drive;[0m
      | [0;1;32m                              
[0m[1mconfig.c:231:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  231 |     if(default_drive != '\0')[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  232 |         return default_drive;[0m
  233 |     else[0m
      | [0;32m    } 
[0m[1mconfig.c:233:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  233 |     else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m  234 |         return 'A';[0m
      | [0;1;32m                   
[0m[1mconfig.c:241:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  241 |     if(thisLine)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  242 |         lastTokenLinenumber = linenumber;[0m
      | [0;1;32m                                         
[0m[1mconfig.c:243:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  243 |     if(cur_dev >= 0)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  244 |         drive = devices[cur_dev].drive;[0m
      | [0;1;32m                                       
[0m[1mconfig.c:245:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  245 |     fprintf(stderr,"Syntax error at line %d ", lastTokenLinenumber);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mconfig.c:245:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  245 |     fprintf(stderr,"Syntax error at line %d ", lastTokenLinenumber);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mconfig.c:246:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  246 |     if(drive) fprintf(stderr, "for drive %c: ", drive);[0m
      | [0;1;32m             ^                                         
[0m      | [0;32m              {
[0m[1mconfig.c:246:15: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  246 |     if(drive) fprintf(stderr, "for drive %c: ", drive);[0m
      | [0;1;32m              ^~~~~~~
[0m[1mconfig.c:246:15: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  246 |     if(drive) fprintf(stderr, "for drive %c: ", drive);[0m
      | [0;1;32m              ^~~~~~~
[0m[1mconfig.c:247:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  247 |     if(token) fprintf(stderr, "column %ld ", (long)(token - buffer));[0m
      | [0;1;32m             ^                                                       
[0m      | [0;32m              {
[0m[1mconfig.c:247:15: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  247 |     if(token) fprintf(stderr, "column %ld ", (long)(token - buffer));[0m
      | [0;1;32m              ^~~~~~~
[0m[1mconfig.c:247:15: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  247 |     if(token) fprintf(stderr, "column %ld ", (long)(token - buffer));[0m
      | [0;1;32m              ^~~~~~~
[0m[1mconfig.c:248:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  248 |     fprintf(stderr, "in file %s: %s", filename, msg);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mconfig.c:248:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  248 |     fprintf(stderr, "in file %s: %s", filename, msg);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mconfig.c:249:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  249 |     if(errno != 0)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  250 |         fprintf(stderr, " (%s)", strerror(errno));[0m
      | [0;1;32m                                                  
[0m[1mconfig.c:250:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  250 |         fprintf(stderr, " (%s)", strerror(errno));[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:250:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  250 |         fprintf(stderr, " (%s)", strerror(errno));[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:251:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  251 |     fprintf(stderr, "\n");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mconfig.c:251:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  251 |     fprintf(stderr, "\n");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mconfig.c:270:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  270 |                 * ((int *)global_switches[i].address) = strtosi(s,0,0);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  271 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mconfig.c:273:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  273 |                 * ((unsigned int *)global_switches[i].address) = strtoui(s,0,0);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  274 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mconfig.c:276:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  276 |                 * ((uint8_t *)global_switches[i].address) = strtou8(s,0,0);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  277 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mconfig.c:279:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  279 |                 * ((uint16_t *)global_switches[i].address) = strtou16(s,0,0);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  280 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mconfig.c:284:3: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  284 |                 break;[0m
      | [0;1;32m                ^    
[0m      | [0;32m                {    ;} 
[0m[1mconfig.c:287:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  287 |                 fprintf(stderr, "Bad number %s for %s (%s)\n", s,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mconfig.c:287:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  287 |                 fprintf(stderr, "Bad number %s for %s (%s)\n", s,[0m
      | [0;1;32m                ^~~~~~~
[0m[1mconfig.c:301:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  301 |     if(!fp || !fgets(buffer, MAX_LINE_LEN+1, fp))[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  302 |         return -1;[0m
      | [0;1;32m                  
[0m[1mconfig.c:307:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  307 |     if(strlen(buffer) == MAX_LINE_LEN)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  308 |         syntax("line too long", 1);[0m
      | [0;1;32m                                   
[0m[1mconfig.c:319:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  319 |                 if(expect)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  320 |                     syntax("end of file unexpected", 1);[0m
      | [0;1;32m                                                        
[0m[1mconfig.c:323:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  323 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  324 |             pos++;[0m
      | [0;1;32m                  
[0m[1mconfig.c:356:2: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  356 |         sprintf(buf, "expected %c", c);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:356:2: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  356 |         sprintf(buf, "expected %c", c);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:367:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  367 |     if(*pos != '"')[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  368 |         syntax(" \" expected", 0);[0m
      | [0;1;32m                                  
[0m[1mconfig.c:371:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  371 |     if(!end)[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  372 |         syntax("unterminated string constant", 1);[0m
      | [0;1;32m                                                  
[0m[1mconfig.c:380:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  380 |     if(*pos == '"')[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  381 |         return get_string();[0m
  382 |     else {[0m
      | [0;32m    } 
[0m[1mconfig.c:396:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  396 |     if(errno)[0m
      | [0;1;32m             ^
[0m      | [0;32m              {
[0m  397 |         syntax("bad number", 0);[0m
      | [0;1;32m                                
[0m[1mconfig.c:398:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  398 |     if(last == pos)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  399 |         syntax("numeral expected", 0);[0m
      | [0;1;32m                                      
[0m[1mconfig.c:400:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  400 |     if(n > max)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  401 |         syntax("number too big", 0);[0m
      | [0;1;32m                                    
[0m[1mconfig.c:415:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  415 |     if(errno)[0m
      | [0;1;32m             ^
[0m      | [0;32m              {
[0m  416 |         syntax("bad number", 0);[0m
      | [0;1;32m                                
[0m[1mconfig.c:417:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  417 |     if(last == pos)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  418 |         syntax("numeral expected", 0);[0m
      | [0;1;32m                                      
[0m[1mconfig.c:432:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  432 |            devices[i].file_nr == fn)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  433 |             devices[j++] = devices[i];[0m
      | [0;1;32m                                      
[0m[1mconfig.c:452:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  452 |     memset((char *)&devices[cur_dev], 0, sizeof(struct device));[0m
      | [0;1;32m    ^~~~~~
[0m[1mconfig.c:452:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  452 |     memset((char *)&devices[cur_dev], 0, sizeof(struct device));[0m
      | [0;1;32m    ^~~~~~
[0m[1mconfig.c:462:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  462 |     for(i=cur_devs; i>0; i--)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  463 |         devices[i] = devices[i-1];[0m
      | [0;1;32m                                  
[0m[1mconfig.c:486:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  486 |     if(!devices[cur_dev].name)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  487 |         syntax("missing filename", 0);[0m
      | [0;1;32m                                      
[0m[1mconfig.c:493:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  493 |            !devices[cur_dev].sectors)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  494 |             syntax("incomplete geometry: either indicate all of track/heads/sectors or none of them", 0);[0m
      | [0;1;32m                                                                                                         
[0m[1mconfig.c:496:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  496 |              (MFORMAT_ONLY_FLAG | FILTER_FLAG)))[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  497 |             syntax("if you supply a geometry, you also must supply one of the `mformat_only' or `filter' flags", 0);[0m
      | [0;1;32m                                                                                                                    
[0m[1mconfig.c:502:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  502 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:502:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  502 |         fprintf(stderr,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:528:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  529 |                 * ((unsigned int *)((long)switches[i].address+base_address)) =[0m
  530 |                     (unsigned int) get_unumber(UINT_MAX);[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;32m            } 
[0m[1mconfig.c:529:64: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
  529 |                 * ((unsigned int *)((long)switches[i].address+base_address)) =[0m
      | [0;1;32m                                                                             ^
[0m[1mconfig.c:839:8: [0m[0;1;36mnote: [0mAssuming 'devices' is non-null[0m
  839 |     if(!devices) {[0m
      | [0;1;32m       ^~~~~~~~
[0m[1mconfig.c:839:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  839 |     if(!devices) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:843:8: [0m[0;1;36mnote: [0mAssuming 'nr_const_devices' is 0[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~
[0m[1mconfig.c:843:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:847:14: [0m[0;1;36mnote: [0mCalling 'parse'[0m
  847 |     (void) ((parse(CONF_FILE,1) |[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:798:8: [0m[0;1;36mnote: [0mAssuming 'fp' is null[0m
  798 |     if(fp) {[0m
      | [0;1;32m       ^~
[0m[1mconfig.c:798:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  798 |     if(fp) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:803:9: [0m[0;1;36mnote: [0m'fp' is non-null[0m
  803 |     if(!fp)[0m
      | [0;1;32m        ^~
[0m[1mconfig.c:803:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  803 |     if(!fp)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:819:5: [0m[0;1;36mnote: [0mCalling 'parse_all'[0m
  819 |     parse_all(privilege);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:792:12: [0m[0;1;36mnote: [0mCalling 'parse_one'[0m
  792 |     while (parse_one(privilege));[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:741:9: [0m[0;1;36mnote: [0m'token' is non-null[0m
  741 |     if(!token)[0m
      | [0;1;32m        ^~~~~
[0m[1mconfig.c:741:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  741 |     if(!token)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:744:30: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  744 |     if((match_token("drive") && ((action = 1)))||[0m
      | [0;1;32m                             ^
[0m[1mconfig.c:745:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  745 |        (match_token("drive+") && ((action = 2))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:746:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  746 |        (match_token("+drive") && ((action = 3))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:747:36: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  747 |        (match_token("clear_drive") && ((action = 4))) ) {[0m
      | [0;1;32m                                   ^
[0m[1mconfig.c:772:8: [0m[0;1;36mnote: [0mAssuming 'token_nr' is not equal to 1[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~
[0m[1mconfig.c:772:22: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m                     ^
[0m[1mconfig.c:777:9: [0m[0;1;36mnote: [0mAssuming 'cur_dev' is < 0[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m        ^~~~~~~~~~~
[0m[1mconfig.c:777:21: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m                    ^
[0m[1mconfig.c:785:59: [0m[0;1;36mnote: [0mPassing null pointer value via 3rd parameter 'base_address'[0m
  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m                                                                 ^
[0m[1mconfig.c:784:8: [0m[0;1;36mnote: [0mCalling 'set_var'[0m
  784 |        set_var(global_switches,[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~
[0m  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:520:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  520 |     for(i=0; i < nr; i++) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:521:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:521:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m        ^
[0m[1mconfig.c:528:9: [0m[0;1;36mnote: [0mAssuming field 'type' is equal to T_UINT[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:528:6: [0m[0;1;36mnote: [0mTaking true branch[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m            ^
[0m[1mconfig.c:529:64: [0m[0;1;36mnote: [0mDereference of null pointer[0m
  529 |                 * ((unsigned int *)((long)switches[i].address+base_address)) =[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
[0m  530 |                     (unsigned int) get_unumber(UINT_MAX);[0m
      | [0;1;32m                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:531:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  532 |                 * ((uint8_t *)((long)switches[i].address+base_address)) =[0m
  533 |                     (uint8_t) get_unumber(UINT8_MAX);[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;32m            } 
[0m[1mconfig.c:532:59: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
  532 |                 * ((uint8_t *)((long)switches[i].address+base_address)) =[0m
      | [0;1;32m                                                                        ^
[0m[1mconfig.c:839:8: [0m[0;1;36mnote: [0mAssuming 'devices' is non-null[0m
  839 |     if(!devices) {[0m
      | [0;1;32m       ^~~~~~~~
[0m[1mconfig.c:839:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  839 |     if(!devices) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:843:8: [0m[0;1;36mnote: [0mAssuming 'nr_const_devices' is 0[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~
[0m[1mconfig.c:843:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:847:14: [0m[0;1;36mnote: [0mCalling 'parse'[0m
  847 |     (void) ((parse(CONF_FILE,1) |[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:798:8: [0m[0;1;36mnote: [0mAssuming 'fp' is null[0m
  798 |     if(fp) {[0m
      | [0;1;32m       ^~
[0m[1mconfig.c:798:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  798 |     if(fp) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:803:9: [0m[0;1;36mnote: [0m'fp' is non-null[0m
  803 |     if(!fp)[0m
      | [0;1;32m        ^~
[0m[1mconfig.c:803:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  803 |     if(!fp)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:819:5: [0m[0;1;36mnote: [0mCalling 'parse_all'[0m
  819 |     parse_all(privilege);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:792:12: [0m[0;1;36mnote: [0mCalling 'parse_one'[0m
  792 |     while (parse_one(privilege));[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:741:9: [0m[0;1;36mnote: [0m'token' is non-null[0m
  741 |     if(!token)[0m
      | [0;1;32m        ^~~~~
[0m[1mconfig.c:741:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  741 |     if(!token)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:744:30: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  744 |     if((match_token("drive") && ((action = 1)))||[0m
      | [0;1;32m                             ^
[0m[1mconfig.c:745:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  745 |        (match_token("drive+") && ((action = 2))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:746:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  746 |        (match_token("+drive") && ((action = 3))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:747:36: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  747 |        (match_token("clear_drive") && ((action = 4))) ) {[0m
      | [0;1;32m                                   ^
[0m[1mconfig.c:772:8: [0m[0;1;36mnote: [0mAssuming 'token_nr' is not equal to 1[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~
[0m[1mconfig.c:772:22: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m                     ^
[0m[1mconfig.c:777:9: [0m[0;1;36mnote: [0mAssuming 'cur_dev' is < 0[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m        ^~~~~~~~~~~
[0m[1mconfig.c:777:21: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m                    ^
[0m[1mconfig.c:785:59: [0m[0;1;36mnote: [0mPassing null pointer value via 3rd parameter 'base_address'[0m
  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m                                                                 ^
[0m[1mconfig.c:784:8: [0m[0;1;36mnote: [0mCalling 'set_var'[0m
  784 |        set_var(global_switches,[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~
[0m  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:520:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  520 |     for(i=0; i < nr; i++) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:521:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:521:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m        ^
[0m[1mconfig.c:528:9: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:528:6: [0m[0;1;36mnote: [0mTaking false branch[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m            ^
[0m[1mconfig.c:531:14: [0m[0;1;36mnote: [0mAssuming field 'type' is equal to T_UINT8[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:531:11: [0m[0;1;36mnote: [0mTaking true branch[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:532:59: [0m[0;1;36mnote: [0mDereference of null pointer[0m
  532 |                 * ((uint8_t *)((long)switches[i].address+base_address)) =[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
[0m  533 |                     (uint8_t) get_unumber(UINT8_MAX);[0m
      | [0;1;32m                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:534:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  535 |                 * ((uint16_t *)((long)switches[i].address+base_address)) =[0m
  536 |                     (uint16_t) get_unumber(UINT16_MAX);[0m
  537 |             else if(switches[i].type == T_INT)[0m
      | [0;32m            } 
[0m[1mconfig.c:535:60: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
  535 |                 * ((uint16_t *)((long)switches[i].address+base_address)) =[0m
      | [0;1;32m                                                                         ^
[0m[1mconfig.c:839:8: [0m[0;1;36mnote: [0mAssuming 'devices' is non-null[0m
  839 |     if(!devices) {[0m
      | [0;1;32m       ^~~~~~~~
[0m[1mconfig.c:839:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  839 |     if(!devices) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:843:8: [0m[0;1;36mnote: [0mAssuming 'nr_const_devices' is 0[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~
[0m[1mconfig.c:843:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:847:14: [0m[0;1;36mnote: [0mCalling 'parse'[0m
  847 |     (void) ((parse(CONF_FILE,1) |[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:798:8: [0m[0;1;36mnote: [0mAssuming 'fp' is null[0m
  798 |     if(fp) {[0m
      | [0;1;32m       ^~
[0m[1mconfig.c:798:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  798 |     if(fp) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:803:9: [0m[0;1;36mnote: [0m'fp' is non-null[0m
  803 |     if(!fp)[0m
      | [0;1;32m        ^~
[0m[1mconfig.c:803:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  803 |     if(!fp)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:819:5: [0m[0;1;36mnote: [0mCalling 'parse_all'[0m
  819 |     parse_all(privilege);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:792:12: [0m[0;1;36mnote: [0mCalling 'parse_one'[0m
  792 |     while (parse_one(privilege));[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:741:9: [0m[0;1;36mnote: [0m'token' is non-null[0m
  741 |     if(!token)[0m
      | [0;1;32m        ^~~~~
[0m[1mconfig.c:741:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  741 |     if(!token)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:744:30: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  744 |     if((match_token("drive") && ((action = 1)))||[0m
      | [0;1;32m                             ^
[0m[1mconfig.c:745:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  745 |        (match_token("drive+") && ((action = 2))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:746:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  746 |        (match_token("+drive") && ((action = 3))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:747:36: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  747 |        (match_token("clear_drive") && ((action = 4))) ) {[0m
      | [0;1;32m                                   ^
[0m[1mconfig.c:772:8: [0m[0;1;36mnote: [0mAssuming 'token_nr' is not equal to 1[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~
[0m[1mconfig.c:772:22: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m                     ^
[0m[1mconfig.c:777:9: [0m[0;1;36mnote: [0mAssuming 'cur_dev' is < 0[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m        ^~~~~~~~~~~
[0m[1mconfig.c:777:21: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m                    ^
[0m[1mconfig.c:785:59: [0m[0;1;36mnote: [0mPassing null pointer value via 3rd parameter 'base_address'[0m
  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m                                                                 ^
[0m[1mconfig.c:784:8: [0m[0;1;36mnote: [0mCalling 'set_var'[0m
  784 |        set_var(global_switches,[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~
[0m  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:520:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  520 |     for(i=0; i < nr; i++) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:521:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:521:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m        ^
[0m[1mconfig.c:528:9: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:528:6: [0m[0;1;36mnote: [0mTaking false branch[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m            ^
[0m[1mconfig.c:531:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT8[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:531:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:534:14: [0m[0;1;36mnote: [0mAssuming field 'type' is equal to T_UINT16[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:534:11: [0m[0;1;36mnote: [0mTaking true branch[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:535:60: [0m[0;1;36mnote: [0mDereference of null pointer[0m
  535 |                 * ((uint16_t *)((long)switches[i].address+base_address)) =[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
[0m  536 |                     (uint16_t) get_unumber(UINT16_MAX);[0m
      | [0;1;32m                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:537:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  537 |             else if(switches[i].type == T_INT)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  538 |                 * ((int *)((long)switches[i].address+base_address)) =[0m
  539 |                     get_number();[0m
  540 |             else if (switches[i].type == T_STRING)[0m
      | [0;32m            } 
[0m[1mconfig.c:538:55: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
  538 |                 * ((int *)((long)switches[i].address+base_address)) =[0m
      | [0;1;32m                                                                    ^
[0m[1mconfig.c:839:8: [0m[0;1;36mnote: [0mAssuming 'devices' is non-null[0m
  839 |     if(!devices) {[0m
      | [0;1;32m       ^~~~~~~~
[0m[1mconfig.c:839:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  839 |     if(!devices) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:843:8: [0m[0;1;36mnote: [0mAssuming 'nr_const_devices' is 0[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~
[0m[1mconfig.c:843:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:847:14: [0m[0;1;36mnote: [0mCalling 'parse'[0m
  847 |     (void) ((parse(CONF_FILE,1) |[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:798:8: [0m[0;1;36mnote: [0mAssuming 'fp' is null[0m
  798 |     if(fp) {[0m
      | [0;1;32m       ^~
[0m[1mconfig.c:798:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  798 |     if(fp) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:803:9: [0m[0;1;36mnote: [0m'fp' is non-null[0m
  803 |     if(!fp)[0m
      | [0;1;32m        ^~
[0m[1mconfig.c:803:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  803 |     if(!fp)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:819:5: [0m[0;1;36mnote: [0mCalling 'parse_all'[0m
  819 |     parse_all(privilege);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:792:12: [0m[0;1;36mnote: [0mCalling 'parse_one'[0m
  792 |     while (parse_one(privilege));[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:741:9: [0m[0;1;36mnote: [0m'token' is non-null[0m
  741 |     if(!token)[0m
      | [0;1;32m        ^~~~~
[0m[1mconfig.c:741:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  741 |     if(!token)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:744:30: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  744 |     if((match_token("drive") && ((action = 1)))||[0m
      | [0;1;32m                             ^
[0m[1mconfig.c:745:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  745 |        (match_token("drive+") && ((action = 2))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:746:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  746 |        (match_token("+drive") && ((action = 3))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:747:36: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  747 |        (match_token("clear_drive") && ((action = 4))) ) {[0m
      | [0;1;32m                                   ^
[0m[1mconfig.c:772:8: [0m[0;1;36mnote: [0mAssuming 'token_nr' is not equal to 1[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~
[0m[1mconfig.c:772:22: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m                     ^
[0m[1mconfig.c:777:9: [0m[0;1;36mnote: [0mAssuming 'cur_dev' is < 0[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m        ^~~~~~~~~~~
[0m[1mconfig.c:777:21: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m                    ^
[0m[1mconfig.c:785:59: [0m[0;1;36mnote: [0mPassing null pointer value via 3rd parameter 'base_address'[0m
  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m                                                                 ^
[0m[1mconfig.c:784:8: [0m[0;1;36mnote: [0mCalling 'set_var'[0m
  784 |        set_var(global_switches,[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~
[0m  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:520:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  520 |     for(i=0; i < nr; i++) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:521:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:521:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m        ^
[0m[1mconfig.c:528:9: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:528:6: [0m[0;1;36mnote: [0mTaking false branch[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m            ^
[0m[1mconfig.c:531:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT8[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:531:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:534:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT16[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:534:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:537:14: [0m[0;1;36mnote: [0mAssuming field 'type' is equal to T_INT[0m
  537 |             else if(switches[i].type == T_INT)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:537:11: [0m[0;1;36mnote: [0mTaking true branch[0m
  537 |             else if(switches[i].type == T_INT)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:538:55: [0m[0;1;36mnote: [0mDereference of null pointer[0m
  538 |                 * ((int *)((long)switches[i].address+base_address)) =[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
[0m  539 |                     get_number();[0m
      | [0;1;32m                    ~~~~~~~~~~~~
[0m[1mconfig.c:540:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  540 |             else if (switches[i].type == T_STRING)[0m
      | [0;1;32m                                                  ^
[0m      | [0;32m                                                   {
[0m  541 |                 * ((char**)((long)switches[i].address+base_address))=[0m
  542 |                     get_string();[0m
  543 |             else if (switches[i].type == T_UQSTRING)[0m
      | [0;32m            } 
[0m[1mconfig.c:541:55: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
  541 |                 * ((char**)((long)switches[i].address+base_address))=[0m
      | [0;1;32m                                                                    ^
[0m[1mconfig.c:839:8: [0m[0;1;36mnote: [0mAssuming 'devices' is non-null[0m
  839 |     if(!devices) {[0m
      | [0;1;32m       ^~~~~~~~
[0m[1mconfig.c:839:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  839 |     if(!devices) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:843:8: [0m[0;1;36mnote: [0mAssuming 'nr_const_devices' is 0[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~
[0m[1mconfig.c:843:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:847:14: [0m[0;1;36mnote: [0mCalling 'parse'[0m
  847 |     (void) ((parse(CONF_FILE,1) |[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:798:8: [0m[0;1;36mnote: [0mAssuming 'fp' is null[0m
  798 |     if(fp) {[0m
      | [0;1;32m       ^~
[0m[1mconfig.c:798:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  798 |     if(fp) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:803:9: [0m[0;1;36mnote: [0m'fp' is non-null[0m
  803 |     if(!fp)[0m
      | [0;1;32m        ^~
[0m[1mconfig.c:803:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  803 |     if(!fp)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:819:5: [0m[0;1;36mnote: [0mCalling 'parse_all'[0m
  819 |     parse_all(privilege);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:792:12: [0m[0;1;36mnote: [0mCalling 'parse_one'[0m
  792 |     while (parse_one(privilege));[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:741:9: [0m[0;1;36mnote: [0m'token' is non-null[0m
  741 |     if(!token)[0m
      | [0;1;32m        ^~~~~
[0m[1mconfig.c:741:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  741 |     if(!token)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:744:30: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  744 |     if((match_token("drive") && ((action = 1)))||[0m
      | [0;1;32m                             ^
[0m[1mconfig.c:745:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  745 |        (match_token("drive+") && ((action = 2))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:746:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  746 |        (match_token("+drive") && ((action = 3))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:747:36: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  747 |        (match_token("clear_drive") && ((action = 4))) ) {[0m
      | [0;1;32m                                   ^
[0m[1mconfig.c:772:8: [0m[0;1;36mnote: [0mAssuming 'token_nr' is not equal to 1[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~
[0m[1mconfig.c:772:22: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m                     ^
[0m[1mconfig.c:777:9: [0m[0;1;36mnote: [0mAssuming 'cur_dev' is < 0[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m        ^~~~~~~~~~~
[0m[1mconfig.c:777:21: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m                    ^
[0m[1mconfig.c:785:59: [0m[0;1;36mnote: [0mPassing null pointer value via 3rd parameter 'base_address'[0m
  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m                                                                 ^
[0m[1mconfig.c:784:8: [0m[0;1;36mnote: [0mCalling 'set_var'[0m
  784 |        set_var(global_switches,[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~
[0m  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:520:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  520 |     for(i=0; i < nr; i++) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:521:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:521:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m        ^
[0m[1mconfig.c:528:9: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:528:6: [0m[0;1;36mnote: [0mTaking false branch[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m            ^
[0m[1mconfig.c:531:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT8[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:531:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:534:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT16[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:534:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:537:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_INT[0m
  537 |             else if(switches[i].type == T_INT)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:537:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  537 |             else if(switches[i].type == T_INT)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:540:15: [0m[0;1;36mnote: [0mAssuming field 'type' is equal to T_STRING[0m
  540 |             else if (switches[i].type == T_STRING)[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:540:11: [0m[0;1;36mnote: [0mTaking true branch[0m
  540 |             else if (switches[i].type == T_STRING)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:541:55: [0m[0;1;36mnote: [0mDereference of null pointer[0m
  541 |                 * ((char**)((long)switches[i].address+base_address))=[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
[0m  542 |                     get_string();[0m
      | [0;1;32m                    ~~~~~~~~~~~~
[0m[1mconfig.c:543:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  543 |             else if (switches[i].type == T_UQSTRING)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  544 |                 * ((char**)((long)switches[i].address+base_address))=[0m
  545 |                     get_unquoted_string();[0m
      | [0;1;32m                                          
[0m[1mconfig.c:544:55: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
  544 |                 * ((char**)((long)switches[i].address+base_address))=[0m
      | [0;1;32m                                                                    ^
[0m[1mconfig.c:839:8: [0m[0;1;36mnote: [0mAssuming 'devices' is non-null[0m
  839 |     if(!devices) {[0m
      | [0;1;32m       ^~~~~~~~
[0m[1mconfig.c:839:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  839 |     if(!devices) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:843:8: [0m[0;1;36mnote: [0mAssuming 'nr_const_devices' is 0[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~
[0m[1mconfig.c:843:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:847:14: [0m[0;1;36mnote: [0mCalling 'parse'[0m
  847 |     (void) ((parse(CONF_FILE,1) |[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:798:8: [0m[0;1;36mnote: [0mAssuming 'fp' is null[0m
  798 |     if(fp) {[0m
      | [0;1;32m       ^~
[0m[1mconfig.c:798:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  798 |     if(fp) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:803:9: [0m[0;1;36mnote: [0m'fp' is non-null[0m
  803 |     if(!fp)[0m
      | [0;1;32m        ^~
[0m[1mconfig.c:803:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  803 |     if(!fp)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:819:5: [0m[0;1;36mnote: [0mCalling 'parse_all'[0m
  819 |     parse_all(privilege);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:792:12: [0m[0;1;36mnote: [0mCalling 'parse_one'[0m
  792 |     while (parse_one(privilege));[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:741:9: [0m[0;1;36mnote: [0m'token' is non-null[0m
  741 |     if(!token)[0m
      | [0;1;32m        ^~~~~
[0m[1mconfig.c:741:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  741 |     if(!token)[0m
      | [0;1;32m    ^
[0m[1mconfig.c:744:30: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  744 |     if((match_token("drive") && ((action = 1)))||[0m
      | [0;1;32m                             ^
[0m[1mconfig.c:745:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  745 |        (match_token("drive+") && ((action = 2))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:746:31: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  746 |        (match_token("+drive") && ((action = 3))) ||[0m
      | [0;1;32m                              ^
[0m[1mconfig.c:747:36: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  747 |        (match_token("clear_drive") && ((action = 4))) ) {[0m
      | [0;1;32m                                   ^
[0m[1mconfig.c:772:8: [0m[0;1;36mnote: [0mAssuming 'token_nr' is not equal to 1[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~
[0m[1mconfig.c:772:22: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  772 |     if(token_nr == 1 && token_length == 1) {[0m
      | [0;1;32m                     ^
[0m[1mconfig.c:777:9: [0m[0;1;36mnote: [0mAssuming 'cur_dev' is < 0[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m        ^~~~~~~~~~~
[0m[1mconfig.c:777:21: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  777 |     if((cur_dev < 0 ||[0m
      | [0;1;32m                    ^
[0m[1mconfig.c:785:59: [0m[0;1;36mnote: [0mPassing null pointer value via 3rd parameter 'base_address'[0m
  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m                                                                 ^
[0m[1mconfig.c:784:8: [0m[0;1;36mnote: [0mCalling 'set_var'[0m
  784 |        set_var(global_switches,[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~
[0m  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:520:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  520 |     for(i=0; i < nr; i++) {[0m
      | [0;1;32m    ^
[0m[1mconfig.c:521:5: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:521:2: [0m[0;1;36mnote: [0mTaking true branch[0m
  521 |         if(match_token(switches[i].name)) {[0m
      | [0;1;32m        ^
[0m[1mconfig.c:528:9: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:528:6: [0m[0;1;36mnote: [0mTaking false branch[0m
  528 |             if(switches[i].type == T_UINT)[0m
      | [0;1;32m            ^
[0m[1mconfig.c:531:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT8[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:531:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  531 |             else if(switches[i].type == T_UINT8)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:534:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_UINT16[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:534:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  534 |             else if(switches[i].type == T_UINT16)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:537:14: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_INT[0m
  537 |             else if(switches[i].type == T_INT)[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:537:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  537 |             else if(switches[i].type == T_INT)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:540:15: [0m[0;1;36mnote: [0mAssuming field 'type' is not equal to T_STRING[0m
  540 |             else if (switches[i].type == T_STRING)[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:540:11: [0m[0;1;36mnote: [0mTaking false branch[0m
  540 |             else if (switches[i].type == T_STRING)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:543:15: [0m[0;1;36mnote: [0mAssuming field 'type' is equal to T_UQSTRING[0m
  543 |             else if (switches[i].type == T_UQSTRING)[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:543:11: [0m[0;1;36mnote: [0mTaking true branch[0m
  543 |             else if (switches[i].type == T_UQSTRING)[0m
      | [0;1;32m                 ^
[0m[1mconfig.c:544:55: [0m[0;1;36mnote: [0mDereference of null pointer[0m
  544 |                 * ((char**)((long)switches[i].address+base_address))=[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
[0m  545 |                     get_unquoted_string();[0m
      | [0;1;32m                    ~~~~~~~~~~~~~~~~~~~~~
[0m[1mconfig.c:579:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  579 |                         return 0;[0m
      | [0;1;32m                        ^       
[0m      | [0;32m                        {       ;} 
[0m[1mconfig.c:581:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  581 |                         break;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mconfig.c:583:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  583 |                         syntax("expected 0 or 1", 0);[0m
      | [0;1;32m                        ^                           
[0m      | [0;32m                        {                           ;} 
[0m[1mconfig.c:599:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  599 |             if(!dev->ssize)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  600 |                 dev->ssize = 2;[0m
      | [0;1;32m                               
[0m[1mconfig.c:601:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  601 |             if(!dev->tracks)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  602 |                 dev->tracks = default_formats[i].tracks;[0m
      | [0;1;32m                                                        
[0m[1mconfig.c:603:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  603 |             if(!dev->heads)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  604 |                 dev->heads = default_formats[i].heads;[0m
      | [0;1;32m                                                      
[0m[1mconfig.c:605:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  605 |             if(!dev->sectors)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  606 |                 dev->sectors = default_formats[i].sectors;[0m
      | [0;1;32m                                                          
[0m[1mconfig.c:607:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  607 |             if(!dev->fat_bits)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  608 |                 dev->fat_bits = default_formats[i].fat_bits;[0m
      | [0;1;32m                                                            
[0m[1mconfig.c:641:5: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  641 |     strncpy(buffer, pipechar+1, MAX_LINE_LEN);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mconfig.c:641:5: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  641 |     strncpy(buffer, pipechar+1, MAX_LINE_LEN);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mconfig.c:655:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  655 |         fprintf(stderr, "Bad number %s\n", oarg);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:655:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  655 |         fprintf(stderr, "Bad number %s\n", oarg);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:659:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  659 |         fprintf(stderr, "Bad number %s for -%c (%s)\n", oarg,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:659:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  659 |         fprintf(stderr, "Bad number %s for -%c (%s)\n", oarg,[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:667:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  667 |         fprintf(stderr, "Number of %s %d too big\n", comment, in);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:667:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  667 |         fprintf(stderr, "Number of %s %d too big\n", comment, in);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:671:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  671 |         fprintf(stderr, "Number of %s %d negative\n", comment, in);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:671:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  671 |         fprintf(stderr, "Number of %s %d negative\n", comment, in);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:693:13: [0m[0;1;35mwarning: [0m[1mCall to function 'sscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  693 |     items = sscanf(token,"%c %s %i %i %i %i %li",[0m
      | [0;1;32m            ^~~~~~
[0m[1mconfig.c:693:13: [0m[0;1;36mnote: [0mCall to function 'sscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11[0m
  693 |     items = sscanf(token,"%c %s %i %i %i %i %li",[0m
      | [0;1;32m            ^~~~~~
[0m[1mconfig.c:702:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  702 |             devices[cur_dev].fat_bits = 0;[0m
      | [0;1;32m            ^                            
[0m      | [0;32m            {                            ;} 
[0m[1mconfig.c:705:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  705 |             devices[cur_dev].sectors = 0;[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  706 |             devices[cur_dev].heads = 0;[0m
  707 |             devices[cur_dev].tracks = 0;[0m
      | [0;1;32m                                       
[0m      | [0;32m                                       ;} 
[0m[1mconfig.c:710:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  710 |             devices[cur_dev].offset = 0;[0m
      | [0;1;32m            ^                          
[0m      | [0;32m            {                          ;} 
[0m[1mconfig.c:713:6: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  713 |             break;[0m
      | [0;1;32m            ^    
[0m      | [0;32m            {    ;} 
[0m[1mconfig.c:741:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  741 |     if(!token)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  742 |         return 0;[0m
      | [0;1;32m                 
[0m[1mconfig.c:752:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  752 |         if(token_length != 1)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  753 |             syntax("drive letter expected", 0);[0m
      | [0;1;32m                                               
[0m[1mconfig.c:755:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  755 |         if(action==1 || action==4)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  756 |             /* replace existing drive */[0m
  757 |             purge(token[0], file_nr);[0m
      | [0;1;32m                                     
[0m[1mconfig.c:758:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  758 |         if(action==4)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  759 |             return 1;[0m
      | [0;1;32m                     
[0m[1mconfig.c:760:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  760 |         if(action==3)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  761 |             prepend();[0m
  762 |         else[0m
      | [0;32m        } 
[0m[1mconfig.c:762:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  762 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  763 |             append();[0m
      | [0;1;32m                     
[0m[1mconfig.c:764:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  764 |         memset((char*)(devices+cur_dev), 0, sizeof(*devices));[0m
      | [0;1;32m        ^~~~~~
[0m[1mconfig.c:764:2: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  764 |         memset((char*)(devices+cur_dev), 0, sizeof(*devices));[0m
      | [0;1;32m        ^~~~~~
[0m[1mconfig.c:785:62: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  785 |                sizeof(global_switches)/sizeof(*global_switches), 0))[0m
      | [0;1;32m                                                                    ^
[0m      | [0;32m                                                                     {
[0m  786 |         syntax("unrecognized keyword", 1);[0m
      | [0;1;32m                                          
[0m[1mconfig.c:792:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  792 |     while (parse_one(privilege));[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m[1mconfig.c:799:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  799 |         fprintf(stderr, "File descriptor already set!\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:799:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  799 |         fprintf(stderr, "File descriptor already set!\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:803:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  803 |     if(!fp)[0m
      | [0;1;32m           ^
[0m      | [0;32m            {
[0m  804 |         return 0;[0m
      | [0;1;32m                 
[0m[1mconfig.c:843:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  843 |     if(nr_const_devices)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  844 |         memcpy(devices, const_devices,[0m
  845 |                nr_const_devices*sizeof(struct device));[0m
      | [0;1;32m                                                       
[0m[1mconfig.c:844:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  844 |         memcpy(devices, const_devices,[0m
      | [0;1;32m        ^~~~~~
[0m[1mconfig.c:844:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  844 |         memcpy(devices, const_devices,[0m
      | [0;1;32m        ^~~~~~
[0m[1mconfig.c:857:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  857 |         strncpy(conf_file, homedir, MAXPATHLEN );[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:857:2: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  857 |         strncpy(conf_file, homedir, MAXPATHLEN );[0m
      | [0;1;32m        ^~~~~~~
[0m[1mconfig.c:859:2: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  859 |         strcat( conf_file, CFG_FILE1);[0m
      | [0;1;32m        ^~~~~~
[0m[1mconfig.c:859:2: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
  859 |         strcat( conf_file, CFG_FILE1);[0m
      | [0;1;32m        ^~~~~~
[0m[1mconfig.c:862:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  862 |     memset((char *)&devices[cur_devs],0,sizeof(struct device));[0m
      | [0;1;32m    ^~~~~~
[0m[1mconfig.c:862:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  862 |     memset((char *)&devices[cur_devs],0,sizeof(struct device));[0m
      | [0;1;32m    ^~~~~~
[0m[1mconfig.c:865:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  865 |     if(envConfFile)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  866 |         parse(envConfFile,0);[0m
      | [0;1;32m                             
[0m[1mconfig.c:870:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  870 |     if(mtools_skip_check)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  871 |         mtools_fat_compatibility=1;[0m
      | [0;1;32m                                   
[0m[1mconfig.c:886:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  886 |         if(drive && drive != dev->drive)[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  887 |             continue;[0m
      | [0;1;32m                     
[0m[1mconfig.c:891:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  891 |         if(dev->cfg_filename)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  892 |             printf("defined in %s\n", dev->cfg_filename);[0m
  893 |         else[0m
      | [0;32m        } 
[0m[1mconfig.c:893:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  893 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  894 |             printf("builtin\n");[0m
      | [0;1;32m                                
[0m[1mconfig.c:902:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  902 |         if(dev->misc_flags)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  903 |             printf("\t");[0m
      | [0;1;32m                         
[0m[1mconfig.c:905:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  905 |         if(DO_SWAP(dev))[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  906 |             printf("swap ");[0m
      | [0;1;32m                            
[0m[1mconfig.c:907:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  907 |         if(IS_SCSI(dev))[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  908 |             printf("scsi ");[0m
      | [0;1;32m                            
[0m[1mconfig.c:909:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  909 |         if(IS_PRIVILEGED(dev))[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  910 |             printf("privileged");[0m
      | [0;1;32m                                 
[0m[1mconfig.c:911:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  911 |         if(IS_MFORMAT_ONLY(dev))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  912 |             printf("mformat_only ");[0m
      | [0;1;32m                                    
[0m[1mconfig.c:913:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  913 |         if(SHOULD_USE_VOLD(dev))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  914 |             printf("vold ");[0m
      | [0;1;32m                            
[0m[1mconfig.c:916:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  916 |         if(SHOULD_USE_XDF(dev))[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  917 |             printf("use_xdf ");[0m
      | [0;1;32m                               
[0m[1mconfig.c:919:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  919 |         if(dev->misc_flags)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  920 |             printf("\n");[0m
      | [0;1;32m                         
[0m[1mconfig.c:922:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  922 |         if(dev->mode)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  923 |             printf("\t");[0m
      | [0;1;32m                         
[0m[1mconfig.c:925:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  925 |         if(dev->mode & O_SYNC)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  926 |             printf("sync ");[0m
      | [0;1;32m                            
[0m[1mconfig.c:929:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  929 |         if((dev->mode & O_NDELAY))[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  930 |             printf("nodelay ");[0m
      | [0;1;32m                               
[0m[1mconfig.c:933:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  933 |         if((dev->mode & O_EXCL))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  934 |             printf("exclusive ");[0m
      | [0;1;32m                                 
[0m[1mconfig.c:936:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  936 |         if(dev->mode)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  937 |             printf("\n");[0m
      | [0;1;32m                         
[0m[1mconfig.c:939:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  939 |         if(dev->precmd)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  940 |             printf("\tprecmd=%s\n", dev->precmd);[0m
      | [0;1;32m                                                 
[0m109 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[72/72][216.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/tidy-fixes/tmp1fr5_s6c.yaml -p=/itch/common/crepos/cu-to-rtu/c/mtools-4.0.43 /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/vfat.c
[1mvfat.c:82:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   82 |         for(p=name; *p ; p++)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m   83 |                 if (strchr(illegals, *p)) {[0m
   84 |                         *p = '_';[0m
   85 |                         bump = 0;[0m
   86 |                 }[0m
      | [0;1;32m                 
[0m[1mvfat.c:98:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   98 |                 } else[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   99 |                         tildapos = -1; /* sequence number interrupted */[0m
      | [0;1;32m                                                                        
[0m[1mvfat.c:112:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |                 if(bump)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  113 |                         seqnum++;[0m
      | [0;1;32m                                 
[0m[1mvfat.c:121:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  121 |                     if(dotpos >= limit)[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  122 |                         tildapos--;[0m
  123 |                     else[0m
      | [0;32m                    } 
[0m[1mvfat.c:123:11: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  123 |                     else[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  124 |                         dotpos++;[0m
      | [0;1;32m                                 
[0m[1mvfat.c:129:64: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  129 |         if((bump && seqnum == 1) || seqnum > 1 || mtools_numeric_tail)[0m
      | [0;1;32m                                                                      ^
[0m      | [0;32m                                                                       {
[0m  130 |                 sprintf(name+tildapos,"%c%d",tilda, seqnum);[0m
      | [0;1;32m                                                            
[0m[1mvfat.c:130:3: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  130 |                 sprintf(name+tildapos,"%c%d",tilda, seqnum);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:130:3: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  130 |                 sprintf(name+tildapos,"%c%d",tilda, seqnum);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:131:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  131 |         if(dot)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  132 |             name[dotpos]=tmp;[0m
      | [0;1;32m                             
[0m[1mvfat.c:162:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  162 |                 if (*end_p)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  163 |                         /* Fill with 0xff */[0m
  164 |                         out[0] = out[1] = 0xff;[0m
  165 |                 else {[0m
      | [0;32m                } 
[0m[1mvfat.c:237:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  237 |         for (sum=0; name<end; ++name)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  238 |                 sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1)[0m
  239 |                         + (uint8_t) *name;[0m
      | [0;1;32m                                          
[0m[1mvfat.c:260:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  260 |         memcpy(dn.base, (char *)dir->name, 8);[0m
      | [0;1;32m        ^~~~~~
[0m[1mvfat.c:260:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  260 |         memcpy(dn.base, (char *)dir->name, 8);[0m
      | [0;1;32m        ^~~~~~
[0m[1mvfat.c:261:2: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  261 |         memcpy(dn.ext, (char *)dir->ext, 3);[0m
      | [0;1;32m        ^~~~~~
[0m[1mvfat.c:261:2: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  261 |         memcpy(dn.ext, (char *)dir->ext, 3);[0m
      | [0;1;32m        ^~~~~~
[0m[1mvfat.c:263:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  263 |         if (v->sum != sum_shortname(&dn))[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  264 |                 return;[0m
      | [0;1;32m                       
[0m[1mvfat.c:266:71: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  266 |         if( (v->status & ((1<<v->subentries) - 1)) != (1<<v->subentries) - 1)[0m
      | [0;1;32m                                                                             ^
[0m      | [0;32m                                                                              {
[0m  267 |                 return; /* missing entries */[0m
      | [0;1;32m                                             
[0m[1mvfat.c:315:4: [0m[0;1;35mwarning: [0m[1mValue stored to 'c' is never read [clang-analyzer-deadcode.DeadStores][0m
  315 |                         c += unicode_write(c, vse->text3, VSE3SIZE, &end);[0m
      | [0;1;32m                        ^    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:315:4: [0m[0;1;36mnote: [0mValue stored to 'c' is never read[0m
  315 |                         c += unicode_write(c, vse->text3, VSE3SIZE, &end);[0m
      | [0;1;32m                        ^    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:333:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  333 |                 fprintf(stderr, "Out of memory error\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:333:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  333 |                 fprintf(stderr, "Out of memory error\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:349:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  349 |                 fprintf(stderr, "Attempt to write root directory pointer\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:349:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  349 |                 fprintf(stderr, "Attempt to write root directory pointer\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:355:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  355 |                 fprintf(stderr, "Out of memory error in dir_write\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:355:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  355 |                 fprintf(stderr, "Out of memory error in dir_write\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:386:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  386 |                 fprintf(stderr, "parse_vses: invalid VSE ID %d at %d.\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:386:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  386 |                 fprintf(stderr, "parse_vses: invalid VSE ID %d at %d.\n",[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:406:12: [0m[0;1;35mwarning: [0m[1mThe left operand of '!=' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult][0m
  406 |         if(v->sum != vse->sum) {[0m
      | [0;1;32m                  ^
[0m[1mvfat.c:791:18: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  791 |         ignore_match = (ignore_entry == -2 );[0m
      | [0;1;32m                        ^~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:800:5: [0m[0;1;36mnote: [0mAssuming 'cache' is non-null[0m
  800 |         if(!cache) {[0m
      | [0;1;32m           ^~~~~~
[0m[1mvfat.c:800:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  800 |         if(!cache) {[0m
      | [0;1;32m        ^
[0m[1mvfat.c:805:6: [0m[0;1;36mnote: [0m'ignore_match' is 1[0m
  805 |         if(!ignore_match)[0m
      | [0;1;32m            ^~~~~~~~~~~~
[0m[1mvfat.c:805:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  805 |         if(!ignore_match)[0m
      | [0;1;32m        ^
[0m[1mvfat.c:809:5: [0m[0;1;36mnote: [0mAssuming 'source_entry' is >= 0[0m
  809 |         if(source_entry >= 0 ||[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~
[0m[1mvfat.c:809:23: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
  809 |         if(source_entry >= 0 ||[0m
      | [0;1;32m                             ^
[0m[1mvfat.c:823:9: [0m[0;1;36mnote: [0mCalling 'vfat_lookup_loop_for_insert'[0m
  823 |                 dce = vfat_lookup_loop_for_insert(cp, &entry, pos, cache);[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:718:5: [0m[0;1;36mnote: [0mAssuming 'dce' is null[0m
  718 |         if(dce && dce->type != DCET_END) {[0m
      | [0;1;32m           ^~~
[0m[1mvfat.c:718:9: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  718 |         if(dce && dce->type != DCET_END) {[0m
      | [0;1;32m               ^
[0m[1mvfat.c:722:9: [0m[0;1;36mnote: [0mCalling 'vfat_lookup_loop_common'[0m
  722 |                 dce = vfat_lookup_loop_common(cp,[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  723 |                                               direntry, cache, 1, &io_error);[0m
      | [0;1;32m                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:461:2: [0m[0;1;36mnote: [0mCalling 'clear_vfat'[0m
  461 |         clear_vfat(&vfat);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~
[0m[1mvfat.c:212:1: [0m[0;1;36mnote: [0mReturning without writing to 'v->sum'[0m
  212 | }[0m
      | [0;1;32m^
[0m[1mvfat.c:461:2: [0m[0;1;36mnote: [0mReturning from 'clear_vfat'[0m
  461 |         clear_vfat(&vfat);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~
[0m[1mvfat.c:462:2: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  462 |         while(1) {[0m
      | [0;1;32m        ^
[0m[1mvfat.c:464:6: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  464 |                 if(!dir_read(direntry, &error)){[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:464:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  464 |                 if(!dir_read(direntry, &error)){[0m
      | [0;1;32m                ^
[0m[1mvfat.c:475:7: [0m[0;1;36mnote: [0m'endmarkSeen' is 0[0m
  475 |                 if (endmarkSeen || direntry->dir.name[0] == ENDMARK){[0m
      | [0;1;32m                    ^~~~~~~~~~~
[0m[1mvfat.c:475:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
[1mvfat.c:475:22: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  475 |                 if (endmarkSeen || direntry->dir.name[0] == ENDMARK){[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:475:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  475 |                 if (endmarkSeen || direntry->dir.name[0] == ENDMARK){[0m
      | [0;1;32m                ^
[0m[1mvfat.c:483:6: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  483 |                 if(direntry->dir.name[0] != DELMARK &&[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:483:6: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mvfat.c:484:6: [0m[0;1;36mnote: [0mAssuming field 'attr' is equal to 15[0m
  484 |                    direntry->dir.attr == 0x0f)[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:483:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  483 |                 if(direntry->dir.name[0] != DELMARK &&[0m
      | [0;1;32m                ^
[0m[1mvfat.c:485:4: [0m[0;1;36mnote: [0mCalling 'parse_vses'[0m
  485 |                         parse_vses(direntry, &vfat);[0m
      | [0;1;32m                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:385:6: [0m[0;1;36mnote: [0mAssuming 'id' is <= MAX_VFAT_SUBENTRIES[0m
  385 |         if (id > MAX_VFAT_SUBENTRIES) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mvfat.c:385:2: [0m[0;1;36mnote: [0mTaking false branch[0m
  385 |         if (id > MAX_VFAT_SUBENTRIES) {[0m
      | [0;1;32m        ^
[0m[1mvfat.c:406:12: [0m[0;1;36mnote: [0mThe left operand of '!=' is a garbage value[0m
  406 |         if(v->sum != vse->sum) {[0m
      | [0;1;32m           ~~~~~~ ^
[0m[1mvfat.c:418:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  418 |         if(last_flag)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  419 |                 v->subentries = id;[0m
      | [0;1;32m                                   
[0m[1mvfat.c:438:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  438 |         if (last_flag)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  439 |                 *c = '\0';      /* Null terminate long name */[0m
      | [0;1;32m                                                              
[0m[1mvfat.c:484:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  484 |                    direntry->dir.attr == 0x0f)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  485 |                         parse_vses(direntry, &vfat);[0m
  486 |                 else[0m
      | [0;32m                } 
[0m[1mvfat.c:486:7: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  486 |                 else[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  487 |                         /* the main entry */[0m
  488 |                         break;[0m
      | [0;1;32m                              
[0m[1mvfat.c:502:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  502 |         if(!vfat.present)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  503 |                 vfat.subentries = 0;[0m
      | [0;1;32m                                    
[0m[1mvfat.c:520:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  520 |         } else[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  521 |                 unix_name(cp,[0m
  522 |                           direntry->dir.name,[0m
  523 |                           direntry->dir.ext,[0m
  524 |                           direntry->dir.Case,[0m
  525 |                           newfile);[0m
      | [0;1;32m                                   
[0m[1mvfat.c:527:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  527 |         if(vfat.present)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  528 |                 longname = vfat.name;[0m
  529 |         else[0m
      | [0;32m        } 
[0m[1mvfat.c:529:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  529 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  530 |                 longname = 0;[0m
      | [0;1;32m                             
[0m[1mvfat.c:578:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  578 |                         return RES_NOMATCH;[0m
      | [0;1;32m                        ^                 
[0m      | [0;32m                        {                 ;} 
[0m[1mvfat.c:580:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  580 |                         return RES_END;[0m
      | [0;1;32m                        ^             
[0m      | [0;32m                        {             ;} 
[0m[1mvfat.c:582:4: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  582 |                         break;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mvfat.c:594:59: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  594 |         if((direntry->dir.attr & 0x8) && !(flags & ACCEPT_LABEL))[0m
      | [0;1;32m                                                                 ^
[0m      | [0;32m                                                                  {
[0m  595 |                 return RES_NOMATCH;[0m
      | [0;1;32m                                   
[0m[1mvfat.c:613:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  613 |                         fprintf(stderr, "Skipping \"%s\", is a directory\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mvfat.c:613:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  613 |                         fprintf(stderr, "Skipping \"%s\", is a directory\n",[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mvfat.c:624:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  624 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mvfat.c:624:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  624 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mvfat.c:661:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  661 |         if(filename != NULL)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  662 |                 length = native_to_wchar(filename, wfilename, MAX_VNAMELEN,[0m
  663 |                                          filename+length, 0);[0m
  664 |         else[0m
      | [0;32m        } 
[0m[1mvfat.c:664:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  664 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  665 |                 length = 0;[0m
      | [0;1;32m                           
[0m[1mvfat.c:667:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  667 |         if (isNotFound(direntry))[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  668 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mvfat.c:672:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  672 |                 fprintf(stderr, "Out of memory error in vfat_lookup [0]\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:672:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  672 |                 fprintf(stderr, "Out of memory error in vfat_lookup [0]\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:679:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  679 |                         if (io_error)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  680 |                                 return -2;[0m
      | [0;1;32m                                          
[0m[1mvfat.c:681:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  681 |                         fprintf(stderr, "Out of memory error in vfat_lookup\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mvfat.c:681:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  681 |                         fprintf(stderr, "Out of memory error in vfat_lookup\n");[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mvfat.c:691:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  691 |                         if(dce->longName)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  692 |                                 wchar_to_native(dce->longName, longname,[0m
  693 |                                                 MAX_VNAMELEN, longname_size);[0m
  694 |                         else[0m
      | [0;32m                        } 
[0m[1mvfat.c:694:8: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  694 |                         else[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  695 |                                 *longname ='\0';[0m
      | [0;1;32m                                                
[0m[1mvfat.c:697:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  697 |                 if(shortname)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  698 |                         wchar_to_native(dce->shortName, shortname,[0m
  699 |                                         12, shortname_size);[0m
      | [0;1;32m                                                            
[0m[1mvfat.c:728:4: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  728 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mvfat.c:728:4: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  728 |                         fprintf(stderr,[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mvfat.c:738:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  738 |         if(ssp->got_slots)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  739 |                 return;[0m
      | [0;1;32m                       
[0m[1mvfat.c:758:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  758 |         if (use_longname & 1)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  759 |                 s->size_needed = (unsigned)[0m
  760 |                         (1 + (wcslen(longname) + VSE_NAMELEN - 1)/VSE_NAMELEN);[0m
  761 |         else[0m
      | [0;32m        } 
[0m[1mvfat.c:761:6: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  761 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  762 |                 s->size_needed = 1;[0m
      | [0;1;32m                                   
[0m[1mvfat.c:801:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  801 |                 fprintf(stderr, "Out of memory error in lookupForInsert\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:801:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  801 |                 fprintf(stderr, "Out of memory error in lookupForInsert\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:805:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  805 |         if(!ignore_match)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  806 |                 unix_name(cp, dosname->base, dosname->ext, 0, shortName);[0m
      | [0;1;32m                                                                         
[0m[1mvfat.c:819:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  819 |                 fprintf(stderr, "Out of memory error in vfat_looup [0]\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:819:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  819 |                 fprintf(stderr, "Out of memory error in vfat_looup [0]\n");[0m
      | [0;1;32m                ^~~~~~~
[0m[1mvfat.c:826:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  826 |                                 accountFreeSlots(ssp, dce);[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m  827 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mvfat.c:829:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  829 |                                 if(!(dce->dir.attr & 0x8) &&[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m[1mvfat.c:830:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  830 |                                    (signed int)dce->endSlot-1 == source_entry)[0m
      | [0;1;32m                                                                              ^
[0m      | [0;32m                                                                               {
[0m  831 |                                    accountFreeSlots(ssp, dce);[0m
      | [0;1;32m                                                              
[0m[1mvfat.c:836:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  836 |                                     ((signed int)dce->endSlot-1==ignore_entry))[0m
      | [0;1;32m                                                                               ^
[0m      | [0;32m                                                                                {
[0m  837 |                                         break;[0m
      | [0;1;32m                                              
[0m[1mvfat.c:856:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  856 |                                     !wcscasecmp(shortName, dce->shortName))[0m
      | [0;1;32m                                                                           ^
[0m      | [0;32m                                                                            {
[0m  857 |                                         ssp->shortmatch =[0m
  858 |                                                 (int) (dce->endSlot - 1);[0m
      | [0;1;32m                                                                         
[0m[1mvfat.c:861:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  861 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mvfat.c:865:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  865 |         if (ssp->shortmatch > -1)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  866 |                 return 1;[0m
      | [0;1;32m                         
[0m[1mvfat.c:868:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  868 |         if (ssp->got_slots)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  869 |                 return 6;       /* Success */[0m
      | [0;1;32m                                             
[0m[1mvfat.c:872:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  872 |         if(!isRootDir(Dir))[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  873 |                 return 5;       /* OK, try to grow the directory */[0m
      | [0;1;32m                                                                   
[0m[1mvfat.c:875:2: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  875 |         fprintf(stderr, "No directory slots\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mvfat.c:875:2: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  875 |         fprintf(stderr, "No directory slots\n");[0m
      | [0;1;32m        ^~~~~~~
[0m62 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

The new insertion has the same insert location as an existing replacement.
New replacement: /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mmount.c: 1996:+0:";} "
Existing replacement: /itch/common/crepos/cu-to-rtu/c/mtools-4.0.43/mmount.c: 1996:+0:"
}"


Process exited with return code 1
