Command: /itch/common/crepos/tcc-scripts/tidy-braces.sh
Directory: /itch/common/crepos/cu-to-rtu/c/binn-3.0
----------------------------------------

Enabled checks:
    clang-analyzer-apiModeling.Errno
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.TrustReturnsNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.BitwiseShift
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DereferenceModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.NewArraySize
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.ArrayDelete
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PlacementNew
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtrModeling
    clang-analyzer-cplusplus.StringChecker
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.core.EnumCastOutOfRange
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-optin.taint.GenericTaint
    clang-analyzer-optin.taint.TaintPropagation
    clang-analyzer-optin.taint.TaintedAlloc
    clang-analyzer-optin.taint.TaintedDiv
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.ArrayBound
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.MmapWriteExec
    clang-analyzer-security.PointerSub
    clang-analyzer-security.PutenvStackArray
    clang-analyzer-security.SetgidSetuidOrder
    clang-analyzer-security.cert.env.InvalidPtr
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.BlockInCriticalSection
    clang-analyzer-unix.Chroot
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Errno
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.StdCLibraryFunctions
    clang-analyzer-unix.Stream
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NotNullTerminated
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    clang-analyzer-webkit.NoUncountedMemberChecker
    clang-analyzer-webkit.RefCntblBaseVirtualDtor
    clang-analyzer-webkit.UncountedLambdaCapturesChecker
    readability-braces-around-statements

Running clang-tidy for 1 files out of 1 in compilation database ...
[1/1][276.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/binn-3.0/tidy-fixes/tmp7p2muoxc.yaml -p=/itch/common/crepos/cu-to-rtu/c/binn-3.0 /itch/common/crepos/cu-to-rtu/c/binn-3.0/src/binn.c
[1msrc/binn.c:171:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  171 |   if (malloc_fn == 0) malloc_fn = &malloc;[0m
      | [0;1;32m                     ^                    
[0m      | [0;32m                      {
[0m[1msrc/binn.c:172:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  172 |   if (realloc_fn == 0) realloc_fn = &realloc;[0m
      | [0;1;32m                      ^                      
[0m      | [0;32m                       {
[0m[1msrc/binn.c:173:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  173 |   if (free_fn == 0) free_fn = &free;[0m
      | [0;1;32m                   ^                
[0m      | [0;32m                    {
[0m[1msrc/binn.c:189:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  189 |   if (src == NULL || size <= 0) return NULL;[0m
      | [0;1;32m                               ^            
[0m      | [0;32m                                {
[0m[1msrc/binn.c:191:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  191 |   if (dest == NULL) return NULL;[0m
      | [0;1;32m                   ^            
[0m      | [0;32m                    {
[0m[1msrc/binn.c:192:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  192 |   memcpy(dest, src, size);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:192:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  192 |   memcpy(dest, src, size);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:201:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  201 |   if (str == NULL) return 0;[0m
      | [0;1;32m                  ^         
[0m      | [0;32m                   {
[0m[1msrc/binn.c:209:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  209 |   if (data_type_index < 0) return -1;[0m
      | [0;1;32m                          ^          
[0m      | [0;32m                           {
[0m[1msrc/binn.c:210:78: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  210 |   if ((storage_type < BINN_STORAGE_MIN) || (storage_type > BINN_STORAGE_MAX)) return -1;[0m
      | [0;1;32m                                                                             ^          
[0m      | [0;32m                                                                              {
[0m[1msrc/binn.c:211:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  211 |   if (data_type_index < 16)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  212 |     return storage_type | data_type_index;[0m
  213 |   else if (data_type_index < 4096) {[0m
      | [0;32m  } 
[0m[1msrc/binn.c:218:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  218 |   } else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m  219 |     return -1;[0m
      | [0;1;32m              
[0m[1msrc/binn.c:252:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  252 |   if (pstorage_type) *pstorage_type = storage_type;[0m
      | [0;1;32m                    ^                              
[0m      | [0;32m                     {
[0m[1msrc/binn.c:253:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  253 |   if (pextra_type) *pextra_type = extra_type;[0m
      | [0;1;32m                  ^                          
[0m      | [0;32m                   {
[0m[1msrc/binn.c:270:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  270 |       goto loc_exit;[0m
      | [0;1;32m      ^            
[0m      | [0;32m      {            ;} 
[0m[1msrc/binn.c:273:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  273 |   if ((item == NULL) || (size < 0)) goto loc_exit;[0m
      | [0;1;32m                                   ^              
[0m      | [0;32m                                    {
[0m[1msrc/binn.c:275:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  275 |     if (pointer) goto loc_exit;[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  276 |     else size = 0;[0m
      | [0;32m    } 
[0m[1msrc/binn.c:276:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  276 |     else size = 0;[0m
      | [0;1;32m        ^         
[0m      | [0;32m         {
[0m[1msrc/binn.c:279:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  279 |   memset(item, 0, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:279:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  279 |   memset(item, 0, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:287:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  287 |     if (size == 0) size = CHUNK_SIZE;[0m
      | [0;1;32m                  ^                  
[0m      | [0;32m                   {
[0m[1msrc/binn.c:289:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  289 |     if (pointer == 0) return INVALID_BINN;[0m
      | [0;1;32m                     ^                    
[0m      | [0;32m                      {
[0m[1msrc/binn.c:376:71: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  376 |   if (!IsValidBinnHeader(old_ptr, &type, &count, &size, &header_size)) return NULL;[0m
      | [0;1;32m                                                                      ^            
[0m      | [0;32m                                                                       {
[0m[1msrc/binn.c:382:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  382 |     memcpy(dest, old_ptr + header_size, size - header_size);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/binn.c:382:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  382 |     memcpy(dest, old_ptr + header_size, size - header_size);[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/binn.c:394:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  394 |   if ((data == NULL) || (value == NULL)) return FALSE;[0m
      | [0;1;32m                                        ^             
[0m      | [0;32m                                         {
[0m[1msrc/binn.c:395:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  395 |   memset(value, 0, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:395:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  395 |   memset(value, 0, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:400:79: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  400 |   if (binn_is_valid(data, &value->type, &value->count, &value->size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                              ^             
[0m      | [0;32m                                                                               {
[0m[1msrc/binn.c:427:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  427 |   if (ptr == NULL) return 0;[0m
      | [0;1;32m                  ^         
[0m      | [0;32m                   {
[0m[1msrc/binn.c:431:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  431 |     return BINN_STRUCT;[0m
      | [0;1;32m    ^                 
[0m      | [0;32m    {                 ;} 
[0m[1msrc/binn.c:433:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  433 |     return BINN_BUFFER;[0m
      | [0;1;32m    ^                 
[0m      | [0;32m    {                 ;} 
[0m[1msrc/binn.c:442:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  442 |   if (ptr == NULL) return FALSE;[0m
      | [0;1;32m                  ^             
[0m      | [0;32m                   {
[0m[1msrc/binn.c:473:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  473 |     if (item->pre_allocated) return FALSE;[0m
      | [0;1;32m                            ^             
[0m      | [0;32m                             {
[0m[1msrc/binn.c:476:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  476 |     if (ptr == NULL) return FALSE;[0m
      | [0;1;32m                    ^             
[0m      | [0;32m                     {
[0m[1msrc/binn.c:516:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  516 |   if (p > plimit) return 0;[0m
      | [0;1;32m                 ^         
[0m      | [0;32m                  {
[0m[1msrc/binn.c:520:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  520 |   if (byte & BINN_STORAGE_HAS_MORE) p++;[0m
      | [0;1;32m                                   ^    
[0m      | [0;32m                                    {
[0m[1msrc/binn.c:525:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  525 |     break;[0m
      | [0;1;32m    ^    
[0m      | [0;32m    {    ;} 
[0m[1msrc/binn.c:527:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  527 |     p ++;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  528 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:530:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  530 |     p += 2;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  531 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:533:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  533 |     p += 4;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  534 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:536:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  536 |     p += 8;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  537 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:540:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  540 |     if (p > plimit) return 0;[0m
      | [0;1;32m                   ^         
[0m      | [0;32m                    {
[0m[1msrc/binn.c:541:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  541 |     DataSize = *((unsigned char*)p);[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  542 |     if (DataSize & 0x80) {[0m
  543 |       if (p + sizeof(int) - 1 > plimit) return 0;[0m
  544 |       copy_be32((u32*)&DataSize, (u32*)p);[0m
  545 |       DataSize &= 0x7FFFFFFF;[0m
  546 |       p+=4;[0m
  547 |     } else {[0m
  548 |       p++;[0m
  549 |     }[0m
  550 |     p += DataSize;[0m
  551 |     if (storage_type == BINN_STORAGE_STRING) {[0m
  552 |       p++;  // null terminator.[0m
  553 |     }[0m
  554 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:543:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  543 |       if (p + sizeof(int) - 1 > plimit) return 0;[0m
      | [0;1;32m                                       ^         
[0m      | [0;32m                                        {
[0m[1msrc/binn.c:556:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  556 |     if (p > plimit) return 0;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  557 |     DataSize = *((unsigned char*)p);[0m
  558 |     if (DataSize & 0x80) {[0m
  559 |       if (p + sizeof(int) - 1 > plimit) return 0;[0m
  560 |       copy_be32((u32*)&DataSize, (u32*)p);[0m
  561 |       DataSize &= 0x7FFFFFFF;[0m
  562 |     }[0m
  563 |     DataSize--;  // remove the type byte already added before[0m
  564 |     p += DataSize;[0m
  565 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:556:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  556 |     if (p > plimit) return 0;[0m
      | [0;1;32m                   ^         
[0m      | [0;32m                    {
[0m[1msrc/binn.c:559:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  559 |       if (p + sizeof(int) - 1 > plimit) return 0;[0m
      | [0;1;32m                                       ^         
[0m      | [0;32m                                        {
[0m[1msrc/binn.c:567:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  567 |     return 0;[0m
      | [0;1;32m    ^       
[0m      | [0;32m    {       ;} 
[0m[1msrc/binn.c:570:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  570 |   if (p > plimit) return 0;[0m
      | [0;1;32m                 ^         
[0m      | [0;32m                  {
[0m[1msrc/binn.c:634:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  634 |   if (sign) id = -id;[0m
      | [0;1;32m           ^         
[0m      | [0;32m            {
[0m[1msrc/binn.c:654:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  654 |     if (p > plimit) break;[0m
      | [0;1;32m                   ^      
[0m      | [0;32m                    {
[0m[1msrc/binn.c:656:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  656 |     if (int32 == id) return p;[0m
      | [0;1;32m                    ^         
[0m      | [0;32m                     {
[0m[1msrc/binn.c:659:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  659 |     if ((p == 0) || (p < base)) break;[0m
      | [0;1;32m                               ^      
[0m      | [0;32m                                {
[0m[1msrc/binn.c:682:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  682 |     if (p > plimit) break;[0m
      | [0;1;32m                   ^      
[0m      | [0;32m                    {
[0m[1msrc/binn.c:692:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  692 |       if (p > plimit) break;[0m
      | [0;1;32m                     ^      
[0m      | [0;32m                      {
[0m[1msrc/binn.c:698:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  698 |     if ((p == 0) || (p < base)) break;[0m
      | [0;1;32m                               ^      
[0m      | [0;32m                                {
[0m[1msrc/binn.c:713:80: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  713 |   if ((item == NULL) || (item->type != BINN_LIST) || (item->writable == FALSE)) return FALSE;[0m
      | [0;1;32m                                                                               ^             
[0m      | [0;32m                                                                                {
[0m[1msrc/binn.c:717:51: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  717 |   if (AddValue(item, type, pvalue, size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                  ^             
[0m      | [0;32m                                                   {
[0m[1msrc/binn.c:731:82: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  731 |   if ((item == NULL) || (item->type != BINN_OBJECT) || (item->writable == FALSE)) return FALSE;[0m
      | [0;1;32m                                                                                 ^             
[0m      | [0;32m                                                                                  {
[0m[1msrc/binn.c:733:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  733 |   if (key == NULL) return FALSE;[0m
      | [0;1;32m                  ^             
[0m      | [0;32m                   {
[0m[1msrc/binn.c:735:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  735 |   if (int32 > 255) return FALSE;[0m
      | [0;1;32m                  ^             
[0m      | [0;32m                   {
[0m[1msrc/binn.c:739:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  739 |   if (p) return FALSE;[0m
      | [0;1;32m        ^             
[0m      | [0;32m         {
[0m[1msrc/binn.c:743:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  743 |   if (CheckAllocation(item, 1 + int32) == FALSE) return FALSE;  // bytes used for the key size and the key itself.[0m
      | [0;1;32m                                                ^                                                                 
[0m      | [0;32m                                                 {
[0m[1msrc/binn.c:749:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  749 |   memcpy(p, key, int32);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:749:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  749 |   memcpy(p, key, int32);[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:770:79: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  770 |   if ((item == NULL) || (item->type != BINN_MAP) || (item->writable == FALSE)) return FALSE;[0m
      | [0;1;32m                                                                              ^             
[0m      | [0;32m                                                                               {
[0m[1msrc/binn.c:774:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  774 |   if (p) return FALSE;[0m
      | [0;1;32m        ^             
[0m      | [0;32m         {
[0m[1msrc/binn.c:778:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  778 |   if (CheckAllocation(item, 5) == FALSE) return FALSE;  // max 5 bytes used for the id.[0m
      | [0;1;32m                                        ^                                              
[0m      | [0;32m                                         {
[0m[1msrc/binn.c:783:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  783 |   if (sign) id = -id;[0m
      | [0;1;32m           ^         
[0m      | [0;32m            {
[0m[1msrc/binn.c:801:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  801 |     if (sign) id = -id;[0m
      | [0;1;32m             ^         
[0m      | [0;32m              {
[0m[1msrc/binn.c:832:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  832 |   if (storage_type == BINN_STORAGE_BYTE) return psource;[0m
      | [0;1;32m                                        ^               
[0m      | [0;32m                                         {
[0m[1msrc/binn.c:838:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  838 |     vint = *(int64*)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  839 |     goto loc_signed;[0m
      | [0;1;32m                   
[0m      | [0;32m                   ;} 
[0m[1msrc/binn.c:841:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  841 |     vint = *(int*)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  842 |     goto loc_signed;[0m
      | [0;1;32m                   
[0m      | [0;32m                   ;} 
[0m[1msrc/binn.c:844:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  844 |     vint = *(short*)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  845 |     goto loc_signed;[0m
      | [0;1;32m                   
[0m      | [0;32m                   ;} 
[0m[1msrc/binn.c:847:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  847 |     vuint = *(uint64*)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  848 |     goto loc_positive;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/binn.c:850:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  850 |     vuint = *(unsigned int*)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  851 |     goto loc_positive;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/binn.c:853:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  853 |     vuint = *(unsigned short*)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m  854 |     goto loc_positive;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/binn.c:921:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  921 |         break;[0m
      | [0;1;32m        ^    
[0m      | [0;32m        {    ;} 
[0m[1msrc/binn.c:924:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  924 |         if (size == 0) break; // the 2 above are allowed to have 0 length[0m
      | [0;1;32m                      ^                                                  
[0m      | [0;32m                       {
[0m[1msrc/binn.c:926:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  926 |         return FALSE;[0m
      | [0;1;32m        ^           
[0m      | [0;32m        {           ;} 
[0m[1msrc/binn.c:930:90: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  930 |   if ((type_family(type) == BINN_FAMILY_INT) && (item->disable_int_compression == FALSE))[0m
      | [0;1;32m                                                                                         ^
[0m      | [0;32m                                                                                          {
[0m  931 |     pvalue = compress_int(&storage_type, &type, pvalue);[0m
      | [0;1;32m                                                        
[0m[1msrc/binn.c:935:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  935 |       size = 0;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  936 |       ArgSize = size;[0m
  937 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:939:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  939 |       size = 1;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  940 |       ArgSize = size;[0m
  941 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:943:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  943 |       size = 2;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  944 |       ArgSize = size;[0m
  945 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:947:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  947 |       size = 4;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  948 |       ArgSize = size;[0m
  949 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:951:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  951 |       size = 8;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  952 |       ArgSize = size;[0m
  953 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:955:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  955 |       if (size < 0) return FALSE;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  956 |       //if (size == 0) ...[0m
  957 |       ArgSize = size + 4; // at least this size[0m
  958 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:955:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  955 |       if (size < 0) return FALSE;[0m
      | [0;1;32m                   ^             
[0m      | [0;32m                    {
[0m[1msrc/binn.c:960:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  960 |       if (size < 0) return FALSE;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  961 |       if (size == 0) size = strlen2( (char *) pvalue);[0m
  962 |       ArgSize = size + 5; // at least this size[0m
  963 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:960:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  960 |       if (size < 0) return FALSE;[0m
      | [0;1;32m                   ^             
[0m      | [0;32m                    {
[0m[1msrc/binn.c:961:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  961 |       if (size == 0) size = strlen2( (char *) pvalue);[0m
      | [0;1;32m                    ^                                 
[0m      | [0;32m                     {
[0m[1msrc/binn.c:965:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  965 |       if (size <= 0) return FALSE;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  966 |       ArgSize = size;[0m
  967 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:965:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  965 |       if (size <= 0) return FALSE;[0m
      | [0;1;32m                    ^             
[0m      | [0;32m                     {
[0m[1msrc/binn.c:969:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  969 |       return FALSE;[0m
      | [0;1;32m      ^           
[0m      | [0;32m      {           ;} 
[0m[1msrc/binn.c:973:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  973 |   if (CheckAllocation(item, ArgSize) == FALSE) return FALSE;[0m
      | [0;1;32m                                              ^             
[0m      | [0;32m                                               {
[0m[1msrc/binn.c:995:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  995 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/binn.c:997:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  997 |       *((char *) p) = *((char *) pvalue);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  998 |       item->used_size += 1;[0m
  999 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1001:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1001 |       copy_be16((u16*)p, (u16*)pvalue);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1002 |       item->used_size += 2;[0m
 1003 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1005:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1005 |       copy_be32((u32*)p, (u32*)pvalue);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1006 |       item->used_size += 4;[0m
 1007 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1009:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1009 |       copy_be64((u64*)p, (u64*)pvalue);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1010 |       item->used_size += 8;[0m
 1011 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1024:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1024 |       memcpy(p, pvalue, size);[0m
      | [0;1;32m      ^~~~~~
[0m[1msrc/binn.c:1024:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1024 |       memcpy(p, pvalue, size);[0m
      | [0;1;32m      ^~~~~~
[0m[1msrc/binn.c:1024:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1024 |       memcpy(p, pvalue, size);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1025 |       if (storage_type == BINN_STORAGE_STRING) {[0m
 1026 |         p += size;[0m
 1027 |         *((char *) p) = (char) 0;[0m
 1028 |         size++;  // null terminator[0m
 1029 |       }[0m
 1030 |       item->used_size += size;[0m
 1031 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1033:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1033 |       memcpy(p, pvalue, size);[0m
      | [0;1;32m      ^~~~~~
[0m[1msrc/binn.c:1033:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1033 |       memcpy(p, pvalue, size);[0m
      | [0;1;32m      ^~~~~~
[0m[1msrc/binn.c:1033:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1033 |       memcpy(p, pvalue, size);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1034 |       item->used_size += size;[0m
 1035 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1049:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1049 |   if (item == NULL) return FALSE;[0m
      | [0;1;32m                   ^             
[0m      | [0;32m                    {
[0m[1msrc/binn.c:1118:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1118 |   if (item == NULL) return;[0m
      | [0;1;32m                   ^       
[0m      | [0;32m                    {
[0m[1msrc/binn.c:1124:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1124 |   if (item->freefn) item->freefn(item->ptr);[0m
      | [0;1;32m                   ^                        
[0m      | [0;32m                    {
[0m[1msrc/binn.c:1129:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1129 |     memset(item, 0, sizeof(binn));[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/binn.c:1129:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1129 |     memset(item, 0, sizeof(binn));[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/binn.c:1140:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1140 |   if (item == NULL) return NULL;[0m
      | [0;1;32m                   ^            
[0m      | [0;32m                    {
[0m[1msrc/binn.c:1145:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1145 |     memmove(item->pbuf, data, item->size);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/binn.c:1145:5: [0m[0;1;36mnote: [0mCall to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11[0m
 1145 |     memmove(item->pbuf, data, item->size);[0m
      | [0;1;32m    ^~~~~~~
[0m[1msrc/binn.c:1152:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1152 |     memset(item, 0, sizeof(binn));[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/binn.c:1152:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1152 |     memset(item, 0, sizeof(binn));[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/binn.c:1166:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1166 |   if (pbuf == NULL) return FALSE;[0m
      | [0;1;32m                   ^             
[0m      | [0;32m                    {
[0m[1msrc/binn.c:1176:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1176 |   if ((byte & BINN_STORAGE_MASK) != BINN_STORAGE_CONTAINER) return FALSE;[0m
      | [0;1;32m                                                           ^             
[0m      | [0;32m                                                            {
[0m[1msrc/binn.c:1177:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1177 |   if (byte & BINN_STORAGE_HAS_MORE) return FALSE;[0m
      | [0;1;32m                                   ^             
[0m      | [0;32m                                    {
[0m[1msrc/binn.c:1186:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1186 |       return FALSE;[0m
      | [0;1;32m      ^           
[0m      | [0;32m      {           ;} 
[0m[1msrc/binn.c:1190:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1190 |   if (plimit && p > plimit) return FALSE;[0m
      | [0;1;32m                           ^             
[0m      | [0;32m                            {
[0m[1msrc/binn.c:1193:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1193 |     if (plimit && p + sizeof(int) - 1 > plimit) return FALSE;[0m
      | [0;1;32m                                               ^             
[0m      | [0;32m                                                {
[0m[1msrc/binn.c:1203:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1203 |   if (plimit && p > plimit) return FALSE;[0m
      | [0;1;32m                           ^             
[0m      | [0;32m                            {
[0m[1msrc/binn.c:1206:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1206 |     if (plimit && p + sizeof(int) - 1 > plimit) return FALSE;[0m
      | [0;1;32m                                               ^             
[0m      | [0;32m                                                {
[0m[1msrc/binn.c:1227:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1227 |   if ((size < MIN_BINN_SIZE) || (count < 0)) return FALSE;[0m
      | [0;1;32m                                            ^             
[0m      | [0;32m                                             {
[0m[1msrc/binn.c:1230:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1230 |   if (ptype)  *ptype  = type;[0m
      | [0;1;32m            ^                
[0m      | [0;32m             {
[0m[1msrc/binn.c:1231:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1231 |   if (pcount) *pcount = count;[0m
      | [0;1;32m             ^                
[0m      | [0;32m              {
[0m[1msrc/binn.c:1232:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1232 |   if (psize && *psize==0) *psize = size;[0m
      | [0;1;32m                         ^              
[0m      | [0;32m                          {
[0m[1msrc/binn.c:1233:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1233 |   if (pheadersize) *pheadersize = (int) (p - (unsigned char*)pbuf);[0m
      | [0;1;32m                  ^                                                
[0m      | [0;32m                   {
[0m[1msrc/binn.c:1242:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1242 |   if (!IsValidBinnHeader(pbuf, &type, NULL, NULL, NULL)) return INVALID_BINN;[0m
      | [0;1;32m                                                        ^                    
[0m      | [0;32m                                                         {
[0m[1msrc/binn.c:1253:59: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1253 |   if (!IsValidBinnHeader(pbuf, NULL, &nitems, NULL, NULL)) return 0;[0m
      | [0;1;32m                                                          ^         
[0m      | [0;32m                                                           {
[0m[1msrc/binn.c:1264:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1264 |   if (!IsValidBinnHeader(pbuf, NULL, NULL, &size, NULL)) return 0;[0m
      | [0;1;32m                                                        ^         
[0m      | [0;32m                                                         {
[0m[1msrc/binn.c:1277:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1277 |     item = (binn*) ptr;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1278 |     if (item->writable && item->dirty) {[0m
 1279 |       binn_save_header(item);[0m
 1280 |     }[0m
 1281 |     return item->ptr;[0m
      | [0;1;32m                    
[0m      | [0;32m                    ;} 
[0m[1msrc/binn.c:1283:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1283 |     return ptr;[0m
      | [0;1;32m    ^         
[0m      | [0;32m    {         ;} 
[0m[1msrc/binn.c:1285:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1285 |     return NULL;[0m
      | [0;1;32m    ^          
[0m      | [0;32m    {          ;} 
[0m[1msrc/binn.c:1297:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1297 |     item = (binn*) ptr;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1298 |     if (item->writable && item->dirty) {[0m
 1299 |       binn_save_header(item);[0m
 1300 |     }[0m
 1301 |     return item->size;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/binn.c:1303:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1303 |     return binn_buf_size(ptr);[0m
      | [0;1;32m    ^                        
[0m      | [0;32m    {                        ;} 
[0m[1msrc/binn.c:1305:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1305 |     return 0;[0m
      | [0;1;32m    ^       
[0m      | [0;32m    {       ;} 
[0m[1msrc/binn.c:1317:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1317 |     item = (binn*) ptr;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1318 |     return item->type;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1msrc/binn.c:1320:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1320 |     return binn_buf_type(ptr);[0m
      | [0;1;32m    ^                        
[0m      | [0;32m    {                        ;} 
[0m[1msrc/binn.c:1322:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1322 |     return -1;[0m
      | [0;1;32m    ^        
[0m      | [0;32m    {        ;} 
[0m[1msrc/binn.c:1334:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1334 |     item = (binn*) ptr;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1335 |     return item->count;[0m
      | [0;1;32m                      
[0m      | [0;32m                      ;} 
[0m[1msrc/binn.c:1337:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1337 |     return binn_buf_count(ptr);[0m
      | [0;1;32m    ^                         
[0m      | [0;32m    {                         ;} 
[0m[1msrc/binn.c:1339:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1339 |     return -1;[0m
      | [0;1;32m    ^        
[0m      | [0;32m    {        ;} 
[0m[1msrc/binn.c:1352:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1352 |   if (pbuf == NULL) return FALSE;[0m
      | [0;1;32m                   ^             
[0m      | [0;32m                    {
[0m[1msrc/binn.c:1361:68: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1361 |   if (!IsValidBinnHeader(pbuf, &type, &count, &size, &header_size)) return FALSE;[0m
      | [0;1;32m                                                                   ^             
[0m      | [0;32m                                                                    {
[0m[1msrc/binn.c:1366:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1366 |     if (size != *psize) return FALSE;[0m
      | [0;1;32m                       ^             
[0m      | [0;32m                        {
[0m[1msrc/binn.c:1371:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1371 |     if (count != *pcount) return FALSE;[0m
      | [0;1;32m                         ^             
[0m      | [0;32m                          {
[0m[1msrc/binn.c:1376:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1376 |     if (type != *ptype) return FALSE;[0m
      | [0;1;32m                       ^             
[0m      | [0;32m                        {
[0m[1msrc/binn.c:1392:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1392 |         len = *p;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1393 |         p++;[0m
 1394 |         //if (len == 0) goto Invalid;[0m
 1395 |         // increment the used space[0m
 1396 |         p += len;[0m
 1397 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/binn.c:1400:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1400 |         read_map_id(&p, plimit);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1401 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/binn.c:1407:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1407 |     if ((p == 0) || (p < base)) goto Invalid;[0m
      | [0;1;32m                               ^             
[0m      | [0;32m                                {
[0m[1msrc/binn.c:1410:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1410 |   if (ptype  && *ptype==0)  *ptype  = type;[0m
      | [0;1;32m                          ^                
[0m      | [0;32m                           {
[0m[1msrc/binn.c:1411:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1411 |   if (pcount && *pcount==0) *pcount = count;[0m
      | [0;1;32m                           ^                
[0m      | [0;32m                            {
[0m[1msrc/binn.c:1412:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1412 |   if (psize  && *psize==0)  *psize  = size;[0m
      | [0;1;32m                          ^                
[0m      | [0;32m                           {
[0m[1msrc/binn.c:1424:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1424 |   if (ptype)  *ptype  = 0;[0m
      | [0;1;32m            ^             
[0m      | [0;32m             {
[0m[1msrc/binn.c:1425:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1425 |   if (pcount) *pcount = 0;[0m
      | [0;1;32m             ^            
[0m      | [0;32m              {
[0m[1msrc/binn.c:1426:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1426 |   if (psize)  *psize  = 0;[0m
      | [0;1;32m            ^             
[0m      | [0;32m             {
[0m[1msrc/binn.c:1442:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1442 |   if (value == NULL) return FALSE;[0m
      | [0;1;32m                    ^             
[0m      | [0;32m                     {
[0m[1msrc/binn.c:1443:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1443 |   memset(value, 0, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:1443:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1443 |   memset(value, 0, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:1469:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1469 |     break;[0m
      | [0;1;32m    ^    
[0m      | [0;32m    {    ;} 
[0m[1msrc/binn.c:1471:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1471 |     value->vuint8 = *((unsigned char *) p);[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1472 |     value->ptr = p;   //value->ptr = &value->vuint8;[0m
 1473 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:1475:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1475 |     copy_be16((u16*)&value->vint16, (u16*)p);[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1476 |     value->ptr = &value->vint16;[0m
 1477 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:1479:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1479 |     copy_be32((u32*)&value->vint32, (u32*)p);[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1480 |     value->ptr = &value->vint32;[0m
 1481 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:1483:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1483 |     copy_be64((u64*)&value->vint64, (u64*)p);[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1484 |     value->ptr = &value->vint64;[0m
 1485 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:1489:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1489 |     if (DataSize & 0x80) {[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1490 |       copy_be32((u32*)&DataSize, (u32*)p);[0m
 1491 |       DataSize &= 0x7FFFFFFF;[0m
 1492 |       p+=4;[0m
 1493 |     } else {[0m
 1494 |       p++;[0m
 1495 |     }[0m
 1496 |     value->size = DataSize;[0m
 1497 |     value->ptr = p;[0m
 1498 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:1500:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1500 |     value->ptr = p2;  // <-- it returns the pointer to the container, not the data[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 1501 |     if (IsValidBinnHeader(p2, NULL, &value->count, &value->size, NULL) == FALSE) return FALSE;[0m
 1502 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:1501:81: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1501 |     if (IsValidBinnHeader(p2, NULL, &value->count, &value->size, NULL) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                                ^             
[0m      | [0;32m                                                                                 {
[0m[1msrc/binn.c:1504:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1504 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:1511:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1511 |       value->type = BINN_BOOL;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1512 |       value->vbool = TRUE;[0m
 1513 |       value->ptr = &value->vbool;[0m
 1514 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1516:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1516 |       value->type = BINN_BOOL;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1517 |       value->vbool = FALSE;[0m
 1518 |       value->ptr = &value->vbool;[0m
 1519 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1556:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1556 |   memcpy(&local_value, value, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:1556:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1556 |   memcpy(&local_value, value, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:1582:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m                                               ^             
[0m      | [0;32m                                                {
[0m[1msrc/binn.c:1585:75: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1585 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                          ^             
[0m      | [0;32m                                                                           {
[0m[1msrc/binn.c:1587:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1587 |   if (type != BINN_OBJECT) return FALSE;[0m
      | [0;1;32m                          ^             
[0m      | [0;32m                           {
[0m[1msrc/binn.c:1588:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1588 |   if (count == 0) return FALSE;[0m
      | [0;1;32m                 ^             
[0m      | [0;32m                  {
[0m[1msrc/binn.c:1592:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1592 |   if (p == FALSE) return FALSE;[0m
      | [0;1;32m                 ^             
[0m      | [0;32m                  {
[0m[1msrc/binn.c:1605:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1605 |   if ((ptr == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m                                 ^             
[0m      | [0;32m                                  {
[0m[1msrc/binn.c:1608:75: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1608 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                          ^             
[0m      | [0;32m                                                                           {
[0m[1msrc/binn.c:1610:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1610 |   if (type != BINN_MAP) return FALSE;[0m
      | [0;1;32m                       ^             
[0m      | [0;32m                        {
[0m[1msrc/binn.c:1611:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1611 |   if (count == 0) return FALSE;[0m
      | [0;1;32m                 ^             
[0m      | [0;32m                  {
[0m[1msrc/binn.c:1615:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1615 |   if (p == FALSE) return FALSE;[0m
      | [0;1;32m                 ^             
[0m      | [0;32m                  {
[0m[1msrc/binn.c:1628:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1628 |   if ((ptr == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m                                 ^             
[0m      | [0;32m                                  {
[0m[1msrc/binn.c:1631:75: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1631 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                          ^             
[0m      | [0;32m                                                                           {
[0m[1msrc/binn.c:1633:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1633 |   if (type != BINN_LIST) return FALSE;[0m
      | [0;1;32m                        ^             
[0m      | [0;32m                         {
[0m[1msrc/binn.c:1634:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1634 |   if (count == 0) return FALSE;[0m
      | [0;1;32m                 ^             
[0m      | [0;32m                  {
[0m[1msrc/binn.c:1635:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1635 |   if ((pos <= 0) | (pos > count)) return FALSE;[0m
      | [0;1;32m                                 ^             
[0m      | [0;32m                                  {
[0m[1msrc/binn.c:1645:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1645 |     if ((p == 0) || (p < base)) return FALSE;[0m
      | [0;1;32m                               ^             
[0m      | [0;32m                                {
[0m[1msrc/binn.c:1664:75: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1664 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                          ^             
[0m      | [0;32m                                                                           {
[0m[1msrc/binn.c:1666:77: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m                                                                            ^             
[0m      | [0;32m                                                                             {
[0m[1msrc/binn.c:1676:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1676 |         int32 = read_map_id(&p, plimit);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1677 |         if (p > plimit) return FALSE;[0m
 1678 |         id = int32;[0m
 1679 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/binn.c:1677:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1677 |         if (p > plimit) return FALSE;[0m
      | [0;1;32m                       ^             
[0m      | [0;32m                        {
[0m[1msrc/binn.c:1681:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1681 |         len = *((unsigned char *)p); p++;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 1682 |         if (p > plimit) return FALSE;[0m
 1683 |         key = p;[0m
 1684 |         p += len;[0m
 1685 |         if (p > plimit) return FALSE;[0m
 1686 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1msrc/binn.c:1681:15: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 1681 |         len = *((unsigned char *)p); p++;[0m
      | [0;1;32m              ^
[0m[1msrc/binn.c:1787:7: [0m[0;1;36mnote: [0mCalling 'binn_object_get_pair'[0m
 1787 |   if (binn_object_get_pair(ptr, pos, pkey, &value) == FALSE) return NULL;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1727:10: [0m[0;1;36mnote: [0mCalling 'binn_read_pair'[0m
 1727 |   return binn_read_pair(BINN_OBJECT, ptr, pos, NULL, pkey, value);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1664:7: [0m[0;1;36mnote: [0mValue assigned to 'header_size'[0m
 1664 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1664:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1664 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1664:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1664 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1666:8: [0m[0;1;36mnote: [0mAssuming 'type' is equal to 'expected_type'[0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1666:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1666:35: [0m[0;1;36mnote: [0mAssuming 'count' is not equal to 0[0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m                                  ^~~~~~~~~~
[0m[1msrc/binn.c:1666:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1666:51: [0m[0;1;36mnote: [0mAssuming 'pos' is >= 1[0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m                                                  ^~~~~~~
[0m[1msrc/binn.c:1666:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1666:64: [0m[0;1;36mnote: [0mAssuming 'pos' is <= 'count'[0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m                                                               ^~~~~~~~~~~
[0m[1msrc/binn.c:1666:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1666 |   if ((type != expected_type) || (count == 0) || (pos < 1) || (pos > count)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1671:3: [0m[0;1;36mnote: [0mNull pointer value stored to 'p'[0m
 1671 |   p += header_size;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1673:15: [0m[0;1;36mnote: [0mAssuming 'i' is < 'count'[0m
 1673 |   for (i = 0; i < count; i++) {[0m
      | [0;1;32m              ^~~~~~~~~
[0m[1msrc/binn.c:1673:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1673 |   for (i = 0; i < count; i++) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1674:5: [0m[0;1;36mnote: [0mControl jumps to 'case 226:'  at line 1680[0m
 1674 |     switch (type) {[0m
      | [0;1;32m    ^
[0m[1msrc/binn.c:1681:15: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 1681 |         len = *((unsigned char *)p); p++;[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1682:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1682 |         if (p > plimit) return FALSE;[0m
      | [0;1;32m                       ^             
[0m      | [0;32m                        {
[0m[1msrc/binn.c:1685:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1685 |         if (p > plimit) return FALSE;[0m
      | [0;1;32m                       ^             
[0m      | [0;32m                        {
[0m[1msrc/binn.c:1689:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1689 |     if (counter == pos) goto found;[0m
      | [0;1;32m                       ^           
[0m      | [0;32m                        {
[0m[1msrc/binn.c:1692:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1692 |     if ((p == 0) || (p < base)) return FALSE;[0m
      | [0;1;32m                               ^             
[0m      | [0;32m                                {
[0m[1msrc/binn.c:1701:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1701 |       if (pid) *pid = id;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1702 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1701:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1701 |       if (pid) *pid = id;[0m
      | [0;1;32m              ^          
[0m      | [0;32m               {
[0m[1msrc/binn.c:1704:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1704 |       if (pkey) {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1705 |         memcpy(pkey, key, len);[0m
 1706 |         pkey[len] = 0;[0m
 1707 |       }[0m
 1708 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1705:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1705 |         memcpy(pkey, key, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/binn.c:1705:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1705 |         memcpy(pkey, key, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/binn.c:1771:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1771 |   if (binn_map_get_pair(ptr, pos, pid, &value) == FALSE) return NULL;[0m
      | [0;1;32m                                                        ^            
[0m      | [0;32m                                                         {
[0m[1msrc/binn.c:1772:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1772 |   if (ptype) *ptype = value.type;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1773:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1773 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1787:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1787 |   if (binn_object_get_pair(ptr, pos, pkey, &value) == FALSE) return NULL;[0m
      | [0;1;32m                                                            ^            
[0m      | [0;32m                                                             {
[0m[1msrc/binn.c:1788:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1788 |   if (ptype) *ptype = value.type;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1789:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1789 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1806:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1806 |   if ((ptr == 0) || (iter == 0)) return FALSE;[0m
      | [0;1;32m                                ^             
[0m      | [0;32m                                 {
[0m[1msrc/binn.c:1807:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1807 |   memset(iter, 0, sizeof(binn_iter));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:1807:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1807 |   memset(iter, 0, sizeof(binn_iter));[0m
      | [0;1;32m  ^~~~~~
[0m[1msrc/binn.c:1810:75: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1810 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                          ^             
[0m      | [0;32m                                                                           {
[0m[1msrc/binn.c:1812:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1812 |   if (type != expected_type) return FALSE;[0m
      | [0;1;32m                            ^             
[0m      | [0;32m                             {
[0m[1msrc/binn.c:1829:135: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1829 |   if ((iter == 0) || (iter->pnext == 0) || (iter->pnext > iter->plimit) || (iter->current > iter->count) || (iter->type != BINN_LIST)) return FALSE;[0m
      | [0;1;32m                                                                                                                                      ^             
[0m      | [0;32m                                                                                                                                       {
[0m[1msrc/binn.c:1832:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1832 |   if (iter->current > iter->count) return FALSE;[0m
      | [0;1;32m                                  ^             
[0m      | [0;32m                                   {
[0m[1msrc/binn.c:1836:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1836 |   if (iter->pnext != 0 && iter->pnext < pnow) return FALSE;[0m
      | [0;1;32m                                             ^             
[0m      | [0;32m                                              {
[0m[1msrc/binn.c:1849:139: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1849 |   if ((iter == 0) || (iter->pnext == 0) || (iter->pnext > iter->plimit) || (iter->current > iter->count) || (iter->type != expected_type)) return FALSE;[0m
      | [0;1;32m                                                                                                                                          ^             
[0m      | [0;32m                                                                                                                                           {
[0m[1msrc/binn.c:1852:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1852 |   if (iter->current > iter->count) return FALSE;[0m
      | [0;1;32m                                  ^             
[0m      | [0;32m                                   {
[0m[1msrc/binn.c:1858:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1858 |       int32 = read_map_id(&p, iter->plimit);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1859 |       if (p > iter->plimit) return FALSE;[0m
 1860 |       id = int32;[0m
 1861 |       if (pid) *pid = id;[0m
 1862 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1859:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1859 |       if (p > iter->plimit) return FALSE;[0m
      | [0;1;32m                           ^             
[0m      | [0;32m                            {
[0m[1msrc/binn.c:1861:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1861 |       if (pid) *pid = id;[0m
      | [0;1;32m              ^          
[0m      | [0;32m               {
[0m[1msrc/binn.c:1864:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1864 |       len = *((unsigned char *)p); p++;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1865 |       key = p;[0m
 1866 |       p += len;[0m
 1867 |       if (p > iter->plimit) return FALSE;[0m
 1868 |       if (pkey) {[0m
 1869 |         memcpy(pkey, key, len);[0m
 1870 |         pkey[len] = 0;[0m
 1871 |       }[0m
 1872 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:1867:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1867 |       if (p > iter->plimit) return FALSE;[0m
      | [0;1;32m                           ^             
[0m      | [0;32m                            {
[0m[1msrc/binn.c:1869:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1869 |         memcpy(pkey, key, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/binn.c:1869:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1869 |         memcpy(pkey, key, len);[0m
      | [0;1;32m        ^~~~~~
[0m[1msrc/binn.c:1876:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1876 |   if (iter->pnext != 0 && iter->pnext < p) return FALSE;[0m
      | [0;1;32m                                          ^             
[0m      | [0;32m                                           {
[0m[1msrc/binn.c:1956:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1956 |   if (binn_list_next(iter, &value) == FALSE) return NULL;[0m
      | [0;1;32m                                            ^            
[0m      | [0;32m                                             {
[0m[1msrc/binn.c:1957:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1957 |   if (ptype) *ptype = value.type;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1958:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1958 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1972:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1972 |   if (binn_map_next(iter, pid, &value) == FALSE) return NULL;[0m
      | [0;1;32m                                                ^            
[0m      | [0;32m                                                 {
[0m[1msrc/binn.c:1973:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1973 |   if (ptype) *ptype = value.type;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1974:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1974 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1988:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1988 |   if (binn_object_next(iter, pkey, &value) == FALSE) return NULL;[0m
      | [0;1;32m                                                    ^            
[0m      | [0;32m                                                     {
[0m[1msrc/binn.c:1989:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1989 |   if (ptype) *ptype = value.type;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:1990:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1990 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2013:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2013 |       return BINN_STORAGE_NOBYTES;[0m
      | [0;1;32m      ^                          
[0m      | [0;32m      {                          ;} 
[0m[1msrc/binn.c:2016:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2016 |       binn_get_type_info(type, &storage_type, NULL);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 2017 |       return storage_type;[0m
      | [0;1;32m                         
[0m      | [0;32m                         ;} 
[0m[1msrc/binn.c:2039:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2039 |       binn_get_type_info(type, &storage_type, NULL);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 2040 |       return storage_type;[0m
      | [0;1;32m                         
[0m      | [0;32m                         ;} 
[0m[1msrc/binn.c:2067:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2067 |         if (*psize == 0) break;[0m
      | [0;1;32m                        ^      
[0m      | [0;32m                         {
[0m[1msrc/binn.c:2069:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2069 |         return FALSE;[0m
      | [0;1;32m        ^           
[0m      | [0;32m        {           ;} 
[0m[1msrc/binn.c:2098:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2098 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/binn.c:2104:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2104 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/binn.c:2107:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2107 |       if (**((BOOL**)ppvalue) == FALSE) {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 2108 |         type = BINN_FALSE;[0m
 2109 |       } else {[0m
 2110 |         type = BINN_TRUE;[0m
 2111 |       }[0m
 2112 |       *ptype = type;[0m
 2113 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:2172:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2172 |       return BINN_FAMILY_BOOL;[0m
      | [0;1;32m      ^                      
[0m      | [0;32m      {                      ;} 
[0m[1msrc/binn.c:2175:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2175 |       return BINN_FAMILY_NULL;[0m
      | [0;1;32m      ^                      
[0m      | [0;32m      {                      ;} 
[0m[1msrc/binn.c:2179:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2179 |       return BINN_FAMILY_NONE;[0m
      | [0;1;32m      ^                      
[0m      | [0;32m      {                      ;} 
[0m[1msrc/binn.c:2202:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2202 |     return 0;[0m
      | [0;1;32m    ^       
[0m      | [0;32m    {       ;} 
[0m[1msrc/binn.c:2213:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2213 |     break;[0m
      | [0;1;32m    ^    
[0m      | [0;32m    {    ;} 
[0m[1msrc/binn.c:2215:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2215 |     *((char *) pdest) = *(char *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2216 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2218:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2218 |     *((short *) pdest) = *(short *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2219 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2221:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2221 |     *((int *) pdest) = *(int *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2222 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2224:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2224 |     *((uint64 *) pdest) = *(uint64 *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2225 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2230:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2230 |     break;[0m
      | [0;1;32m    ^    
[0m      | [0;32m    {    ;} 
[0m[1msrc/binn.c:2232:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2232 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:2246:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2246 |     vint64 = *(signed char *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2247 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2249:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2249 |     vint64 = *(short *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2250 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2252:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2252 |     vint64 = *(int *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2253 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2255:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2255 |     vint64 = *(int64 *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2256 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2259:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2259 |     vuint64 = *(unsigned char *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2260 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2262:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2262 |     vuint64 = *(unsigned short *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2263 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2265:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2265 |     vuint64 = *(unsigned int *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2266 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2268:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2268 |     vuint64 = *(uint64 *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2269 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2272:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2272 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:2279:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2279 |     if (vuint64 > INT64_MAX) return FALSE;[0m
      | [0;1;32m                            ^             
[0m      | [0;32m                             {
[0m[1msrc/binn.c:2282:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2282 |     if (vint64 < 0) return FALSE;[0m
      | [0;1;32m                   ^             
[0m      | [0;32m                    {
[0m[1msrc/binn.c:2289:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2289 |     if ((vint64 < INT8_MIN) || (vint64 > INT8_MAX)) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2290 |     *(signed char *)pdest = (signed char) vint64;[0m
 2291 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2289:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2289 |     if ((vint64 < INT8_MIN) || (vint64 > INT8_MAX)) return FALSE;[0m
      | [0;1;32m                                                   ^             
[0m      | [0;32m                                                    {
[0m[1msrc/binn.c:2293:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2293 |     if ((vint64 < INT16_MIN) || (vint64 > INT16_MAX)) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2294 |     *(short *)pdest = (short) vint64;[0m
 2295 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2293:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2293 |     if ((vint64 < INT16_MIN) || (vint64 > INT16_MAX)) return FALSE;[0m
      | [0;1;32m                                                     ^             
[0m      | [0;32m                                                      {
[0m[1msrc/binn.c:2297:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2297 |     if ((vint64 < INT32_MIN) || (vint64 > INT32_MAX)) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2298 |     *(int *)pdest = (int) vint64;[0m
 2299 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2297:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2297 |     if ((vint64 < INT32_MIN) || (vint64 > INT32_MAX)) return FALSE;[0m
      | [0;1;32m                                                     ^             
[0m      | [0;32m                                                      {
[0m[1msrc/binn.c:2301:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2301 |     *(int64 *)pdest = vint64;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2302 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2305:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2305 |     if (vuint64 > UINT8_MAX) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2306 |     *(unsigned char *)pdest = (unsigned char) vuint64;[0m
 2307 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2305:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2305 |     if (vuint64 > UINT8_MAX) return FALSE;[0m
      | [0;1;32m                            ^             
[0m      | [0;32m                             {
[0m[1msrc/binn.c:2309:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2309 |     if (vuint64 > UINT16_MAX) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2310 |     *(unsigned short *)pdest = (unsigned short) vuint64;[0m
 2311 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2309:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2309 |     if (vuint64 > UINT16_MAX) return FALSE;[0m
      | [0;1;32m                             ^             
[0m      | [0;32m                              {
[0m[1msrc/binn.c:2313:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2313 |     if (vuint64 > UINT32_MAX) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2314 |     *(unsigned int *)pdest = (unsigned int) vuint64;[0m
 2315 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2313:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2313 |     if (vuint64 > UINT32_MAX) return FALSE;[0m
      | [0;1;32m                             ^             
[0m      | [0;32m                              {
[0m[1msrc/binn.c:2317:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2317 |     *(uint64 *)pdest = vuint64;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2318 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2321:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2321 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:2334:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2334 |     *(double *)pdest = *(float *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2335 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2334:22: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2334 |     *(double *)pdest = *(float *)psource;[0m
      | [0;1;32m                     ^
[0m[1msrc/binn.c:2886:43: [0m[0;1;36mnote: [0mPassing null pointer value via 4th parameter 'pvalue'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m                                          ^
[0m[1m/home/C00536225/dev/tcc/build/lib/clang/21/include/__stddef_null.h:26:14: [0m[0;1;36mnote: [0mexpanded from macro 'NULL'[0m
   26 | #define NULL ((void*)0)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1msrc/binn.c:2886:10: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2619:29: [0m[0;1;36mnote: [0mPassing null pointer value via 2nd parameter 'pdest'[0m
 2619 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m                            ^~~~~~
[0m[1msrc/binn.c:2619:7: [0m[0;1;36mnote: [0mCalling 'copy_value'[0m
 2619 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2386:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2386:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2388:8: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2388 |   if ((type_family(source_type) == BINN_FAMILY_INT) && (source_type != dest_type)) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2388:53: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2388 |   if ((type_family(source_type) == BINN_FAMILY_INT) && (source_type != dest_type)) {[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2390:15: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2390:14: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m             ^
[0m[1msrc/binn.c:2390:66: [0m[0;1;36mnote: [0mAssuming 'source_type' is not equal to 'dest_type'[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2390:10: [0m[0;1;36mnote: [0mTaking true branch[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m         ^
[0m[1msrc/binn.c:2391:38: [0m[0;1;36mnote: [0mPassing null pointer value via 2nd parameter 'pdest'[0m
 2391 |     return copy_float_value(psource, pdest, source_type, dest_type);[0m
      | [0;1;32m                                     ^~~~~
[0m[1msrc/binn.c:2391:12: [0m[0;1;36mnote: [0mCalling 'copy_float_value'[0m
 2391 |     return copy_float_value(psource, pdest, source_type, dest_type);[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2332:3: [0m[0;1;36mnote: [0mControl jumps to 'case 98:'  at line 2333[0m
 2332 |   switch (source_type) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2334:22: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2334 |     *(double *)pdest = *(float *)psource;[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2334:24: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2334 |     *(double *)pdest = *(float *)psource;[0m
      | [0;1;32m                       ^
[0m[1msrc/binn.c:3061:3: [0m[0;1;36mnote: [0mCalling 'binn_object_get'[0m
 3061 |   binn_object_get(obj, key, BINN_OBJECT, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2636:8: [0m[0;1;36mnote: [0m'storage_type' is not equal to BINN_STORAGE_NOBYTES[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~
[0m[1msrc/binn.c:2636:7: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:2636:50: [0m[0;1;36mnote: [0m'pvalue' is not equal to NULL[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                                 ^~~~~~
[0m[1msrc/binn.c:2636:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2640:7: [0m[0;1;36mnote: [0mCalling 'binn_object_get_value'[0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1582:8: [0m[0;1;36mnote: [0m'ptr' is not equal to null[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m       ^~~
[0m[1msrc/binn.c:1582:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1582:22: [0m[0;1;36mnote: [0mAssuming 'key' is not equal to null[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m                     ^~~~~~~~
[0m[1msrc/binn.c:1582:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1582:36: [0m[0;1;36mnote: [0m'value' is not equal to null[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m                                   ^~~~~
[0m[1msrc/binn.c:1582:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1585:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1585 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1587:7: [0m[0;1;36mnote: [0m'type' is equal to BINN_OBJECT[0m
 1587 |   if (type != BINN_OBJECT) return FALSE;[0m
      | [0;1;32m      ^~~~
[0m[1msrc/binn.c:1587:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1587 |   if (type != BINN_OBJECT) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1588:7: [0m[0;1;36mnote: [0mAssuming 'count' is not equal to 0[0m
 1588 |   if (count == 0) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~
[0m[1msrc/binn.c:1588:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1588 |   if (count == 0) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1592:7: [0m[0;1;36mnote: [0m'p' is not equal to FALSE[0m
 1592 |   if (p == FALSE) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1592:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1592 |   if (p == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1594:10: [0m[0;1;36mnote: [0mCalling 'GetValue'[0m
 1594 |   return GetValue(p, value);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1442:7: [0m[0;1;36mnote: [0m'value' is not equal to NULL[0m
 1442 |   if (value == NULL) return FALSE;[0m
      | [0;1;32m      ^~~~~
[0m[1msrc/binn.c:1442:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1442 |   if (value == NULL) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1443:3: [0m[0;1;36mnote: [0mNull pointer value stored to 'value.ptr'[0m
 1443 |   memset(value, 0, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1454:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 1454 |   if (byte & BINN_STORAGE_HAS_MORE) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1454:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 1454 |   if (byte & BINN_STORAGE_HAS_MORE) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1465:3: [0m[0;1;36mnote: [0mThe value of 'data_type' is assigned to 'value.type', which participates in a condition later[0m
 1465 |   value->type = data_type;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1467:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 1468[0m
 1467 |   switch (storage_type) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1469:5: [0m[0;1;36mnote: [0m Execution continues on line 1509[0m
 1469 |     break;[0m
      | [0;1;32m    ^
[0m[1msrc/binn.c:1509:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 1541[0m
 1509 |   switch (value->type) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1594:10: [0m[0;1;36mnote: [0mReturning from 'GetValue'[0m
 1594 |   return GetValue(p, value);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2640:7: [0m[0;1;36mnote: [0mReturning from 'binn_object_get_value'[0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2640:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2642:18: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'psource'[0m
 2642 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m                 ^~~~~~~~~
[0m[1msrc/binn.c:2642:7: [0m[0;1;36mnote: [0mCalling 'copy_value'[0m
 2642 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2386:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2386:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2388:8: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2388 |   if ((type_family(source_type) == BINN_FAMILY_INT) && (source_type != dest_type)) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2388:53: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2388 |   if ((type_family(source_type) == BINN_FAMILY_INT) && (source_type != dest_type)) {[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2390:15: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2390:14: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m             ^
[0m[1msrc/binn.c:2390:66: [0m[0;1;36mnote: [0m'source_type' is not equal to 'dest_type'[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m                                                                 ^~~~~~~~~~~
[0m[1msrc/binn.c:2390:10: [0m[0;1;36mnote: [0mTaking true branch[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m         ^
[0m[1msrc/binn.c:2391:29: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'psource'[0m
 2391 |     return copy_float_value(psource, pdest, source_type, dest_type);[0m
      | [0;1;32m                            ^~~~~~~
[0m[1msrc/binn.c:2391:12: [0m[0;1;36mnote: [0mCalling 'copy_float_value'[0m
 2391 |     return copy_float_value(psource, pdest, source_type, dest_type);[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2332:3: [0m[0;1;36mnote: [0mControl jumps to 'case 98:'  at line 2333[0m
 2332 |   switch (source_type) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2334:24: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2334 |     *(double *)pdest = *(float *)psource;[0m
      | [0;1;32m                       ^~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2337:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2337 |     *(float *)pdest = (float) *(double *)psource;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2338 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2337:21: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2337 |     *(float *)pdest = (float) *(double *)psource;[0m
      | [0;1;32m                    ^
[0m[1msrc/binn.c:2886:43: [0m[0;1;36mnote: [0mPassing null pointer value via 4th parameter 'pvalue'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m                                          ^
[0m[1m/home/C00536225/dev/tcc/build/lib/clang/21/include/__stddef_null.h:26:14: [0m[0;1;36mnote: [0mexpanded from macro 'NULL'[0m
   26 | #define NULL ((void*)0)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1msrc/binn.c:2886:10: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2619:29: [0m[0;1;36mnote: [0mPassing null pointer value via 2nd parameter 'pdest'[0m
 2619 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m                            ^~~~~~
[0m[1msrc/binn.c:2619:7: [0m[0;1;36mnote: [0mCalling 'copy_value'[0m
 2619 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2386:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2386:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2388:8: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2388 |   if ((type_family(source_type) == BINN_FAMILY_INT) && (source_type != dest_type)) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2388:53: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2388 |   if ((type_family(source_type) == BINN_FAMILY_INT) && (source_type != dest_type)) {[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2390:15: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2390:14: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m             ^
[0m[1msrc/binn.c:2390:66: [0m[0;1;36mnote: [0mAssuming 'source_type' is not equal to 'dest_type'[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2390:10: [0m[0;1;36mnote: [0mTaking true branch[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m         ^
[0m[1msrc/binn.c:2391:38: [0m[0;1;36mnote: [0mPassing null pointer value via 2nd parameter 'pdest'[0m
 2391 |     return copy_float_value(psource, pdest, source_type, dest_type);[0m
      | [0;1;32m                                     ^~~~~
[0m[1msrc/binn.c:2391:12: [0m[0;1;36mnote: [0mCalling 'copy_float_value'[0m
 2391 |     return copy_float_value(psource, pdest, source_type, dest_type);[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2332:3: [0m[0;1;36mnote: [0mControl jumps to 'case 130:'  at line 2336[0m
 2332 |   switch (source_type) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2337:21: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2337 |     *(float *)pdest = (float) *(double *)psource;[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2337:31: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2337 |     *(float *)pdest = (float) *(double *)psource;[0m
      | [0;1;32m                              ^
[0m[1msrc/binn.c:3061:3: [0m[0;1;36mnote: [0mCalling 'binn_object_get'[0m
 3061 |   binn_object_get(obj, key, BINN_OBJECT, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2636:8: [0m[0;1;36mnote: [0m'storage_type' is not equal to BINN_STORAGE_NOBYTES[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~
[0m[1msrc/binn.c:2636:7: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:2636:50: [0m[0;1;36mnote: [0m'pvalue' is not equal to NULL[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                                 ^~~~~~
[0m[1msrc/binn.c:2636:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2640:7: [0m[0;1;36mnote: [0mCalling 'binn_object_get_value'[0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1582:8: [0m[0;1;36mnote: [0m'ptr' is not equal to null[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m       ^~~
[0m[1msrc/binn.c:1582:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1582:22: [0m[0;1;36mnote: [0mAssuming 'key' is not equal to null[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m                     ^~~~~~~~
[0m[1msrc/binn.c:1582:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1582:36: [0m[0;1;36mnote: [0m'value' is not equal to null[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m                                   ^~~~~
[0m[1msrc/binn.c:1582:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1582 |   if ((ptr == 0) || (key == 0) || (value == 0)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1585:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1585 |   if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1587:7: [0m[0;1;36mnote: [0m'type' is equal to BINN_OBJECT[0m
 1587 |   if (type != BINN_OBJECT) return FALSE;[0m
      | [0;1;32m      ^~~~
[0m[1msrc/binn.c:1587:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1587 |   if (type != BINN_OBJECT) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1588:7: [0m[0;1;36mnote: [0mAssuming 'count' is not equal to 0[0m
 1588 |   if (count == 0) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~
[0m[1msrc/binn.c:1588:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1588 |   if (count == 0) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1592:7: [0m[0;1;36mnote: [0m'p' is not equal to FALSE[0m
 1592 |   if (p == FALSE) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:1592:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1592 |   if (p == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1594:10: [0m[0;1;36mnote: [0mCalling 'GetValue'[0m
 1594 |   return GetValue(p, value);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1442:7: [0m[0;1;36mnote: [0m'value' is not equal to NULL[0m
 1442 |   if (value == NULL) return FALSE;[0m
      | [0;1;32m      ^~~~~
[0m[1msrc/binn.c:1442:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1442 |   if (value == NULL) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1443:3: [0m[0;1;36mnote: [0mNull pointer value stored to 'value.ptr'[0m
 1443 |   memset(value, 0, sizeof(binn));[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1454:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 1454 |   if (byte & BINN_STORAGE_HAS_MORE) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1454:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 1454 |   if (byte & BINN_STORAGE_HAS_MORE) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1465:3: [0m[0;1;36mnote: [0mThe value of 'data_type' is assigned to 'value.type', which participates in a condition later[0m
 1465 |   value->type = data_type;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:1467:3: [0m[0;1;36mnote: [0mControl jumps to 'case 0:'  at line 1468[0m
 1467 |   switch (storage_type) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1469:5: [0m[0;1;36mnote: [0m Execution continues on line 1509[0m
 1469 |     break;[0m
      | [0;1;32m    ^
[0m[1msrc/binn.c:1509:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 1541[0m
 1509 |   switch (value->type) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:1594:10: [0m[0;1;36mnote: [0mReturning from 'GetValue'[0m
 1594 |   return GetValue(p, value);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2640:7: [0m[0;1;36mnote: [0mReturning from 'binn_object_get_value'[0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2640:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2642:18: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'psource'[0m
 2642 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m                 ^~~~~~~~~
[0m[1msrc/binn.c:2642:7: [0m[0;1;36mnote: [0mCalling 'copy_value'[0m
 2642 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2386:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2386:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2388:8: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2388 |   if ((type_family(source_type) == BINN_FAMILY_INT) && (source_type != dest_type)) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2388:53: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2388 |   if ((type_family(source_type) == BINN_FAMILY_INT) && (source_type != dest_type)) {[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2390:15: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2390:14: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m             ^
[0m[1msrc/binn.c:2390:66: [0m[0;1;36mnote: [0m'source_type' is not equal to 'dest_type'[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m                                                                 ^~~~~~~~~~~
[0m[1msrc/binn.c:2390:10: [0m[0;1;36mnote: [0mTaking true branch[0m
 2390 |   } else if ((type_family(source_type) == BINN_FAMILY_FLOAT) && (source_type != dest_type)) {[0m
      | [0;1;32m         ^
[0m[1msrc/binn.c:2391:29: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'psource'[0m
 2391 |     return copy_float_value(psource, pdest, source_type, dest_type);[0m
      | [0;1;32m                            ^~~~~~~
[0m[1msrc/binn.c:2391:12: [0m[0;1;36mnote: [0mCalling 'copy_float_value'[0m
 2391 |     return copy_float_value(psource, pdest, source_type, dest_type);[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2332:3: [0m[0;1;36mnote: [0mControl jumps to 'case 130:'  at line 2336[0m
 2332 |   switch (source_type) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2337:31: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2337 |     *(float *)pdest = (float) *(double *)psource;[0m
      | [0;1;32m                              ^~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2340:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2340 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:2354:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2354 |     break;[0m
      | [0;1;32m    ^    
[0m      | [0;32m    {    ;} 
[0m[1msrc/binn.c:2356:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2356 |     *((char *) pvalue) = 0;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2357 |     //size=1;[0m
 2358 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2356:24: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2356 |     *((char *) pvalue) = 0;[0m
      | [0;1;32m                       ^
[0m[1msrc/binn.c:2886:43: [0m[0;1;36mnote: [0mPassing null pointer value via 4th parameter 'pvalue'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m                                          ^
[0m[1m/home/C00536225/dev/tcc/build/lib/clang/21/include/__stddef_null.h:26:14: [0m[0;1;36mnote: [0mexpanded from macro 'NULL'[0m
   26 | #define NULL ((void*)0)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1msrc/binn.c:2886:10: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:14: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'pvalue'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m             ^~~~~~
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0mControl jumps to 'case 32:'  at line 2355[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2356:24: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2356 |     *((char *) pvalue) = 0;[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~^~~
[0m[1msrc/binn.c:2360:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2360 |     *((short *) pvalue) = 0;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2361 |     //size=2;[0m
 2362 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2360:25: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2360 |     *((short *) pvalue) = 0;[0m
      | [0;1;32m                        ^
[0m[1msrc/binn.c:2886:43: [0m[0;1;36mnote: [0mPassing null pointer value via 4th parameter 'pvalue'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m                                          ^
[0m[1m/home/C00536225/dev/tcc/build/lib/clang/21/include/__stddef_null.h:26:14: [0m[0;1;36mnote: [0mexpanded from macro 'NULL'[0m
   26 | #define NULL ((void*)0)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1msrc/binn.c:2886:10: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:14: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'pvalue'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m             ^~~~~~
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0mControl jumps to 'case 64:'  at line 2359[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2360:25: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2360 |     *((short *) pvalue) = 0;[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~^~~
[0m[1msrc/binn.c:2364:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2364 |     *((int *) pvalue) = 0;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2365 |     //size=4;[0m
 2366 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2364:23: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2364 |     *((int *) pvalue) = 0;[0m
      | [0;1;32m                      ^
[0m[1msrc/binn.c:2886:43: [0m[0;1;36mnote: [0mPassing null pointer value via 4th parameter 'pvalue'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m                                          ^
[0m[1m/home/C00536225/dev/tcc/build/lib/clang/21/include/__stddef_null.h:26:14: [0m[0;1;36mnote: [0mexpanded from macro 'NULL'[0m
   26 | #define NULL ((void*)0)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1msrc/binn.c:2886:10: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:14: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'pvalue'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m             ^~~~~~
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0mControl jumps to 'case 96:'  at line 2363[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2364:23: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2364 |     *((int *) pvalue) = 0;[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~^~~
[0m[1msrc/binn.c:2368:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2368 |     *((uint64 *) pvalue) = 0;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 2369 |     //size=8;[0m
 2370 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:2368:26: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2368 |     *((uint64 *) pvalue) = 0;[0m
      | [0;1;32m                         ^
[0m[1msrc/binn.c:2886:43: [0m[0;1;36mnote: [0mPassing null pointer value via 4th parameter 'pvalue'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m                                          ^
[0m[1m/home/C00536225/dev/tcc/build/lib/clang/21/include/__stddef_null.h:26:14: [0m[0;1;36mnote: [0mexpanded from macro 'NULL'[0m
   26 | #define NULL ((void*)0)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1msrc/binn.c:2886:10: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:14: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'pvalue'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m             ^~~~~~
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0mControl jumps to 'case 128:'  at line 2367[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2368:26: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2368 |     *((uint64 *) pvalue) = 0;[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~~~~~^~~
[0m[1msrc/binn.c:2374:22: [0m[0;1;35mwarning: [0m[1mDereference of null pointer [clang-analyzer-core.NullDereference][0m
 2374 |     *(char **)pvalue = NULL;[0m
      | [0;1;32m                     ^
[0m[1msrc/binn.c:2886:43: [0m[0;1;36mnote: [0mPassing null pointer value via 4th parameter 'pvalue'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m                                          ^
[0m[1m/home/C00536225/dev/tcc/build/lib/clang/21/include/__stddef_null.h:26:14: [0m[0;1;36mnote: [0mexpanded from macro 'NULL'[0m
   26 | #define NULL ((void*)0)[0m
      | [0;1;32m             ^~~~~~~~~~
[0m[1msrc/binn.c:2886:10: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2886 |   return binn_map_get(map, id, BINN_NULL, NULL, NULL);[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:14: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'pvalue'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m             ^~~~~~
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0mControl jumps to 'case 224:'  at line 2373[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2374:22: [0m[0;1;36mnote: [0mDereference of null pointer[0m
 2374 |     *(char **)pvalue = NULL;[0m
      | [0;1;32m    ~~~~~~~~~~~~~~~~~^~~~~~
[0m[1msrc/binn.c:2375:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2375 |     break;[0m
      | [0;1;32m    ^    
[0m      | [0;32m    {    ;} 
[0m[1msrc/binn.c:2386:58: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2386 |   if (type_family(source_type) != type_family(dest_type)) return FALSE;[0m
      | [0;1;32m                                                         ^             
[0m      | [0;32m                                                          {
[0m[1msrc/binn.c:2404:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2404 |   if (GetWriteConvertedData(&type, &pvalue, &size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                            ^             
[0m      | [0;32m                                                             {
[0m[1msrc/binn.c:2414:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2414 |   if (GetWriteConvertedData(&type, &pvalue, &size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                            ^             
[0m      | [0;32m                                                             {
[0m[1msrc/binn.c:2424:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2424 |   if (GetWriteConvertedData(&type, &pvalue, &size) == FALSE) return FALSE;[0m
      | [0;1;32m                                                            ^             
[0m      | [0;32m                                                             {
[0m[1msrc/binn.c:2437:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2437 |       return binn_list_add(item, type, pvalue, size);[0m
      | [0;1;32m      ^                                             
[0m      | [0;32m      {                                             ;} 
[0m[1msrc/binn.c:2439:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2439 |       return binn_map_set(item, id, type, pvalue, size);[0m
      | [0;1;32m      ^                                                
[0m      | [0;32m      {                                                ;} 
[0m[1msrc/binn.c:2441:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2441 |       return binn_object_set(item, name, type, pvalue, size);[0m
      | [0;1;32m      ^                                                     
[0m      | [0;32m      {                                                     ;} 
[0m[1msrc/binn.c:2443:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2443 |       return FALSE;[0m
      | [0;1;32m      ^           
[0m      | [0;32m      {           ;} 
[0m[1msrc/binn.c:2455:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2455 |   if (value) free_fn(value);[0m
      | [0;1;32m            ^               
[0m      | [0;32m             {
[0m[1msrc/binn.c:2466:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2466 |   if (value) free_fn(value);[0m
      | [0;1;32m            ^               
[0m      | [0;32m             {
[0m[1msrc/binn.c:2477:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2477 |   if (value) free_fn(value);[0m
      | [0;1;32m            ^               
[0m      | [0;32m             {
[0m[1msrc/binn.c:2541:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2541 |   if (binn_list_get_value(list, pos, &value) == FALSE) return NULL;[0m
      | [0;1;32m                                                      ^            
[0m      | [0;32m                                                       {
[0m[1msrc/binn.c:2542:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2542 |   if (ptype) *ptype = value.type;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2543:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2543 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2557:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2557 |   if (binn_map_get_value(map, id, &value) == FALSE) return NULL;[0m
      | [0;1;32m                                                   ^            
[0m      | [0;32m                                                    {
[0m[1msrc/binn.c:2558:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2558 |   if (ptype) *ptype = value.type;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2559:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2559 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2573:56: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2573 |   if (binn_object_get_value(obj, key, &value) == FALSE) return NULL;[0m
      | [0;1;32m                                                       ^            
[0m      | [0;32m                                                        {
[0m[1msrc/binn.c:2574:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2574 |   if (ptype) *ptype = value.type;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2575:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2575 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2592:66: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                                                 ^             
[0m      | [0;32m                                                                  {
[0m[1msrc/binn.c:2596:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                     ^             
[0m      | [0;32m                                                      {
[0m[1msrc/binn.c:2598:78: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2598 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                             ^             
[0m      | [0;32m                                                                              {
[0m[1msrc/binn.c:2600:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2600 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2613:66: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                                                 ^             
[0m      | [0;32m                                                                  {
[0m[1msrc/binn.c:2617:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                   ^             
[0m      | [0;32m                                                    {
[0m[1msrc/binn.c:2619:78: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2619 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                             ^             
[0m      | [0;32m                                                                              {
[0m[1msrc/binn.c:2621:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2621 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2636:66: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                                                 ^             
[0m      | [0;32m                                                                  {
[0m[1msrc/binn.c:2640:56: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                       ^             
[0m      | [0;32m                                                        {
[0m[1msrc/binn.c:2642:78: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2642 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                             ^             
[0m      | [0;32m                                                                              {
[0m[1msrc/binn.c:2644:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2644 |   if (psize) *psize = value.size;[0m
      | [0;1;32m            ^                    
[0m      | [0;32m             {
[0m[1msrc/binn.c:2646:3: [0m[0;1;35mwarning: [0m[1mAddress of stack memory associated with local variable 'value' is still referred to by the caller variable 'value' upon returning to the caller.  This will be a dangling reference [clang-analyzer-core.StackAddressEscape][0m
 2646 |   return TRUE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:3061:3: [0m[0;1;36mnote: [0mCalling 'binn_object_get'[0m
 3061 |   binn_object_get(obj, key, BINN_OBJECT, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2636:8: [0m[0;1;36mnote: [0m'storage_type' is not equal to BINN_STORAGE_NOBYTES[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~
[0m[1msrc/binn.c:2636:7: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:2636:50: [0m[0;1;36mnote: [0m'pvalue' is not equal to NULL[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                                 ^~~~~~
[0m[1msrc/binn.c:2636:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2640:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2642:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2642 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2644:7: [0m[0;1;36mnote: [0m'psize' is null[0m
 2644 |   if (psize) *psize = value.size;[0m
      | [0;1;32m      ^~~~~
[0m[1msrc/binn.c:2644:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2644 |   if (psize) *psize = value.size;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2646:3: [0m[0;1;36mnote: [0mAddress of stack memory associated with local variable 'value' is still referred to by the caller variable 'value' upon returning to the caller.  This will be a dangling reference[0m
 2632 |   binn value;[0m
      | [0;1;32m  ~~~~~~~~~~
[0m 2633 |   int storage_type;[0m
 2634 | [0m
 2635 |   storage_type = binn_get_read_storage(type);[0m
 2636 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
 2637 | [0m
 2638 |   zero_value(pvalue, type);[0m
 2639 | [0m
 2640 |   if (binn_object_get_value(ptr, key, &value) == FALSE) return FALSE;[0m
 2641 | [0m
 2642 |   if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == FALSE) return FALSE;[0m
 2643 | [0m
 2644 |   if (psize) *psize = value.size;[0m
 2645 | [0m
 2646 |   return TRUE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2665:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2665 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2661:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2661 |   signed char value;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2663:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2663 |   binn_list_get(list, pos, BINN_INT8, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2663:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2663 |   binn_list_get(list, pos, BINN_INT8, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2665:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2665 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2673:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2673 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2669:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2669 |   short value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2671:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2671 |   binn_list_get(list, pos, BINN_INT16, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2671:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2671 |   binn_list_get(list, pos, BINN_INT16, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2673:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2673 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2681:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2681 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2677:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2677 |   int value;[0m
      | [0;1;32m  ^~~~~~~~~
[0m[1msrc/binn.c:2679:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2679 |   binn_list_get(list, pos, BINN_INT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2679:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2679 |   binn_list_get(list, pos, BINN_INT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2681:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2681 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2689:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2689 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2685:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2685 |   int64 value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2687:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2687 |   binn_list_get(list, pos, BINN_INT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2687:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2687 |   binn_list_get(list, pos, BINN_INT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2689:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2689 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2697:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2697 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2693:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2693 |   unsigned char value;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2695:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2695 |   binn_list_get(list, pos, BINN_UINT8, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2695:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2695 |   binn_list_get(list, pos, BINN_UINT8, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2697:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2697 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2705:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2705 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2701:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2701 |   unsigned short value;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2703:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2703 |   binn_list_get(list, pos, BINN_UINT16, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2703:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2703 |   binn_list_get(list, pos, BINN_UINT16, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2705:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2705 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2713:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2713 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2709:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2709 |   unsigned int value;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2711:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2711 |   binn_list_get(list, pos, BINN_UINT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2711:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2711 |   binn_list_get(list, pos, BINN_UINT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2713:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2713 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2721:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2721 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2717:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2717 |   uint64 value;[0m
      | [0;1;32m  ^~~~~~~~~~~~
[0m[1msrc/binn.c:2719:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2719 |   binn_list_get(list, pos, BINN_UINT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2719:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2719 |   binn_list_get(list, pos, BINN_UINT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2721:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2721 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2729:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2729 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2725:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2725 |   float value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2727:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2727 |   binn_list_get(list, pos, BINN_FLOAT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2727:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2727 |   binn_list_get(list, pos, BINN_FLOAT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2729:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2729 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2737:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2737 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2733:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2733 |   double value;[0m
      | [0;1;32m  ^~~~~~~~~~~~
[0m[1msrc/binn.c:2735:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2735 |   binn_list_get(list, pos, BINN_FLOAT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2735:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2735 |   binn_list_get(list, pos, BINN_FLOAT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2737:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2737 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2759:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2759 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2755:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2755 |   char *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2757:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2757 |   binn_list_get(list, pos, BINN_STRING, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2757:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2757 |   binn_list_get(list, pos, BINN_STRING, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2759:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2759 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2767:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2767 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2763:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2763 |   void *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2765:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2765 |   binn_list_get(list, pos, BINN_BLOB, &value, psize);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2765:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2765 |   binn_list_get(list, pos, BINN_BLOB, &value, psize);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2767:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2767 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2775:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2775 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2771:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2771 |   void *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2773:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2773 |   binn_list_get(list, pos, BINN_LIST, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2773:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2773 |   binn_list_get(list, pos, BINN_LIST, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2775:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2775 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2783:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2783 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2779:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2779 |   void *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2781:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2781 |   binn_list_get(list, pos, BINN_MAP, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2781:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2781 |   binn_list_get(list, pos, BINN_MAP, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2783:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2783 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2791:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2791 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2787:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2787 |   void *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2789:3: [0m[0;1;36mnote: [0mCalling 'binn_list_get'[0m
 2789 |   binn_list_get(list, pos, BINN_OBJECT, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2592:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2592 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2594[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2594:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2594 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2596:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2596:55: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2596 |   if (binn_list_get_value(ptr, pos, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                      ^
[0m[1msrc/binn.c:2789:3: [0m[0;1;36mnote: [0mReturning from 'binn_list_get'[0m
 2789 |   binn_list_get(list, pos, BINN_OBJECT, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2791:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2791 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2801:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2801 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2797:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2797 |   signed char value;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2799:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2799 |   binn_map_get(map, id, BINN_INT8, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2799:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2799 |   binn_map_get(map, id, BINN_INT8, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2801:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2801 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2809:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2809 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2805:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2805 |   short value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2807:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2807 |   binn_map_get(map, id, BINN_INT16, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2807:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2807 |   binn_map_get(map, id, BINN_INT16, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2809:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2809 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2817:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2817 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2813:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2813 |   int value;[0m
      | [0;1;32m  ^~~~~~~~~
[0m[1msrc/binn.c:2815:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2815 |   binn_map_get(map, id, BINN_INT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2815:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2815 |   binn_map_get(map, id, BINN_INT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2817:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2817 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2825:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2825 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2821:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2821 |   int64 value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2823:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2823 |   binn_map_get(map, id, BINN_INT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2823:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2823 |   binn_map_get(map, id, BINN_INT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2825:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2825 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2833:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2833 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2829:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2829 |   unsigned char value;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2831:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2831 |   binn_map_get(map, id, BINN_UINT8, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2831:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2831 |   binn_map_get(map, id, BINN_UINT8, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2833:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2833 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2841:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2841 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2837:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2837 |   unsigned short value;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2839:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2839 |   binn_map_get(map, id, BINN_UINT16, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2839:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2839 |   binn_map_get(map, id, BINN_UINT16, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2841:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2841 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2849:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2849 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2845:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2845 |   unsigned int value;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2847:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2847 |   binn_map_get(map, id, BINN_UINT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2847:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2847 |   binn_map_get(map, id, BINN_UINT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2849:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2849 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2857:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2857 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2853:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2853 |   uint64 value;[0m
      | [0;1;32m  ^~~~~~~~~~~~
[0m[1msrc/binn.c:2855:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2855 |   binn_map_get(map, id, BINN_UINT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2855:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2855 |   binn_map_get(map, id, BINN_UINT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2857:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2857 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2865:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2865 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2861:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2861 |   float value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2863:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2863 |   binn_map_get(map, id, BINN_FLOAT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2863:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2863 |   binn_map_get(map, id, BINN_FLOAT32, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2865:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2865 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2873:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2873 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2869:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2869 |   double value;[0m
      | [0;1;32m  ^~~~~~~~~~~~
[0m[1msrc/binn.c:2871:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2871 |   binn_map_get(map, id, BINN_FLOAT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2871:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2871 |   binn_map_get(map, id, BINN_FLOAT64, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2873:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2873 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2895:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2895 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2891:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2891 |   char *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2893:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2893 |   binn_map_get(map, id, BINN_STRING, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2893:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2893 |   binn_map_get(map, id, BINN_STRING, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2895:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2895 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2903:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2903 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2899:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2899 |   void *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2901:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2901 |   binn_map_get(map, id, BINN_BLOB, &value, psize);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is not equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:7: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:2613:50: [0m[0;1;36mnote: [0m'pvalue' is not equal to NULL[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                                 ^~~~~~
[0m[1msrc/binn.c:2613:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2901:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2901 |   binn_map_get(map, id, BINN_BLOB, &value, psize);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2903:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2903 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2911:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2911 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2907:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2907 |   void *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2909:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2909 |   binn_map_get(map, id, BINN_LIST, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2909:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2909 |   binn_map_get(map, id, BINN_LIST, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2911:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2911 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2919:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2919 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2915:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2915 |   void *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2917:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2917 |   binn_map_get(map, id, BINN_MAP, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0mAssuming 'storage_type' is equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:46: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                             ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2917:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2917 |   binn_map_get(map, id, BINN_MAP, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2919:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2919 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2927:3: [0m[0;1;35mwarning: [0m[1mUndefined or garbage value returned to caller [clang-analyzer-core.uninitialized.UndefReturn][0m
 2927 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:2923:3: [0m[0;1;36mnote: [0m'value' declared without an initial value[0m
 2923 |   void *value;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1msrc/binn.c:2925:3: [0m[0;1;36mnote: [0mCalling 'binn_map_get'[0m
 2925 |   binn_map_get(map, id, BINN_OBJECT, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2613:8: [0m[0;1;36mnote: [0m'storage_type' is not equal to BINN_STORAGE_NOBYTES[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m       ^~~~~~~~~~~~
[0m[1msrc/binn.c:2613:7: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m      ^
[0m[1msrc/binn.c:2613:50: [0m[0;1;36mnote: [0m'pvalue' is not equal to NULL[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m                                                 ^~~~~~
[0m[1msrc/binn.c:2613:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2613 |   if ((storage_type != BINN_STORAGE_NOBYTES) && (pvalue == NULL)) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mCalling 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2352:3: [0m[0;1;36mnote: [0m'Default' branch taken. Execution continues on line 2615[0m
 2352 |   switch (binn_get_read_storage(type)) {[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2380:1: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2380 | }[0m
      | [0;1;32m^
[0m[1msrc/binn.c:2615:3: [0m[0;1;36mnote: [0mReturning from 'zero_value'[0m
 2615 |   zero_value(pvalue, type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2617:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m  ^
[0m[1msrc/binn.c:2617:53: [0m[0;1;36mnote: [0mReturning without writing to '*pvalue'[0m
 2617 |   if (binn_map_get_value(ptr, id, &value) == FALSE) return FALSE;[0m
      | [0;1;32m                                                    ^
[0m[1msrc/binn.c:2925:3: [0m[0;1;36mnote: [0mReturning from 'binn_map_get'[0m
 2925 |   binn_map_get(map, id, BINN_OBJECT, &value, NULL);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1msrc/binn.c:2927:3: [0m[0;1;36mnote: [0mUndefined or garbage value returned to caller[0m
 2927 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:3063:3: [0m[0;1;35mwarning: [0m[1mAddress of stack memory associated with local variable 'value' returned to caller [clang-analyzer-core.StackAddressEscape][0m
 2632 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:3063:3: [0m[0;1;36mnote: [0mAddress of stack memory associated with local variable 'value' returned to caller[0m
 2632 |   return value;[0m
      | [0;1;32m  ^      ~~~~~
[0m[1msrc/binn.c:3073:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3073 |     memset(item, 0, sizeof(binn));[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/binn.c:3073:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 3073 |     memset(item, 0, sizeof(binn));[0m
      | [0;1;32m    ^~~~~~
[0m[1msrc/binn.c:3091:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3091 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1msrc/binn.c:3093:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3093 |       if (size == 0) size = strlen((char*)pvalue) + 1;[0m
      | [0;1;32m      ^                                              
[0m      | [0;32m      {                                              ;} 
[0m[1msrc/binn.c:3093:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3093 |       if (size == 0) size = strlen((char*)pvalue) + 1;[0m
      | [0;1;32m                    ^                                 
[0m      | [0;32m                     {
[0m[1msrc/binn.c:3103:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3103 |         if (storage_type == BINN_STORAGE_STRING) size--;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1msrc/binn.c:3108:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3108 |       item->size = size;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 3109 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1msrc/binn.c:3111:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3111 |       item->ptr = &item->vint32;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 3112 |       copy_raw_value(pvalue, item->ptr, storage_type);[0m
      | [0;1;32m                                                     
[0m      | [0;32m                                                     ;} 
[0m[1msrc/binn.c:3122:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3122 |   if (item == NULL || str == NULL) return FALSE;[0m
      | [0;1;32m                                  ^             
[0m      | [0;32m                                   {
[0m[1msrc/binn.c:3126:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3126 |     if (item->ptr == NULL) return FALSE;[0m
      | [0;1;32m                          ^             
[0m      | [0;32m                           {
[0m[1msrc/binn.c:3142:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3142 |   if (item == NULL || ptr == NULL) return FALSE;[0m
      | [0;1;32m                                  ^             
[0m      | [0;32m                                   {
[0m[1msrc/binn.c:3146:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3146 |     if (item->ptr == NULL) return FALSE;[0m
      | [0;1;32m                          ^             
[0m      | [0;32m                           {
[0m[1msrc/binn.c:3178:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3178 |   if (is_negative) retval *= -1;[0m
      | [0;1;32m                  ^             
[0m      | [0;32m                   {
[0m[1msrc/binn.c:3188:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3188 |   if (p == NULL) return FALSE;[0m
      | [0;1;32m                ^             
[0m      | [0;32m                 {
[0m[1msrc/binn.c:3189:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3189 |   if (*p == '-') p++;[0m
      | [0;1;32m                ^    
[0m      | [0;32m                 {
[0m[1msrc/binn.c:3190:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3190 |   if (*p == 0) return FALSE;[0m
      | [0;1;32m              ^             
[0m      | [0;32m               {
[0m[1msrc/binn.c:3208:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3208 |   if (p == NULL) return FALSE;[0m
      | [0;1;32m                ^             
[0m      | [0;32m                 {
[0m[1msrc/binn.c:3209:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3209 |   if (*p == '-') p++;[0m
      | [0;1;32m                ^    
[0m      | [0;32m                 {
[0m[1msrc/binn.c:3210:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3210 |   if (*p == 0) return FALSE;[0m
      | [0;1;32m              ^             
[0m      | [0;32m               {
[0m[1msrc/binn.c:3216:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3216 |       if (!number_found) retval = FALSE;[0m
      | [0;1;32m                        ^               
[0m      | [0;32m                         {
[0m[1msrc/binn.c:3233:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3233 |   if (str == NULL || pbool == NULL) return FALSE;[0m
      | [0;1;32m                                   ^             
[0m      | [0;32m                                    {
[0m[1msrc/binn.c:3235:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3235 |   if (stricmp(str, "true") == 0) goto loc_true;[0m
      | [0;1;32m                                ^              
[0m      | [0;32m                                 {
[0m[1msrc/binn.c:3236:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3236 |   if (stricmp(str, "yes") == 0) goto loc_true;[0m
      | [0;1;32m                               ^              
[0m      | [0;32m                                {
[0m[1msrc/binn.c:3237:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3237 |   if (stricmp(str, "on") == 0) goto loc_true;[0m
      | [0;1;32m                              ^              
[0m      | [0;32m                               {
[0m[1msrc/binn.c:3240:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3240 |   if (stricmp(str, "false") == 0) goto loc_false;[0m
      | [0;1;32m                                 ^               
[0m      | [0;32m                                  {
[0m[1msrc/binn.c:3241:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3241 |   if (stricmp(str, "no") == 0) goto loc_false;[0m
      | [0;1;32m                              ^               
[0m      | [0;32m                               {
[0m[1msrc/binn.c:3242:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3242 |   if (stricmp(str, "off") == 0) goto loc_false;[0m
      | [0;1;32m                               ^               
[0m      | [0;32m                                {
[0m[1msrc/binn.c:3271:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3271 |   if (value == NULL || pint == NULL) return FALSE;[0m
      | [0;1;32m                                    ^             
[0m      | [0;32m                                     {
[0m[1msrc/binn.c:3279:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3279 |     if ((value->vfloat < INT32_MIN) || (value->vfloat > INT32_MAX)) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3280 |     *pint = roundval(value->vfloat);[0m
 3281 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3279:68: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3279 |     if ((value->vfloat < INT32_MIN) || (value->vfloat > INT32_MAX)) return FALSE;[0m
      | [0;1;32m                                                                   ^             
[0m      | [0;32m                                                                    {
[0m[1msrc/binn.c:3283:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3283 |     if ((value->vdouble < INT32_MIN) || (value->vdouble > INT32_MAX)) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3284 |     *pint = roundval(value->vdouble);[0m
 3285 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3283:70: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3283 |     if ((value->vdouble < INT32_MIN) || (value->vdouble > INT32_MAX)) return FALSE;[0m
      | [0;1;32m                                                                     ^             
[0m      | [0;32m                                                                      {
[0m[1msrc/binn.c:3287:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3287 |     if (is_integer((char*)value->ptr))[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3288 |       *pint = atoi((char*)value->ptr);[0m
 3289 |     else if (is_float((char*)value->ptr))[0m
 3290 |       *pint = roundval(atof((char*)value->ptr));[0m
 3291 |     else[0m
 3292 |       return FALSE;[0m
 3293 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3287:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3287 |     if (is_integer((char*)value->ptr))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m 3288 |       *pint = atoi((char*)value->ptr);[0m
 3289 |     else if (is_float((char*)value->ptr))[0m
      | [0;32m    } 
[0m[1msrc/binn.c:3289:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3289 |     else if (is_float((char*)value->ptr))[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m 3290 |       *pint = roundval(atof((char*)value->ptr));[0m
 3291 |     else[0m
      | [0;32m    } 
[0m[1msrc/binn.c:3291:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3291 |     else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m 3292 |       return FALSE;[0m
      | [0;1;32m                   
[0m[1msrc/binn.c:3295:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3295 |     *pint = value->vbool;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3296 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3298:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3298 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:3308:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3308 |   if (value == NULL || pint == NULL) return FALSE;[0m
      | [0;1;32m                                    ^             
[0m      | [0;32m                                     {
[0m[1msrc/binn.c:3316:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3316 |     if ((value->vfloat < INT64_MIN) || (value->vfloat > INT64_MAX)) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3317 |     *pint = roundval(value->vfloat);[0m
 3318 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3316:68: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3316 |     if ((value->vfloat < INT64_MIN) || (value->vfloat > INT64_MAX)) return FALSE;[0m
      | [0;1;32m                                                                   ^             
[0m      | [0;32m                                                                    {
[0m[1msrc/binn.c:3320:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3320 |     if ((value->vdouble < INT64_MIN) || (value->vdouble > INT64_MAX)) return FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3321 |     *pint = roundval(value->vdouble);[0m
 3322 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3320:70: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3320 |     if ((value->vdouble < INT64_MIN) || (value->vdouble > INT64_MAX)) return FALSE;[0m
      | [0;1;32m                                                                     ^             
[0m      | [0;32m                                                                      {
[0m[1msrc/binn.c:3324:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3324 |     if (is_integer((char*)value->ptr))[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3325 |       *pint = atoi64((char*)value->ptr);[0m
 3326 |     else if (is_float((char*)value->ptr))[0m
 3327 |       *pint = roundval(atof((char*)value->ptr));[0m
 3328 |     else[0m
 3329 |       return FALSE;[0m
 3330 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3324:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3324 |     if (is_integer((char*)value->ptr))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m 3325 |       *pint = atoi64((char*)value->ptr);[0m
 3326 |     else if (is_float((char*)value->ptr))[0m
      | [0;32m    } 
[0m[1msrc/binn.c:3326:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3326 |     else if (is_float((char*)value->ptr))[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m 3327 |       *pint = roundval(atof((char*)value->ptr));[0m
 3328 |     else[0m
      | [0;32m    } 
[0m[1msrc/binn.c:3328:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3328 |     else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m 3329 |       return FALSE;[0m
      | [0;1;32m                   
[0m[1msrc/binn.c:3332:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3332 |     *pint = value->vbool;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3333 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3335:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3335 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:3346:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3346 |   if (value == NULL || pfloat == NULL) return FALSE;[0m
      | [0;1;32m                                      ^             
[0m      | [0;32m                                       {
[0m[1msrc/binn.c:3349:77: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3349 |     if (copy_int_value(value->ptr, &vint, value->type, BINN_INT64) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                            ^             
[0m      | [0;32m                                                                             {
[0m[1msrc/binn.c:3356:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3356 |     *pfloat = value->vfloat;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3357 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3359:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3359 |     *pfloat = value->vdouble;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3360 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3362:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3362 |     if (is_integer((char*)value->ptr))[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3363 |       *pfloat = (double) atoi64((char*)value->ptr);[0m
 3364 |     else if (is_float((char*)value->ptr))[0m
 3365 |       *pfloat = atof((char*)value->ptr);[0m
 3366 |     else[0m
 3367 |       return FALSE;[0m
 3368 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3362:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3362 |     if (is_integer((char*)value->ptr))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m 3363 |       *pfloat = (double) atoi64((char*)value->ptr);[0m
 3364 |     else if (is_float((char*)value->ptr))[0m
      | [0;32m    } 
[0m[1msrc/binn.c:3364:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3364 |     else if (is_float((char*)value->ptr))[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m 3365 |       *pfloat = atof((char*)value->ptr);[0m
 3366 |     else[0m
      | [0;32m    } 
[0m[1msrc/binn.c:3366:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3366 |     else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m 3367 |       return FALSE;[0m
      | [0;1;32m                   
[0m[1msrc/binn.c:3370:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3370 |     *pfloat = value->vbool;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3371 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3373:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3373 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:3384:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3384 |   if (value == NULL || pbool == NULL) return FALSE;[0m
      | [0;1;32m                                     ^             
[0m      | [0;32m                                      {
[0m[1msrc/binn.c:3387:77: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3387 |     if (copy_int_value(value->ptr, &vint, value->type, BINN_INT64) == FALSE) return FALSE;[0m
      | [0;1;32m                                                                            ^             
[0m      | [0;32m                                                                             {
[0m[1msrc/binn.c:3394:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3394 |     *pbool = value->vbool;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3395 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3397:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3397 |     *pbool = (value->vfloat != 0) ? TRUE : FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3398 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3400:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3400 |     *pbool = (value->vdouble != 0) ? TRUE : FALSE;[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3401 |     break;[0m
      | [0;1;32m         
[0m      | [0;32m         ;} 
[0m[1msrc/binn.c:3403:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3403 |     return is_bool_str((char*)value->ptr, pbool);[0m
      | [0;1;32m    ^                                           
[0m      | [0;32m    {                                           ;} 
[0m[1msrc/binn.c:3405:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3405 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m[1msrc/binn.c:3417:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3417 |   if (value == NULL) return NULL;[0m
      | [0;1;32m                    ^            
[0m      | [0;32m                     {
[0m[1msrc/binn.c:3420:77: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3420 |     if (copy_int_value(value->ptr, &vint, value->type, BINN_INT64) == FALSE) return NULL;[0m
      | [0;1;32m                                                                            ^            
[0m      | [0;32m                                                                             {
[0m[1msrc/binn.c:3421:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3421 |     snprintf(buf, sizeof buf, "%" INT64_FORMAT, vint);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1msrc/binn.c:3421:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
 3421 |     snprintf(buf, sizeof buf, "%" INT64_FORMAT, vint);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1msrc/binn.c:3427:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3427 |     value->vdouble = value->vfloat;[0m
      | [0;1;32m    ^                             
[0m      | [0;32m    {                             ;} 
[0m[1msrc/binn.c:3429:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 3429 |     snprintf(buf, sizeof buf, "%g", value->vdouble);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1msrc/binn.c:3429:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
 3429 |     snprintf(buf, sizeof buf, "%g", value->vdouble);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1msrc/binn.c:3429:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3429 |     snprintf(buf, sizeof buf, "%g", value->vdouble);[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3430 |     goto loc_convert_value;[0m
      | [0;1;32m                          
[0m      | [0;32m                          ;} 
[0m[1msrc/binn.c:3432:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3432 |     return (char*) value->ptr;[0m
      | [0;1;32m    ^                        
[0m      | [0;32m    {                        ;} 
[0m[1msrc/binn.c:3434:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3434 |     if (value->vbool)[0m
      | [0;1;32m    ^
[0m      | [0;32m    {
[0m 3435 |       strcpy(buf, "true");[0m
 3436 |     else[0m
 3437 |       strcpy(buf, "false");[0m
 3438 |     goto loc_convert_value;[0m
      | [0;1;32m                          
[0m      | [0;32m                          ;} 
[0m[1msrc/binn.c:3434:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3434 |     if (value->vbool)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m 3435 |       strcpy(buf, "true");[0m
 3436 |     else[0m
      | [0;32m    } 
[0m[1msrc/binn.c:3436:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3436 |     else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m 3437 |       strcpy(buf, "false");[0m
      | [0;1;32m                           
[0m[1msrc/binn.c:3447:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3447 |   if (value->ptr == NULL) return NULL;[0m
      | [0;1;32m                         ^            
[0m      | [0;32m                          {
[0m[1msrc/binn.c:3460:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 3460 |   if (item == NULL) return FALSE;[0m
      | [0;1;32m                   ^             
[0m      | [0;32m                    {
[0m[1msrc/binn.c:3468:5: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 3468 |     return FALSE;[0m
      | [0;1;32m    ^           
[0m      | [0;32m    {           ;} 
[0m432 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.



Process exited with return code 0
