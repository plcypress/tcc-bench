Command: /itch/common/crepos/tcc-scripts/tidy-braces.sh
Directory: /itch/common/crepos/cu-to-rtu/c/shairport
----------------------------------------

Enabled checks:
    clang-analyzer-apiModeling.Errno
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.TrustReturnsNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.BitwiseShift
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DereferenceModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.NewArraySize
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.ArrayDelete
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PlacementNew
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtrModeling
    clang-analyzer-cplusplus.StringChecker
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.core.EnumCastOutOfRange
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-optin.taint.GenericTaint
    clang-analyzer-optin.taint.TaintPropagation
    clang-analyzer-optin.taint.TaintedAlloc
    clang-analyzer-optin.taint.TaintedDiv
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.ArrayBound
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.MmapWriteExec
    clang-analyzer-security.PointerSub
    clang-analyzer-security.PutenvStackArray
    clang-analyzer-security.SetgidSetuidOrder
    clang-analyzer-security.cert.env.InvalidPtr
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.BlockInCriticalSection
    clang-analyzer-unix.Chroot
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Errno
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.StdCLibraryFunctions
    clang-analyzer-unix.Stream
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NotNullTerminated
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    clang-analyzer-webkit.NoUncountedMemberChecker
    clang-analyzer-webkit.RefCntblBaseVirtualDtor
    clang-analyzer-webkit.UncountedLambdaCapturesChecker
    readability-braces-around-statements

Running clang-tidy for 15 files out of 15 in compilation database ...
[ 1/15][0.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmpcznyx4cz.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/audio_dummy.c
[1maudio_dummy.c:57:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   57 |     if (!starttime)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m   58 |         starttime = nowtime;[0m
      | [0;1;32m                            
[0m1 warning generated.

[ 2/15][0.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmpa4r4ta6i.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/audio.c
[1maudio.c:69:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   69 |     if (!name)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   70 |         return outputs[0];[0m
      | [0;1;32m                          
[0m[1maudio.c:72:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   72 |     for (out=outputs; *out; out++)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m   73 |         if (!strcasecmp(name, (*out)->name))[0m
   74 |             return *out;[0m
      | [0;1;32m                        
[0m[1maudio.c:73:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   73 |         if (!strcasecmp(name, (*out)->name))[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m   74 |             return *out;[0m
      | [0;1;32m                        
[0m[1maudio.c:83:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   83 |     for (out=outputs; *out; out++)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m   84 |         printf("    %s%s\n", (*out)->name, out==outputs ? " (default)" : "");[0m
      | [0;1;32m                                                                             
[0m4 warnings generated.

[ 3/15][1.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmpcoc1za6i.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/mdns.c
[1mmdns.c:64:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   64 |         sprintf(p, "%02X", config.hw_addr[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdns.c:64:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   64 |         sprintf(p, "%02X", config.hw_addr[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmdns.c:68:5: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   68 |     strcpy(p, config.apname);[0m
      | [0;1;32m    ^~~~~~
[0m[1mmdns.c:68:5: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
   68 |     strcpy(p, config.apname);[0m
      | [0;1;32m    ^~~~~~
[0m[1mmdns.c:76:59: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   76 |             if (strcmp((*b)->name, config.mdns_name) != 0) // Not the one we are looking for[0m
      | [0;1;32m                                                          ^
[0m      | [0;32m                                                           {
[0m   77 |                 continue;[0m
      | [0;1;32m                         
[0m[1mmdns.c:86:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   86 |         if (*b == NULL)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   87 |             warn("%s mDNS backend not found");[0m
      | [0;1;32m                                              
[0m[1mmdns.c:102:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  102 |     if (config.mdns == NULL)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  103 |         die("Could not establish mDNS advertisement!");[0m
      | [0;1;32m                                                       
[0m9 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 4/15][1.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmp4pah7uyc.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/audio_pipe.c
[1maudio_pipe.c:49:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   49 |     if (fd >= 0)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   50 |         stop();[0m
      | [0;1;32m               
[0m[1maudio_pipe.c:78:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |     if (!starttime)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m   79 |         starttime = nowtime;[0m
      | [0;1;32m                            
[0m[1maudio_pipe.c:93:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   93 |         if (samples_played > 5 * Fs)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m   94 |             start(Fs);[0m
      | [0;1;32m                      
[0m[1maudio_pipe.c:99:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   99 |     if (write(fd, buf, samples*4) < 0)[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  100 |         stop();[0m
      | [0;1;32m               
[0m[1maudio_pipe.c:106:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  106 |     if (argc != 1)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  107 |         die("bad argument(s) to pipe");[0m
      | [0;1;32m                                       
[0m[1maudio_pipe.c:111:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  111 |     if (stat(pipename, &sb) < 0)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  112 |         die("could not stat() pipe");[0m
      | [0;1;32m                                     
[0m[1maudio_pipe.c:114:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  114 |     if (!S_ISFIFO(sb.st_mode))[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  115 |         die("not a pipe");[0m
      | [0;1;32m                          
[0m[1maudio_pipe.c:121:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  121 |     if (fd >= 0)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  122 |         stop();[0m
      | [0;1;32m               
[0m[1maudio_pipe.c:123:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  123 |     if (pipename)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  124 |         free(pipename);[0m
      | [0;1;32m                       
[0m13 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 5/15][2.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmpngwm1pu8.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/daemon.c
[1mdaemon.c:41:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   41 |     if (ret < 0)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   42 |         die("couldn't create a pipe?!");[0m
      | [0;1;32m                                        
[0m[1mdaemon.c:45:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   45 |     if (pid < 0)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m   46 |         die("failed to fork!");[0m
      | [0;1;32m                               
[0m[1mdaemon.c:55:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   55 |             fprintf(stderr, "Spawning the daemon failed.\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mdaemon.c:55:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   55 |             fprintf(stderr, "Spawning the daemon failed.\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mdaemon.c:60:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   60 |             fprintf(stderr, "\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mdaemon.c:60:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   60 |             fprintf(stderr, "\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mdaemon.c:64:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   64 |             if (!config.pidfile)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m   65 |                 printf("%d\n", pid);[0m
      | [0;1;32m                                    
[0m9 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 6/15][4.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmpj_rtj0y0.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/mdns_external.c
[1mmdns_external.c:89:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   89 |     sprintf(mdns_port, "%d", config.port);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mmdns_external.c:89:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
   89 |     sprintf(mdns_port, "%d", config.port);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mmdns_external.c:101:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  101 |     else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m  102 |         debug(1, "Calling %s failed", argv[0]);[0m
      | [0;1;32m                                               
[0m[1mmdns_external.c:111:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  111 |     else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m  112 |         debug(1, "Calling %s failed", argv[0]);[0m
      | [0;1;32m                                               
[0m[1mmdns_external.c:120:5: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  120 |     sprintf(mdns_port, "%d", config.port);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mmdns_external.c:120:5: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  120 |     sprintf(mdns_port, "%d", config.port);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mmdns_external.c:131:9: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  131 |     else[0m
      | [0;1;32m        ^
[0m      | [0;32m         {
[0m  132 |         debug(1, "Calling %s failed", argv[0]);[0m
      | [0;1;32m                                               
[0m[1mmdns_external.c:138:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  138 |     if (mdns_pid)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  139 |         kill(mdns_pid, SIGTERM);[0m
      | [0;1;32m                                
[0m10 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 7/15][4.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmplajgjmld.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/mdns_tinysvcmdns.c
[1mmdns_tinysvcmdns.c:62:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
   62 |         strcat(hostname, ".local");[0m
      | [0;1;32m        ^~~~~~
[0m[1mmdns_tinysvcmdns.c:62:9: [0m[0;1;36mnote: [0mCall to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119[0m
   62 |         strcat(hostname, ".local");[0m
      | [0;1;32m        ^~~~~~
[0m[1mmdns_tinysvcmdns.c:71:5: [0m[0;1;35mwarning: [0m[1mValue stored to 'ifa' is never read [clang-analyzer-deadcode.DeadStores][0m
   71 |     ifa = ifalist;[0m
      | [0;1;32m    ^     ~~~~~~~
[0m[1mmdns_tinysvcmdns.c:71:5: [0m[0;1;36mnote: [0mValue stored to 'ifa' is never read[0m
   71 |     ifa = ifalist;[0m
      | [0;1;32m    ^     ~~~~~~~
[0m[1mmdns_tinysvcmdns.c:104:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  104 |         if (ifa->ifa_flags & IFF_LOOPBACK) // Skip loop-back interfaces[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m  105 |             continue;[0m
      | [0;1;32m                     
[0m[1mmdns_tinysvcmdns.c:109:27: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  109 |             case AF_INET: { // ipv4[0m
      | [0;1;32m                          ^
[0m      | [0;32m                          {
[0m  110 |                     uint32_t ip = ((struct sockaddr_in *)ifa->ifa_addr)->sin_addr.s_addr;[0m
  111 |                     struct rr_entry *a_e = rr_create_a(create_nlabel(hostname), ip);[0m
  112 |                     mdnsd_add_rr(svr, a_e);[0m
  113 |                 }[0m
  114 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mmdns_tinysvcmdns.c:115:28: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  115 |             case AF_INET6: { // ipv6[0m
      | [0;1;32m                           ^
[0m      | [0;32m                           {
[0m  116 |                     struct in6_addr *addr = &((struct sockaddr_in6 *)ifa->ifa_addr)->sin6_addr;[0m
  117 |                     struct rr_entry *aaaa_e = rr_create_aaaa(create_nlabel(hostname), addr);[0m
  118 |                     mdnsd_add_rr(svr, aaaa_e);[0m
  119 |                 }[0m
  120 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m9 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 8/15][6.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmp8hf22r5k.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/common.c
[1mcommon.c:45:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   45 |     fprintf(stderr, "FATAL: ");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcommon.c:45:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   45 |     fprintf(stderr, "FATAL: ");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcommon.c:51:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |     if (config.daemonise)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m   52 |         daemon_fail(format, args); // Send error message to parent[0m
      | [0;1;32m                                                                  
[0m[1mcommon.c:56:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   56 |     fprintf(stderr, "\n");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcommon.c:56:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   56 |     fprintf(stderr, "\n");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcommon.c:61:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   61 |     fprintf(stderr, "WARNING: ");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcommon.c:61:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   61 |     fprintf(stderr, "WARNING: ");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcommon.c:66:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   66 |     fprintf(stderr, "\n");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcommon.c:66:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
   66 |     fprintf(stderr, "\n");[0m
      | [0;1;32m    ^~~~~~~
[0m[1mcommon.c:70:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   70 |     if (level > debuglev)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m   71 |         return;[0m
      | [0;1;32m               
[0m[1mcommon.c:92:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   92 |         memcpy(buf, bptr->data, bptr->length-1);[0m
      | [0;1;32m        ^~~~~~
[0m[1mcommon.c:92:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   92 |         memcpy(buf, bptr->data, bptr->length-1);[0m
      | [0;1;32m        ^~~~~~
[0m[1mcommon.c:112:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |     while (inlen++ & 3)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  113 |         BIO_write(bmem, "=", 1);[0m
      | [0;1;32m                                
[0m[1mcommon.c:158:15: [0m[0;1;35mwarning: [0m[1m'PEM_read_bio_RSAPrivateKey' is deprecated [clang-diagnostic-deprecated-declarations][0m
  158 |         rsa = PEM_read_bio_RSAPrivateKey(bmem, NULL, NULL, NULL);[0m
      | [0;1;32m              ^
[0m[1m/usr/include/openssl/pem.h:447:24: [0m[0;1;36mnote: [0m'PEM_read_bio_RSAPrivateKey' has been explicitly marked deprecated here[0m
  447 | DECLARE_PEM_rw_cb_attr(OSSL_DEPRECATEDIN_3_0, RSAPrivateKey, RSA)[0m
      | [0;1;32m                       ^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mcommon.c:162:27: [0m[0;1;35mwarning: [0m[1m'RSA_size' is deprecated [clang-diagnostic-deprecated-declarations][0m
  162 |     uint8_t *out = malloc(RSA_size(rsa));[0m
      | [0;1;32m                          ^
[0m[1m/usr/include/openssl/rsa.h:209:1: [0m[0;1;36mnote: [0m'RSA_size' has been explicitly marked deprecated here[0m
  209 | OSSL_DEPRECATEDIN_3_0 int RSA_size(const RSA *rsa);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mcommon.c:165:13: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  165 |             *outlen = RSA_private_encrypt(inlen, input, out, rsa,[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  166 |                                           RSA_PKCS1_PADDING);[0m
  167 |             break;[0m
      | [0;1;32m                 
[0m      | [0;32m                 ;} 
[0m[1mcommon.c:165:23: [0m[0;1;35mwarning: [0m[1m'RSA_private_encrypt' is deprecated [clang-diagnostic-deprecated-declarations][0m
  165 |             *outlen = RSA_private_encrypt(inlen, input, out, rsa,[0m
      | [0;1;32m                      ^
[0m[1m/usr/include/openssl/rsa.h:289:1: [0m[0;1;36mnote: [0m'RSA_private_encrypt' has been explicitly marked deprecated here[0m
  289 | OSSL_DEPRECATEDIN_3_0[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mcommon.c:169:13: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  169 |             *outlen = RSA_private_decrypt(inlen, input, out, rsa,[0m
      | [0;1;32m            ^
[0m      | [0;32m            {
[0m  170 |                                           RSA_PKCS1_OAEP_PADDING);[0m
  171 |             break;[0m
      | [0;1;32m                 
[0m      | [0;32m                 ;} 
[0m[1mcommon.c:169:23: [0m[0;1;35mwarning: [0m[1m'RSA_private_decrypt' is deprecated [clang-diagnostic-deprecated-declarations][0m
  169 |             *outlen = RSA_private_decrypt(inlen, input, out, rsa,[0m
      | [0;1;32m                      ^
[0m[1m/usr/include/openssl/rsa.h:295:1: [0m[0;1;36mnote: [0m'RSA_private_decrypt' has been explicitly marked deprecated here[0m
  295 | OSSL_DEPRECATEDIN_3_0[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mcommon.c:173:13: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  173 |             die("bad rsa mode");[0m
      | [0;1;32m            ^                  
[0m      | [0;32m            {                  ;} 
[0m[1mcommon.c:179:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  179 |     if (!config.cmd_start)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  180 |         return;[0m
      | [0;1;32m               
[0m[1mcommon.c:181:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  181 |     if (!config.cmd_blocking && fork())[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  182 |         return;[0m
      | [0;1;32m               
[0m[1mcommon.c:185:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  185 |     if (system(config.cmd_start))[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m  186 |         warn("exec of external start command failed");[0m
      | [0;1;32m                                                      
[0m[1mcommon.c:188:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  188 |     if (!config.cmd_blocking)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  189 |         exit(0);[0m
      | [0;1;32m                
[0m[1mcommon.c:193:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  193 |     if (!config.cmd_stop)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  194 |         return;[0m
      | [0;1;32m               
[0m[1mcommon.c:195:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  195 |     if (!config.cmd_blocking && fork())[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  196 |         return;[0m
      | [0;1;32m               
[0m[1mcommon.c:199:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  199 |     if (system(config.cmd_stop))[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  200 |         warn("exec of external stop command failed");[0m
      | [0;1;32m                                                     
[0m[1mcommon.c:202:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  202 |     if (!config.cmd_blocking)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  203 |         exit(0);[0m
      | [0;1;32m                
[0m27 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 9/15][14.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmpjmahsi11.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/rtp.c
[1mrtp.c:52:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   52 |         if (please_shutdown)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m   53 |             break;[0m
      | [0;1;32m                  
[0m[1mrtp.c:55:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   55 |         if (nread < 0)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   56 |             break;[0m
      | [0;1;32m                  
[0m[1mrtp.c:60:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   60 |         if (type == 0x54) // sync[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m   61 |             continue;[0m
      | [0;1;32m                     
[0m[1mrtp.c:97:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   97 |     memset(&hints, 0, sizeof(hints));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtp.c:97:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
   97 |     memset(&hints, 0, sizeof(hints));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtp.c:104:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  104 |     if (ret < 0)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  105 |         die("failed to get usable addrinfo?! %s", gai_strerror(ret));[0m
      | [0;1;32m                                                                     
[0m[1mrtp.c:108:11: [0m[0;1;35mwarning: [0m[1mThe 1st argument to 'bind' is -1 but should be >= 0 [clang-analyzer-unix.StdCLibraryFunctions][0m
  108 |     ret = bind(sock, info->ai_addr, info->ai_addrlen);[0m
      | [0;1;32m          ^
[0m[1mrtp.c:135:9: [0m[0;1;36mnote: [0mAssuming 'running' is 0[0m
  135 |     if (running)[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtp.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     if (running)[0m
      | [0;1;32m    ^
[0m[1mrtp.c:145:9: [0m[0;1;36mnote: [0mAssuming field 'ss_family' is not equal to AF_INET6[0m
  145 |     if (rtp_client.SAFAMILY == AF_INET6) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mrtp.c:145:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  145 |     if (rtp_client.SAFAMILY == AF_INET6) {[0m
      | [0;1;32m    ^
[0m[1mrtp.c:155:17: [0m[0;1;36mnote: [0mCalling 'bind_port'[0m
  155 |     int sport = bind_port(remote);[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~
[0m[1mrtp.c:104:9: [0m[0;1;36mnote: [0mAssuming 'ret' is >= 0[0m
  104 |     if (ret < 0)[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtp.c:104:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  104 |     if (ret < 0)[0m
      | [0;1;32m    ^
[0m[1mrtp.c:107:12: [0m[0;1;36mnote: [0mAssuming that 'socket' fails[0m
  107 |     sock = socket(remote->SAFAMILY, SOCK_DGRAM, IPPROTO_UDP);[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mrtp.c:107:5: [0m[0;1;36mnote: [0mValue assigned to 'sock'[0m
  107 |     sock = socket(remote->SAFAMILY, SOCK_DGRAM, IPPROTO_UDP);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mrtp.c:108:11: [0m[0;1;36mnote: [0mThe 1st argument to 'bind' is -1 but should be >= 0[0m
  108 |     ret = bind(sock, info->ai_addr, info->ai_addrlen);[0m
      | [0;1;32m          ^    ~~~~
[0m[1mrtp.c:112:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  112 |     if (ret < 0)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  113 |         die("could not bind a UDP port!");[0m
      | [0;1;32m                                          
[0m[1mrtp.c:135:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  135 |     if (running)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  136 |         die("rtp_setup called with active stream!");[0m
      | [0;1;32m                                                    
[0m[1mrtp.c:143:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  143 |     memcpy(&rtp_client, remote, sizeof(rtp_client));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtp.c:143:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  143 |     memcpy(&rtp_client, remote, sizeof(rtp_client));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtp.c:167:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  167 |     if (!running)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  168 |         die("rtp_shutdown called without active stream!");[0m
      | [0;1;32m                                                          
[0m[1mrtp.c:179:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  179 |     if (!running)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  180 |         die("rtp_request_resend called without active stream!");[0m
      | [0;1;32m                                                                
[0m[1mrtp.c:187:18: [0m[0;1;35mwarning: [0m[1mimplicit conversion from 'int' to 'char' changes value from 213 to -43 [clang-diagnostic-constant-conversion][0m
  187 |     req[1] = 0x55|0x80;  // Apple 'resend'[0m
      | [0;1;32m           ~ ~~~~^~~~~
[0m16 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[10/15][25.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmpi6elwmom.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/shairport.c
[1mshairport.c:51:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   51 |     if (shutting_down)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   52 |         return;[0m
      | [0;1;32m               
[0m[1mshairport.c:57:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   57 |     if (config.output)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m   58 |         config.output->deinit();[0m
      | [0;1;32m                                
[0m[1mshairport.c:150:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  150 |                 usage(argv[0]);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  151 |                 exit(1);[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1mshairport.c:153:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  153 |                 usage(argv[0]);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  154 |                 exit(0);[0m
      | [0;1;32m                       
[0m      | [0;32m                       ;} 
[0m[1mshairport.c:156:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  156 |                 config.daemonise = 1;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  157 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:159:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  159 |                 debuglev++;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  160 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:162:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  162 |                 config.port = atoi(optarg);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  163 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:165:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  165 |                 config.apname = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  166 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:168:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  168 |                 config.output_name = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  169 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:171:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  171 |                 config.password = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  172 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:174:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  174 |                 config.buffer_start_fill = atoi(optarg);[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  175 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:177:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  177 |                 config.cmd_start = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  178 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:180:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  180 |                 config.cmd_stop = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  181 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:183:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  183 |                 config.cmd_blocking = 1;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  184 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:186:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  186 |                 config.meta_dir = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  187 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:189:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  189 |                 config.pidfile = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  190 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:192:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  192 |                 config.logfile = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  193 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:195:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  195 |                 config.errfile = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  196 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:198:17: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  198 |                 config.mdns_name = optarg;[0m
      | [0;1;32m                ^
[0m      | [0;32m                {
[0m  199 |                 break;[0m
      | [0;1;32m                     
[0m      | [0;32m                     ;} 
[0m[1mshairport.c:220:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  220 |     memset(&sa, 0, sizeof(sa));[0m
      | [0;1;32m    ^~~~~~
[0m[1mshairport.c:220:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  220 |     memset(&sa, 0, sizeof(sa));[0m
      | [0;1;32m    ^~~~~~
[0m[1mshairport.c:250:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  250 |         if (log_fd < 0)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  251 |             die("Could not open logfile");[0m
      | [0;1;32m                                          
[0m[1mshairport.c:253:9: [0m[0;1;35mwarning: [0m[1mThe 1st argument to 'dup2' is -1 but should be >= 0 [clang-analyzer-unix.StdCLibraryFunctions][0m
  253 |         dup2(log_fd, STDOUT_FILENO);[0m
      | [0;1;32m        ^
[0m[1mshairport.c:80:5: [0m[0;1;36mnote: [0mCalling 'log_setup'[0m
   80 |     log_setup();[0m
      | [0;1;32m    ^~~~~~~~~~~
[0m[1mshairport.c:246:9: [0m[0;1;36mnote: [0mAssuming field 'logfile' is non-null[0m
  246 |     if (config.logfile) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~
[0m[1mshairport.c:246:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  246 |     if (config.logfile) {[0m
      | [0;1;32m    ^
[0m[1mshairport.c:247:22: [0m[0;1;36mnote: [0mAssuming that 'open' fails[0m
  247 |         int log_fd = open(config.logfile,[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~
[0m  248 |                 O_WRONLY | O_CREAT | O_APPEND,[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  249 |                 S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mshairport.c:247:9: [0m[0;1;36mnote: [0m'log_fd' initialized here[0m
  247 |         int log_fd = open(config.logfile,[0m
      | [0;1;32m        ^~~~~~~~~~
[0m[1mshairport.c:250:13: [0m[0;1;36mnote: [0m'log_fd' is < 0[0m
  250 |         if (log_fd < 0)[0m
      | [0;1;32m            ^~~~~~
[0m[1mshairport.c:250:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  250 |         if (log_fd < 0)[0m
      | [0;1;32m        ^
[0m[1mshairport.c:253:9: [0m[0;1;36mnote: [0mThe 1st argument to 'dup2' is -1 but should be >= 0[0m
  253 |         dup2(log_fd, STDOUT_FILENO);[0m
      | [0;1;32m        ^    ~~~~~~
[0m[1mshairport.c:266:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  266 |         if (err_fd < 0)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  267 |             die("Could not open logfile");[0m
      | [0;1;32m                                          
[0m[1mshairport.c:269:9: [0m[0;1;35mwarning: [0m[1mThe 1st argument to 'dup2' is -1 but should be >= 0 [clang-analyzer-unix.StdCLibraryFunctions][0m
  269 |         dup2(err_fd, STDERR_FILENO);[0m
      | [0;1;32m        ^
[0m[1mshairport.c:80:5: [0m[0;1;36mnote: [0mCalling 'log_setup'[0m
   80 |     log_setup();[0m
      | [0;1;32m    ^~~~~~~~~~~
[0m[1mshairport.c:246:9: [0m[0;1;36mnote: [0mAssuming field 'logfile' is null[0m
  246 |     if (config.logfile) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~
[0m[1mshairport.c:246:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  246 |     if (config.logfile) {[0m
      | [0;1;32m    ^
[0m[1mshairport.c:262:9: [0m[0;1;36mnote: [0mAssuming field 'errfile' is non-null[0m
  262 |     if (config.errfile) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~
[0m[1mshairport.c:262:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  262 |     if (config.errfile) {[0m
      | [0;1;32m    ^
[0m[1mshairport.c:263:22: [0m[0;1;36mnote: [0mAssuming that 'open' fails[0m
  263 |         int err_fd = open(config.errfile,[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~~~
[0m  264 |                 O_WRONLY | O_CREAT | O_APPEND,[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  265 |                 S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);[0m
      | [0;1;32m                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mshairport.c:263:9: [0m[0;1;36mnote: [0m'err_fd' initialized here[0m
  263 |         int err_fd = open(config.errfile,[0m
      | [0;1;32m        ^~~~~~~~~~
[0m[1mshairport.c:266:13: [0m[0;1;36mnote: [0m'err_fd' is < 0[0m
  266 |         if (err_fd < 0)[0m
      | [0;1;32m            ^~~~~~
[0m[1mshairport.c:266:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  266 |         if (err_fd < 0)[0m
      | [0;1;32m        ^
[0m[1mshairport.c:269:9: [0m[0;1;36mnote: [0mThe 1st argument to 'dup2' is -1 but should be >= 0[0m
  269 |         dup2(err_fd, STDERR_FILENO);[0m
      | [0;1;32m        ^    ~~~~~~
[0m[1mshairport.c:278:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  278 |     memset(&config, 0, sizeof(config));[0m
      | [0;1;32m    ^~~~~~
[0m[1mshairport.c:278:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  278 |     memset(&config, 0, sizeof(config));[0m
      | [0;1;32m    ^~~~~~
[0m[1mshairport.c:286:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  286 |     snprintf(config.apname, 20 + 100, "Shairport on %s", hostname);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mshairport.c:286:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  286 |     snprintf(config.apname, 20 + 100, "Shairport on %s", hostname);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mshairport.c:292:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  292 |     if (strlen(config.apname) > 50)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  293 |         die("Supplied name too long (max 50 characters)");[0m
      | [0;1;32m                                                          
[0m[1mshairport.c:310:5: [0m[0;1;35mwarning: [0m[1m'MD5_Init' is deprecated [clang-diagnostic-deprecated-declarations][0m
  310 |     MD5_Init(&ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:49:1: [0m[0;1;36mnote: [0m'MD5_Init' has been explicitly marked deprecated here[0m
   49 | OSSL_DEPRECATEDIN_3_0 int MD5_Init(MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mshairport.c:311:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  311 |     MD5_Update(&ctx, config.apname, strlen(config.apname));[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mshairport.c:312:5: [0m[0;1;35mwarning: [0m[1m'MD5_Final' is deprecated [clang-diagnostic-deprecated-declarations][0m
  312 |     MD5_Final(ap_md5, &ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:51:1: [0m[0;1;36mnote: [0m'MD5_Final' has been explicitly marked deprecated here[0m
   51 | OSSL_DEPRECATEDIN_3_0 int MD5_Final(unsigned char *md, MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mshairport.c:313:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  313 |     memcpy(config.hw_addr, ap_md5, sizeof(config.hw_addr));[0m
      | [0;1;32m    ^~~~~~
[0m[1mshairport.c:313:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  313 |     memcpy(config.hw_addr, ap_md5, sizeof(config.hw_addr));[0m
      | [0;1;32m    ^~~~~~
[0m[1mshairport.c:315:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  315 |     if (config.meta_dir)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  316 |         metadata_open();[0m
      | [0;1;32m                        
[0m36 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[11/15][34.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmp3wbqq5j2.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/metadata.c
[1mmetadata.c:47:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   47 |         if (!strcmp(*field, value))[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m   48 |             return;[0m
      | [0;1;32m                   
[0m[1mmetadata.c:56:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   56 |     if (!config.meta_dir)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m   57 |         return;[0m
      | [0;1;32m               
[0m[1mmetadata.c:63:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   63 |     snprintf(path, pl+1, "%s/%s", config.meta_dir, fn);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mmetadata.c:63:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
   63 |     snprintf(path, pl+1, "%s/%s", config.meta_dir, fn);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mmetadata.c:65:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   65 |     if (mkfifo(path, 0644) && errno != EEXIST)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m   66 |         die("Could not create metadata FIFO %s", path);[0m
      | [0;1;32m                                                       
[0m[1mmetadata.c:69:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   69 |     if (fd < 0)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m   70 |         debug(1, "Could not open metadata FIFO %s. Will try again later.", path);[0m
      | [0;1;32m                                                                                 
[0m[1mmetadata.c:83:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   83 |     if (value)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m   84 |         write_unchecked(fd, value, strlen(value));[0m
      | [0;1;32m                                                  
[0m[1mmetadata.c:95:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |     if (fd < 0)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m   96 |         metadata_open();[0m
      | [0;1;32m                        
[0m[1mmetadata.c:97:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |     if (fd < 0)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m   98 |         return;[0m
      | [0;1;32m               
[0m[1mmetadata.c:100:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  100 |     if (!dirty)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  101 |         return;[0m
      | [0;1;32m               
[0m[1mmetadata.c:113:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  113 |     if (ret < 1)    // no reader[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  114 |         metadata_close();[0m
      | [0;1;32m                         
[0m[1mmetadata.c:118:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  118 |     if (!config.meta_dir)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  119 |         return;[0m
      | [0;1;32m               
[0m[1mmetadata.c:130:5: [0m[0;1;35mwarning: [0m[1m'MD5_Init' is deprecated [clang-diagnostic-deprecated-declarations][0m
  130 |     MD5_Init(&ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:49:1: [0m[0;1;36mnote: [0m'MD5_Init' has been explicitly marked deprecated here[0m
   49 | OSSL_DEPRECATEDIN_3_0 int MD5_Init(MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mmetadata.c:131:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  131 |     MD5_Update(&ctx, buf, len);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mmetadata.c:132:5: [0m[0;1;35mwarning: [0m[1m'MD5_Final' is deprecated [clang-diagnostic-deprecated-declarations][0m
  132 |     MD5_Final(img_md5, &ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:51:1: [0m[0;1;36mnote: [0m'MD5_Final' has been explicitly marked deprecated here[0m
   51 | OSSL_DEPRECATEDIN_3_0 int MD5_Final(unsigned char *md, MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mmetadata.c:136:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  136 |     for (i = 0; i < 16; i++)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  137 |         sprintf(&img_md5_str[i*2], "%02x", (uint8_t)img_md5[i]);[0m
      | [0;1;32m                                                                
[0m[1mmetadata.c:137:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  137 |         sprintf(&img_md5_str[i*2], "%02x", (uint8_t)img_md5[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmetadata.c:137:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  137 |         sprintf(&img_md5_str[i*2], "%02x", (uint8_t)img_md5[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mmetadata.c:145:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  145 |     snprintf(path, pl+1, "%s/%s%s.%s", dir, prefix, img_md5_str, ext);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mmetadata.c:145:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  145 |     snprintf(path, pl+1, "%s/%s%s.%s", dir, prefix, img_md5_str, ext);[0m
      | [0;1;32m    ^~~~~~~~
[0m21 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[12/15][97.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmpfgwqrtdm.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/player.c
[1mplayer.c:97:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |     for (i=0; i<BUFFER_FRAMES; i++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m   98 |         audio_buffer[i].ready = 0;[0m
      | [0;1;32m                                  
[0m[1mplayer.c:116:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  116 |     memcpy(iv, aesiv, sizeof(iv));[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:116:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  116 |     memcpy(iv, aesiv, sizeof(iv));[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:117:5: [0m[0;1;35mwarning: [0m[1m'AES_cbc_encrypt' is deprecated [clang-diagnostic-deprecated-declarations][0m
  117 |     AES_cbc_encrypt(buf, packet, aeslen, &aes, iv, AES_DECRYPT);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/aes.h:65:1: [0m[0;1;36mnote: [0m'AES_cbc_encrypt' has been explicitly marked deprecated here[0m
   65 | OSSL_DEPRECATEDIN_3_0[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mplayer.c:118:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  118 |     memcpy(packet+aeslen, buf+aeslen, len-aeslen);[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:118:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  118 |     memcpy(packet+aeslen, buf+aeslen, len-aeslen);[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:135:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  135 |     if (sample_size != 16)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  136 |         die("only 16-bit samples supported!");[0m
      | [0;1;32m                                              
[0m[1mplayer.c:139:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  139 |     if (!alac)[0m
      | [0;1;32m              ^
[0m      | [0;32m               {
[0m  140 |         return 1;[0m
      | [0;1;32m                 
[0m[1mplayer.c:180:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  180 |     for (i=0; i<BUFFER_FRAMES; i++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  181 |         audio_buffer[i].data = malloc(OUTFRAME_BYTES(frame_size));[0m
      | [0;1;32m                                                                  
[0m[1mplayer.c:187:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  187 |     for (i=0; i<BUFFER_FRAMES; i++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  188 |         free(audio_buffer[i].data);[0m
      | [0;1;32m                                   
[0m[1mplayer.c:260:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  260 |     memcpy(bq->a, a, 2*sizeof(double));[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:260:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  260 |     memcpy(bq->a, a, 2*sizeof(double));[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:261:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  261 |     memcpy(bq->b, b, 3*sizeof(double));[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:261:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  261 |     memcpy(bq->b, b, 3*sizeof(double));[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:348:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  348 |     if (ab_buffering)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  349 |         return 0;[0m
      | [0;1;32m                 
[0m[1mplayer.c:355:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  355 |         if (buf_fill < 1)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  356 |             warn("underrun.");[0m
      | [0;1;32m                              
[0m[1mplayer.c:385:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  385 |         memset(curframe->data, 0, FRAME_BYTES(frame_size));[0m
      | [0;1;32m        ^~~~~~
[0m[1mplayer.c:385:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  385 |         memset(curframe->data, 0, FRAME_BYTES(frame_size));[0m
      | [0;1;32m        ^~~~~~
[0m[1mplayer.c:415:45: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory preceding the heap area [clang-analyzer-security.ArrayBound][0m
  415 |             *outptr++ = dithered_vol(((long)inptr[-2] + (long)inptr[0]) >> 1);[0m
      | [0;1;32m                                            ^
[0m[1mplayer.c:456:12: [0m[0;1;36mnote: [0mAssuming 'please_stop' is 0[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mplayer.c:456:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m    ^
[0m[1mplayer.c:458:14: [0m[0;1;36mnote: [0m'inbuf' is null[0m
  458 |         if (!inbuf)[0m
      | [0;1;32m             ^~~~~
[0m[1mplayer.c:458:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  458 |         if (!inbuf)[0m
      | [0;1;32m        ^
[0m[1mplayer.c:477:28: [0m[0;1;36mnote: [0mCalling 'stuff_buffer'[0m
  477 |             play_samples = stuff_buffer(bf_playback_rate, inbuf, outbuf);[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mplayer.c:401:9: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  401 |     if (rand() < p_stuff * RAND_MAX) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mplayer.c:401:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  401 |     if (rand() < p_stuff * RAND_MAX) {[0m
      | [0;1;32m    ^
[0m[1mplayer.c:402:17: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  402 |         stuff = playback_rate > 1.0 ? -1 : 1;[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~~~
[0m[1mplayer.c:402:17: [0m[0;1;36mnote: [0m'?' condition is false[0m
[1mplayer.c:407:15: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'stuffsamp'[0m
  407 |     for (i=0; i<stuffsamp; i++) {   // the whole frame, if no stuffing[0m
      | [0;1;32m              ^~~~~~~~~~~
[0m[1mplayer.c:407:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 411[0m
  407 |     for (i=0; i<stuffsamp; i++) {   // the whole frame, if no stuffing[0m
      | [0;1;32m    ^
[0m[1mplayer.c:411:9: [0m[0;1;36mnote: [0m'stuff' is 1[0m
  411 |     if (stuff) {[0m
      | [0;1;32m        ^~~~~
[0m[1mplayer.c:411:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  411 |     if (stuff) {[0m
      | [0;1;32m    ^
[0m[1mplayer.c:412:13: [0m[0;1;36mnote: [0m'stuff' is equal to 1[0m
  412 |         if (stuff==1) {[0m
      | [0;1;32m            ^~~~~
[0m[1mplayer.c:412:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  412 |         if (stuff==1) {[0m
      | [0;1;32m        ^
[0m[1mplayer.c:415:45: [0m[0;1;36mnote: [0mAccess of the heap area at negative byte offset -4[0m
  415 |             *outptr++ = dithered_vol(((long)inptr[-2] + (long)inptr[0]) >> 1);[0m
      | [0;1;32m                                            ^~~~~~~~~
[0m[1mplayer.c:438:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  438 |     memset(silence, 0, OUTFRAME_BYTES(frame_size));[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:438:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  438 |     memset(silence, 0, OUTFRAME_BYTES(frame_size));[0m
      | [0;1;32m    ^~~~~~
[0m[1mplayer.c:458:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  458 |         if (!inbuf)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  459 |             inbuf = silence;[0m
      | [0;1;32m                            
[0m[1mplayer.c:482:12: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'inbuf' [clang-analyzer-unix.Malloc][0m
  482 |     return 0;[0m
      | [0;1;32m           ^
[0m[1mplayer.c:437:15: [0m[0;1;36mnote: [0mMemory is allocated[0m
  437 |     silence = malloc(OUTFRAME_BYTES(frame_size));[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mplayer.c:456:12: [0m[0;1;36mnote: [0mAssuming 'please_stop' is 0[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mplayer.c:456:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m    ^
[0m[1mplayer.c:458:14: [0m[0;1;36mnote: [0m'inbuf' is null[0m
  458 |         if (!inbuf)[0m
      | [0;1;32m             ^~~~~
[0m[1mplayer.c:458:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  458 |         if (!inbuf)[0m
      | [0;1;32m        ^
[0m[1mplayer.c:456:12: [0m[0;1;36mnote: [0mAssuming 'please_stop' is not equal to 0[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mplayer.c:456:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution jumps to the end of the function[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m    ^
[0m[1mplayer.c:482:12: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'inbuf'[0m
  482 |     return 0;[0m
      | [0;1;32m           ^
[0m[1mplayer.c:482:12: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'outbuf' [clang-analyzer-unix.Malloc][0m
  482 |     return 0;[0m
      | [0;1;32m           ^
[0m[1mplayer.c:436:14: [0m[0;1;36mnote: [0mMemory is allocated[0m
  436 |     outbuf = malloc(OUTFRAME_BYTES(frame_size));[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mplayer.c:456:12: [0m[0;1;36mnote: [0mAssuming 'please_stop' is not equal to 0[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mplayer.c:456:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution jumps to the end of the function[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m    ^
[0m[1mplayer.c:482:12: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'outbuf'[0m
  482 |     return 0;[0m
      | [0;1;32m           ^
[0m[1mplayer.c:482:12: [0m[0;1;35mwarning: [0m[1mPotential leak of memory pointed to by 'silence' [clang-analyzer-unix.Malloc][0m
  482 |     return 0;[0m
      | [0;1;32m           ^
[0m[1mplayer.c:437:15: [0m[0;1;36mnote: [0mMemory is allocated[0m
  437 |     silence = malloc(OUTFRAME_BYTES(frame_size));[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mplayer.c:456:12: [0m[0;1;36mnote: [0mAssuming 'please_stop' is not equal to 0[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m           ^~~~~~~~~~~~
[0m[1mplayer.c:456:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution jumps to the end of the function[0m
  456 |     while (!please_stop) {[0m
      | [0;1;32m    ^
[0m[1mplayer.c:482:12: [0m[0;1;36mnote: [0mPotential leak of memory pointed to by 'silence'[0m
  482 |     return 0;[0m
      | [0;1;32m           ^
[0m[1mplayer.c:505:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  505 |     if (config.buffer_start_fill > BUFFER_FRAMES)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  506 |         die("specified buffer starting fill %d > buffer size %d",[0m
  507 |             config.buffer_start_fill, BUFFER_FRAMES);[0m
      | [0;1;32m                                                     
[0m[1mplayer.c:509:5: [0m[0;1;35mwarning: [0m[1m'AES_set_decrypt_key' is deprecated [clang-diagnostic-deprecated-declarations][0m
  509 |     AES_set_decrypt_key(stream->aeskey, 128, &aes);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/aes.h:53:1: [0m[0;1;36mnote: [0m'AES_set_decrypt_key' has been explicitly marked deprecated here[0m
   53 | OSSL_DEPRECATEDIN_3_0[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m25 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[13/15][142.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmp9gnqugy9.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/alac.c
[1malac.c:59:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   59 |     if (alac->predicterror_buffer_a)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m   60 |         free(alac->predicterror_buffer_a);[0m
      | [0;1;32m                                          
[0m[1malac.c:61:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |     if (alac->predicterror_buffer_b)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m   62 |         free(alac->predicterror_buffer_b);[0m
      | [0;1;32m                                          
[0m[1malac.c:64:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   64 |     if (alac->outputsamples_buffer_a)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   65 |         free(alac->outputsamples_buffer_a);[0m
      | [0;1;32m                                           
[0m[1malac.c:66:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   66 |     if (alac->outputsamples_buffer_b)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m   67 |         free(alac->outputsamples_buffer_b);[0m
      | [0;1;32m                                           
[0m[1malac.c:69:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   69 |     if (alac->uncompressed_bytes_buffer_a)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m   70 |         free(alac->uncompressed_bytes_buffer_a);[0m
      | [0;1;32m                                                
[0m[1malac.c:71:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   71 |     if (alac->uncompressed_bytes_buffer_b)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m   72 |         free(alac->uncompressed_bytes_buffer_b);[0m
      | [0;1;32m                                                
[0m[1malac.c:101:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  101 |   if (!host_bigendian)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  102 |       _Swap32(alac->setinfo_max_samples_per_frame);[0m
      | [0;1;32m                                                   
[0m[1malac.c:117:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  117 |   if (!host_bigendian)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  118 |       _Swap16(alac->setinfo_80);[0m
      | [0;1;32m                                
[0m[1malac.c:121:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  121 |   if (!host_bigendian)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  122 |       _Swap32(alac->setinfo_82);[0m
      | [0;1;32m                                
[0m[1malac.c:125:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  125 |   if (!host_bigendian)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  126 |       _Swap32(alac->setinfo_86);[0m
      | [0;1;32m                                
[0m[1malac.c:129:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  129 |   if (!host_bigendian)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  130 |       _Swap32(alac->setinfo_8a_rate);[0m
      | [0;1;32m                                     
[0m[1malac.c:214:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  214 |     if (alac->input_buffer_bitaccumulator < 0)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  215 |         alac->input_buffer_bitaccumulator *= -1;[0m
      | [0;1;32m                                                
[0m[1malac.c:345:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  345 |             if (extraBits > 1)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  346 |                 x += extraBits - 1;[0m
  347 |             else[0m
      | [0;32m            } 
[0m[1malac.c:347:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  347 |             else[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  348 |                 unreadbits(alac, 1);[0m
      | [0;1;32m                                    
[0m[1malac.c:376:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  376 |         if (k < 0) k += rice_kmodifier;[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m  377 |         else k = rice_kmodifier;[0m
      | [0;32m        } 
[0m[1malac.c:377:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  377 |         else k = rice_kmodifier;[0m
      | [0;1;32m            ^                   
[0m      | [0;32m             {
[0m[1malac.c:384:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  384 |         if (decodedValue & 1) // the sign is stored in the low bit[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  385 |             finalValue *= -1;[0m
      | [0;1;32m                             
[0m[1malac.c:395:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  395 |         if (decodedValue > 0xFFFF)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  396 |             history = 0xFFFF;[0m
      | [0;1;32m                             
[0m[1malac.c:413:17: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  413 |                 memset(&outputBuffer[outputCount + 1], 0, blockSize * sizeof(*outputBuffer));[0m
      | [0;1;32m                ^~~~~~
[0m[1malac.c:413:17: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  413 |                 memset(&outputBuffer[outputCount + 1], 0, blockSize * sizeof(*outputBuffer));[0m
      | [0;1;32m                ^~~~~~
[0m[1malac.c:417:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  417 |             if (blockSize > 0xFFFF)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  418 |                 signModifier = 0;[0m
      | [0;1;32m                                 
[0m[1malac.c:447:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  447 |         if (output_size <= 1) return;[0m
      | [0;1;32m                             ^       
[0m      | [0;32m                              {
[0m[1malac.c:448:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  448 |         memcpy(buffer_out+1, error_buffer+1, (output_size-1) * 4);[0m
      | [0;1;32m        ^~~~~~
[0m[1malac.c:448:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  448 |         memcpy(buffer_out+1, error_buffer+1, (output_size-1) * 4);[0m
      | [0;1;32m        ^~~~~~
[0m[1malac.c:456:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  456 |         if (output_size <= 1) return;[0m
      | [0;1;32m                             ^       
[0m      | [0;32m                              {
[0m[1malac.c:579:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  579 |     if (numsamples <= 0) return;[0m
      | [0;1;32m                        ^       
[0m      | [0;32m                         {
[0m[1malac.c:640:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  640 |     if (numsamples <= 0) return;[0m
      | [0;1;32m                        ^       
[0m      | [0;32m                         {
[0m[1malac.c:813:17: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  813 |                 fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type);[0m
      | [0;1;32m                ^~~~~~~
[0m[1malac.c:813:17: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  813 |                 fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type);[0m
      | [0;1;32m                ^~~~~~~
[0m[1malac.c:865:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  865 |                 if (host_bigendian)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  866 |                     _Swap16(sample);[0m
      | [0;1;32m                                    
[0m[1malac.c:894:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  894 |             fprintf(stderr, "FIXME: unimplemented sample size %i\n", alac->setinfo_sample_size);[0m
      | [0;1;32m            ^~~~~~~
[0m[1malac.c:894:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  894 |             fprintf(stderr, "FIXME: unimplemented sample size %i\n", alac->setinfo_sample_size);[0m
      | [0;1;32m            ^~~~~~~
[0m[1malac.c:895:13: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  895 |             break;[0m
      | [0;1;32m            ^    
[0m      | [0;32m            {    ;} 
[0m[1malac.c:897:13: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  897 |             break;[0m
      | [0;1;32m            ^    
[0m      | [0;32m            {    ;} 
[0m[1malac.c:1013:17: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1013 |                 fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_a);[0m
      | [0;1;32m                ^~~~~~~
[0m[1malac.c:1013:17: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1013 |                 fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_a);[0m
      | [0;1;32m                ^~~~~~~
[0m[1malac.c:1038:17: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1038 |                 fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_b);[0m
      | [0;1;32m                ^~~~~~~
[0m[1malac.c:1038:17: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1038 |                 fprintf(stderr, "FIXME: unhandled predicition type: %i\n", prediction_type_b);[0m
      | [0;1;32m                ^~~~~~~
[0m[1malac.c:1115:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1115 |             fprintf(stderr, "FIXME: unimplemented sample size %i\n", alac->setinfo_sample_size);[0m
      | [0;1;32m            ^~~~~~~
[0m[1malac.c:1115:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1115 |             fprintf(stderr, "FIXME: unimplemented sample size %i\n", alac->setinfo_sample_size);[0m
      | [0;1;32m            ^~~~~~~
[0m[1malac.c:1116:13: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1116 |             break;[0m
      | [0;1;32m            ^    
[0m      | [0;32m            {    ;} 
[0m[1malac.c:1118:13: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1118 |             break;[0m
      | [0;1;32m            ^    
[0m      | [0;32m            {    ;} 
[0m[1malac.c:1130:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1130 |     memset(newfile, 0, sizeof(alac_file));[0m
      | [0;1;32m    ^~~~~~
[0m[1malac.c:1130:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1130 |     memset(newfile, 0, sizeof(alac_file));[0m
      | [0;1;32m    ^~~~~~
[0m38 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[14/15][190.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmp7g60qaak.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/rtsp.c
[1mrtsp.c:81:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   81 |     if (rtsp_playing())[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m   82 |         return;[0m
      | [0;1;32m               
[0m[1mrtsp.c:118:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  118 |             if (nconns)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  119 |                 conns[i] = conns[nconns];[0m
      | [0;1;32m                                         
[0m[1mrtsp.c:140:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  140 |         if (out)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  141 |             break;[0m
      | [0;1;32m                  
[0m[1mrtsp.c:166:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  166 |     memset(msg, 0, sizeof(rtsp_message));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:166:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  166 |     memset(msg, 0, sizeof(rtsp_message));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:185:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  185 |     for (i=0; i<msg->nheaders; i++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m  186 |         if (!strcasecmp(msg->name[i], name))[0m
  187 |             return msg->value[i];[0m
      | [0;1;32m                                 
[0m[1mrtsp.c:186:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  186 |         if (!strcasecmp(msg->name[i], name))[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  187 |             return msg->value[i];[0m
      | [0;1;32m                                 
[0m[1mrtsp.c:197:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  197 |     if (msg->content)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  198 |         free(msg->content);[0m
      | [0;1;32m                           
[0m[1mrtsp.c:214:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  214 |         if (!p)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  215 |             goto fail;[0m
      | [0;1;32m                      
[0m[1mrtsp.c:216:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  216 |         strncpy(msg->method, p, sizeof(msg->method)-1);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:216:9: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  216 |         strncpy(msg->method, p, sizeof(msg->method)-1);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:219:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  219 |         if (!p)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  220 |             goto fail;[0m
      | [0;1;32m                      
[0m[1mrtsp.c:223:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  223 |         if (!p)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  224 |             goto fail;[0m
      | [0;1;32m                      
[0m[1mrtsp.c:225:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  225 |         if (strcmp(p, "RTSP/1.0"))[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  226 |             goto fail;[0m
      | [0;1;32m                      
[0m[1mrtsp.c:245:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  245 |         if (cl)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  246 |             return atoi(cl);[0m
  247 |         else[0m
      | [0;32m        } 
[0m[1mrtsp.c:247:13: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  247 |         else[0m
      | [0;1;32m            ^
[0m      | [0;32m             {
[0m  248 |             return 0;[0m
      | [0;1;32m                     
[0m[1mrtsp.c:278:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  278 |             if (errno==EINTR)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  279 |                 continue;[0m
      | [0;1;32m                         
[0m[1mrtsp.c:295:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  295 |             if (inbuf)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  296 |                 memmove(buf, next, inbuf);[0m
      | [0;1;32m                                          
[0m[1mrtsp.c:296:17: [0m[0;1;35mwarning: [0m[1mCall to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  296 |                 memmove(buf, next, inbuf);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mrtsp.c:296:17: [0m[0;1;36mnote: [0mCall to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11[0m
  296 |                 memmove(buf, next, inbuf);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mrtsp.c:306:9: [0m[0;1;35mwarning: [0m[1mValue stored to 'buflen' is never read [clang-analyzer-deadcode.DeadStores][0m
  306 |         buflen = msg_size;[0m
      | [0;1;32m        ^        ~~~~~~~~
[0m[1mrtsp.c:306:9: [0m[0;1;36mnote: [0mValue stored to 'buflen' is never read[0m
  306 |         buflen = msg_size;[0m
      | [0;1;32m        ^        ~~~~~~~~
[0m[1mrtsp.c:311:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  311 |         if (!nread)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  312 |             goto shutdown;[0m
      | [0;1;32m                          
[0m[1mrtsp.c:313:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  313 |         if (nread==EINTR)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  314 |             continue;[0m
      | [0;1;32m                     
[0m[1mrtsp.c:340:9: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  340 |     n = snprintf(p, pktfree,[0m
      | [0;1;32m        ^~~~~~~~
[0m[1mrtsp.c:340:9: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  340 |     n = snprintf(p, pktfree,[0m
      | [0;1;32m        ^~~~~~~~
[0m[1mrtsp.c:349:13: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  349 |         n = snprintf(p, pktfree, "%s: %s\r\n", resp->name[i], resp->value[i]);[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mrtsp.c:349:13: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  349 |         n = snprintf(p, pktfree, "%s: %s\r\n", resp->name[i], resp->value[i]);[0m
      | [0;1;32m            ^~~~~~~~
[0m[1mrtsp.c:352:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  352 |         if (pktfree <= 0)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  353 |             die("Attempted to write overlong RTSP packet");[0m
      | [0;1;32m                                                           
[0m[1mrtsp.c:356:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  356 |     if (pktfree < 3)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  357 |         die("Attempted to write overlong RTSP packet");[0m
      | [0;1;32m                                                       
[0m[1mrtsp.c:359:5: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  359 |     strcpy(p, "\r\n");[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:359:5: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  359 |     strcpy(p, "\r\n");[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:374:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  374 |     if (!rtsp_playing())[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  375 |         return;[0m
      | [0;1;32m               
[0m[1mrtsp.c:383:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  383 |     if (!rtsp_playing())[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  384 |         return;[0m
      | [0;1;32m               
[0m[1mrtsp.c:393:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  393 |     if (!hdr)[0m
      | [0;1;32m             ^
[0m      | [0;32m              {
[0m  394 |         return;[0m
      | [0;1;32m               
[0m[1mrtsp.c:398:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  398 |     if (!p)[0m
      | [0;1;32m           ^
[0m      | [0;32m            {
[0m  399 |         return;[0m
      | [0;1;32m               
[0m[1mrtsp.c:404:12: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  404 |     if (!p)[0m
      | [0;1;32m           ^
[0m      | [0;32m            {
[0m  405 |         return;[0m
      | [0;1;32m               
[0m[1mrtsp.c:411:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  411 |     if (!sport)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  412 |         return;[0m
      | [0;1;32m               
[0m[1mrtsp.c:417:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  417 |     snprintf(resphdr, sizeof(resphdr),[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mrtsp.c:417:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  417 |     snprintf(resphdr, sizeof(resphdr),[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mrtsp.c:465:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  465 |         strncpy(tag, cp+off, 4);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:465:9: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  465 |         strncpy(tag, cp+off, 4);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:473:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  473 |         strncpy(val, cp+off, vl);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:473:9: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  473 |         strncpy(val, cp+off, vl);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:520:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  520 |     if (!req->contentlength)[0m
      | [0;1;32m                            ^
[0m      | [0;32m                             {
[0m  521 |         debug(1, "received empty SET_PARAMETER request\n");[0m
      | [0;1;32m                                                           
[0m[1mrtsp.c:565:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  565 |         if (!strncmp(cp, "a=fmtp:", 7))[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                        {
[0m  566 |             pfmtp = cp+7;[0m
      | [0;1;32m                         
[0m[1mrtsp.c:568:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  568 |         if (!strncmp(cp, "a=aesiv:", 8))[0m
      | [0;1;32m                                        ^
[0m      | [0;32m                                         {
[0m  569 |             paesiv = cp+8;[0m
      | [0;1;32m                          
[0m[1mrtsp.c:571:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  571 |         if (!strncmp(cp, "a=rsaaeskey:", 12))[0m
      | [0;1;32m                                             ^
[0m      | [0;32m                                              {
[0m  572 |             prsaaeskey = cp+12;[0m
      | [0;1;32m                               
[0m[1mrtsp.c:589:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  589 |     memcpy(conn->stream.aesiv, aesiv, 16);[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:589:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  589 |     memcpy(conn->stream.aesiv, aesiv, 16);[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:600:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  600 |     memcpy(conn->stream.aeskey, aeskey, 16);[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:600:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  600 |     memcpy(conn->stream.aeskey, aeskey, 16);[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:604:77: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  604 |     for (i=0; i<sizeof(conn->stream.fmtp)/sizeof(conn->stream.fmtp[0]); i++)[0m
      | [0;1;32m                                                                            ^
[0m      | [0;32m                                                                             {
[0m  605 |         conn->stream.fmtp[i] = atoi(strsep(&pfmtp, " \t"));[0m
      | [0;1;32m                                                           
[0m[1mrtsp.c:629:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  629 |     if (!hdr)[0m
      | [0;1;32m             ^
[0m      | [0;32m              {
[0m  630 |         return;[0m
      | [0;1;32m               
[0m[1mrtsp.c:640:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  640 |     memset(buf, 0, sizeof(buf));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:640:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  640 |     memset(buf, 0, sizeof(buf));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:647:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  647 |     memcpy(bp, chall, chall_len);[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:647:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  647 |     memcpy(bp, chall, chall_len);[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:654:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  654 |         memcpy(bp, sa6->sin6_addr.s6_addr, 16);[0m
      | [0;1;32m        ^~~~~~
[0m[1mrtsp.c:654:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  654 |         memcpy(bp, sa6->sin6_addr.s6_addr, 16);[0m
      | [0;1;32m        ^~~~~~
[0m[1mrtsp.c:660:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  660 |         memcpy(bp, &sa->sin_addr.s_addr, 4);[0m
      | [0;1;32m        ^~~~~~
[0m[1mrtsp.c:660:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  660 |         memcpy(bp, &sa->sin_addr.s_addr, 4);[0m
      | [0;1;32m        ^~~~~~
[0m[1mrtsp.c:664:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  664 |     for (i=0; i<6; i++)[0m
      | [0;1;32m                       ^
[0m      | [0;32m                        {
[0m  665 |         *bp++ = config.hw_addr[i];[0m
      | [0;1;32m                                  
[0m[1mrtsp.c:669:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  669 |     if (buflen < 0x20)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  670 |         buflen = 0x20;[0m
      | [0;1;32m                      
[0m[1mrtsp.c:677:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  677 |     if (padding)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  678 |         *padding = 0;[0m
      | [0;1;32m                     
[0m[1mrtsp.c:688:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  688 |     if (fd < 0)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  689 |         die("could not open /dev/random!");[0m
      | [0;1;32m                                           
[0m[1mrtsp.c:697:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  697 |     if (!config.password)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  698 |         return 0;[0m
      | [0;1;32m                 
[0m[1mrtsp.c:705:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  705 |     if (!hdr || strncmp(hdr, "Digest ", 7))[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  706 |         goto authenticate;[0m
      | [0;1;32m                          
[0m[1mrtsp.c:713:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  713 |     if (!realm || !username || !response || !uri)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  714 |         goto authenticate;[0m
      | [0;1;32m                          
[0m[1mrtsp.c:718:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  718 |     if (!(quote = strchr(realm, '"')))[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m  719 |         goto authenticate;[0m
      | [0;1;32m                          
[0m[1mrtsp.c:722:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  722 |     if (!(quote = strchr(username, '"')))[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  723 |         goto authenticate;[0m
      | [0;1;32m                          
[0m[1mrtsp.c:726:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  726 |     if (!(quote = strchr(response, '"')))[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m  727 |         goto authenticate;[0m
      | [0;1;32m                          
[0m[1mrtsp.c:730:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  730 |     if (!(quote = strchr(uri, '"')))[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m  731 |         goto authenticate;[0m
      | [0;1;32m                          
[0m[1mrtsp.c:736:5: [0m[0;1;35mwarning: [0m[1m'MD5_Init' is deprecated [clang-diagnostic-deprecated-declarations][0m
  736 |     MD5_Init(&ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:49:1: [0m[0;1;36mnote: [0m'MD5_Init' has been explicitly marked deprecated here[0m
   49 | OSSL_DEPRECATEDIN_3_0 int MD5_Init(MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:737:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  737 |     MD5_Update(&ctx, username, strlen(username));[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:738:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  738 |     MD5_Update(&ctx, ":", 1);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:739:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  739 |     MD5_Update(&ctx, realm, strlen(realm));[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:740:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  740 |     MD5_Update(&ctx, ":", 1);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:741:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  741 |     MD5_Update(&ctx, config.password, strlen(config.password));[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:742:5: [0m[0;1;35mwarning: [0m[1m'MD5_Final' is deprecated [clang-diagnostic-deprecated-declarations][0m
  742 |     MD5_Final(digest_urp, &ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:51:1: [0m[0;1;36mnote: [0m'MD5_Final' has been explicitly marked deprecated here[0m
   51 | OSSL_DEPRECATEDIN_3_0 int MD5_Final(unsigned char *md, MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:744:5: [0m[0;1;35mwarning: [0m[1m'MD5_Init' is deprecated [clang-diagnostic-deprecated-declarations][0m
  744 |     MD5_Init(&ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:49:1: [0m[0;1;36mnote: [0m'MD5_Init' has been explicitly marked deprecated here[0m
   49 | OSSL_DEPRECATEDIN_3_0 int MD5_Init(MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:745:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  745 |     MD5_Update(&ctx, req->method, strlen(req->method));[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:746:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  746 |     MD5_Update(&ctx, ":", 1);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:747:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  747 |     MD5_Update(&ctx, uri, strlen(uri));[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:748:5: [0m[0;1;35mwarning: [0m[1m'MD5_Final' is deprecated [clang-diagnostic-deprecated-declarations][0m
  748 |     MD5_Final(digest_mu, &ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:51:1: [0m[0;1;36mnote: [0m'MD5_Final' has been explicitly marked deprecated here[0m
   51 | OSSL_DEPRECATEDIN_3_0 int MD5_Final(unsigned char *md, MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:752:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  752 |     for (i=0; i<16; i++)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  753 |         sprintf(buf + 2*i, "%02x", digest_urp[i]);[0m
      | [0;1;32m                                                  
[0m[1mrtsp.c:753:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  753 |         sprintf(buf + 2*i, "%02x", digest_urp[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:753:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  753 |         sprintf(buf + 2*i, "%02x", digest_urp[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:754:5: [0m[0;1;35mwarning: [0m[1m'MD5_Init' is deprecated [clang-diagnostic-deprecated-declarations][0m
  754 |     MD5_Init(&ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:49:1: [0m[0;1;36mnote: [0m'MD5_Init' has been explicitly marked deprecated here[0m
   49 | OSSL_DEPRECATEDIN_3_0 int MD5_Init(MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:755:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  755 |     MD5_Update(&ctx, buf, 32);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:756:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  756 |     MD5_Update(&ctx, ":", 1);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:757:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  757 |     MD5_Update(&ctx, *nonce, strlen(*nonce));[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:758:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  758 |     MD5_Update(&ctx, ":", 1);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:759:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  759 |     for (i=0; i<16; i++)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  760 |         sprintf(buf + 2*i, "%02x", digest_mu[i]);[0m
      | [0;1;32m                                                 
[0m[1mrtsp.c:760:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  760 |         sprintf(buf + 2*i, "%02x", digest_mu[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:760:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  760 |         sprintf(buf + 2*i, "%02x", digest_mu[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:761:5: [0m[0;1;35mwarning: [0m[1m'MD5_Update' is deprecated [clang-diagnostic-deprecated-declarations][0m
  761 |     MD5_Update(&ctx, buf, 32);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:50:1: [0m[0;1;36mnote: [0m'MD5_Update' has been explicitly marked deprecated here[0m
   50 | OSSL_DEPRECATEDIN_3_0 int MD5_Update(MD5_CTX *c, const void *data, size_t len);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:762:5: [0m[0;1;35mwarning: [0m[1m'MD5_Final' is deprecated [clang-diagnostic-deprecated-declarations][0m
  762 |     MD5_Final(digest_total, &ctx);[0m
      | [0;1;32m    ^
[0m[1m/usr/include/openssl/md5.h:51:1: [0m[0;1;36mnote: [0m'MD5_Final' has been explicitly marked deprecated here[0m
   51 | OSSL_DEPRECATEDIN_3_0 int MD5_Final(unsigned char *md, MD5_CTX *c);[0m
      | [0;1;32m^
[0m[1m/usr/include/openssl/macros.h:182:49: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATEDIN_3_0'[0m
  182 | #   define OSSL_DEPRECATEDIN_3_0                OSSL_DEPRECATED(3.0)[0m
      | [0;1;32m                                                ^
[0m[1m/usr/include/openssl/macros.h:62:52: [0m[0;1;36mnote: [0mexpanded from macro 'OSSL_DEPRECATED'[0m
   62 | #     define OSSL_DEPRECATED(since) __attribute__((deprecated))[0m
      | [0;1;32m                                                   ^
[0m[1mrtsp.c:764:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  764 |     for (i=0; i<16; i++)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  765 |         sprintf(buf + 2*i, "%02x", digest_total[i]);[0m
      | [0;1;32m                                                    
[0m[1mrtsp.c:765:9: [0m[0;1;35mwarning: [0m[1mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  765 |         sprintf(buf + 2*i, "%02x", digest_total[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:765:9: [0m[0;1;36mnote: [0mCall to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11[0m
  765 |         sprintf(buf + 2*i, "%02x", digest_total[i]);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mrtsp.c:767:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  767 |     if (!strcmp(response, buf))[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  768 |         return 0;[0m
      | [0;1;32m                 
[0m[1mrtsp.c:775:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  775 |     snprintf(authhdr, hdrlen, "Digest realm=\"taco\", nonce=\"%s\"", *nonce);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mrtsp.c:775:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  775 |     snprintf(authhdr, hdrlen, "Digest realm=\"taco\", nonce=\"%s\"", *nonce);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mrtsp.c:798:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  798 |         if (hdr)[0m
      | [0;1;32m                ^
[0m      | [0;32m                 {
[0m  799 |             msg_add_header(resp, "CSeq", hdr);[0m
      | [0;1;32m                                              
[0m[1mrtsp.c:802:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  802 |         if (rtsp_auth(&auth_nonce, req, resp))[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  803 |             goto respond;[0m
      | [0;1;32m                         
[0m[1mrtsp.c:820:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  820 |     if (conn->fd > 0)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  821 |         close(conn->fd);[0m
      | [0;1;32m                        
[0m[1mrtsp.c:828:20: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  828 |     if (auth_nonce)[0m
      | [0;1;32m                   ^
[0m      | [0;32m                    {
[0m  829 |         free(auth_nonce);[0m
      | [0;1;32m                         
[0m[1mrtsp.c:859:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  859 |     memset(&hints, 0, sizeof(hints));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:859:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  859 |     memset(&hints, 0, sizeof(hints));[0m
      | [0;1;32m    ^~~~~~
[0m[1mrtsp.c:864:5: [0m[0;1;35mwarning: [0m[1mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  864 |     snprintf(portstr, 6, "%d", config.port);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mrtsp.c:864:5: [0m[0;1;36mnote: [0mCall to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11[0m
  864 |     snprintf(portstr, 6, "%d", config.port);[0m
      | [0;1;32m    ^~~~~~~~
[0m[1mrtsp.c:881:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  881 |         if (p->ai_family == AF_INET6)[0m
      | [0;1;32m                                     ^
[0m      | [0;32m                                      {
[0m  882 |             ret |= setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &yes, sizeof(yes));[0m
      | [0;1;32m                                                                                
[0m[1mrtsp.c:885:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  885 |         if (!ret)[0m
      | [0;1;32m                 ^
[0m      | [0;32m                  {
[0m  886 |             ret = bind(fd, p->ai_addr, p->ai_addrlen);[0m
      | [0;1;32m                                                      
[0m[1mrtsp.c:886:19: [0m[0;1;35mwarning: [0m[1mThe 1st argument to 'bind' is -1 but should be >= 0 [clang-analyzer-unix.StdCLibraryFunctions][0m
  886 |             ret = bind(fd, p->ai_addr, p->ai_addrlen);[0m
      | [0;1;32m                  ^    ~~
[0m[1mrtsp.c:867:9: [0m[0;1;36mnote: [0mAssuming 'ret' is 0[0m
  867 |     if (ret) {[0m
      | [0;1;32m        ^~~
[0m[1mrtsp.c:867:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  867 |     if (ret) {[0m
      | [0;1;32m    ^
[0m[1mrtsp.c:871:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  871 |     for (p=info; p; p=p->ai_next) {[0m
      | [0;1;32m    ^
[0m[1mrtsp.c:872:18: [0m[0;1;36mnote: [0mAssuming that 'socket' fails[0m
  872 |         int fd = socket(p->ai_family, p->ai_socktype, IPPROTO_TCP);[0m
      | [0;1;32m                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mrtsp.c:872:9: [0m[0;1;36mnote: [0m'fd' initialized here[0m
  872 |         int fd = socket(p->ai_family, p->ai_socktype, IPPROTO_TCP);[0m
      | [0;1;32m        ^~~~~~
[0m[1mrtsp.c:875:15: [0m[0;1;36mnote: [0mAssuming that 'setsockopt' is successful[0m
  875 |         ret = setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes));[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mrtsp.c:881:13: [0m[0;1;36mnote: [0mAssuming field 'ai_family' is not equal to AF_INET6[0m
  881 |         if (p->ai_family == AF_INET6)[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mrtsp.c:881:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  881 |         if (p->ai_family == AF_INET6)[0m
      | [0;1;32m        ^
[0m[1mrtsp.c:885:14: [0m[0;1;36mnote: [0m'ret' is 0[0m
  885 |         if (!ret)[0m
      | [0;1;32m             ^~~
[0m[1mrtsp.c:885:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  885 |         if (!ret)[0m
      | [0;1;32m        ^
[0m[1mrtsp.c:886:19: [0m[0;1;36mnote: [0mThe 1st argument to 'bind' is -1 but should be >= 0[0m
  886 |             ret = bind(fd, p->ai_addr, p->ai_addrlen);[0m
      | [0;1;32m                  ^    ~~
[0m[1mrtsp.c:904:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  904 |     if (!nsock)[0m
      | [0;1;32m               ^
[0m      | [0;32m                {
[0m  905 |         die("could not bind any listen sockets!");[0m
      | [0;1;32m                                                  
[0m[1mrtsp.c:912:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  912 |         if (sockfd[i] > maxfd)[0m
      | [0;1;32m                              ^
[0m      | [0;32m                               {
[0m  913 |             maxfd = sockfd[i];[0m
      | [0;1;32m                              
[0m[1mrtsp.c:927:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  927 |         for (i=0; i<nsock; i++)[0m
      | [0;1;32m                               ^
[0m      | [0;32m                                {
[0m  928 |             FD_SET(sockfd[i], &fds);[0m
      | [0;1;32m                                    
[0m[1mrtsp.c:932:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  932 |             if (errno==EINTR)[0m
      | [0;1;32m                             ^
[0m      | [0;32m                              {
[0m  933 |                 continue;[0m
      | [0;1;32m                         
[0m[1mrtsp.c:946:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  946 |         if (acceptfd < 0) // timeout[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  947 |             continue;[0m
      | [0;1;32m                     
[0m[1mrtsp.c:950:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  950 |         memset(conn, 0, sizeof(rtsp_conn_info));[0m
      | [0;1;32m        ^~~~~~
[0m[1mrtsp.c:950:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  950 |         memset(conn, 0, sizeof(rtsp_conn_info));[0m
      | [0;1;32m        ^~~~~~
[0m[1mrtsp.c:961:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  961 |             if (ret)[0m
      | [0;1;32m                    ^
[0m      | [0;32m                     {
[0m  962 |                 die("Failed to create RTSP receiver thread!");[0m
      | [0;1;32m                                                              
[0m104 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[15/15][244.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/shairport/tidy-fixes/tmp74vqwbi8.yaml -p=/itch/common/crepos/cu-to-rtu/c/shairport /itch/common/crepos/cu-to-rtu/c/shairport/tinysvcmdns.c
[1mtinysvcmdns.c:88:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   88 |         if (len > 63)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m   89 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mtinysvcmdns.c:91:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   91 |         strncpy((char *) newlabel, (char *) label, len);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:91:9: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
   91 |         strncpy((char *) newlabel, (char *) label, len);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:106:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  106 |         strncpy((char *) s, (char *) n1, len1);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:106:9: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  106 |         strncpy((char *) s, (char *) n1, len1);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:107:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  107 |         strncpy((char *) s+len1, (char *) n2, len2);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:107:9: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  107 |         strncpy((char *) s+len1, (char *) n2, len2);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:122:17: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  122 |                 strncpy(labelp, (char *) p + 1, *p);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mtinysvcmdns.c:122:17: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  122 |                 strncpy(labelp, (char *) p + 1, *p);[0m
      | [0;1;32m                ^~~~~~~
[0m[1mtinysvcmdns.c:165:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  165 |         if (len > 63)[0m
      | [0;1;32m                     ^
[0m      | [0;32m                      {
[0m  166 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mtinysvcmdns.c:170:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  170 |         strncpy((char *) s + 1, txt, len);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:170:9: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  170 |         strncpy((char *) s + 1, txt, len);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:187:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  187 |         if (label == NULL)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  188 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mtinysvcmdns.c:190:9: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  190 |         strncpy((char *) label + 1, name, len);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:190:9: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  190 |         strncpy((char *) label + 1, name, len);[0m
      | [0;1;32m        ^~~~~~~
[0m[1mtinysvcmdns.c:200:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  200 |                 if (dot == NULL)[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                 {
[0m  201 |                         dot = e + 1;[0m
      | [0;1;32m                                    
[0m[1mtinysvcmdns.c:216:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  216 |         if (off > pkt_len)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  217 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mtinysvcmdns.c:235:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  235 |         if (off >= pkt_len)[0m
      | [0;1;32m                           ^
[0m      | [0;32m                            {
[0m  236 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mtinysvcmdns.c:253:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  253 |         if (str == NULL)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m  254 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mtinysvcmdns.c:262:25: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  262 |                         strncpy(sp, (char *) p2, llen);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mtinysvcmdns.c:262:25: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  262 |                         strncpy(sp, (char *) p2, llen);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mtinysvcmdns.c:266:25: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  266 |                         strncpy(sp, (char *) p, llen);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mtinysvcmdns.c:266:25: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  266 |                         strncpy(sp, (char *) p, llen);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mtinysvcmdns.c:280:41: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  280 |                 case RR_A:              return "A";[0m
      | [0;1;32m                                        ^         
[0m      | [0;32m                                        {         ;} 
[0m[1mtinysvcmdns.c:281:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  281 |                 case RR_PTR:    return "PTR";[0m
      | [0;1;32m                                ^           
[0m      | [0;32m                                {           ;} 
[0m[1mtinysvcmdns.c:282:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  282 |                 case RR_TXT:    return "TXT";[0m
      | [0;1;32m                                ^           
[0m      | [0;32m                                {           ;} 
[0m[1mtinysvcmdns.c:283:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  283 |                 case RR_AAAA:   return "AAAA";[0m
      | [0;1;32m                                ^            
[0m      | [0;32m                                {            ;} 
[0m[1mtinysvcmdns.c:284:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  284 |                 case RR_SRV:    return "SRV";[0m
      | [0;1;32m                                ^           
[0m      | [0;32m                                {           ;} 
[0m[1mtinysvcmdns.c:285:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  285 |                 case RR_NSEC:   return "NSEC";[0m
      | [0;1;32m                                ^            
[0m      | [0;32m                                {            ;} 
[0m[1mtinysvcmdns.c:286:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  286 |                 case RR_ANY:    return "ANY";[0m
      | [0;1;32m                                ^           
[0m      | [0;32m                                {           ;} 
[0m[1mtinysvcmdns.c:298:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  298 |                         if (rr->data.PTR.name)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  299 |                                 free(rr->data.PTR.name);[0m
  300 |                         // don't free entry[0m
  301 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:298:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  298 |                         if (rr->data.PTR.name)[0m
      | [0;1;32m                                              ^
[0m      | [0;32m                                               {
[0m  299 |                                 free(rr->data.PTR.name);[0m
      | [0;1;32m                                                        
[0m[1mtinysvcmdns.c:304:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  304 |                         txt_rec = &rr->data.TXT;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  305 |                         while (txt_rec) {[0m
  306 |                                 struct rr_data_txt *next = txt_rec->next;[0m
  307 |                                 if (txt_rec->txt)[0m
  308 |                                         free(txt_rec->txt);[0m
  309 | [0m
  310 |                                 // only free() if it wasn't part of the struct[0m
  311 |                                 if (txt_rec != &rr->data.TXT)[0m
  312 |                                         free(txt_rec);[0m
  313 | [0m
  314 |                                 txt_rec = next;[0m
  315 |                         }[0m
  316 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:307:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  307 |                                 if (txt_rec->txt)[0m
      | [0;1;32m                                                 ^
[0m      | [0;32m                                                  {
[0m  308 |                                         free(txt_rec->txt);[0m
      | [0;1;32m                                                           
[0m[1mtinysvcmdns.c:311:62: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  311 |                                 if (txt_rec != &rr->data.TXT)[0m
      | [0;1;32m                                                             ^
[0m      | [0;32m                                                              {
[0m  312 |                                         free(txt_rec);[0m
      | [0;1;32m                                                      
[0m[1mtinysvcmdns.c:319:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  319 |                         if (rr->data.SRV.target)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  320 |                                 free(rr->data.SRV.target);[0m
  321 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:319:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  319 |                         if (rr->data.SRV.target)[0m
      | [0;1;32m                                                ^
[0m      | [0;32m                                                 {
[0m  320 |                                 free(rr->data.SRV.target);[0m
      | [0;1;32m                                                          
[0m[1mtinysvcmdns.c:325:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  325 |                         break;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mtinysvcmdns.c:338:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  338 |                 if (destroy_items)[0m
      | [0;1;32m                                  ^
[0m      | [0;32m                                   {
[0m  339 |                         rr_entry_destroy(rr->e);[0m
      | [0;1;32m                                                
[0m[1mtinysvcmdns.c:346:39: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  346 |         for (; rr; i++, rr = rr->next);[0m
      | [0;1;32m                                      ^
[0m      | [0;32m                                       {
[0m[1mtinysvcmdns.c:388:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  388 |                         if (e->next == NULL)[0m
      | [0;1;32m                                            ^
[0m      | [0;32m                                             {
[0m  389 |                                 taile = e;[0m
      | [0;1;32m                                          
[0m[1mtinysvcmdns.c:404:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  404 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:404:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  404 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:411:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  411 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:411:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  411 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:418:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  418 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:418:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  418 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:426:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  426 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:426:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  426 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:434:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  434 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:434:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  434 |         DECL_MALLOC_ZERO_STRUCT(rr, rr_entry);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:440:30: [0m[0;1;35mwarning: [0m[1musing the result of an assignment as a condition without parentheses [clang-diagnostic-parentheses][0m
  440 |         assert(rr_nsec->type = RR_NSEC);[0m
      | [0;1;32m                             ^
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^~~~
[0m[1mtinysvcmdns.c:440:30: [0m[0;1;36mnote: [0mplace parentheses around the assignment to silence this warning[0m
  440 |         assert(rr_nsec->type = RR_NSEC);[0m
      | [0;1;32m                             ^
[0m      | [0;32m               (
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^
[0m[1mtinysvcmdns.c:440:30: [0m[0;1;36mnote: [0muse '==' to turn this assignment into an equality comparison[0m
  440 |         assert(rr_nsec->type = RR_NSEC);[0m
      | [0;1;32m                             ^
[0m      | [0;32m                             ==
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^
[0m[1mtinysvcmdns.c:459:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  459 |         for (; txt_rec->next; txt_rec = txt_rec->next);[0m
      | [0;1;32m                                                      ^
[0m      | [0;32m                                                       {
[0m[1mtinysvcmdns.c:483:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  483 |         MALLOC_ZERO_STRUCT(g, rr_group);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:483:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  483 |         MALLOC_ZERO_STRUCT(g, rr_group);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:495:52: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  495 |                 if (cmp_nlabel(g->name, name) == 0)[0m
      | [0;1;32m                                                   ^
[0m      | [0;32m                                                    {
[0m  496 |                         return g;[0m
      | [0;1;32m                                 
[0m[1mtinysvcmdns.c:504:79: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  504 |                 if (rr->e->type == type && cmp_nlabel(rr->e->name, name) == 0)[0m
      | [0;1;32m                                                                              ^
[0m      | [0;32m                                                                               {
[0m  505 |                         return rr->e;[0m
      | [0;1;32m                                     
[0m[1mtinysvcmdns.c:612:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  612 |         memset(rr, 0, sizeof(struct rr_entry));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:612:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  612 |         memset(rr, 0, sizeof(struct rr_entry));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:644:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  644 |         if (off > pkt_len)[0m
      | [0;1;32m                          ^
[0m      | [0;32m                           {
[0m  645 |                 return 0;[0m
      | [0;1;32m                         
[0m[1mtinysvcmdns.c:648:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  648 |         memset(rr, 0, sizeof(struct rr_entry));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:648:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  648 |         memset(rr, 0, sizeof(struct rr_entry));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:679:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  679 |                         if (rr_data_len < sizeof(uint32_t)) {[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  680 |                                 DEBUG_PRINTF("invalid rr_data_len=%lu for A record\n", rr_data_len);[0m
  681 |                                 parse_error = 1;[0m
  682 |                                 break;[0m
  683 |                         }[0m
  684 |                         rr->data.A.addr = ntohl(mdns_read_u32(p)); /* addr already in net order */[0m
  685 |                         p += sizeof(uint32_t);[0m
  686 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:689:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  689 |                         if (rr_data_len < sizeof(struct in6_addr)) {[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  690 |                                 DEBUG_PRINTF("invalid rr_data_len=%lu for AAAA record\n", rr_data_len);[0m
  691 |                                 parse_error = 1;[0m
  692 |                                 break;[0m
  693 |                         }[0m
  694 |                         rr->data.AAAA.addr = malloc(sizeof(struct in6_addr));[0m
  695 |                         int i;[0m
  696 |                         for (i = 0; i < sizeof(struct in6_addr); i++)[0m
  697 |                                 rr->data.AAAA.addr->s6_addr[i] = p[i];[0m
  698 |                         p += sizeof(struct in6_addr);[0m
  699 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:696:70: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  696 |                         for (i = 0; i < sizeof(struct in6_addr); i++)[0m
      | [0;1;32m                                                                     ^
[0m      | [0;32m                                                                      {
[0m  697 |                                 rr->data.AAAA.addr->s6_addr[i] = p[i];[0m
      | [0;1;32m                                                                      
[0m[1mtinysvcmdns.c:702:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  702 |                         rr->data.PTR.name = uncompress_nlabel(pkt_buf, pkt_len, p - pkt_buf);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  703 |                         if (rr->data.PTR.name == NULL) {[0m
  704 |                                 DEBUG_PRINTF("unable to parse/uncompress label for PTR name\n");[0m
  705 |                                 parse_error = 1;[0m
  706 |                                 break;[0m
  707 |                         }[0m
  708 |                         p += rr_data_len;[0m
  709 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:712:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  712 |                         txt_rec = &rr->data.TXT;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m[1mtinysvcmdns.c:730:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  730 |                                 if (p >= e)[0m
      | [0;1;32m                                           ^
[0m      | [0;32m                                            {
[0m  731 |                                         break;[0m
      | [0;1;32m                                              
[0m[1mtinysvcmdns.c:742:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  742 |                         p = e;[0m
      | [0;1;32m                        ^    
[0m      | [0;32m                        {    ;} 
[0m[1mtinysvcmdns.c:763:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  763 |         if (pkt_len < 12)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  764 |                 return NULL;[0m
      | [0;1;32m                            
[0m[1mtinysvcmdns.c:766:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  766 |         MALLOC_ZERO_STRUCT(pkt, mdns_pkt);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:766:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  766 |         MALLOC_ZERO_STRUCT(pkt, mdns_pkt);[0m
      | [0;1;32m        ^
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:824:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  824 |                                 if (c->next == NULL)[0m
      | [0;1;32m                                                    ^
[0m      | [0;32m                                                     {
[0m  825 |                                         c_tail = c;[0m
      | [0;1;32m                                                   
[0m[1mtinysvcmdns.c:830:25: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  830 |                         strncpy((char *) p, (char *) name, segment_len);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mtinysvcmdns.c:830:25: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  830 |                         strncpy((char *) p, (char *) name, segment_len);[0m
      | [0;1;32m                        ^~~~~~~
[0m[1mtinysvcmdns.c:833:25: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  833 |                         DECL_MALLOC_ZERO_STRUCT(new_c, name_comp);[0m
      | [0;1;32m                        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:833:25: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  833 |                         DECL_MALLOC_ZERO_STRUCT(new_c, name_comp);[0m
      | [0;1;32m                        ^
[0m[1m./tinysvcmdns.h:53:23: [0m[0;1;36mnote: [0mexpanded from macro 'DECL_MALLOC_ZERO_STRUCT'[0m
   53 |         struct type * MALLOC_ZERO_STRUCT(x, type)[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m./tinysvcmdns.h:50:9: [0m[0;1;36mnote: [0mexpanded from macro 'MALLOC_ZERO_STRUCT'[0m
   50 |         memset(x, 0, sizeof(struct type));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:887:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  887 |                         p = mdns_write_u32(p, htonl(rr->data.A.addr));[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  888 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:891:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  891 |                         for (i = 0; i < sizeof(struct in6_addr); i++)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  892 |                                 *p++ = rr->data.AAAA.addr->s6_addr[i];[0m
  893 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:891:70: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  891 |                         for (i = 0; i < sizeof(struct in6_addr); i++)[0m
      | [0;1;32m                                                                     ^
[0m      | [0;32m                                                                      {
[0m  892 |                                 *p++ = rr->data.AAAA.addr->s6_addr[i];[0m
      | [0;1;32m                                                                      
[0m[1mtinysvcmdns.c:896:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  896 |                         label = rr->data.PTR.name ?[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  897 |                                         rr->data.PTR.name :[0m
  898 |                                         rr->data.PTR.entry->name;[0m
  899 |                         p += mdns_encode_name(pkt_buf, pkt_len, p - pkt_buf, label, comp);[0m
  900 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:903:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  903 |                         txt_rec = &rr->data.TXT;[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  904 |                         for (; txt_rec; txt_rec = txt_rec->next) {[0m
  905 |                                 int len = txt_rec->txt[0] + 1;[0m
  906 |                                 strncpy((char *) p, (char *) txt_rec->txt, len);[0m
  907 |                                 p += len;[0m
  908 |                         }[0m
  909 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:906:33: [0m[0;1;35mwarning: [0m[1mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  906 |                                 strncpy((char *) p, (char *) txt_rec->txt, len);[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mtinysvcmdns.c:906:33: [0m[0;1;36mnote: [0mCall to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11[0m
  906 |                                 strncpy((char *) p, (char *) txt_rec->txt, len);[0m
      | [0;1;32m                                ^~~~~~~
[0m[1mtinysvcmdns.c:912:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  912 |                         p = mdns_write_u16(p, rr->data.SRV.priority);[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  913 | [0m
  914 |                         p = mdns_write_u16(p, rr->data.SRV.weight);[0m
  915 | [0m
  916 |                         p = mdns_write_u16(p, rr->data.SRV.port);[0m
  917 | [0m
  918 |                         p += mdns_encode_name(pkt_buf, pkt_len, p - pkt_buf,[0m
  919 |                                         rr->data.SRV.target, comp);[0m
  920 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:923:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  923 |                         p += mdns_encode_name(pkt_buf, pkt_len, p - pkt_buf,[0m
      | [0;1;32m                        ^
[0m      | [0;32m                        {
[0m  924 |                                         rr->name, comp);[0m
  925 | [0m
  926 |                         *p++ = 0;       // bitmap window/block number[0m
  927 | [0m
  928 |                         *p++ = sizeof(rr->data.NSEC.bitmap);    // bitmap length[0m
  929 | [0m
  930 |                         for (i = 0; i < sizeof(rr->data.NSEC.bitmap); i++)[0m
  931 |                                 *p++ = rr->data.NSEC.bitmap[i];[0m
  932 | [0m
  933 |                         break;[0m
      | [0;1;32m                             
[0m      | [0;32m                             ;} 
[0m[1mtinysvcmdns.c:930:75: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  930 |                         for (i = 0; i < sizeof(rr->data.NSEC.bitmap); i++)[0m
      | [0;1;32m                                                                          ^
[0m      | [0;32m                                                                           {
[0m  931 |                                 *p++ = rr->data.NSEC.bitmap[i];[0m
      | [0;1;32m                                                               
[0m[1mtinysvcmdns.c:936:25: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  936 |                         DEBUG_PRINTF("unhandled rr type 0x%02x\n", rr->type);[0m
      | [0;1;32m                        ^                                                   
[0m      | [0;32m                        {                                                   ;} 
[0m[1mtinysvcmdns.c:36:27: [0m[0;1;36mnote: [0mexpanded from macro 'DEBUG_PRINTF'[0m
   36 | #define DEBUG_PRINTF(...) debug(1, __VA_ARGS__)[0m
      | [0;1;32m                          ^
[0m[1mtinysvcmdns.c:960:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  960 |         if (p == NULL)[0m
      | [0;1;32m                      ^
[0m      | [0;32m                       {
[0m  961 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mtinysvcmdns.c:977:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  977 |         if (comp == NULL)[0m
      | [0;1;32m                         ^
[0m      | [0;32m                          {
[0m  978 |                 return -1;[0m
      | [0;1;32m                          
[0m[1mtinysvcmdns.c:979:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  979 |         memset(comp, 0, sizeof(struct name_comp));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:979:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  979 |         memset(comp, 0, sizeof(struct name_comp));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1101:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1101 |         memset(&serveraddr, 0, sizeof(serveraddr));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1101:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1101 |         memset(&serveraddr, 0, sizeof(serveraddr));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1105:14: [0m[0;1;35mwarning: [0m[1mAlthough the value stored to 'r' is used in the enclosing expression, the value is never actually read from 'r' [clang-analyzer-deadcode.DeadStores][0m
 1105 |         if ((r = bind(sd, (struct sockaddr *)&serveraddr, sizeof(serveraddr))) < 0) {[0m
      | [0;1;32m             ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1105:14: [0m[0;1;36mnote: [0mAlthough the value stored to 'r' is used in the enclosing expression, the value is never actually read from 'r'[0m
 1105 |         if ((r = bind(sd, (struct sockaddr *)&serveraddr, sizeof(serveraddr))) < 0) {[0m
      | [0;1;32m             ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1111:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1111 |         memset(&mreq, 0, sizeof(struct ip_mreq));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1111:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1111 |         memset(&mreq, 0, sizeof(struct ip_mreq));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1139:17: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1139 |                 memset(&toaddr, 0, sizeof(struct sockaddr_in));[0m
      | [0;1;32m                ^~~~~~
[0m[1mtinysvcmdns.c:1139:17: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1139 |                 memset(&toaddr, 0, sizeof(struct sockaddr_in));[0m
      | [0;1;32m                ^~~~~~
[0m[1mtinysvcmdns.c:1145:16: [0m[0;1;35mwarning: [0m[1mThe 2nd argument to 'sendto' is a buffer with size 65536 but should be a buffer with size equal to or greater than the value of the 3rd argument (which is 18446744073709551615) [clang-analyzer-unix.StdCLibraryFunctions][0m
 1145 |         return sendto(fd, data, len, 0, (struct sockaddr *) &toaddr, sizeof(struct sockaddr_in));[0m
      | [0;1;32m               ^
[0m[1mtinysvcmdns.c:1396:9: [0m[0;1;36mnote: [0m'pkt_buffer' initialized here[0m
 1396 |         void *pkt_buffer = malloc(PACKET_SIZE);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1398:13: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 1398 |         if (svr->notify_pipe[0] > max_fd)[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1398:9: [0m[0;1;36mnote: [0mTaking false branch[0m
 1398 |         if (svr->notify_pipe[0] > max_fd)[0m
      | [0;1;32m        ^
[0m[1mtinysvcmdns.c:1404:16: [0m[0;1;36mnote: [0mAssuming field 'stop_flag' is not equal to 0[0m
 1404 |         while (! svr->stop_flag) {[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1404:9: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 1464[0m
 1404 |         while (! svr->stop_flag) {[0m
      | [0;1;32m        ^
[0m[1mtinysvcmdns.c:1468:9: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1468 |         for (; svc_le; svc_le = svc_le->next) {[0m
      | [0;1;32m        ^
[0m[1mtinysvcmdns.c:1468:9: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 1473[0m
[1mtinysvcmdns.c:1476:13: [0m[0;1;36mnote: [0mAssuming field 'num_ans_rr' is > 0[0m
 1476 |         if (mdns_reply->num_ans_rr > 0) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1476:9: [0m[0;1;36mnote: [0mTaking true branch[0m
 1476 |         if (mdns_reply->num_ans_rr > 0) {[0m
      | [0;1;32m        ^
[0m[1mtinysvcmdns.c:1477:35: [0m[0;1;36mnote: [0mCalling 'mdns_encode_pkt'[0m
 1477 |                 size_t replylen = mdns_encode_pkt(mdns_reply, pkt_buffer, PACKET_SIZE);[0m
      | [0;1;32m                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:957:16: [0m[0;1;36mnote: [0m'answer' is not equal to null[0m
  957 |         assert(answer != NULL);[0m
      | [0;1;32m               ^
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^~~~
[0m[1mtinysvcmdns.c:957:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  957 |         assert(answer != NULL);[0m
      | [0;1;32m        ^
[0m[1m/usr/include/assert.h:109:7: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m      ^
[0m[1mtinysvcmdns.c:958:16: [0m[0;1;36mnote: [0m'pkt_len' is >= 12[0m
  958 |         assert(pkt_len >= 12);[0m
      | [0;1;32m               ^
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^~~~
[0m[1mtinysvcmdns.c:958:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  958 |         assert(pkt_len >= 12);[0m
      | [0;1;32m        ^
[0m[1m/usr/include/assert.h:109:7: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m      ^
[0m[1mtinysvcmdns.c:960:13: [0m[0;1;36mnote: [0mAssuming 'p' is not equal to NULL[0m
  960 |         if (p == NULL)[0m
      | [0;1;32m            ^~~~~~~~~
[0m[1mtinysvcmdns.c:960:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  960 |         if (p == NULL)[0m
      | [0;1;32m        ^
[0m[1mtinysvcmdns.c:964:16: [0m[0;1;36mnote: [0mAssuming field 'num_qn' is equal to 0[0m
  964 |         assert(answer->num_qn == 0);[0m
      | [0;1;32m               ^
[0m[1m/usr/include/assert.h:109:11: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m          ^~~~
[0m[1mtinysvcmdns.c:964:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  964 |         assert(answer->num_qn == 0);[0m
      | [0;1;32m        ^
[0m[1m/usr/include/assert.h:109:7: [0m[0;1;36mnote: [0mexpanded from macro 'assert'[0m
  109 |       if (expr)                                                         \[0m
      | [0;1;32m      ^
[0m[1mtinysvcmdns.c:977:13: [0m[0;1;36mnote: [0mAssuming 'comp' is equal to NULL[0m
  977 |         if (comp == NULL)[0m
      | [0;1;32m            ^~~~~~~~~~~~
[0m[1mtinysvcmdns.c:977:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  977 |         if (comp == NULL)[0m
      | [0;1;32m        ^
[0m[1mtinysvcmdns.c:978:17: [0m[0;1;36mnote: [0mReturning the value 18446744073709551615[0m
  978 |                 return -1;[0m
      | [0;1;32m                ^~~~~~~~~
[0m[1mtinysvcmdns.c:1477:35: [0m[0;1;36mnote: [0mReturning from 'mdns_encode_pkt'[0m
 1477 |                 size_t replylen = mdns_encode_pkt(mdns_reply, pkt_buffer, PACKET_SIZE);[0m
      | [0;1;32m                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1477:17: [0m[0;1;36mnote: [0m'replylen' initialized to 18446744073709551615[0m
 1477 |                 size_t replylen = mdns_encode_pkt(mdns_reply, pkt_buffer, PACKET_SIZE);[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1478:54: [0m[0;1;36mnote: [0mPassing the value 18446744073709551615 via 3rd parameter 'len'[0m
 1478 |                 send_packet(svr->sockfd, pkt_buffer, replylen);[0m
      | [0;1;32m                                                     ^~~~~~~~
[0m[1mtinysvcmdns.c:1478:42: [0m[0;1;36mnote: [0mPassing 'pkt_buffer' via 2nd parameter 'data'[0m
 1478 |                 send_packet(svr->sockfd, pkt_buffer, replylen);[0m
      | [0;1;32m                                         ^~~~~~~~~~
[0m[1mtinysvcmdns.c:1478:17: [0m[0;1;36mnote: [0mCalling 'send_packet'[0m
 1478 |                 send_packet(svr->sockfd, pkt_buffer, replylen);[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1138:13: [0m[0;1;36mnote: [0mAssuming field 'sin_family' is equal to AF_INET[0m
 1138 |         if (toaddr.sin_family != AF_INET) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mtinysvcmdns.c:1138:9: [0m[0;1;36mnote: [0mTaking false branch[0m
 1138 |         if (toaddr.sin_family != AF_INET) {[0m
      | [0;1;32m        ^
[0m[1mtinysvcmdns.c:1145:16: [0m[0;1;36mnote: [0mThe 2nd argument to 'sendto' is a buffer with size 65536 but should be a buffer with size equal to or greater than the value of the 3rd argument (which is 18446744073709551615)[0m
 1145 |         return sendto(fd, data, len, 0, (struct sockaddr *) &toaddr, sizeof(struct sockaddr_in));[0m
      | [0;1;32m               ^          ~~~~  ~~~
[0m[1mtinysvcmdns.c:1166:61: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1166 |                 if (type == RR_ANY && n->e->type == RR_NSEC)[0m
      | [0;1;32m                                                            ^
[0m      | [0;32m                                                             {
[0m 1167 |                         continue;[0m
      | [0;1;32m                                 
[0m[1mtinysvcmdns.c:1187:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1187 |                                 reply->num_add_rr += populate_answers(svr, &reply->rr_add,[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1188 |                                                                                 MDNS_RR_GET_PTR_NAME(ans), RR_ANY);[0m
 1189 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mtinysvcmdns.c:1193:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1193 |                                 reply->num_add_rr += populate_answers(svr, &reply->rr_add,[0m
      | [0;1;32m                                ^
[0m      | [0;32m                                {
[0m 1194 |                                                                                 ans->data.SRV.target, RR_ANY);[0m
 1195 | [0m
 1196 |                                 // perhaps TXT records of the same name?[0m
 1197 |                                 // if we use RR_ANY, we risk pulling in the same RR_SRV[0m
 1198 |                                 reply->num_add_rr += populate_answers(svr, &reply->rr_add,[0m
 1199 |                                                                                 ans->name, RR_TXT);[0m
 1200 |                                 break;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mtinysvcmdns.c:1206:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1206 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mtinysvcmdns.c:1210:33: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1210 |                                 break;[0m
      | [0;1;32m                                ^    
[0m      | [0;32m                                {    ;} 
[0m[1mtinysvcmdns.c:1285:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1285 |                                 if (prev_ans == NULL)[0m
      | [0;1;32m                                                     ^
[0m      | [0;32m                                                      {
[0m 1286 |                                         reply->rr_ans = ans->next;[0m
 1287 |                                 else[0m
      | [0;32m                                } 
[0m[1mtinysvcmdns.c:1287:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1287 |                                 else[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m 1288 |                                         prev_ans->next = ans->next;[0m
      | [0;1;32m                                                                   
[0m[1mtinysvcmdns.c:1398:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1398 |         if (svr->notify_pipe[0] > max_fd)[0m
      | [0;1;32m                                         ^
[0m      | [0;32m                                          {
[0m 1399 |                 max_fd = svr->notify_pipe[0];[0m
      | [0;1;32m                                             
[0m[1mtinysvcmdns.c:1402:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1402 |         memset(mdns_reply, 0, sizeof(struct mdns_pkt));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1402:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1402 |         memset(mdns_reply, 0, sizeof(struct mdns_pkt));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1443:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1443 |                         if (svr->announce)[0m
      | [0;1;32m                                          ^
[0m      | [0;32m                                           {
[0m 1444 |                                 ann_e = rr_list_remove(&svr->announce, svr->announce->e);[0m
      | [0;1;32m                                                                                         
[0m[1mtinysvcmdns.c:1447:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1447 |                         if (! ann_e)[0m
      | [0;1;32m                                    ^
[0m      | [0;32m                                     {
[0m 1448 |                                 break;[0m
      | [0;1;32m                                      
[0m[1mtinysvcmdns.c:1551:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1551 |         memset(service, 0, sizeof(struct mdns_service));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1551:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1551 |         memset(service, 0, sizeof(struct mdns_service));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1564:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1564 |                 for (; *txt; txt++)[0m
      | [0;1;32m                                   ^
[0m      | [0;32m                                    {
[0m 1565 |                         rr_add_txt(txt_e, *txt);[0m
      | [0;1;32m                                                
[0m[1mtinysvcmdns.c:1587:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1587 |         if (txt_e)[0m
      | [0;1;32m                  ^
[0m      | [0;32m                   {
[0m 1588 |                 rr_group_add(&svr->group, txt_e);[0m
      | [0;1;32m                                                 
[0m[1mtinysvcmdns.c:1620:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1620 |         memset(server, 0, sizeof(struct mdnsd));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1620:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1620 |         memset(server, 0, sizeof(struct mdnsd));[0m
      | [0;1;32m        ^~~~~~
[0m[1mtinysvcmdns.c:1661:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1661 |         while (s->stop_flag != 2)[0m
      | [0;1;32m                                 ^
[0m      | [0;32m                                  {
[0m 1662 |                 nanosleep(&ts, NULL);[0m
      | [0;1;32m                                     
[0m[1mtinysvcmdns.c:1672:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1672 |         if (s->hostname)[0m
      | [0;1;32m                        ^
[0m      | [0;32m                         {
[0m 1673 |                 free(s->hostname);[0m
      | [0;1;32m                                  
[0m97 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.



Process exited with return code 0
