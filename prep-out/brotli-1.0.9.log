Command: /itch/common/crepos/tcc-scripts/tidy-braces.sh
Directory: /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9
----------------------------------------

Enabled checks:
    clang-analyzer-apiModeling.Errno
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.TrustReturnsNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.BitwiseShift
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DereferenceModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.NewArraySize
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.ArrayDelete
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PlacementNew
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtrModeling
    clang-analyzer-cplusplus.StringChecker
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.core.EnumCastOutOfRange
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-optin.taint.GenericTaint
    clang-analyzer-optin.taint.TaintPropagation
    clang-analyzer-optin.taint.TaintedAlloc
    clang-analyzer-optin.taint.TaintedDiv
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.ArrayBound
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.MmapWriteExec
    clang-analyzer-security.PointerSub
    clang-analyzer-security.PutenvStackArray
    clang-analyzer-security.SetgidSetuidOrder
    clang-analyzer-security.cert.env.InvalidPtr
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.BlockInCriticalSection
    clang-analyzer-unix.Chroot
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Errno
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.StdCLibraryFunctions
    clang-analyzer-unix.Stream
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NotNullTerminated
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    clang-analyzer-webkit.NoUncountedMemberChecker
    clang-analyzer-webkit.RefCntblBaseVirtualDtor
    clang-analyzer-webkit.UncountedLambdaCapturesChecker
    readability-braces-around-statements

Running clang-tidy for 30 files out of 30 in compilation database ...
[ 1/30][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpbs3z9ror.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/fast_log.c
[ 2/30][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmp7mjblwdg.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/common/constants.c
[ 3/30][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpwiuw9_a0.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/common/dictionary.c
[ 4/30][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpm58472eb.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/dec/bit_reader.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 5/30][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmp4lg04ipd.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/common/platform.c
2 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 6/30][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpotiq2tn3.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/common/context.c
[ 7/30][0.0s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpv71i2v7l.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/cluster.c
17 warnings generated.
Suppressed 17 warnings (17 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 8/30][0.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpz6ppv695.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/memory.c
[1mc/enc/memory.c:54:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   54 |   if (!result) exit(EXIT_FAILURE);[0m
      | [0;1;32m              ^                   
[0m      | [0;32m               {
[0m3 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[ 9/30][1.2s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpuhhd97g0.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/bit_cost.c
14 warnings generated.
Suppressed 14 warnings (14 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[10/30][1.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpvbymoh27.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/dec/state.c
4 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[11/30][1.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmp81xlxp3y.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/command.c
[12/30][3.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpitmkkavr.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/dictionary_hash.c
[13/30][3.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmp0rbs2f6x.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/literal_cost.c
[14/30][3.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmphtt11xbr.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/encoder_dict.c
47 warnings generated.
Suppressed 47 warnings (47 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[15/30][7.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpl5_9tdzy.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/common/transform.c
[1mc/common/transform.c:208:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  208 |     if (word_len < 2) return 1;[0m
      | [0;1;32m                     ^         
[0m      | [0;32m                      {
[0m[1mc/common/transform.c:215:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  215 |     if (word_len < 3) return word_len;[0m
      | [0;1;32m                     ^                
[0m      | [0;32m                      {
[0m[1mc/common/transform.c:224:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  224 |     if (word_len < 4) return word_len;[0m
      | [0;1;32m                     ^                
[0m      | [0;32m                      {
[0m3 warnings generated.

[16/30][8.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpo4ge3r8a.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/utf8_util.c
[1mc/enc/utf8_util.c:78:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   78 |     if (symbol < 0x110000) size_utf8 += bytes_read;[0m
      | [0;1;32m                          ^                        
[0m      | [0;32m                           {
[0m1 warning generated.

[17/30][11.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpkto7trfq.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/dec/huffman.c
[1mc/dec/huffman.c:74:10: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'kReverseBits' [clang-analyzer-security.ArrayBound][0m
   74 |   return kReverseBits[num];[0m
      | [0;1;32m         ^
[0m[1mc/dec/huffman.c:193:10: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  193 |   while (symbol_lists[max_length] == 0xFFFF) max_length--;[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:193:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  193 |   while (symbol_lists[max_length] == 0xFFFF) max_length--;[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:193:10: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  193 |   while (symbol_lists[max_length] == 0xFFFF) max_length--;[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:193:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 194[0m
  193 |   while (symbol_lists[max_length] == 0xFFFF) max_length--;[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:198:16: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is non-negative but less than 32[0m
  198 |   table_size = 1 << table_bits;[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:203:7: [0m[0;1;36mnote: [0mAssuming 'table_bits' is <= 'max_length'[0m
  203 |   if (table_bits > max_length) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:203:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  203 |   if (table_bits > max_length) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:213:36: [0m[0;1;36mnote: [0mAssuming 'bits_count' is not equal to 0[0m
  213 |     for (bits_count = count[bits]; bits_count != 0; --bits_count) {[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:213:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  213 |     for (bits_count = count[bits]; bits_count != 0; --bits_count) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/huffman.c:213:36: [0m[0;1;36mnote: [0mAssuming 'bits_count' is not equal to 0[0m
  213 |     for (bits_count = count[bits]; bits_count != 0; --bits_count) {[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:213:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  213 |     for (bits_count = count[bits]; bits_count != 0; --bits_count) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/huffman.c:213:36: [0m[0;1;36mnote: [0mAssuming 'bits_count' is equal to 0[0m
  213 |     for (bits_count = count[bits]; bits_count != 0; --bits_count) {[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:213:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 219[0m
  213 |     for (bits_count = count[bits]; bits_count != 0; --bits_count) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/huffman.c:221:12: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  221 |   } while (++bits <= table_bits);[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:211:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  211 |   do {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:224:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 231[0m
  224 |   while (total_size != table_size) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:231:14: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is non-negative[0m
  231 |   key_step = BROTLI_REVERSE_BITS_LOWEST >> (root_bits - 1);[0m
      | [0;1;32m             ^
[0m[1mc/dec/huffman.c:65:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REVERSE_BITS_LOWEST'[0m
   65 |   ((brotli_reg_t)1 << (BROTLI_REVERSE_BITS_MAX - 1 + BROTLI_REVERSE_BITS_BASE))[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:234:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  234 |   for (len = root_bits + 1, step = 2; len <= max_length; ++len) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:236:12: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  236 |     for (; count[len] != 0; --count[len]) {[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:236:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  236 |     for (; count[len] != 0; --count[len]) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/huffman.c:237:7: [0m[0;1;36mnote: [0mTaking true branch[0m
  237 |       if (sub_key == (BROTLI_REVERSE_BITS_LOWEST << 1U)) {[0m
      | [0;1;32m      ^
[0m[1mc/dec/huffman.c:240:22: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is non-negative but less than 32[0m
  240 |         table_size = 1 << table_bits;[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:242:19: [0m[0;1;36mnote: [0mCalling 'BrotliReverseBits'[0m
  242 |         sub_key = BrotliReverseBits(key);[0m
      | [0;1;32m                  ^~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:74:10: [0m[0;1;36mnote: [0mAccess of 'kReverseBits' at index 256, while it holds only 256 'unsigned char' elements[0m
   74 |   return kReverseBits[num];[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:97:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   97 |     if (left <= 0) break;[0m
      | [0;1;32m                  ^      
[0m      | [0;32m                   {
[0m[1mc/dec/huffman.c:145:12: [0m[0;1;35mwarning: [0m[1m2nd function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage][0m
  145 |     code = ConstructHuffmanCode(0, (uint16_t)sorted[0]);[0m
      | [0;1;32m           ^                       ~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:124:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  124 |   BROTLI_REPEAT(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH, {[0m
      | [0;1;32m  ^
[0m[1mc/dec/./../common/platform.h:506:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  506 |   if ((N & 1) != 0) {X;}          \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:124:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  124 |   BROTLI_REPEAT(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH, {[0m
      | [0;1;32m  ^
[0m[1mc/dec/./../common/platform.h:507:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  507 |   if ((N & 2) != 0) {X; X;}       \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:124:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  124 |   BROTLI_REPEAT(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH, {[0m
      | [0;1;32m  ^
[0m[1mc/dec/./../common/platform.h:508:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  508 |   if ((N & 4) != 0) {X; X; X; X;} \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:506:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  506 |   if ((N & 1) != 0) {X;}          \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:507:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  507 |   if ((N & 2) != 0) {X; X;}       \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:508:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  508 |   if ((N & 4) != 0) {X; X; X; X;} \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:134:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 135[0m
  134 |   do {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:506:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  506 |   if ((N & 1) != 0) {X;}          \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:507:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  507 |   if ((N & 2) != 0) {X; X;}       \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:508:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  508 |   if ((N & 4) != 0) {X; X; X; X;} \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:134:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 135[0m
  134 |   do {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:506:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  506 |   if ((N & 1) != 0) {X;}          \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:507:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  507 |   if ((N & 2) != 0) {X; X;}       \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:508:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  508 |   if ((N & 4) != 0) {X; X; X; X;} \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:134:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  134 |   do {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:144:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  144 |   if (offset[0] == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:144:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  144 |   if (offset[0] == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:145:12: [0m[0;1;36mnote: [0m2nd function call argument is an uninitialized value[0m
  145 |     code = ConstructHuffmanCode(0, (uint16_t)sorted[0]);[0m
      | [0;1;32m           ^                       ~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:160:14: [0m[0;1;35mwarning: [0m[1m2nd function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage][0m
  160 |       code = ConstructHuffmanCode((uint8_t)bits, (uint16_t)sorted[symbol++]);[0m
      | [0;1;32m             ^                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:124:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  124 |   BROTLI_REPEAT(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH, {[0m
      | [0;1;32m  ^
[0m[1mc/dec/./../common/platform.h:506:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  506 |   if ((N & 1) != 0) {X;}          \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:124:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  124 |   BROTLI_REPEAT(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH, {[0m
      | [0;1;32m  ^
[0m[1mc/dec/./../common/platform.h:507:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  507 |   if ((N & 2) != 0) {X; X;}       \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:124:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  124 |   BROTLI_REPEAT(BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH, {[0m
      | [0;1;32m  ^
[0m[1mc/dec/./../common/platform.h:508:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  508 |   if ((N & 4) != 0) {X; X; X; X;} \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:506:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  506 |   if ((N & 1) != 0) {X;}          \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:507:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  507 |   if ((N & 2) != 0) {X; X;}       \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:508:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  508 |   if ((N & 4) != 0) {X; X; X; X;} \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:134:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 135[0m
  134 |   do {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:506:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  506 |   if ((N & 1) != 0) {X;}          \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:507:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  507 |   if ((N & 2) != 0) {X; X;}       \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:508:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  508 |   if ((N & 4) != 0) {X; X; X; X;} \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:134:3: [0m[0;1;36mnote: [0mLoop condition is true. Execution continues on line 135[0m
  134 |   do {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:506:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  506 |   if ((N & 1) != 0) {X;}          \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:507:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  507 |   if ((N & 2) != 0) {X; X;}       \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:135:5: [0m[0;1;36mnote: [0mTaking true branch[0m
  135 |     BROTLI_REPEAT(6, {[0m
      | [0;1;32m    ^
[0m[1mc/dec/./../common/platform.h:508:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_REPEAT'[0m
  508 |   if ((N & 4) != 0) {X; X; X; X;} \[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:134:3: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  134 |   do {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:144:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  144 |   if (offset[0] == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:144:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  144 |   if (offset[0] == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/huffman.c:159:36: [0m[0;1;36mnote: [0mAssuming 'bits_count' is not equal to 0[0m
  159 |     for (bits_count = count[bits]; bits_count != 0; --bits_count) {[0m
      | [0;1;32m                                   ^~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:159:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  159 |     for (bits_count = count[bits]; bits_count != 0; --bits_count) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/huffman.c:160:14: [0m[0;1;36mnote: [0m2nd function call argument is an uninitialized value[0m
  160 |       code = ConstructHuffmanCode((uint8_t)bits, (uint16_t)sorted[symbol++]);[0m
      | [0;1;32m             ^                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/huffman.c:193:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  193 |   while (symbol_lists[max_length] == 0xFFFF) max_length--;[0m
      | [0;1;32m                                            ^             
[0m      | [0;32m                                             {
[0m[1mc/dec/huffman.c:225:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  225 |     memcpy(&table[table_size], &table[0],[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/dec/huffman.c:225:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  225 |     memcpy(&table[table_size], &table[0],[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/dec/huffman.c:269:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  269 |       table[0] = ConstructHuffmanCode(0, val[0]);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  270 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mc/dec/huffman.c:272:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  272 |       if (val[1] > val[0]) {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  273 |         table[0] = ConstructHuffmanCode(1, val[0]);[0m
  274 |         table[1] = ConstructHuffmanCode(1, val[1]);[0m
  275 |       } else {[0m
  276 |         table[0] = ConstructHuffmanCode(1, val[1]);[0m
  277 |         table[1] = ConstructHuffmanCode(1, val[0]);[0m
  278 |       }[0m
  279 |       table_size = 2;[0m
  280 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mc/dec/huffman.c:282:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  282 |       table[0] = ConstructHuffmanCode(1, val[0]);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  283 |       table[2] = ConstructHuffmanCode(1, val[0]);[0m
  284 |       if (val[2] > val[1]) {[0m
  285 |         table[1] = ConstructHuffmanCode(2, val[1]);[0m
  286 |         table[3] = ConstructHuffmanCode(2, val[2]);[0m
  287 |       } else {[0m
  288 |         table[1] = ConstructHuffmanCode(2, val[2]);[0m
  289 |         table[3] = ConstructHuffmanCode(2, val[1]);[0m
  290 |       }[0m
  291 |       table_size = 4;[0m
  292 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mc/dec/huffman.c:330:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  330 |     memcpy(&table[table_size], &table[0],[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/dec/huffman.c:330:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  330 |     memcpy(&table[table_size], &table[0],[0m
      | [0;1;32m    ^~~~~~
[0m10 warnings generated.

[18/30][26.9s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpq6s2wp0d.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/entropy_encode.c
[1mc/enc/entropy_encode.c:33:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   33 |       if (level > max_depth) return BROTLI_FALSE;[0m
      | [0;1;32m                            ^                    
[0m      | [0;32m                             {
[0m[1mc/enc/entropy_encode.c:40:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   40 |     while (level >= 0 && stack[level] == -1) level--;[0m
      | [0;1;32m                                            ^        
[0m      | [0;32m                                             {
[0m[1mc/enc/entropy_encode.c:41:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   41 |     if (level < 0) return BROTLI_TRUE;[0m
      | [0;1;32m                  ^                   
[0m      | [0;32m                   {
[0m[1mc/enc/entropy_encode.c:299:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  299 |   memset(good_for_rle, 0, length);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/entropy_encode.c:299:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  299 |   memset(good_for_rle, 0, length);[0m
      | [0;1;32m  ^~~~~~
[0m5 warnings generated.
Suppressed 1 warnings (1 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[19/30][90.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpnhgk7p2f.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/static_dict.c
[1mc/enc/static_dict.c:67:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   67 |           if ((dict[i] ^ 32) != data[i]) return BROTLI_FALSE;[0m
      | [0;1;32m                                        ^                    
[0m      | [0;32m                                         {
[0m[1mc/enc/static_dict.c:69:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   69 |           if (dict[i] != data[i]) return BROTLI_FALSE;[0m
      | [0;1;32m                                 ^                    
[0m      | [0;32m                                  {
[0m[1mc/enc/static_dict.c:116:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  116 |         if (l > 9) minlen = BROTLI_MAX(size_t, minlen, l - 9);[0m
      | [0;1;32m                  ^                                           
[0m      | [0;32m                   {
[0m[1mc/enc/static_dict.c:136:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  136 |               if (s[3] == ' ') AddMatch(id + 46 * n, l + 4, l, matches);[0m
      | [0;1;32m                              ^                                         
[0m      | [0;32m                               {
[0m[1mc/enc/static_dict.c:138:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  138 |               if (s[3] == ' ') AddMatch(id + 60 * n, l + 4, l, matches);[0m
      | [0;1;32m                              ^                                         
[0m      | [0;32m                               {
[0m[1mc/enc/static_dict.c:150:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  150 |               if (s[3] == ' ') AddMatch(id + 16 * n, l + 4, l, matches);[0m
      | [0;1;32m                              ^                                         
[0m      | [0;32m                               {
[0m[1mc/enc/static_dict.c:152:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  152 |               if (s[3] == ' ') AddMatch(id + 47 * n, l + 4, l, matches);[0m
      | [0;1;32m                              ^                                         
[0m      | [0;32m                               {
[0m[1mc/enc/static_dict.c:166:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  166 |               if (s[3] == ' ') AddMatch(id + 8 * n, l + 4, l, matches);[0m
      | [0;1;32m                              ^                                        
[0m      | [0;32m                               {
[0m[1mc/enc/static_dict.c:168:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  168 |               if (s[3] == ' ') AddMatch(id + 45 * n, l + 4, l, matches);[0m
      | [0;1;32m                              ^                                         
[0m      | [0;32m                               {
[0m[1mc/enc/static_dict.c:177:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  177 |                 if (s[4] == ' ') AddMatch(id + 5 * n, l + 5, l, matches);[0m
      | [0;1;32m                                ^                                        
[0m      | [0;32m                                 {
[0m[1mc/enc/static_dict.c:184:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  184 |               if (s[3] == ' ') AddMatch(id + 17 * n, l + 4, l, matches);[0m
      | [0;1;32m                              ^                                         
[0m      | [0;32m                               {
[0m[1mc/enc/static_dict.c:202:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  202 |                 if (s[5] == ' ') AddMatch(id + 43 * n, l + 6, l, matches);[0m
      | [0;1;32m                                ^                                         
[0m      | [0;32m                                 {
[0m[1mc/enc/static_dict.c:240:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  240 |             if (s[2] == ' ') AddMatch(id + 53 * n, l + 3, l, matches);[0m
      | [0;1;32m                            ^                                         
[0m      | [0;32m                             {
[0m[1mc/enc/static_dict.c:242:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  242 |             if (s[2] == ' ') AddMatch(id + 82 * n, l + 3, l, matches);[0m
      | [0;1;32m                            ^                                         
[0m      | [0;32m                             {
[0m[1mc/enc/static_dict.c:268:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  268 |             if (s[2] == ' ') AddMatch(id + 61 * n, l + 3, l, matches);[0m
      | [0;1;32m                            ^                                         
[0m      | [0;32m                             {
[0m15 warnings generated.

[20/30][104.5s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmp27kj1rz6.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/block_splitter.c
[1mc/enc/./block_splitter_inc.h:17:32: [0m[0;1;35mwarning: [0m[1mDivision by zero [clang-analyzer-core.DivideZero][0m
   17 |   size_t block_length = length / num_histograms;[0m
      | [0;1;32m                               ^
[0m[1mc/enc/block_splitter.c:134:25: [0m[0;1;36mnote: [0mAssuming 'literals_count' is > 0[0m
  134 |     uint8_t* literals = BROTLI_ALLOC(m, uint8_t, literals_count);[0m
      | [0;1;32m                        ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/block_splitter.c:134:25: [0m[0;1;36mnote: [0m'?' condition is true[0m
  134 |     uint8_t* literals = BROTLI_ALLOC(m, uint8_t, literals_count);[0m
      | [0;1;32m                        ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/block_splitter.c:135:9: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  135 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(literals)) return;[0m
      | [0;1;32m        ^
[0m[1mc/enc/././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/block_splitter.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(literals)) return;[0m
      | [0;1;32m    ^
[0m[1mc/enc/block_splitter.c:140:5: [0m[0;1;36mnote: [0mCalling 'SplitByteVectorLiteral'[0m
  140 |     SplitByteVectorLiteral([0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~
[0m  141 |         m, literals, literals_count,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  142 |         kSymbolsPerLiteralHistogram, kMaxLiteralHistograms,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  143 |         kLiteralStrideLength, kLiteralBlockSwitchCost, params,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  144 |         literal_split);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:373:3: [0m[0;1;36mnote: [0m'num_histograms' initialized here[0m
  373 |   size_t num_histograms = length / literals_per_histogram + 1;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:375:7: [0m[0;1;36mnote: [0mAssuming 'num_histograms' is <= 'max_histograms'[0m
  375 |   if (num_histograms > max_histograms) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:375:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  375 |   if (num_histograms > max_histograms) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/./block_splitter_inc.h:378:7: [0m[0;1;36mnote: [0m'length' is not equal to 0[0m
  378 |   if (length == 0) {[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/./block_splitter_inc.h:378:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  378 |   if (length == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/./block_splitter_inc.h:381:14: [0m[0;1;36mnote: [0mAssuming 'length' is >= 'kMinLengthForBlockSplitting'[0m
  381 |   } else if (length < kMinLengthForBlockSplitting) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:381:10: [0m[0;1;36mnote: [0mTaking false branch[0m
  381 |   } else if (length < kMinLengthForBlockSplitting) {[0m
      | [0;1;32m         ^
[0m[1mc/enc/./block_splitter_inc.h:393:16: [0m[0;1;36mnote: [0mAssuming 'num_histograms' is <= 0[0m
  393 |   histograms = BROTLI_ALLOC(m, HistogramType, num_histograms);[0m
      | [0;1;32m               ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:393:16: [0m[0;1;36mnote: [0m'?' condition is false[0m
  393 |   histograms = BROTLI_ALLOC(m, HistogramType, num_histograms);[0m
      | [0;1;32m               ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/./block_splitter_inc.h:394:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  394 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(histograms)) return;[0m
      | [0;1;32m      ^
[0m[1mc/enc/././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/./block_splitter_inc.h:394:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  394 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(histograms)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/./block_splitter_inc.h:398:27: [0m[0;1;36mnote: [0mPassing value via 4th parameter 'num_histograms'[0m
  398 |                           num_histograms, histograms);[0m
      | [0;1;32m                          ^~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:396:3: [0m[0;1;36mnote: [0mCalling 'InitialEntropyCodesLiteral'[0m
  396 |   FN(InitialEntropyCodes)(data, length,[0m
      | [0;1;32m  ^
[0m[1mc/enc/block_splitter.c:89:15: [0m[0;1;36mnote: [0mexpanded from macro 'FN'[0m
   89 | #define FN(X) X ## Literal[0m
      | [0;1;32m              ^
[0m[0;1;36mnote: [0mexpanded from here[0m
[1mc/enc/./block_splitter_inc.h:17:32: [0m[0;1;36mnote: [0mDivision by zero[0m
   17 |   size_t block_length = length / num_histograms;[0m
      | [0;1;32m                        ~~~~~~~^~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:54:41: [0m[0;1;35mwarning: [0m[1mDivision by zero [clang-analyzer-core.DivideZero][0m
   54 |   iters = ((iters + num_histograms - 1) / num_histograms) * num_histograms;[0m
      | [0;1;32m                                        ^
[0m[1mc/enc/block_splitter.c:134:25: [0m[0;1;36mnote: [0mAssuming 'literals_count' is > 0[0m
  134 |     uint8_t* literals = BROTLI_ALLOC(m, uint8_t, literals_count);[0m
      | [0;1;32m                        ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/block_splitter.c:134:25: [0m[0;1;36mnote: [0m'?' condition is true[0m
  134 |     uint8_t* literals = BROTLI_ALLOC(m, uint8_t, literals_count);[0m
      | [0;1;32m                        ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/block_splitter.c:135:9: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  135 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(literals)) return;[0m
      | [0;1;32m        ^
[0m[1mc/enc/././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/block_splitter.c:135:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  135 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(literals)) return;[0m
      | [0;1;32m    ^
[0m[1mc/enc/block_splitter.c:140:5: [0m[0;1;36mnote: [0mCalling 'SplitByteVectorLiteral'[0m
  140 |     SplitByteVectorLiteral([0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~
[0m  141 |         m, literals, literals_count,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  142 |         kSymbolsPerLiteralHistogram, kMaxLiteralHistograms,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  143 |         kLiteralStrideLength, kLiteralBlockSwitchCost, params,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  144 |         literal_split);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:373:3: [0m[0;1;36mnote: [0m'num_histograms' initialized here[0m
  373 |   size_t num_histograms = length / literals_per_histogram + 1;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:375:7: [0m[0;1;36mnote: [0mAssuming 'num_histograms' is <= 'max_histograms'[0m
  375 |   if (num_histograms > max_histograms) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:375:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  375 |   if (num_histograms > max_histograms) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/./block_splitter_inc.h:378:7: [0m[0;1;36mnote: [0m'length' is not equal to 0[0m
  378 |   if (length == 0) {[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/./block_splitter_inc.h:378:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  378 |   if (length == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/./block_splitter_inc.h:381:14: [0m[0;1;36mnote: [0mAssuming 'length' is >= 'kMinLengthForBlockSplitting'[0m
  381 |   } else if (length < kMinLengthForBlockSplitting) {[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:381:10: [0m[0;1;36mnote: [0mTaking false branch[0m
  381 |   } else if (length < kMinLengthForBlockSplitting) {[0m
      | [0;1;32m         ^
[0m[1mc/enc/./block_splitter_inc.h:393:16: [0m[0;1;36mnote: [0mAssuming 'num_histograms' is <= 0[0m
  393 |   histograms = BROTLI_ALLOC(m, HistogramType, num_histograms);[0m
      | [0;1;32m               ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:393:16: [0m[0;1;36mnote: [0m'?' condition is false[0m
  393 |   histograms = BROTLI_ALLOC(m, HistogramType, num_histograms);[0m
      | [0;1;32m               ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/./block_splitter_inc.h:394:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  394 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(histograms)) return;[0m
      | [0;1;32m      ^
[0m[1mc/enc/././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/./block_splitter_inc.h:394:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  394 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(histograms)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/./block_splitter_inc.h:401:26: [0m[0;1;36mnote: [0mPassing value via 4th parameter 'num_histograms'[0m
  401 |                          num_histograms, histograms);[0m
      | [0;1;32m                         ^~~~~~~~~~~~~~
[0m[1mc/enc/./block_splitter_inc.h:399:3: [0m[0;1;36mnote: [0mCalling 'RefineEntropyCodesLiteral'[0m
  399 |   FN(RefineEntropyCodes)(data, length,[0m
      | [0;1;32m  ^
[0m[1mc/enc/block_splitter.c:89:15: [0m[0;1;36mnote: [0mexpanded from macro 'FN'[0m
   89 | #define FN(X) X ## Literal[0m
      | [0;1;32m              ^
[0m[0;1;36mnote: [0mexpanded from here[0m
[1mc/enc/./block_splitter_inc.h:54:41: [0m[0;1;36mnote: [0mDivision by zero[0m
   54 |   iters = ((iters + num_histograms - 1) / num_histograms) * num_histograms;[0m
      | [0;1;32m           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
[0m[1mc/enc/block_splitter.c:63:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   63 |       memcpy(literals + pos, data + from_pos, head_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/block_splitter.c:63:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   63 |       memcpy(literals + pos, data + from_pos, head_size);[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/block_splitter.c:69:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   69 |       memcpy(literals + pos, data + from_pos, insert_len);[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/block_splitter.c:69:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   69 |       memcpy(literals + pos, data + from_pos, insert_len);[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/block_splitter.c:135:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  135 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(literals)) return;[0m
      | [0;1;32m                                                     ^       
[0m      | [0;32m                                                      {
[0m[1mc/enc/block_splitter.c:145:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  145 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/block_splitter.c:153:67: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  153 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(insert_and_copy_codes)) return;[0m
      | [0;1;32m                                                                  ^       
[0m      | [0;32m                                                                   {
[0m[1mc/enc/block_splitter.c:163:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  163 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/block_splitter.c:173:63: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  173 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(distance_prefixes)) return;[0m
      | [0;1;32m                                                              ^       
[0m      | [0;32m                                                               {
[0m[1mc/enc/block_splitter.c:186:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  186 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m78 warnings generated.
Suppressed 68 warnings (68 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[21/30][118.4s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpn6fxc_3j.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/compress_fragment_two_pass.c
[1mc/enc/compress_fragment_two_pass.c:61:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   61 |     if (length == 4) return BROTLI_TRUE;[0m
      | [0;1;32m                    ^                   
[0m      | [0;32m                     {
[0m[1mc/enc/compress_fragment_two_pass.c:84:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   84 |   memcpy(cmd_depth, depth + 24, 24);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:84:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   84 |   memcpy(cmd_depth, depth + 24, 24);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:85:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   85 |   memcpy(cmd_depth + 24, depth, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:85:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   85 |   memcpy(cmd_depth + 24, depth, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:86:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   86 |   memcpy(cmd_depth + 32, depth + 48, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:86:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   86 |   memcpy(cmd_depth + 32, depth + 48, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:87:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   87 |   memcpy(cmd_depth + 40, depth + 8, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:87:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   87 |   memcpy(cmd_depth + 40, depth + 8, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:88:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   88 |   memcpy(cmd_depth + 48, depth + 56, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:88:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   88 |   memcpy(cmd_depth + 48, depth + 56, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:89:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   89 |   memcpy(cmd_depth + 56, depth + 16, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:89:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   89 |   memcpy(cmd_depth + 56, depth + 16, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:91:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   91 |   memcpy(bits, cmd_bits + 24, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:91:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   91 |   memcpy(bits, cmd_bits + 24, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:92:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   92 |   memcpy(bits + 8, cmd_bits + 40, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:92:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   92 |   memcpy(bits + 8, cmd_bits + 40, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:93:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   93 |   memcpy(bits + 16, cmd_bits + 56, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:93:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   93 |   memcpy(bits + 16, cmd_bits + 56, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:94:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   94 |   memcpy(bits + 24, cmd_bits, 48);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:94:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   94 |   memcpy(bits + 24, cmd_bits, 48);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:95:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   95 |   memcpy(bits + 48, cmd_bits + 32, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:95:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   95 |   memcpy(bits + 48, cmd_bits + 32, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:96:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
   96 |   memcpy(bits + 56, cmd_bits + 48, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:96:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
   96 |   memcpy(bits + 56, cmd_bits + 48, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:101:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  101 |     memset(cmd_depth, 0, 64);  /* only 64 first values were used */[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:101:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  101 |     memset(cmd_depth, 0, 64);  /* only 64 first values were used */[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:102:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  102 |     memcpy(cmd_depth, depth + 24, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:102:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  102 |     memcpy(cmd_depth, depth + 24, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:103:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  103 |     memcpy(cmd_depth + 64, depth + 32, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:103:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  103 |     memcpy(cmd_depth + 64, depth + 32, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:104:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  104 |     memcpy(cmd_depth + 128, depth + 40, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:104:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  104 |     memcpy(cmd_depth + 128, depth + 40, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:105:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  105 |     memcpy(cmd_depth + 192, depth + 48, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:105:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  105 |     memcpy(cmd_depth + 192, depth + 48, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:106:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  106 |     memcpy(cmd_depth + 384, depth + 56, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:106:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  106 |     memcpy(cmd_depth + 384, depth + 56, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:314:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  314 |       if (ip - candidate > MAX_DISTANCE) goto trawl;[0m
      | [0;1;32m                                        ^           
[0m      | [0;32m                                         {
[0m[1mc/enc/compress_fragment_two_pass.c:333:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  333 |         memcpy(*literals, next_emit, (size_t)insert);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:333:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  333 |         memcpy(*literals, next_emit, (size_t)insert);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:450:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  450 |     memcpy(*literals, next_emit, insert);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:450:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  450 |     memcpy(*literals, next_emit, insert);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:487:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  487 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/compress_fragment_two_pass.c:552:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  552 |   memcpy(&storage[*storage_ix >> 3], input, input_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:552:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  552 |   memcpy(&storage[*storage_ix >> 3], input, input_size);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment_two_pass.c:583:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  583 |       if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                           ^       
[0m      | [0;32m                            {
[0m[1mc/enc/compress_fragment_two_pass.c:625:30: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  625 |     default: BROTLI_DCHECK(0); break;[0m
      | [0;1;32m                             ^      
[0m      | [0;32m                             {      ;} 
[0m38 warnings generated.
Suppressed 12 warnings (12 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[22/30][121.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpqxhxs6jf.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/histogram.c
10 warnings generated.
Suppressed 10 warnings (10 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[23/30][122.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmp80_uixn1.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/backward_references.c
[1mc/enc/backward_references.c:139:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  139 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m48 warnings generated.
Suppressed 47 warnings (47 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[24/30][131.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmptj9758i5.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/compress_fragment.c
[1mc/enc/compress_fragment.c:114:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  114 |   if (BROTLI_IS_OOM(m)) return 0;[0m
      | [0;1;32m                       ^         
[0m      | [0;32m                        {
[0m[1mc/enc/compress_fragment.c:118:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  118 |       if (histogram[i]) literal_ratio += histogram[i] * depths[i];[0m
      | [0;1;32m                       ^                                          
[0m      | [0;32m                        {
[0m[1mc/enc/compress_fragment.c:142:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  142 |   memcpy(cmd_depth, depth, 24);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:142:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  142 |   memcpy(cmd_depth, depth, 24);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:143:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  143 |   memcpy(cmd_depth + 24, depth + 40, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:143:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  143 |   memcpy(cmd_depth + 24, depth + 40, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:144:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  144 |   memcpy(cmd_depth + 32, depth + 24, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:144:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  144 |   memcpy(cmd_depth + 32, depth + 24, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:145:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  145 |   memcpy(cmd_depth + 40, depth + 48, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:145:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  145 |   memcpy(cmd_depth + 40, depth + 48, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:146:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  146 |   memcpy(cmd_depth + 48, depth + 32, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:146:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  146 |   memcpy(cmd_depth + 48, depth + 32, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:147:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  147 |   memcpy(cmd_depth + 56, depth + 56, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:147:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  147 |   memcpy(cmd_depth + 56, depth + 56, 8);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:149:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  149 |   memcpy(bits, cmd_bits, 48);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:149:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  149 |   memcpy(bits, cmd_bits, 48);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:150:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  150 |   memcpy(bits + 24, cmd_bits + 32, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:150:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  150 |   memcpy(bits + 24, cmd_bits + 32, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:151:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  151 |   memcpy(bits + 32, cmd_bits + 48, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:151:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  151 |   memcpy(bits + 32, cmd_bits + 48, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:152:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  152 |   memcpy(bits + 40, cmd_bits + 24, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:152:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  152 |   memcpy(bits + 40, cmd_bits + 24, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:153:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  153 |   memcpy(bits + 48, cmd_bits + 40, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:153:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  153 |   memcpy(bits + 48, cmd_bits + 40, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:154:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  154 |   memcpy(bits + 56, cmd_bits + 56, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:154:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  154 |   memcpy(bits + 56, cmd_bits + 56, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:159:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  159 |     memset(cmd_depth, 0, 64);  /* only 64 first values were used */[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:159:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  159 |     memset(cmd_depth, 0, 64);  /* only 64 first values were used */[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:160:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  160 |     memcpy(cmd_depth, depth, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:160:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  160 |     memcpy(cmd_depth, depth, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:161:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  161 |     memcpy(cmd_depth + 64, depth + 8, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:161:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  161 |     memcpy(cmd_depth + 64, depth + 8, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:162:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  162 |     memcpy(cmd_depth + 128, depth + 16, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:162:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  162 |     memcpy(cmd_depth + 128, depth + 16, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:163:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  163 |     memcpy(cmd_depth + 192, depth + 24, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:163:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  163 |     memcpy(cmd_depth + 192, depth + 24, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:164:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  164 |     memcpy(cmd_depth + 384, depth + 32, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:164:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  164 |     memcpy(cmd_depth + 384, depth + 32, 8);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/compress_fragment.c:266:7: [0m[0;1;35mwarning: [0m[1mOut of bound access to memory after the end of 'cmd_histo' [clang-analyzer-security.ArrayBound][0m
  266 |     ++histo[copylen - 4];[0m
      | [0;1;32m      ^
[0m[1mc/enc/compress_fragment.c:753:7: [0m[0;1;36mnote: [0mAssuming 'input_size' is not equal to 0[0m
  753 |   if (input_size == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:753:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  753 |   if (input_size == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/compress_fragment.c:761:3: [0m[0;1;36mnote: [0mControl jumps to 'case 9:'  at line 768[0m
  761 |   switch (table_bits) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/compress_fragment.c:768:21: [0m[0;1;36mnote: [0mCalling 'BrotliCompressFragmentFastImpl9'[0m
  768 |     FOR_TABLE_BITS_(CASE_)[0m
      | [0;1;32m                    ^
[0m[1mc/enc/compress_fragment.c:731:28: [0m[0;1;36mnote: [0mexpanded from macro 'FOR_TABLE_BITS_'[0m
  731 | #define FOR_TABLE_BITS_(X) X(9) X(11) X(13) X(15)[0m
      | [0;1;32m                           ^~~~
[0m[1mc/enc/compress_fragment.c:764:7: [0m[0;1;36mnote: [0mexpanded from macro 'CASE_'[0m
  764 |       BrotliCompressFragmentFastImpl ## B(                           \[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  765 |           m, input, input_size, is_last, table, cmd_depth, cmd_bits, \[0m
      | [0;1;32m          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  766 |           cmd_code_numbits, cmd_code, storage_ix, storage);          \[0m
      | [0;1;32m          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;1;36mnote: [0mexpanded from here[0m
[1mc/enc/compress_fragment.c:742:17: [0m[0;1;36mnote: [0mCalling 'BrotliCompressFragmentFastImpl'[0m
  742 | FOR_TABLE_BITS_(BAKE_METHOD_PARAM_)[0m
      | [0;1;32m                ^
[0m[1mc/enc/compress_fragment.c:731:28: [0m[0;1;36mnote: [0mexpanded from macro 'FOR_TABLE_BITS_'[0m
  731 | #define FOR_TABLE_BITS_(X) X(9) X(11) X(13) X(15)[0m
      | [0;1;32m                           ^~~~
[0m[1mc/enc/compress_fragment.c:739:3: [0m[0;1;36mnote: [0mexpanded from macro 'BAKE_METHOD_PARAM_'[0m
  739 |   BrotliCompressFragmentFastImpl(m, input, input_size, is_last, table, B,    \[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  740 |       cmd_depth, cmd_bits, cmd_code_numbits, cmd_code, storage_ix, storage); \[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:470:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  470 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/compress_fragment.c:475:17: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  475 |     for (i = 0; i + 7 < *cmd_code_numbits; i += 8) {[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:475:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 479[0m
  475 |     for (i = 0; i + 7 < *cmd_code_numbits; i += 8) {[0m
      | [0;1;32m    ^
[0m[1mc/enc/compress_fragment.c:494:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  494 |   if (BROTLI_PREDICT_TRUE(block_size >= kInputMarginBytes)) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/compress_fragment.c:504:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  504 |     for (next_hash = Hash(++ip, shift); ; ) {[0m
      | [0;1;32m    ^
[0m[1mc/enc/compress_fragment.c:532:34: [0m[0;1;36mnote: [0m'next_ip' is <= 'ip_limit'[0m
  532 |         if (BROTLI_PREDICT_FALSE(next_ip > ip_limit)) {[0m
      | [0;1;32m                                 ^
[0m[1mc/enc/./../common/platform.h:83:51: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_PREDICT_FALSE'[0m
   83 | #define BROTLI_PREDICT_FALSE(x) (__builtin_expect(x, 0))[0m
      | [0;1;32m                                                  ^
[0m[1mc/enc/compress_fragment.c:532:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  532 |         if (BROTLI_PREDICT_FALSE(next_ip > ip_limit)) {[0m
      | [0;1;32m        ^
[0m[1mc/enc/compress_fragment.c:537:9: [0m[0;1;36mnote: [0mTaking false branch[0m
  537 |         if (IsMatch(ip, candidate)) {[0m
      | [0;1;32m        ^
[0m[1mc/enc/compress_fragment.c:526:7: [0m[0;1;36mnote: [0mLoop condition is false.  Exiting loop[0m
  526 |       do {[0m
      | [0;1;32m      ^
[0m[1mc/enc/compress_fragment.c:552:11: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  552 |       if (ip - candidate > MAX_DISTANCE) goto trawl;[0m
      | [0;1;32m          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:552:7: [0m[0;1;36mnote: [0mTaking false branch[0m
  552 |       if (ip - candidate > MAX_DISTANCE) goto trawl;[0m
      | [0;1;32m      ^
[0m[1mc/enc/compress_fragment.c:569:33: [0m[0;1;36mnote: [0mAssuming 'insert' is < 6210[0m
  569 |         if (BROTLI_PREDICT_TRUE(insert < 6210)) {[0m
      | [0;1;32m                                ^
[0m[1mc/enc/./../common/platform.h:82:53: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_PREDICT_TRUE'[0m
   82 | #define BROTLI_PREDICT_TRUE(x) (__builtin_expect(!!(x), 1))[0m
      | [0;1;32m                                                    ^
[0m[1mc/enc/compress_fragment.c:569:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  569 |         if (BROTLI_PREDICT_TRUE(insert < 6210)) {[0m
      | [0;1;32m        ^
[0m[1mc/enc/compress_fragment.c:586:13: [0m[0;1;36mnote: [0mAssuming 'distance' is equal to 'last_distance'[0m
  586 |         if (distance == last_distance) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:586:9: [0m[0;1;36mnote: [0mTaking true branch[0m
  586 |         if (distance == last_distance) {[0m
      | [0;1;32m        ^
[0m[1mc/enc/compress_fragment.c:594:9: [0m[0;1;36mnote: [0mCalling 'EmitCopyLenLastDistance'[0m
  594 |         EmitCopyLenLastDistance(matched, cmd_depth, cmd_bits, cmd_histo,[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  595 |                                 storage_ix, storage);[0m
      | [0;1;32m                                ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:264:7: [0m[0;1;36mnote: [0mAssuming 'copylen' is < 12[0m
  264 |   if (copylen < 12) {[0m
      | [0;1;32m      ^~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:264:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  264 |   if (copylen < 12) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/compress_fragment.c:265:21: [0m[0;1;36mnote: [0mAssuming index is less than the number of 'const uint8_t' elements in the region[0m
  265 |     BrotliWriteBits(depth[copylen - 4], bits[copylen - 4], storage_ix, storage);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:265:41: [0m[0;1;36mnote: [0mAssuming index is less than the number of 'const uint16_t' elements in the region[0m
  265 |     BrotliWriteBits(depth[copylen - 4], bits[copylen - 4], storage_ix, storage);[0m
      | [0;1;32m                                        ^~~~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:266:7: [0m[0;1;36mnote: [0mAccess of 'cmd_histo' at an overflowing index, while it holds only 128 'unsigned int' elements[0m
  266 |     ++histo[copylen - 4];[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~
[0m[1mc/enc/compress_fragment.c:411:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  411 |   memcpy(&storage[*storage_ix >> 3], begin, len);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:411:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  411 |   memcpy(&storage[*storage_ix >> 3], begin, len);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:470:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  470 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/compress_fragment.c:487:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  487 |   memcpy(cmd_histo, kCmdHistoSeed, sizeof(kCmdHistoSeed));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:487:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  487 |   memcpy(cmd_histo, kCmdHistoSeed, sizeof(kCmdHistoSeed));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/compress_fragment.c:552:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  552 |       if (ip - candidate > MAX_DISTANCE) goto trawl;[0m
      | [0;1;32m                                        ^           
[0m      | [0;32m                                         {
[0m[1mc/enc/compress_fragment.c:625:43: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  625 |         if (ip - candidate > MAX_DISTANCE) break;[0m
      | [0;1;32m                                          ^      
[0m      | [0;32m                                           {
[0m[1mc/enc/compress_fragment.c:715:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  715 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/compress_fragment.c:770:30: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  770 |     default: BROTLI_DCHECK(0); break;[0m
      | [0;1;32m                             ^      
[0m      | [0;32m                             {      ;} 
[0m39 warnings generated.
Suppressed 11 warnings (11 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[25/30][160.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpgz0wo1c1.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/metablock.c
[1mc/enc/./././histogram_inc.h:19:3: [0m[0;1;35mwarning: [0m[1mNull pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker][0m
   19 |   memset(self->data_, 0, sizeof(self->data_));[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:631:7: [0m[0;1;36mnote: [0mAssuming 'num_contexts' is equal to 1[0m
  631 |   if (num_contexts == 1) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:631:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  631 |   if (num_contexts == 1) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:632:5: [0m[0;1;36mnote: [0mCalling 'BrotliBuildMetaBlockGreedyInternal'[0m
  632 |     BrotliBuildMetaBlockGreedyInternal(m, ringbuffer, pos, mask, prev_byte,[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  633 |         prev_byte2, literal_context_lut, 1, NULL, commands, n_commands, mb);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:551:15: [0m[0;1;36mnote: [0mAssuming 'i' is < 'n_commands'[0m
  551 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:551:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  551 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:551:15: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'n_commands'[0m
  551 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:551:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 555[0m
  551 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:555:7: [0m[0;1;36mnote: [0m'num_contexts' is equal to 1[0m
  555 |   if (num_contexts == 1) {[0m
      | [0;1;32m      ^~~~~~~~~~~~
[0m[1mc/enc/metablock.c:555:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  555 |   if (num_contexts == 1) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:556:5: [0m[0;1;36mnote: [0mCalling 'InitBlockSplitterLiteral'[0m
  556 |     InitBlockSplitterLiteral(m, &lit_blocks.plain, 256, 512, 400.0,[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  557 |         num_literals, &mb->literal_split, &mb->literal_histograms,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  558 |         &mb->literal_histograms_size);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./metablock_inc.h:65:21: [0m[0;1;36mnote: [0mAssuming 'max_num_blocks' is <= field 'types_alloc_size'[0m
   65 |       split->types, split->types_alloc_size, max_num_blocks);[0m
      | [0;1;32m                    ^
[0m[1mc/enc/./././memory.h:82:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   82 |   if (C < (R)) {                                                   \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/enc/./metablock_inc.h:64:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   64 |   BROTLI_ENSURE_CAPACITY(m, uint8_t,[0m
      | [0;1;32m  ^
[0m[1mc/enc/./././memory.h:82:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   82 |   if (C < (R)) {                                                   \[0m
      | [0;1;32m  ^
[0m[1mc/enc/./metablock_inc.h:67:23: [0m[0;1;36mnote: [0mAssuming 'max_num_blocks' is <= field 'lengths_alloc_size'[0m
   67 |       split->lengths, split->lengths_alloc_size, max_num_blocks);[0m
      | [0;1;32m                      ^
[0m[1mc/enc/./././memory.h:82:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   82 |   if (C < (R)) {                                                   \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/enc/./metablock_inc.h:66:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   66 |   BROTLI_ENSURE_CAPACITY(m, uint32_t,[0m
      | [0;1;32m  ^
[0m[1mc/enc/./././memory.h:82:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   82 |   if (C < (R)) {                                                   \[0m
      | [0;1;32m  ^
[0m[1mc/enc/./metablock_inc.h:68:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   68 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/./metablock_inc.h:72:17: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
   72 |   *histograms = BROTLI_ALLOC(m, HistogramType, *histograms_size);[0m
      | [0;1;32m                ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/./metablock_inc.h:72:17: [0m[0;1;36mnote: [0m'?' condition is false[0m
   72 |   *histograms = BROTLI_ALLOC(m, HistogramType, *histograms_size);[0m
      | [0;1;32m                ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/./metablock_inc.h:74:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
   74 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(*histograms)) return;[0m
      | [0;1;32m      ^
[0m[1mc/enc/./././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/./metablock_inc.h:74:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   74 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(*histograms)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/./metablock_inc.h:76:3: [0m[0;1;36mnote: [0mCalling 'HistogramClearLiteral'[0m
   76 |   FN(HistogramClear)(&self->histograms_[0]);[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:286:15: [0m[0;1;36mnote: [0mexpanded from macro 'FN'[0m
  286 | #define FN(X) X ## Literal[0m
      | [0;1;32m              ^
[0m[0;1;36mnote: [0mexpanded from here[0m
[1mc/enc/./././histogram_inc.h:19:3: [0m[0;1;36mnote: [0mNull pointer passed to 1st parameter expecting 'nonnull'[0m
   19 |   memset(self->data_, 0, sizeof(self->data_));[0m
      | [0;1;32m  ^      ~~~~~~~~~~~
[0m[1mc/enc/./././histogram_inc.h:31:3: [0m[0;1;35mwarning: [0m[1mArray access (via field 'data_') results in a null pointer dereference [clang-analyzer-core.NullDereference][0m
   31 |   ++self->data_[val];[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:631:7: [0m[0;1;36mnote: [0mAssuming 'num_contexts' is not equal to 1[0m
  631 |   if (num_contexts == 1) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:631:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  631 |   if (num_contexts == 1) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:635:5: [0m[0;1;36mnote: [0mCalling 'BrotliBuildMetaBlockGreedyInternal'[0m
  635 |     BrotliBuildMetaBlockGreedyInternal(m, ringbuffer, pos, mask, prev_byte,[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  636 |         prev_byte2, literal_context_lut, num_contexts, static_context_map,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  637 |         commands, n_commands, mb);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:551:15: [0m[0;1;36mnote: [0mAssuming 'i' is < 'n_commands'[0m
  551 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:551:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  551 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:551:15: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'n_commands'[0m
  551 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:551:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 555[0m
  551 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:555:7: [0m[0;1;36mnote: [0m'num_contexts' is not equal to 1[0m
  555 |   if (num_contexts == 1) {[0m
      | [0;1;32m      ^~~~~~~~~~~~
[0m[1mc/enc/metablock.c:555:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  555 |   if (num_contexts == 1) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:560:5: [0m[0;1;36mnote: [0mCalling 'InitContextBlockSplitter'[0m
  560 |     InitContextBlockSplitter(m, &lit_blocks.ctx, 256, num_contexts, 512, 400.0,[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  561 |         num_literals, &mb->literal_split, &mb->literal_histograms,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  562 |         &mb->literal_histograms_size);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:362:21: [0m[0;1;36mnote: [0mAssuming 'max_num_blocks' is <= field 'types_alloc_size'[0m
  362 |       split->types, split->types_alloc_size, max_num_blocks);[0m
      | [0;1;32m                    ^
[0m[1mc/enc/./././memory.h:82:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   82 |   if (C < (R)) {                                                   \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/enc/metablock.c:361:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  361 |   BROTLI_ENSURE_CAPACITY(m, uint8_t,[0m
      | [0;1;32m  ^
[0m[1mc/enc/./././memory.h:82:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   82 |   if (C < (R)) {                                                   \[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:364:23: [0m[0;1;36mnote: [0mAssuming 'max_num_blocks' is <= field 'lengths_alloc_size'[0m
  364 |       split->lengths, split->lengths_alloc_size, max_num_blocks);[0m
      | [0;1;32m                      ^
[0m[1mc/enc/./././memory.h:82:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   82 |   if (C < (R)) {                                                   \[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/enc/metablock.c:363:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  363 |   BROTLI_ENSURE_CAPACITY(m, uint32_t,[0m
      | [0;1;32m  ^
[0m[1mc/enc/./././memory.h:82:3: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   82 |   if (C < (R)) {                                                   \[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:365:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  365 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:367:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  367 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:370:17: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  370 |   *histograms = BROTLI_ALLOC(m, HistogramLiteral, *histograms_size);[0m
      | [0;1;32m                ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/metablock.c:370:17: [0m[0;1;36mnote: [0m'?' condition is false[0m
  370 |   *histograms = BROTLI_ALLOC(m, HistogramLiteral, *histograms_size);[0m
      | [0;1;32m                ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/metablock.c:371:3: [0m[0;1;36mnote: [0mNull pointer value stored to 'lit_blocks.ctx.histograms_'[0m
  371 |   self->histograms_ = *histograms;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:372:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  372 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(*histograms)) return;[0m
      | [0;1;32m      ^
[0m[1mc/enc/./././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/metablock.c:372:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  372 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(*histograms)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:560:5: [0m[0;1;36mnote: [0mReturning from 'InitContextBlockSplitter'[0m
  560 |     InitContextBlockSplitter(m, &lit_blocks.ctx, 256, num_contexts, 512, 400.0,[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  561 |         num_literals, &mb->literal_split, &mb->literal_histograms,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  562 |         &mb->literal_histograms_size);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:564:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  564 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:568:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  568 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:572:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  572 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:574:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  574 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/metablock.c:578:31: [0m[0;1;36mnote: [0mAssuming 'j' is not equal to 0[0m
  578 |     for (j = cmd.insert_len_; j != 0; --j) {[0m
      | [0;1;32m                              ^~~~~~
[0m[1mc/enc/metablock.c:578:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  578 |     for (j = cmd.insert_len_; j != 0; --j) {[0m
      | [0;1;32m    ^
[0m[1mc/enc/metablock.c:580:11: [0m[0;1;36mnote: [0m'num_contexts' is not equal to 1[0m
  580 |       if (num_contexts == 1) {[0m
      | [0;1;32m          ^~~~~~~~~~~~
[0m[1mc/enc/metablock.c:580:7: [0m[0;1;36mnote: [0mTaking false branch[0m
  580 |       if (num_contexts == 1) {[0m
      | [0;1;32m      ^
[0m[1mc/enc/metablock.c:585:9: [0m[0;1;36mnote: [0mCalling 'ContextBlockSplitterAddSymbol'[0m
  585 |         ContextBlockSplitterAddSymbol(&lit_blocks.ctx, m, literal,[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  586 |                                       static_context_map[context]);[0m
      | [0;1;32m                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:507:23: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'self'[0m
  507 |   HistogramAddLiteral(&self->histograms_[self->curr_histogram_ix_ + context],[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/metablock.c:507:3: [0m[0;1;36mnote: [0mCalling 'HistogramAddLiteral'[0m
  507 |   HistogramAddLiteral(&self->histograms_[self->curr_histogram_ix_ + context],[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  508 |       symbol);[0m
      | [0;1;32m      ~~~~~~~
[0m[1mc/enc/./././histogram_inc.h:31:3: [0m[0;1;36mnote: [0mArray access (via field 'data_') results in a null pointer dereference[0m
   31 |   ++self->data_[val];[0m
      | [0;1;32m  ^       ~~~~~
[0m[1mc/enc/metablock.c:172:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  172 |     if (ndirect_msb > 0) ndirect_msb--;[0m
      | [0;1;32m                        ^              
[0m      | [0;32m                         {
[0m[1mc/enc/metablock.c:193:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  193 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/metablock.c:199:67: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  199 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(literal_context_modes)) return;[0m
      | [0;1;32m                                                                  ^       
[0m      | [0;32m                                                                   {
[0m[1mc/enc/metablock.c:209:62: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  209 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(literal_histograms)) return;[0m
      | [0;1;32m                                                             ^       
[0m      | [0;32m                                                              {
[0m[1mc/enc/metablock.c:216:63: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  216 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(distance_histograms)) return;[0m
      | [0;1;32m                                                              ^       
[0m      | [0;32m                                                               {
[0m[1mc/enc/metablock.c:223:66: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  223 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(mb->command_histograms)) return;[0m
      | [0;1;32m                                                                 ^       
[0m      | [0;32m                                                                  {
[0m[1mc/enc/metablock.c:237:67: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  237 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(mb->literal_context_map)) return;[0m
      | [0;1;32m                                                                  ^       
[0m      | [0;32m                                                                   {
[0m[1mc/enc/metablock.c:243:66: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  243 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(mb->literal_histograms)) return;[0m
      | [0;1;32m                                                                 ^       
[0m      | [0;32m                                                                  {
[0m[1mc/enc/metablock.c:248:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  248 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/metablock.c:268:68: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  268 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(mb->distance_context_map)) return;[0m
      | [0;1;32m                                                                   ^       
[0m      | [0;32m                                                                    {
[0m[1mc/enc/metablock.c:274:67: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  274 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(mb->distance_histograms)) return;[0m
      | [0;1;32m                                                                  ^       
[0m      | [0;32m                                                                   {
[0m[1mc/enc/metablock.c:282:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  282 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/metablock.c:361:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  361 |   BROTLI_ENSURE_CAPACITY(m, uint8_t,[0m
      | [0;1;32m  ^
[0m[1mc/enc/./././memory.h:88:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   88 |       memcpy(new_array, A, C * sizeof(T));                         \[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/metablock.c:361:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  361 |   BROTLI_ENSURE_CAPACITY(m, uint8_t,[0m
      | [0;1;32m  ^
[0m[1mc/enc/./././memory.h:88:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   88 |       memcpy(new_array, A, C * sizeof(T));                         \[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/metablock.c:363:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  363 |   BROTLI_ENSURE_CAPACITY(m, uint32_t,[0m
      | [0;1;32m  ^
[0m[1mc/enc/./././memory.h:88:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   88 |       memcpy(new_array, A, C * sizeof(T));                         \[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/metablock.c:363:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  363 |   BROTLI_ENSURE_CAPACITY(m, uint32_t,[0m
      | [0;1;32m  ^
[0m[1mc/enc/./././memory.h:88:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   88 |       memcpy(new_array, A, C * sizeof(T));                         \[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/metablock.c:365:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  365 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/metablock.c:367:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  367 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/metablock.c:372:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  372 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(*histograms)) return;[0m
      | [0;1;32m                                                      ^       
[0m      | [0;32m                                                       {
[0m[1mc/enc/metablock.c:422:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  422 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(combined_histo)) return;[0m
      | [0;1;32m                                                           ^       
[0m      | [0;32m                                                            {
[0m[1mc/enc/metablock.c:512:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  512 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/metablock.c:526:67: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  526 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(mb->literal_context_map)) return;[0m
      | [0;1;32m                                                                  ^       
[0m      | [0;32m                                                                   {
[0m[1mc/enc/metablock.c:564:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  564 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/metablock.c:568:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  568 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/metablock.c:572:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  572 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/metablock.c:587:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  587 |         if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                             ^       
[0m      | [0;32m                              {
[0m[1mc/enc/metablock.c:609:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  609 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m57 warnings generated.
Suppressed 30 warnings (30 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[26/30][167.3s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmp82wygzv4.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/encode.c
[1mc/enc/././command.h:139:21: [0m[0;1;35mwarning: [0m[1mAccess to field 'insert_len_' results in a dereference of a null pointer (loaded from variable 'self') [clang-analyzer-core.NullDereference][0m
  139 |   self->insert_len_ = (uint32_t)insertlen;[0m
      | [0;1;32m                    ^
[0m[1mc/enc/encode.c:1480:7: [0m[0;1;36mnote: [0mAssuming 'out_size' is not equal to 0[0m
 1480 |   if (out_size == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1480:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1480 |   if (out_size == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:1484:7: [0m[0;1;36mnote: [0m'input_size' is not equal to 0[0m
 1484 |   if (input_size == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~
[0m[1mc/enc/encode.c:1484:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1484 |   if (input_size == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:1490:7: [0m[0;1;36mnote: [0mAssuming 'quality' is equal to 10[0m
 1490 |   if (quality == 10) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1490:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 1490 |   if (quality == 10) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:1494:14: [0m[0;1;36mnote: [0mCalling 'BrotliCompressBufferQuality10'[0m
 1494 |     int ok = BrotliCompressBufferQuality10(lg_win, input_size, input_buffer,[0m
      | [0;1;32m             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1495 |                                            encoded_size, encoded_buffer);[0m
      | [0;1;32m                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1239:7: [0m[0;1;36mnote: [0m'lgwin' is <= BROTLI_MAX_WINDOW_BITS[0m
 1239 |   if (lgwin > BROTLI_MAX_WINDOW_BITS) {[0m
      | [0;1;32m      ^~~~~
[0m[1mc/enc/encode.c:1239:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1239 |   if (lgwin > BROTLI_MAX_WINDOW_BITS) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:1245:20: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is non-negative but less than 64[0m
 1245 |   max_block_size = (size_t)1 << params.lgblock;[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1253:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1253 |   if (BROTLI_IS_OOM(m)) goto oom;[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:1255:10: [0m[0;1;36mnote: [0m'ok' is 1[0m
 1255 |   while (ok && metablock_start < input_size) {[0m
      | [0;1;32m         ^~
[0m[1mc/enc/encode.c:1255:10: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
[1mc/enc/encode.c:1255:16: [0m[0;1;36mnote: [0m'metablock_start' is < 'input_size'[0m
 1255 |   while (ok && metablock_start < input_size) {[0m
      | [0;1;32m               ^~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1255:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1255 |   while (ok && metablock_start < input_size) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:1260:5: [0m[0;1;36mnote: [0m'commands' initialized to a null pointer value[0m
 1260 |     Command* commands = 0;[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1275:41: [0m[0;1;36mnote: [0mAssuming 'block_start' is < 'metablock_end'[0m
 1275 |     for (block_start = metablock_start; block_start < metablock_end; ) {[0m
      | [0;1;32m                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1275:5: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1275 |     for (block_start = metablock_start; block_start < metablock_end; ) {[0m
      | [0;1;32m    ^
[0m[1mc/enc/encode.c:1278:27: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 1278 |       ZopfliNode* nodes = BROTLI_ALLOC(m, ZopfliNode, block_size + 1);[0m
      | [0;1;32m                          ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/encode.c:1278:27: [0m[0;1;36mnote: [0m'?' condition is true[0m
 1278 |       ZopfliNode* nodes = BROTLI_ALLOC(m, ZopfliNode, block_size + 1);[0m
      | [0;1;32m                          ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/encode.c:1281:11: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
 1281 |       if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) goto oom;[0m
      | [0;1;32m          ^
[0m[1mc/enc/./././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/encode.c:1281:7: [0m[0;1;36mnote: [0mTaking false branch[0m
 1281 |       if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) goto oom;[0m
      | [0;1;32m      ^
[0m[1mc/enc/encode.c:1288:7: [0m[0;1;36mnote: [0mTaking false branch[0m
 1288 |       if (BROTLI_IS_OOM(m)) goto oom;[0m
      | [0;1;32m      ^
[0m[1mc/enc/encode.c:1299:11: [0m[0;1;36mnote: [0mAssuming 'cmd_alloc_size' is equal to 'new_cmd_alloc_size'[0m
 1299 |       if (cmd_alloc_size != new_cmd_alloc_size) {[0m
      | [0;1;32m          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1299:7: [0m[0;1;36mnote: [0mTaking false branch[0m
 1299 |       if (cmd_alloc_size != new_cmd_alloc_size) {[0m
      | [0;1;32m      ^
[0m[1mc/enc/encode.c:1315:11: [0m[0;1;36mnote: [0mAssuming 'num_literals' is > 'max_literals_per_metablock'[0m
 1315 |       if (num_literals > max_literals_per_metablock ||[0m
      | [0;1;32m          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1315:53: [0m[0;1;36mnote: [0mLeft side of '||' is true[0m
 1315 |       if (num_literals > max_literals_per_metablock ||[0m
      | [0;1;32m                                                    ^
[0m[1mc/enc/encode.c:1317:9: [0m[0;1;36mnote: [0m Execution continues on line 1321[0m
 1317 |         break;[0m
      | [0;1;32m        ^
[0m[1mc/enc/encode.c:1321:9: [0m[0;1;36mnote: [0mAssuming 'last_insert_len' is > 0[0m
 1321 |     if (last_insert_len > 0) {[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1321:5: [0m[0;1;36mnote: [0mTaking true branch[0m
 1321 |     if (last_insert_len > 0) {[0m
      | [0;1;32m    ^
[0m[1mc/enc/encode.c:1322:25: [0m[0;1;36mnote: [0mPassing null pointer value via 1st parameter 'self'[0m
 1322 |       InitInsertCommand(&commands[num_commands++], last_insert_len);[0m
      | [0;1;32m                        ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/encode.c:1322:7: [0m[0;1;36mnote: [0mCalling 'InitInsertCommand'[0m
 1322 |       InitInsertCommand(&commands[num_commands++], last_insert_len);[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/././command.h:139:21: [0m[0;1;36mnote: [0mAccess to field 'insert_len_' results in a dereference of a null pointer (loaded from variable 'self')[0m
  139 |   self->insert_len_ = (uint32_t)insertlen;[0m
      | [0;1;32m  ~~~~              ^
[0m[1mc/enc/encode.c:142:27: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  142 |   if (delta >= block_size) return 0;[0m
      | [0;1;32m                          ^         
[0m      | [0;32m                           {
[0m[1mc/enc/encode.c:149:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |   if (state->is_initialized_) return BROTLI_FALSE;[0m
      | [0;1;32m                             ^                    
[0m      | [0;32m                              {
[0m[1mc/enc/encode.c:153:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  153 |       state->params.mode = (BrotliEncoderMode)value;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  154 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:157:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  157 |       state->params.quality = (int)value;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  158 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:161:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  161 |       state->params.lgwin = (int)value;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  162 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:165:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  165 |       state->params.lgblock = (int)value;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  166 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:169:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  169 |       if ((value != 0) && (value != 1)) return BROTLI_FALSE;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  170 |       state->params.disable_literal_context_modeling = TO_BROTLI_BOOL(!!value);[0m
  171 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:169:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  169 |       if ((value != 0) && (value != 1)) return BROTLI_FALSE;[0m
      | [0;1;32m                                       ^                    
[0m      | [0;32m                                        {
[0m[1mc/enc/encode.c:174:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  174 |       state->params.size_hint = value;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  175 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:178:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  178 |       state->params.large_window = TO_BROTLI_BOOL(!!value);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  179 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:182:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  182 |       state->params.dist.distance_postfix_bits = value;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  183 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:186:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  186 |       state->params.dist.num_direct_distance_codes = value;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  187 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:190:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  190 |       if (value > (1u << 30)) return BROTLI_FALSE;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  191 |       state->params.stream_offset = value;[0m
  192 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/enc/encode.c:190:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  190 |       if (value > (1u << 30)) return BROTLI_FALSE;[0m
      | [0;1;32m                             ^                    
[0m      | [0;32m                              {
[0m[1mc/enc/encode.c:194:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  194 |     default: return BROTLI_FALSE;[0m
      | [0;1;32m             ^                  
[0m      | [0;32m             {                  ;} 
[0m[1mc/enc/encode.c:215:57: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  215 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(s->storage_)) return NULL;[0m
      | [0;1;32m                                                        ^            
[0m      | [0;32m                                                         {
[0m[1mc/enc/encode.c:254:63: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  254 |       if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(s->large_table_)) return 0;[0m
      | [0;1;32m                                                              ^         
[0m      | [0;32m                                                               {
[0m[1mc/enc/encode.c:260:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  260 |   memset(table, 0, htsize * sizeof(*table));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/encode.c:260:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  260 |   memset(table, 0, htsize * sizeof(*table));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/encode.c:323:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  323 |   COPY_ARRAY(cmd_depths, kDefaultCommandDepths);[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:41:30: [0m[0;1;36mnote: [0mexpanded from macro 'COPY_ARRAY'[0m
   41 | #define COPY_ARRAY(dst, src) memcpy(dst, src, sizeof(src));[0m
      | [0;1;32m                             ^~~~~~
[0m[1mc/enc/encode.c:323:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  323 |   COPY_ARRAY(cmd_depths, kDefaultCommandDepths);[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:41:30: [0m[0;1;36mnote: [0mexpanded from macro 'COPY_ARRAY'[0m
   41 | #define COPY_ARRAY(dst, src) memcpy(dst, src, sizeof(src));[0m
      | [0;1;32m                             ^~~~~~
[0m[1mc/enc/encode.c:324:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  324 |   COPY_ARRAY(cmd_bits, kDefaultCommandBits);[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:41:30: [0m[0;1;36mnote: [0mexpanded from macro 'COPY_ARRAY'[0m
   41 | #define COPY_ARRAY(dst, src) memcpy(dst, src, sizeof(src));[0m
      | [0;1;32m                             ^~~~~~
[0m[1mc/enc/encode.c:324:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  324 |   COPY_ARRAY(cmd_bits, kDefaultCommandBits);[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:41:30: [0m[0;1;36mnote: [0mexpanded from macro 'COPY_ARRAY'[0m
   41 | #define COPY_ARRAY(dst, src) memcpy(dst, src, sizeof(src));[0m
      | [0;1;32m                             ^~~~~~
[0m[1mc/enc/encode.c:328:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  328 |   COPY_ARRAY(cmd_code, kDefaultCommandCode);[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:41:30: [0m[0;1;36mnote: [0mexpanded from macro 'COPY_ARRAY'[0m
   41 | #define COPY_ARRAY(dst, src) memcpy(dst, src, sizeof(src));[0m
      | [0;1;32m                             ^~~~~~
[0m[1mc/enc/encode.c:328:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  328 |   COPY_ARRAY(cmd_code, kDefaultCommandCode);[0m
      | [0;1;32m  ^
[0m[1mc/enc/encode.c:41:30: [0m[0;1;36mnote: [0mexpanded from macro 'COPY_ARRAY'[0m
   41 | #define COPY_ARRAY(dst, src) memcpy(dst, src, sizeof(src));[0m
      | [0;1;32m                             ^~~~~~
[0m[1mc/enc/encode.c:517:18: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  517 |   if (bytes <= 2) return BROTLI_FALSE;[0m
      | [0;1;32m                 ^                    
[0m      | [0;32m                  {
[0m[1mc/enc/encode.c:587:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  587 |     memcpy(dist_cache, saved_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:587:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  587 |     memcpy(dist_cache, saved_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:602:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  602 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:608:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  608 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:624:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  624 |       if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                           ^       
[0m      | [0;32m                            {
[0m[1mc/enc/encode.c:631:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  631 |       if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                           ^       
[0m      | [0;32m                            {
[0m[1mc/enc/encode.c:647:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  647 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:652:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  652 |     memcpy(dist_cache, saved_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:652:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  652 |     memcpy(dist_cache, saved_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:689:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  689 |   if (BROTLI_IS_OOM(&s->memory_manager_)) return BROTLI_FALSE;[0m
      | [0;1;32m                                         ^                    
[0m      | [0;32m                                          {
[0m[1mc/enc/encode.c:690:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  690 |   if (s->is_initialized_) return BROTLI_TRUE;[0m
      | [0;1;32m                         ^                   
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:708:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  708 |     memcpy(s->saved_dist_cache_, s->dist_cache_, sizeof(s->saved_dist_cache_));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:708:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  708 |     memcpy(s->saved_dist_cache_, s->dist_cache_, sizeof(s->saved_dist_cache_));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:794:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  794 |   memcpy(s->saved_dist_cache_, s->dist_cache_, sizeof(s->saved_dist_cache_));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/encode.c:794:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  794 |   memcpy(s->saved_dist_cache_, s->dist_cache_, sizeof(s->saved_dist_cache_));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/encode.c:856:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  856 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/encode.c:901:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  901 |     memset(ringbuffer_->buffer_ + ringbuffer_->pos_, 0, 7);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:901:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  901 |     memset(ringbuffer_->buffer_ + ringbuffer_->pos_, 0, 7);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:976:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  976 |   if (s->is_last_block_emitted_) return BROTLI_FALSE;[0m
      | [0;1;32m                                ^                    
[0m      | [0;32m                                 {
[0m[1mc/enc/encode.c:977:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  977 |   if (is_last) s->is_last_block_emitted_ = BROTLI_TRUE;[0m
      | [0;1;32m              ^                                        
[0m      | [0;32m               {
[0m[1mc/enc/encode.c:1008:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1008 |     if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                         ^                    
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:1012:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1012 |     if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                         ^                    
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:1021:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1021 |       if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                           ^                    
[0m      | [0;32m                            {
[0m[1mc/enc/encode.c:1029:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1029 |       if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                           ^                    
[0m      | [0;32m                            {
[0m[1mc/enc/encode.c:1049:60: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1049 |       if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(new_commands)) return BROTLI_FALSE;[0m
      | [0;1;32m                                                           ^                    
[0m      | [0;32m                                                            {
[0m[1mc/enc/encode.c:1051:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1051 |         memcpy(new_commands, s->commands_, sizeof(Command) * s->num_commands_);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1051:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1051 |         memcpy(new_commands, s->commands_, sizeof(Command) * s->num_commands_);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1066:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1066 |   if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                       ^                    
[0m      | [0;32m                        {
[0m[1mc/enc/encode.c:1079:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1079 |     if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                         ^                    
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:1087:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1087 |     if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                         ^                    
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:1144:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1144 |     if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                         ^                    
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:1152:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1152 |     if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                         ^                    
[0m      | [0;32m                          {
[0m[1mc/enc/encode.c:1169:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1169 |     memcpy(s->saved_dist_cache_, s->dist_cache_, sizeof(s->saved_dist_cache_));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:1169:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1169 |     memcpy(s->saved_dist_cache_, s->dist_cache_, sizeof(s->saved_dist_cache_));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:1253:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1253 |   if (BROTLI_IS_OOM(m)) goto oom;[0m
      | [0;1;32m                       ^         
[0m      | [0;32m                        {
[0m[1mc/enc/encode.c:1281:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1281 |       if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) goto oom;[0m
      | [0;1;32m                                                    ^         
[0m      | [0;32m                                                     {
[0m[1mc/enc/encode.c:1288:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1288 |       if (BROTLI_IS_OOM(m)) goto oom;[0m
      | [0;1;32m                           ^         
[0m      | [0;32m                            {
[0m[1mc/enc/encode.c:1301:62: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1301 |         if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(new_commands)) goto oom;[0m
      | [0;1;32m                                                             ^         
[0m      | [0;32m                                                              {
[0m[1mc/enc/encode.c:1304:11: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1304 |           memcpy(new_commands, commands, sizeof(Command) * num_commands);[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/enc/encode.c:1304:11: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1304 |           memcpy(new_commands, commands, sizeof(Command) * num_commands);[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/enc/encode.c:1333:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1333 |       if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(storage)) goto oom;[0m
      | [0;1;32m                                                      ^         
[0m      | [0;32m                                                       {
[0m[1mc/enc/encode.c:1342:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1342 |       memcpy(dist_cache, saved_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/encode.c:1342:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1342 |       memcpy(dist_cache, saved_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/encode.c:1344:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1344 |       if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(storage)) goto oom;[0m
      | [0;1;32m                                                      ^         
[0m      | [0;32m                                                       {
[0m[1mc/enc/encode.c:1360:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1360 |       if (BROTLI_IS_OOM(m)) goto oom;[0m
      | [0;1;32m                           ^         
[0m      | [0;32m                            {
[0m[1mc/enc/encode.c:1368:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1368 |       if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(storage)) goto oom;[0m
      | [0;1;32m                                                      ^         
[0m      | [0;32m                                                       {
[0m[1mc/enc/encode.c:1379:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1379 |       if (BROTLI_IS_OOM(m)) goto oom;[0m
      | [0;1;32m                           ^         
[0m      | [0;32m                            {
[0m[1mc/enc/encode.c:1382:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1382 |         memcpy(dist_cache, saved_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1382:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1382 |         memcpy(dist_cache, saved_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1401:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1401 |     memcpy(saved_dist_cache, dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:1401:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1401 |     memcpy(saved_dist_cache, dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:1407:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1407 |         memcpy(encoded_buffer, storage, out_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1407:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1407 |         memcpy(encoded_buffer, storage, out_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1431:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1431 |   if (input_size == 0) return 2;[0m
      | [0;1;32m                      ^         
[0m      | [0;32m                       {
[0m[1mc/enc/encode.c:1455:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1455 |     if (chunk_size > (1u << 16)) nibbles = (chunk_size > (1u << 20)) ? 2 : 1;[0m
      | [0;1;32m                                ^                                            
[0m      | [0;32m                                 {
[0m[1mc/enc/encode.c:1461:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1461 |     if (nibbles == 2) output[result++] = (uint8_t)(bits >> 24);[0m
      | [0;1;32m                     ^                                         
[0m      | [0;32m                      {
[0m[1mc/enc/encode.c:1462:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1462 |     memcpy(&output[result], &input[offset], chunk_size);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:1462:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1462 |     memcpy(&output[result], &input[offset], chunk_size);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:1521:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1521 |     if (!BrotliEncoderIsFinished(s)) result = 0;[0m
      | [0;1;32m                                    ^           
[0m      | [0;32m                                     {
[0m[1mc/enc/encode.c:1531:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1531 |   if (!max_out_size) return BROTLI_FALSE;[0m
      | [0;1;32m                    ^                    
[0m      | [0;32m                     {
[0m[1mc/enc/encode.c:1558:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1558 |   if (seal_bits > 8) destination[1] = (uint8_t)(seal >> 8);[0m
      | [0;1;32m                    ^                                      
[0m      | [0;32m                     {
[0m[1mc/enc/encode.c:1559:22: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1559 |   if (seal_bits > 16) destination[2] = (uint8_t)(seal >> 16);[0m
      | [0;1;32m                     ^                                       
[0m      | [0;32m                      {
[0m[1mc/enc/encode.c:1576:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1576 |     memcpy(*next_out, s->next_out_, copy_output_size);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:1576:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1576 |     memcpy(*next_out, s->next_out_, copy_output_size);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/encode.c:1582:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1582 |     if (total_out) *total_out = s->total_out_;[0m
      | [0;1;32m                  ^                           
[0m      | [0;32m                   {
[0m[1mc/enc/encode.c:1671:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1671 |         if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                             ^                    
[0m      | [0;32m                              {
[0m[1mc/enc/encode.c:1676:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1676 |       if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                           ^                    
[0m      | [0;32m                            {
[0m[1mc/enc/encode.c:1682:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1682 |         if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                             ^                    
[0m      | [0;32m                              {
[0m[1mc/enc/encode.c:1687:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1687 |         if (BROTLI_IS_OOM(m)) return BROTLI_FALSE;[0m
      | [0;1;32m                             ^                    
[0m      | [0;32m                              {
[0m[1mc/enc/encode.c:1700:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1700 |         if (total_out) *total_out = s->total_out_;[0m
      | [0;1;32m                      ^                           
[0m      | [0;32m                       {
[0m[1mc/enc/encode.c:1709:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1709 |       if (force_flush) s->stream_state_ = BROTLI_STREAM_FLUSH_REQUESTED;[0m
      | [0;1;32m                      ^                                                 
[0m      | [0;32m                       {
[0m[1mc/enc/encode.c:1710:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1710 |       if (is_last) s->stream_state_ = BROTLI_STREAM_FINISHED;[0m
      | [0;1;32m                  ^                                          
[0m      | [0;32m                   {
[0m[1mc/enc/encode.c:1724:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1724 |   if (*available_in > (1u << 24)) return BROTLI_FALSE;[0m
      | [0;1;32m                                 ^                    
[0m      | [0;32m                                  {
[0m[1mc/enc/encode.c:1739:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1739 |     if (s->available_out_ != 0) break;[0m
      | [0;1;32m                               ^      
[0m      | [0;32m                                {
[0m[1mc/enc/encode.c:1744:19: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1744 |       if (!result) return BROTLI_FALSE;[0m
      | [0;1;32m                  ^                    
[0m      | [0;32m                   {
[0m[1mc/enc/encode.c:1766:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1766 |         memcpy(*next_out, *next_in, copy);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1766:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1766 |         memcpy(*next_out, *next_in, copy);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1776:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1776 |         memcpy(s->next_out_, *next_in, copy);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1776:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1776 |         memcpy(s->next_out_, *next_in, copy);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/encode.c:1808:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1808 |   if (!EnsureInitialized(s)) return BROTLI_FALSE;[0m
      | [0;1;32m                            ^                    
[0m      | [0;32m                             {
[0m[1mc/enc/encode.c:1812:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1812 |     if (*available_in != s->remaining_metadata_bytes_) return BROTLI_FALSE;[0m
      | [0;1;32m                                                      ^                    
[0m      | [0;32m                                                       {
[0m[1mc/enc/encode.c:1813:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1813 |     if (op != BROTLI_OPERATION_EMIT_METADATA) return BROTLI_FALSE;[0m
      | [0;1;32m                                             ^                    
[0m      | [0;32m                                              {
[0m[1mc/enc/encode.c:1848:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1848 |       if (s->flint_ > 0) s->flint_ = (int8_t)(s->flint_ - (int)copy_input_size);[0m
      | [0;1;32m                        ^                                                       
[0m      | [0;32m                         {
[0m[1mc/enc/encode.c:1881:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1881 |         if (!result) return BROTLI_FALSE;[0m
      | [0;1;32m                    ^                    
[0m      | [0;32m                     {
[0m[1mc/enc/encode.c:1882:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1882 |         if (force_flush) s->stream_state_ = BROTLI_STREAM_FLUSH_REQUESTED;[0m
      | [0;1;32m                        ^                                                 
[0m      | [0;32m                         {
[0m[1mc/enc/encode.c:1883:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1883 |         if (is_last) s->stream_state_ = BROTLI_STREAM_FINISHED;[0m
      | [0;1;32m                    ^                                          
[0m      | [0;32m                     {
[0m162 warnings generated.
Suppressed 69 warnings (69 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[27/30][171.6s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmperl3xcon.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/dec/decode.c
[1mc/dec/../common/constants.h:160:20: [0m[0;1;35mwarning: [0m[1mRight shift by '4294967295' overflows the capacity of 'uint32_t' [clang-analyzer-core.BitwiseShift][0m
  160 |     half = (offset >> ndistbits) & 1;[0m
      | [0;1;32m                   ^
[0m[1mc/dec/decode.c:2075:7: [0m[0;1;36mnote: [0mAssuming 'total_out' is null[0m
 2075 |   if (total_out) {[0m
      | [0;1;32m      ^~~~~~~~~
[0m[1mc/dec/decode.c:2075:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2075 |   if (total_out) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2079:7: [0m[0;1;36mnote: [0mAssuming field 'error_code' is >= 0[0m
 2079 |   if ((int)s->error_code < 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2079:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2079 |   if ((int)s->error_code < 0) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2082:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2082 |   if (*available_out && (!next_out || !*next_out)) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2082:22: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2082 |   if (*available_out && (!next_out || !*next_out)) {[0m
      | [0;1;32m                     ^
[0m[1mc/dec/decode.c:2086:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2086 |   if (!*available_out) next_out = 0;[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2087:7: [0m[0;1;36mnote: [0mAssuming field 'buffer_length' is equal to 0[0m
 2087 |   if (s->buffer_length == 0) {  /* Just connect bit reader to input stream. */[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2087:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2087 |   if (s->buffer_length == 0) {  /* Just connect bit reader to input stream. */[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2098:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 2098 |   for (;;) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2099:9: [0m[0;1;36mnote: [0m'result' is equal to BROTLI_DECODER_SUCCESS[0m
 2099 |     if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:2099:5: [0m[0;1;36mnote: [0mTaking false branch[0m
 2099 |     if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/decode.c:2167:5: [0m[0;1;36mnote: [0mControl jumps to 'case BROTLI_STATE_CONTEXT_MAP_2:'  at line 2387[0m
 2167 |     switch (s->state) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/decode.c:2390:47: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is less than 32[0m
 2390 |         uint32_t distance_alphabet_size_max = BROTLI_DISTANCE_ALPHABET_SIZE([0m
      | [0;1;32m                                              ^
[0m[1mc/dec/../common/constants.h:71:6: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_DISTANCE_ALPHABET_SIZE'[0m
   71 |     ((MAXNBITS) << ((NPOSTFIX) + 1)))[0m
      | [0;1;32m     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2394:13: [0m[0;1;36mnote: [0mAssuming field 'large_window' is not equal to 0[0m
 2394 |         if (s->large_window) {[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2394:9: [0m[0;1;36mnote: [0mTaking true branch[0m
 2394 |         if (s->large_window) {[0m
      | [0;1;32m        ^
[0m[1mc/dec/decode.c:2395:43: [0m[0;1;36mnote: [0mCalling 'BrotliCalculateDistanceCodeLimit'[0m
 2395 |           BrotliDistanceCodeLimit limit = BrotliCalculateDistanceCodeLimit([0m
      | [0;1;32m                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 2396 |               BROTLI_MAX_ALLOWED_DISTANCE, npostfix, ndirect);[0m
      | [0;1;32m              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/../common/constants.h:133:7: [0m[0;1;36mnote: [0mAssuming 'max_distance' is > 'ndirect'[0m
  133 |   if (max_distance <= ndirect) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/../common/constants.h:133:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  133 |   if (max_distance <= ndirect) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/../common/constants.h:148:25: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is less than 32[0m
  148 |     uint32_t postfix = (1u << npostfix) - 1;[0m
      | [0;1;32m                        ^~~~~~~~~~~~~~
[0m[1mc/dec/../common/constants.h:152:5: [0m[0;1;36mnote: [0mValue assigned to 'offset'[0m
  152 |     offset = (offset >> npostfix) + 4;[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/../common/constants.h:156:12: [0m[0;1;36mnote: [0mAssuming 'tmp' is equal to 0[0m
  156 |     while (tmp != 0) {ndistbits++; tmp = tmp >> 1;}[0m
      | [0;1;32m           ^~~~~~~~
[0m[1mc/dec/../common/constants.h:156:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 158[0m
  156 |     while (tmp != 0) {ndistbits++; tmp = tmp >> 1;}[0m
      | [0;1;32m    ^
[0m[1mc/dec/../common/constants.h:158:5: [0m[0;1;36mnote: [0mThe value 4294967295 is assigned to 'ndistbits'[0m
  158 |     ndistbits--;[0m
      | [0;1;32m    ^~~~~~~~~~~
[0m[1mc/dec/../common/constants.h:160:20: [0m[0;1;36mnote: [0mThe result of right shift is undefined because the right operand '4294967295' is not smaller than 32, the capacity of 'uint32_t'[0m
  160 |     half = (offset >> ndistbits) & 1;[0m
      | [0;1;32m            ~~~~~~~^~~~~~~~~~~~
[0m[1mc/dec/decode.c:63:45: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   63 |   if (state->state != BROTLI_STATE_UNINITED) return BROTLI_FALSE;[0m
      | [0;1;32m                                            ^                    
[0m      | [0;32m                                             {
[0m[1mc/dec/decode.c:66:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   66 |       state->canny_ringbuffer_allocation = !!value ? 0 : 1;[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   67 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/dec/decode.c:70:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   70 |       state->large_window = TO_BROTLI_BOOL(!!value);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m   71 |       return BROTLI_TRUE;[0m
      | [0;1;32m                        
[0m      | [0;32m                        ;} 
[0m[1mc/dec/decode.c:73:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
   73 |     default: return BROTLI_FALSE;[0m
      | [0;1;32m             ^                  
[0m      | [0;32m             {                  ;} 
[0m[1mc/dec/decode.c:119:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  119 |       return BROTLI_DECODER_RESULT_SUCCESS;[0m
      | [0;1;32m      ^                                   
[0m      | [0;32m      {                                   ;} 
[0m[1mc/dec/decode.c:122:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  122 |       return BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT;[0m
      | [0;1;32m      ^                                            
[0m      | [0;32m      {                                            ;} 
[0m[1mc/dec/decode.c:125:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  125 |       return BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT;[0m
      | [0;1;32m      ^                                             
[0m      | [0;32m      {                                             ;} 
[0m[1mc/dec/decode.c:128:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  128 |       return BROTLI_DECODER_RESULT_ERROR;[0m
      | [0;1;32m      ^                                 
[0m      | [0;32m      {                                 ;} 
[0m[1mc/dec/decode.c:175:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  175 |   memcpy(buffer, src, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/dec/decode.c:175:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  175 |   memcpy(buffer, src, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/dec/decode.c:176:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  176 |   memcpy(dst, buffer, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/dec/decode.c:176:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  176 |   memcpy(dst, buffer, 16);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/dec/decode.c:186:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  186 |       if (BROTLI_PREDICT_FALSE(!BrotliSafeReadBits(br, 1, &bits))) {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  187 |         return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  188 |       }[0m
  189 |       if (bits == 0) {[0m
  190 |         *value = 0;[0m
  191 |         return BROTLI_DECODER_SUCCESS;[0m
  192 |       }[0m
      | [0;1;32m       
[0m      | [0;32m       ;} 
[0m[1mc/dec/decode.c:196:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  196 |       if (BROTLI_PREDICT_FALSE(!BrotliSafeReadBits(br, 3, &bits))) {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  197 |         s->substate_decode_uint8 = BROTLI_STATE_DECODE_UINT8_SHORT;[0m
  198 |         return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  199 |       }[0m
  200 |       if (bits == 0) {[0m
  201 |         *value = 1;[0m
  202 |         s->substate_decode_uint8 = BROTLI_STATE_DECODE_UINT8_NONE;[0m
  203 |         return BROTLI_DECODER_SUCCESS;[0m
  204 |       }[0m
  205 |       /* Use output value as a temporary storage. It MUST be persisted. */[0m
  206 |       *value = bits;[0m
      | [0;1;32m                   
[0m      | [0;32m                   ;} 
[0m[1mc/dec/decode.c:210:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  210 |       if (BROTLI_PREDICT_FALSE(!BrotliSafeReadBits(br, *value, &bits))) {[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  211 |         s->substate_decode_uint8 = BROTLI_STATE_DECODE_UINT8_LONG;[0m
  212 |         return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  213 |       }[0m
  214 |       *value = (1U << *value) + bits;[0m
  215 |       s->substate_decode_uint8 = BROTLI_STATE_DECODE_UINT8_NONE;[0m
  216 |       return BROTLI_DECODER_SUCCESS;[0m
      | [0;1;32m                                   
[0m      | [0;32m                                   ;} 
[0m[1mc/dec/decode.c:219:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  219 |       return[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m  220 |           BROTLI_FAILURE(BROTLI_DECODER_ERROR_UNREACHABLE);[0m
      | [0;1;32m                                                          
[0m      | [0;32m                                                          ;} 
[0m[1mc/dec/decode.c:232:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  232 |         if (!BrotliSafeReadBits(br, 1, &bits)) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  233 |           return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  234 |         }[0m
  235 |         s->is_last_metablock = bits ? 1 : 0;[0m
  236 |         s->meta_block_remaining_len = 0;[0m
  237 |         s->is_uncompressed = 0;[0m
  238 |         s->is_metadata = 0;[0m
  239 |         if (!s->is_last_metablock) {[0m
  240 |           s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_NIBBLES;[0m
  241 |           break;[0m
  242 |         }[0m
  243 |         s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_EMPTY;[0m
      | [0;1;32m                                                                          
[0m      | [0;32m                                                                          ;} 
[0m[1mc/dec/decode.c:247:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  247 |         if (!BrotliSafeReadBits(br, 1, &bits)) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  248 |           return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  249 |         }[0m
  250 |         if (bits) {[0m
  251 |           s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_NONE;[0m
  252 |           return BROTLI_DECODER_SUCCESS;[0m
  253 |         }[0m
  254 |         s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_NIBBLES;[0m
      | [0;1;32m                                                                            
[0m      | [0;32m                                                                            ;} 
[0m[1mc/dec/decode.c:258:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  258 |         if (!BrotliSafeReadBits(br, 2, &bits)) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  259 |           return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  260 |         }[0m
  261 |         s->size_nibbles = (uint8_t)(bits + 4);[0m
  262 |         s->loop_counter = 0;[0m
  263 |         if (bits == 3) {[0m
  264 |           s->is_metadata = 1;[0m
  265 |           s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_RESERVED;[0m
  266 |           break;[0m
  267 |         }[0m
  268 |         s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_SIZE;[0m
      | [0;1;32m                                                                         
[0m      | [0;32m                                                                         ;} 
[0m[1mc/dec/decode.c:272:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  272 |         i = s->loop_counter;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  273 |         for (; i < (int)s->size_nibbles; ++i) {[0m
  274 |           if (!BrotliSafeReadBits(br, 4, &bits)) {[0m
  275 |             s->loop_counter = i;[0m
  276 |             return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  277 |           }[0m
  278 |           if (i + 1 == (int)s->size_nibbles && s->size_nibbles > 4 &&[0m
  279 |               bits == 0) {[0m
  280 |             return BROTLI_FAILURE(BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE);[0m
  281 |           }[0m
  282 |           s->meta_block_remaining_len |= (int)(bits << (i * 4));[0m
  283 |         }[0m
  284 |         s->substate_metablock_header =[0m
  285 |             BROTLI_STATE_METABLOCK_HEADER_UNCOMPRESSED;[0m
      | [0;1;32m                                                      
[0m      | [0;32m                                                      ;} 
[0m[1mc/dec/decode.c:289:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  289 |         if (!s->is_last_metablock) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  290 |           if (!BrotliSafeReadBits(br, 1, &bits)) {[0m
  291 |             return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  292 |           }[0m
  293 |           s->is_uncompressed = bits ? 1 : 0;[0m
  294 |         }[0m
  295 |         ++s->meta_block_remaining_len;[0m
  296 |         s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_NONE;[0m
  297 |         return BROTLI_DECODER_SUCCESS;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mc/dec/decode.c:300:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  300 |         if (!BrotliSafeReadBits(br, 1, &bits)) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  301 |           return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  302 |         }[0m
  303 |         if (bits != 0) {[0m
  304 |           return BROTLI_FAILURE(BROTLI_DECODER_ERROR_FORMAT_RESERVED);[0m
  305 |         }[0m
  306 |         s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_BYTES;[0m
      | [0;1;32m                                                                          
[0m      | [0;32m                                                                          ;} 
[0m[1mc/dec/decode.c:310:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  310 |         if (!BrotliSafeReadBits(br, 2, &bits)) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  311 |           return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  312 |         }[0m
  313 |         if (bits == 0) {[0m
  314 |           s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_NONE;[0m
  315 |           return BROTLI_DECODER_SUCCESS;[0m
  316 |         }[0m
  317 |         s->size_nibbles = (uint8_t)bits;[0m
  318 |         s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_METADATA;[0m
      | [0;1;32m                                                                             
[0m      | [0;32m                                                                             ;} 
[0m[1mc/dec/decode.c:322:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  322 |         i = s->loop_counter;[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  323 |         for (; i < (int)s->size_nibbles; ++i) {[0m
  324 |           if (!BrotliSafeReadBits(br, 8, &bits)) {[0m
  325 |             s->loop_counter = i;[0m
  326 |             return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  327 |           }[0m
  328 |           if (i + 1 == (int)s->size_nibbles && s->size_nibbles > 1 &&[0m
  329 |               bits == 0) {[0m
  330 |             return BROTLI_FAILURE([0m
  331 |                 BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE);[0m
  332 |           }[0m
  333 |           s->meta_block_remaining_len |= (int)(bits << (i * 8));[0m
  334 |         }[0m
  335 |         ++s->meta_block_remaining_len;[0m
  336 |         s->substate_metablock_header = BROTLI_STATE_METABLOCK_HEADER_NONE;[0m
  337 |         return BROTLI_DECODER_SUCCESS;[0m
      | [0;1;32m                                     
[0m      | [0;32m                                     ;} 
[0m[1mc/dec/decode.c:340:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  340 |         return[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  341 |             BROTLI_FAILURE(BROTLI_DECODER_ERROR_UNREACHABLE);[0m
      | [0;1;32m                                                            
[0m      | [0;32m                                                            ;} 
[0m[1mc/dec/decode.c:654:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  654 |     if (get_byte && !BrotliPullByte(br)) return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
      | [0;1;32m                                        ^                                       
[0m      | [0;32m                                         {
[0m[1mc/dec/decode.c:759:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  759 |         if (!BrotliSafeReadBits(br, 2, &h->sub_loop_counter)) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m[1mc/dec/decode.c:769:11: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  769 |           memset(&h->code_length_histo[0], 0, sizeof(h->code_length_histo[0]) *[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/dec/decode.c:769:11: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  769 |           memset(&h->code_length_histo[0], 0, sizeof(h->code_length_histo[0]) *[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/dec/decode.c:771:11: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  771 |           memset(&h->code_length_code_lengths[0], 0,[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/dec/decode.c:771:11: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  771 |           memset(&h->code_length_code_lengths[0], 0,[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/dec/decode.c:780:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  780 |         if (!BrotliSafeReadBits(br, 2, &h->symbol)) {  /* num_symbols */[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  781 |           h->substate_huffman = BROTLI_STATE_HUFFMAN_SIMPLE_SIZE;[0m
  782 |           return BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
  783 |         }[0m
  784 |         h->sub_loop_counter = 0;[0m
      | [0;1;32m                               
[0m      | [0;32m                               ;} 
[0m[1mc/dec/decode.c:826:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  826 |         memset(&h->code_length_histo[0], 0, sizeof(h->code_length_histo));[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:826:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  826 |         memset(&h->code_length_histo[0], 0, sizeof(h->code_length_histo));[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:866:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  866 |         return[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  867 |             BROTLI_FAILURE(BROTLI_DECODER_ERROR_UNREACHABLE);[0m
      | [0;1;32m                                                            
[0m      | [0;32m                                                            ;} 
[0m[1mc/dec/decode.c:934:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  934 |   memcpy(&pattern, &b0123, 4);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/dec/decode.c:934:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  934 |   memcpy(&pattern, &b0123, 4);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/dec/decode.c:974:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  974 |     if (result != BROTLI_DECODER_SUCCESS) return result;[0m
      | [0;1;32m                                         ^              
[0m      | [0;32m                                          {
[0m[1mc/dec/decode.c:1001:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1001 |       result = DecodeVarLenUint8(s, br, num_htrees);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m[1mc/dec/decode.c:1015:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1015 |         memset(*context_map_arg, 0, (size_t)context_map_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:1015:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
 1015 |         memset(*context_map_arg, 0, (size_t)context_map_size);[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:1044:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1044 |       if (result != BROTLI_DECODER_SUCCESS) return result;[0m
      | [0;1;32m                                           ^              
[0m      | [0;32m                                            {
[0m[1mc/dec/decode.c:1113:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1113 |       return[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1114 |           BROTLI_FAILURE(BROTLI_DECODER_ERROR_UNREACHABLE);[0m
      | [0;1;32m                                                          
[0m      | [0;32m                                                          ;} 
[0m[1mc/dec/decode.c:1141:53: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1141 |     if (!SafeReadSymbol(type_tree, br, &block_type)) return BROTLI_FALSE;[0m
      | [0;1;32m                                                    ^                    
[0m      | [0;32m                                                     {
[0m[1mc/dec/decode.c:1167:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1167 |   for (i = 0; i < 8; ++i) s->trivial_literal_contexts[i] = 0;[0m
      | [0;1;32m                         ^                                   
[0m      | [0;32m                          {
[0m[1mc/dec/decode.c:1284:7: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1284 |       memcpy(*next_out, start, num_written);[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/dec/decode.c:1284:7: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1284 |       memcpy(*next_out, start, num_written);[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/dec/decode.c:1314:5: [0m[0;1;35mwarning: [0m[1mNull pointer passed to 1st parameter expecting 'nonnull' [clang-analyzer-core.NonNullParamChecker][0m
 1314 |     memcpy(s->ringbuffer, s->ringbuffer_end, (size_t)s->pos);[0m
      | [0;1;32m    ^
[0m[1mc/dec/decode.c:2075:7: [0m[0;1;36mnote: [0mAssuming 'total_out' is null[0m
 2075 |   if (total_out) {[0m
      | [0;1;32m      ^~~~~~~~~
[0m[1mc/dec/decode.c:2075:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2075 |   if (total_out) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2079:7: [0m[0;1;36mnote: [0mAssuming field 'error_code' is >= 0[0m
 2079 |   if ((int)s->error_code < 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2079:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2079 |   if ((int)s->error_code < 0) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2082:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
 2082 |   if (*available_out && (!next_out || !*next_out)) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2082:22: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
 2082 |   if (*available_out && (!next_out || !*next_out)) {[0m
      | [0;1;32m                     ^
[0m[1mc/dec/decode.c:2086:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 2086 |   if (!*available_out) next_out = 0;[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2087:7: [0m[0;1;36mnote: [0mAssuming field 'buffer_length' is not equal to 0[0m
 2087 |   if (s->buffer_length == 0) {  /* Just connect bit reader to input stream. */[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2087:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 2087 |   if (s->buffer_length == 0) {  /* Just connect bit reader to input stream. */[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2098:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 2098 |   for (;;) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2099:9: [0m[0;1;36mnote: [0m'result' is not equal to BROTLI_DECODER_SUCCESS[0m
 2099 |     if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:2099:5: [0m[0;1;36mnote: [0mTaking true branch[0m
 2099 |     if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/decode.c:2101:11: [0m[0;1;36mnote: [0m'result' is equal to BROTLI_DECODER_NEEDS_MORE_INPUT[0m
 2101 |       if (result == BROTLI_DECODER_NEEDS_MORE_INPUT) {[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/dec/decode.c:2101:7: [0m[0;1;36mnote: [0mTaking true branch[0m
 2101 |       if (result == BROTLI_DECODER_NEEDS_MORE_INPUT) {[0m
      | [0;1;32m      ^
[0m[1mc/dec/decode.c:2102:13: [0m[0;1;36mnote: [0mAssuming field 'ringbuffer' is equal to null[0m
 2102 |         if (s->ringbuffer != 0) {  /* Pro-actively push output. */[0m
      | [0;1;32m            ^~~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2102:9: [0m[0;1;36mnote: [0mTaking false branch[0m
 2102 |         if (s->ringbuffer != 0) {  /* Pro-actively push output. */[0m
      | [0;1;32m        ^
[0m[1mc/dec/decode.c:2111:16: [0m[0;1;36mnote: [0mField 'buffer_length' is not equal to 0[0m
 2111 |         if (s->buffer_length != 0) {  /* Used with internal buffer. */[0m
      | [0;1;32m               ^
[0m[1mc/dec/decode.c:2111:9: [0m[0;1;36mnote: [0mTaking true branch[0m
 2111 |         if (s->buffer_length != 0) {  /* Used with internal buffer. */[0m
      | [0;1;32m        ^
[0m[1mc/dec/decode.c:2112:15: [0m[0;1;36mnote: [0mAssuming field 'avail_in' is not equal to 0[0m
 2112 |           if (br->avail_in == 0) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2112:11: [0m[0;1;36mnote: [0mTaking false branch[0m
 2112 |           if (br->avail_in == 0) {[0m
      | [0;1;32m          ^
[0m[1mc/dec/decode.c:2122:22: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
 2122 |           } else if (*available_in != 0) {[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:2122:18: [0m[0;1;36mnote: [0mTaking true branch[0m
 2122 |           } else if (*available_in != 0) {[0m
      | [0;1;32m                 ^
[0m[1mc/dec/decode.c:2132:13: [0m[0;1;36mnote: [0m Execution continues on line 2098[0m
 2132 |             continue;[0m
      | [0;1;32m            ^
[0m[1mc/dec/decode.c:2098:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 2098 |   for (;;) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:2099:9: [0m[0;1;36mnote: [0m'result' is equal to BROTLI_DECODER_SUCCESS[0m
 2099 |     if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:2099:5: [0m[0;1;36mnote: [0mTaking false branch[0m
 2099 |     if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/decode.c:2167:5: [0m[0;1;36mnote: [0mControl jumps to 'case BROTLI_STATE_COMMAND_INNER_WRITE:'  at line 2469[0m
 2167 |     switch (s->state) {[0m
      | [0;1;32m    ^
[0m[1mc/dec/decode.c:2476:13: [0m[0;1;36mnote: [0m'result' is equal to BROTLI_DECODER_SUCCESS[0m
 2476 |         if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m            ^~~~~~
[0m[1mc/dec/decode.c:2476:9: [0m[0;1;36mnote: [0mTaking false branch[0m
 2476 |         if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m        ^
[0m[1mc/dec/decode.c:2479:9: [0m[0;1;36mnote: [0mCalling 'WrapRingBuffer'[0m
 2479 |         WrapRingBuffer(s);[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:1313:7: [0m[0;1;36mnote: [0mAssuming field 'should_wrap_ringbuffer' is not equal to 0[0m
 1313 |   if (s->should_wrap_ringbuffer) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:1313:3: [0m[0;1;36mnote: [0mTaking true branch[0m
 1313 |   if (s->should_wrap_ringbuffer) {[0m
      | [0;1;32m  ^
[0m[1mc/dec/decode.c:1314:5: [0m[0;1;36mnote: [0mNull pointer passed to 1st parameter expecting 'nonnull'[0m
 1314 |     memcpy(s->ringbuffer, s->ringbuffer_end, (size_t)s->pos);[0m
      | [0;1;32m    ^      ~~~~~~~~~~~~~
[0m[1mc/dec/decode.c:1314:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1314 |     memcpy(s->ringbuffer, s->ringbuffer_end, (size_t)s->pos);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/dec/decode.c:1314:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1314 |     memcpy(s->ringbuffer, s->ringbuffer_end, (size_t)s->pos);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/dec/decode.c:1344:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1344 |     memcpy(s->ringbuffer, old_ringbuffer, (size_t)s->pos);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/dec/decode.c:1344:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1344 |     memcpy(s->ringbuffer, old_ringbuffer, (size_t)s->pos);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/dec/decode.c:1802:41: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1802 |         if (!s->trivial_literal_context) goto CommandInner;[0m
      | [0;1;32m                                        ^                  
[0m      | [0;32m                                         {
[0m[1mc/dec/decode.c:1837:40: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1837 |         if (s->trivial_literal_context) goto CommandInner;[0m
      | [0;1;32m                                       ^                  
[0m      | [0;32m                                        {
[0m[1mc/dec/decode.c:1927:11: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1927 |           memcpy(&s->ringbuffer[pos], word, (size_t)len);[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/dec/decode.c:1927:11: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1927 |           memcpy(&s->ringbuffer[pos], word, (size_t)len);[0m
      | [0;1;32m          ^~~~~~
[0m[1mc/dec/decode.c:1980:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1980 |         memcpy(copy_dst + 16, copy_src + 16, (size_t)(i - 16));[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:1980:9: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1980 |         memcpy(copy_dst + 16, copy_src + 16, (size_t)(i - 16));[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/dec/decode.c:2086:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2086 |   if (!*available_out) next_out = 0;[0m
      | [0;1;32m                      ^             
[0m      | [0;32m                       {
[0m[1mc/dec/decode.c:2170:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2170 |         if (!BrotliWarmupBitReader(br)) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2171 |           result = BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
 2172 |           break;[0m
 2173 |         }[0m
 2174 |         /* Decode window size. */[0m
 2175 |         result = DecodeWindowBits(s, br);  /* Reads 1..8 bits. */[0m
 2176 |         if (result != BROTLI_DECODER_SUCCESS) {[0m
 2177 |           break;[0m
 2178 |         }[0m
 2179 |         if (s->large_window) {[0m
 2180 |           s->state = BROTLI_STATE_LARGE_WINDOW_BITS;[0m
 2181 |           break;[0m
 2182 |         }[0m
 2183 |         s->state = BROTLI_STATE_INITIALIZE;[0m
 2184 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mc/dec/decode.c:2187:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2187 |         if (!BrotliSafeReadBits(br, 6, &s->window_bits)) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2188 |           result = BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
 2189 |           break;[0m
 2190 |         }[0m
 2191 |         if (s->window_bits < BROTLI_LARGE_MIN_WBITS ||[0m
 2192 |             s->window_bits > BROTLI_LARGE_MAX_WBITS) {[0m
 2193 |           result = BROTLI_FAILURE(BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS);[0m
 2194 |           break;[0m
 2195 |         }[0m
 2196 |         s->state = BROTLI_STATE_INITIALIZE;[0m
      | [0;1;32m                                          
[0m      | [0;32m                                          ;} 
[0m[1mc/dec/decode.c:2200:40: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2200 |         BROTLI_LOG_UINT(s->window_bits);[0m
      | [0;1;32m                                       ^
[0m      | [0;32m                                       {
[0m 2201 |         /* Maximum distance, see section 9.1. of the spec. */[0m
 2202 |         s->max_backward_distance = (1 << s->window_bits) - BROTLI_WINDOW_GAP;[0m
 2203 | [0m
 2204 |         /* Allocate memory for both block_type_trees and block_len_trees. */[0m
 2205 |         s->block_type_trees = (HuffmanCode*)BROTLI_DECODER_ALLOC(s,[0m
 2206 |             sizeof(HuffmanCode) * 3 *[0m
 2207 |                 (BROTLI_HUFFMAN_MAX_SIZE_258 + BROTLI_HUFFMAN_MAX_SIZE_26));[0m
 2208 |         if (s->block_type_trees == 0) {[0m
 2209 |           result = BROTLI_FAILURE(BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES);[0m
 2210 |           break;[0m
 2211 |         }[0m
 2212 |         s->block_len_trees =[0m
 2213 |             s->block_type_trees + 3 * BROTLI_HUFFMAN_MAX_SIZE_258;[0m
 2214 | [0m
 2215 |         s->state = BROTLI_STATE_METABLOCK_BEGIN;[0m
      | [0;1;32m                                               
[0m      | [0;32m                                               ;} 
[0m[1mc/dec/decode.c:2219:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2219 |         BrotliDecoderStateMetablockBegin(s);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2220 |         BROTLI_LOG_UINT(s->pos);[0m
 2221 |         s->state = BROTLI_STATE_METABLOCK_HEADER;[0m
      | [0;1;32m                                                
[0m      | [0;32m                                                ;} 
[0m[1mc/dec/decode.c:2225:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2225 |         result = DecodeMetaBlockLength(s, br);  /* Reads 2 - 31 bits. */[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m[1mc/dec/decode.c:2271:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2271 |         if (s->loop_counter >= 3) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2272 |           s->state = BROTLI_STATE_METABLOCK_HEADER_2;[0m
 2273 |           break;[0m
 2274 |         }[0m
 2275 |         /* Reads 1..11 bits. */[0m
 2276 |         result = DecodeVarLenUint8(s, br, &s->num_block_types[s->loop_counter]);[0m
 2277 |         if (result != BROTLI_DECODER_SUCCESS) {[0m
 2278 |           break;[0m
 2279 |         }[0m
 2280 |         s->num_block_types[s->loop_counter]++;[0m
 2281 |         BROTLI_LOG_UINT(s->num_block_types[s->loop_counter]);[0m
 2282 |         if (s->num_block_types[s->loop_counter] < 2) {[0m
 2283 |           s->loop_counter++;[0m
 2284 |           break;[0m
 2285 |         }[0m
 2286 |         s->state = BROTLI_STATE_HUFFMAN_CODE_1;[0m
      | [0;1;32m                                              
[0m      | [0;32m                                              ;} 
[0m[1mc/dec/decode.c:2294:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2294 |         if (result != BROTLI_DECODER_SUCCESS) break;[0m
      | [0;1;32m                                             ^      
[0m      | [0;32m                                              {
[0m[1mc/dec/decode.c:2304:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2304 |         if (result != BROTLI_DECODER_SUCCESS) break;[0m
      | [0;1;32m                                             ^      
[0m      | [0;32m                                              {
[0m[1mc/dec/decode.c:2333:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2333 |         for (; s->meta_block_remaining_len > 0; --s->meta_block_remaining_len) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2334 |           uint32_t bits;[0m
 2335 |           /* Read one byte and ignore it. */[0m
 2336 |           if (!BrotliSafeReadBits(br, 8, &bits)) {[0m
 2337 |             result = BROTLI_DECODER_NEEDS_MORE_INPUT;[0m
 2338 |             break;[0m
 2339 |           }[0m
 2340 |         }[0m
 2341 |         if (result == BROTLI_DECODER_SUCCESS) {[0m
 2342 |           s->state = BROTLI_STATE_METABLOCK_DONE;[0m
 2343 |         }[0m
 2344 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mc/dec/decode.c:2369:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2369 |         result = ReadContextModes(s);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2370 |         if (result != BROTLI_DECODER_SUCCESS) {[0m
 2371 |           break;[0m
 2372 |         }[0m
 2373 |         s->state = BROTLI_STATE_CONTEXT_MAP_1;[0m
      | [0;1;32m                                             
[0m      | [0;32m                                             ;} 
[0m[1mc/dec/decode.c:2377:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2377 |         result = DecodeContextMap([0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2378 |             s->num_block_types[0] << BROTLI_LITERAL_CONTEXT_BITS,[0m
 2379 |             &s->num_literal_htrees, &s->context_map, s);[0m
 2380 |         if (result != BROTLI_DECODER_SUCCESS) {[0m
 2381 |           break;[0m
 2382 |         }[0m
 2383 |         DetectTrivialLiteralBlockTypes(s);[0m
 2384 |         s->state = BROTLI_STATE_CONTEXT_MAP_2;[0m
      | [0;1;32m                                             
[0m      | [0;32m                                             ;} 
[0m[1mc/dec/decode.c:2428:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2428 |           case 0: hgroup = &s->literal_hgroup; break;[0m
      | [0;1;32m                  ^                                 
[0m      | [0;32m                  {                                 ;} 
[0m[1mc/dec/decode.c:2429:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2429 |           case 1: hgroup = &s->insert_copy_hgroup; break;[0m
      | [0;1;32m                  ^                                     
[0m      | [0;32m                  {                                     ;} 
[0m[1mc/dec/decode.c:2430:19: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2430 |           case 2: hgroup = &s->distance_hgroup; break;[0m
      | [0;1;32m                  ^                                  
[0m      | [0;32m                  {                                  ;} 
[0m[1mc/dec/decode.c:2431:20: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2431 |           default: return SaveErrorCode(s, BROTLI_FAILURE([0m
      | [0;1;32m                   ^
[0m      | [0;32m                   {
[0m 2432 |               BROTLI_DECODER_ERROR_UNREACHABLE));[0m
      | [0;1;32m                                                
[0m      | [0;32m                                                ;} 
[0m[1mc/dec/decode.c:2435:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2435 |         if (result != BROTLI_DECODER_SUCCESS) break;[0m
      | [0;1;32m                                             ^      
[0m      | [0;32m                                              {
[0m[1mc/dec/decode.c:2445:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2445 |         PrepareLiteralDecoding(s);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2446 |         s->dist_context_map_slice = s->dist_context_map;[0m
 2447 |         s->htree_command = s->insert_copy_hgroup.htrees[0];[0m
 2448 |         if (!BrotliEnsureRingBuffer(s)) {[0m
 2449 |           result = BROTLI_FAILURE(BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2);[0m
 2450 |           break;[0m
 2451 |         }[0m
 2452 |         CalculateDistanceLut(s);[0m
 2453 |         s->state = BROTLI_STATE_COMMAND_BEGIN;[0m
      | [0;1;32m                                             
[0m      | [0;32m                                             ;} 
[0m[1mc/dec/decode.c:2464:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2464 |         if (result == BROTLI_DECODER_NEEDS_MORE_INPUT) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2465 |           result = SafeProcessCommands(s);[0m
 2466 |         }[0m
 2467 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mc/dec/decode.c:2476:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2476 |         if (result != BROTLI_DECODER_SUCCESS) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m[1mc/dec/decode.c:2507:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2507 |         if (s->meta_block_remaining_len < 0) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m[1mc/dec/decode.c:2529:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2529 |         if (s->ringbuffer != 0) {[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m 2530 |           result = WriteRingBuffer([0m
 2531 |               s, available_out, next_out, total_out, BROTLI_TRUE);[0m
 2532 |           if (result != BROTLI_DECODER_SUCCESS) {[0m
 2533 |             break;[0m
 2534 |           }[0m
 2535 |         }[0m
 2536 |         return SaveErrorCode(s, result);[0m
      | [0;1;32m                                       
[0m      | [0;32m                                       ;} 
[0m[1mc/dec/decode.c:2569:25: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 2569 |     if ((int)status < 0) SaveErrorCode(s, status);[0m
      | [0;1;32m                        ^                         
[0m      | [0;32m                         {
[0m[1mc/dec/decode.c:2598:14: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 2598 |     default: return "INVALID";[0m
      | [0;1;32m             ^               
[0m      | [0;32m             {               ;} 
[0m75 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[28/30][176.7s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpahdwp4iw.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/backward_references_hq.c
[1mc/enc/backward_references_hq.c:49:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   49 |   for (i = 0; i < length; ++i) array[i] = stub;[0m
      | [0;1;32m                              ^                
[0m      | [0;32m                               {
[0m[1mc/enc/backward_references_hq.c:95:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   95 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/backward_references_hq.c:117:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  117 |       if (histogram[i] == 0) missing_symbol_sum++;[0m
      | [0;1;32m                            ^                     
[0m      | [0;32m                             {
[0m[1mc/enc/backward_references_hq.c:131:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  131 |     if (cost[i] < 1) cost[i] = 1;[0m
      | [0;1;32m                    ^            
[0m      | [0;32m                     {
[0m[1mc/enc/backward_references_hq.c:151:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  151 |   memset(histogram_literal, 0, sizeof(histogram_literal));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/backward_references_hq.c:151:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  151 |   memset(histogram_literal, 0, sizeof(histogram_literal));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/backward_references_hq.c:152:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  152 |   memset(histogram_cmd, 0, sizeof(histogram_cmd));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/backward_references_hq.c:152:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  152 |   memset(histogram_cmd, 0, sizeof(histogram_cmd));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/backward_references_hq.c:153:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  153 |   memset(histogram_dist, 0, sizeof(histogram_dist));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/backward_references_hq.c:153:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  153 |   memset(histogram_dist, 0, sizeof(histogram_dist));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/backward_references_hq.c:163:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  163 |     if (cmdcode >= 128) histogram_dist[distcode]++;[0m
      | [0;1;32m                       ^                           
[0m      | [0;32m                        {
[0m[1mc/enc/backward_references_hq.c:289:32: [0m[0;1;35mwarning: [0m[1mThe right operand of '>' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult][0m
  289 |     if (q[offset & 7].costdiff > q[(offset + 1) & 7].costdiff) {[0m
      | [0;1;32m                               ^
[0m[1mc/enc/backward_references_hq.c:727:23: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  727 |   ZopfliNode* nodes = BROTLI_ALLOC(m, ZopfliNode, num_bytes + 1);[0m
      | [0;1;32m                      ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/backward_references_hq.c:727:23: [0m[0;1;36mnote: [0m'?' condition is true[0m
  727 |   ZopfliNode* nodes = BROTLI_ALLOC(m, ZopfliNode, num_bytes + 1);[0m
      | [0;1;32m                      ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/backward_references_hq.c:728:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  728 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) return;[0m
      | [0;1;32m      ^
[0m[1mc/enc/./././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/backward_references_hq.c:728:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  728 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:730:20: [0m[0;1;36mnote: [0mCalling 'BrotliZopfliComputeShortestPath'[0m
  730 |   *num_commands += BrotliZopfliComputeShortestPath(m, num_bytes,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  731 |       position, ringbuffer, ringbuffer_mask, literal_context_lut, params,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  732 |       dist_cache, hasher, nodes);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:662:37: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is non-negative but less than 64[0m
  662 |   const size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params->lgwin);[0m
      | [0;1;32m                                    ^
[0m[1mc/enc/./../common/constants.h:103:40: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_MAX_BACKWARD_LIMIT'[0m
  103 | #define BROTLI_MAX_BACKWARD_LIMIT(W) (((size_t)1 << (W)) - BROTLI_WINDOW_GAP)[0m
      | [0;1;32m                                       ^~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:667:28: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  667 |   const size_t store_end = num_bytes >= StoreLookaheadH10() ?[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:667:28: [0m[0;1;36mnote: [0m'?' condition is false[0m
[1mc/enc/backward_references_hq.c:676:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  676 |   if (BROTLI_IS_OOM(m)) return 0;[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:679:3: [0m[0;1;36mnote: [0mCalling 'InitStartPosQueue'[0m
  679 |   InitStartPosQueue(&queue);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:679:3: [0m[0;1;36mnote: [0mReturning from 'InitStartPosQueue'[0m
  679 |   InitStartPosQueue(&queue);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:680:15: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  680 |   for (i = 0; i + HashTypeLengthH10() - 1 < num_bytes; i++) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:680:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  680 |   for (i = 0; i + HashTypeLengthH10() - 1 < num_bytes; i++) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:691:9: [0m[0;1;36mnote: [0mAssuming 'num_matches' is <= 0[0m
  691 |     if (num_matches > 0 &&[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:691:25: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  691 |     if (num_matches > 0 &&[0m
      | [0;1;32m                        ^
[0m[1mc/enc/backward_references_hq.c:696:12: [0m[0;1;36mnote: [0mCalling 'UpdateNodes'[0m
  696 |     skip = UpdateNodes(num_bytes, position, i, ringbuffer, ringbuffer_mask,[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  697 |         params, max_backward_limit, dist_cache, num_matches, matches, &model,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  698 |         &queue, nodes);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:423:3: [0m[0;1;36mnote: [0mCalling 'EvaluateNode'[0m
  423 |   EvaluateNode(block_start + stream_offset, pos, max_backward_limit, gap,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  424 |       starting_dist_cache, model, queue, nodes);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:389:7: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  389 |   if (node_cost <= ZopfliCostModelGetLiteralCosts(model, 0, pos)) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:389:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  389 |   if (node_cost <= ZopfliCostModelGetLiteralCosts(model, 0, pos)) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:397:5: [0m[0;1;36mnote: [0mCalling 'StartPosQueuePush'[0m
  397 |     StartPosQueuePush(queue, &posdata);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:288:15: [0m[0;1;36mnote: [0mAssuming 'i' is < 'len'[0m
  288 |   for (i = 1; i < len; ++i) {[0m
      | [0;1;32m              ^~~~~~~
[0m[1mc/enc/backward_references_hq.c:288:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  288 |   for (i = 1; i < len; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:289:32: [0m[0;1;36mnote: [0mThe right operand of '>' is a garbage value[0m
  289 |     if (q[offset & 7].costdiff > q[(offset + 1) & 7].costdiff) {[0m
      | [0;1;32m                               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:428:37: [0m[0;1;35mwarning: [0m[1mThe left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult][0m
  428 |     float min_cost = (posdata->cost + ZopfliCostModelGetMinCostCmd(model) +[0m
      | [0;1;32m                                    ^
[0m[1mc/enc/backward_references_hq.c:727:23: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  727 |   ZopfliNode* nodes = BROTLI_ALLOC(m, ZopfliNode, num_bytes + 1);[0m
      | [0;1;32m                      ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/backward_references_hq.c:727:23: [0m[0;1;36mnote: [0m'?' condition is true[0m
  727 |   ZopfliNode* nodes = BROTLI_ALLOC(m, ZopfliNode, num_bytes + 1);[0m
      | [0;1;32m                      ^
[0m[1mc/enc/./././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/backward_references_hq.c:728:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  728 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) return;[0m
      | [0;1;32m      ^
[0m[1mc/enc/./././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/backward_references_hq.c:728:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  728 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:730:20: [0m[0;1;36mnote: [0mCalling 'BrotliZopfliComputeShortestPath'[0m
  730 |   *num_commands += BrotliZopfliComputeShortestPath(m, num_bytes,[0m
      | [0;1;32m                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  731 |       position, ringbuffer, ringbuffer_mask, literal_context_lut, params,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  732 |       dist_cache, hasher, nodes);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:662:37: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is non-negative but less than 64[0m
  662 |   const size_t max_backward_limit = BROTLI_MAX_BACKWARD_LIMIT(params->lgwin);[0m
      | [0;1;32m                                    ^
[0m[1mc/enc/./../common/constants.h:103:40: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_MAX_BACKWARD_LIMIT'[0m
  103 | #define BROTLI_MAX_BACKWARD_LIMIT(W) (((size_t)1 << (W)) - BROTLI_WINDOW_GAP)[0m
      | [0;1;32m                                       ^~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:667:28: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  667 |   const size_t store_end = num_bytes >= StoreLookaheadH10() ?[0m
      | [0;1;32m                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:667:28: [0m[0;1;36mnote: [0m'?' condition is false[0m
[1mc/enc/backward_references_hq.c:676:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  676 |   if (BROTLI_IS_OOM(m)) return 0;[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:679:3: [0m[0;1;36mnote: [0mCalling 'InitStartPosQueue'[0m
  679 |   InitStartPosQueue(&queue);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:679:3: [0m[0;1;36mnote: [0mReturning from 'InitStartPosQueue'[0m
  679 |   InitStartPosQueue(&queue);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:680:15: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
  680 |   for (i = 0; i + HashTypeLengthH10() - 1 < num_bytes; i++) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:680:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  680 |   for (i = 0; i + HashTypeLengthH10() - 1 < num_bytes; i++) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:691:9: [0m[0;1;36mnote: [0mAssuming 'num_matches' is <= 0[0m
  691 |     if (num_matches > 0 &&[0m
      | [0;1;32m        ^~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:691:25: [0m[0;1;36mnote: [0mLeft side of '&&' is false[0m
  691 |     if (num_matches > 0 &&[0m
      | [0;1;32m                        ^
[0m[1mc/enc/backward_references_hq.c:696:12: [0m[0;1;36mnote: [0mCalling 'UpdateNodes'[0m
  696 |     skip = UpdateNodes(num_bytes, position, i, ringbuffer, ringbuffer_mask,[0m
      | [0;1;32m           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  697 |         params, max_backward_limit, dist_cache, num_matches, matches, &model,[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  698 |         &queue, nodes);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:423:3: [0m[0;1;36mnote: [0mCalling 'EvaluateNode'[0m
  423 |   EvaluateNode(block_start + stream_offset, pos, max_backward_limit, gap,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  424 |       starting_dist_cache, model, queue, nodes);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:389:7: [0m[0;1;36mnote: [0mAssuming the condition is false[0m
  389 |   if (node_cost <= ZopfliCostModelGetLiteralCosts(model, 0, pos)) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:389:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  389 |   if (node_cost <= ZopfliCostModelGetLiteralCosts(model, 0, pos)) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/backward_references_hq.c:423:3: [0m[0;1;36mnote: [0mReturning from 'EvaluateNode'[0m
  423 |   EvaluateNode(block_start + stream_offset, pos, max_backward_limit, gap,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  424 |       starting_dist_cache, model, queue, nodes);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/backward_references_hq.c:428:37: [0m[0;1;36mnote: [0mThe left operand of '+' is a garbage value[0m
  428 |     float min_cost = (posdata->cost + ZopfliCostModelGetMinCostCmd(model) +[0m
      | [0;1;32m                      ~~~~~~~~~~~~~ ^
[0m[1mc/enc/backward_references_hq.c:503:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  503 |     if (k >= 2) continue;[0m
      | [0;1;32m               ^         
[0m      | [0;32m                {
[0m[1mc/enc/backward_references_hq.c:559:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  559 |       nodes[index].length == 1) --index;[0m
      | [0;1;32m                               ^        
[0m      | [0;32m                                {
[0m[1mc/enc/backward_references_hq.c:634:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  634 |     if (skip < BROTLI_LONG_COPY_QUICK_STEP) skip = 0;[0m
      | [0;1;32m                                           ^         
[0m      | [0;32m                                            {
[0m[1mc/enc/backward_references_hq.c:645:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  645 |         if (i + 3 >= num_bytes) break;[0m
      | [0;1;32m                               ^      
[0m      | [0;32m                                {
[0m[1mc/enc/backward_references_hq.c:676:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  676 |   if (BROTLI_IS_OOM(m)) return 0;[0m
      | [0;1;32m                       ^         
[0m      | [0;32m                        {
[0m[1mc/enc/backward_references_hq.c:699:44: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  699 |     if (skip < BROTLI_LONG_COPY_QUICK_STEP) skip = 0;[0m
      | [0;1;32m                                           ^         
[0m      | [0;32m                                            {
[0m[1mc/enc/backward_references_hq.c:711:54: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  711 |         if (i + HashTypeLengthH10() - 1 >= num_bytes) break;[0m
      | [0;1;32m                                                     ^      
[0m      | [0;32m                                                      {
[0m[1mc/enc/backward_references_hq.c:728:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  728 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1mc/enc/backward_references_hq.c:733:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  733 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/backward_references_hq.c:776:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  776 |     BROTLI_ENSURE_CAPACITY(m, BackwardMatch, matches, matches_size,[0m
      | [0;1;32m    ^
[0m[1mc/enc/./././memory.h:88:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   88 |       memcpy(new_array, A, C * sizeof(T));                         \[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/backward_references_hq.c:776:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  776 |     BROTLI_ENSURE_CAPACITY(m, BackwardMatch, matches, matches_size,[0m
      | [0;1;32m    ^
[0m[1mc/enc/./././memory.h:88:7: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ENSURE_CAPACITY'[0m
   88 |       memcpy(new_array, A, C * sizeof(T));                         \[0m
      | [0;1;32m      ^~~~~~
[0m[1mc/enc/backward_references_hq.c:778:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  778 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/backward_references_hq.c:800:9: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  800 |         memset(&num_matches[i + 1], 0, skip * sizeof(num_matches[0]));[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/backward_references_hq.c:800:9: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  800 |         memset(&num_matches[i + 1], 0, skip * sizeof(num_matches[0]));[0m
      | [0;1;32m        ^~~~~~
[0m[1mc/enc/backward_references_hq.c:809:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  809 |   memcpy(orig_dist_cache, dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/backward_references_hq.c:809:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  809 |   memcpy(orig_dist_cache, dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/backward_references_hq.c:812:49: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  812 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(nodes)) return;[0m
      | [0;1;32m                                                ^       
[0m      | [0;32m                                                 {
[0m[1mc/enc/backward_references_hq.c:814:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  814 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/backward_references_hq.c:828:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  828 |     memcpy(dist_cache, orig_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/backward_references_hq.c:828:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
  828 |     memcpy(dist_cache, orig_dist_cache, 4 * sizeof(dist_cache[0]));[0m
      | [0;1;32m    ^~~~~~
[0m73 warnings generated.
Suppressed 47 warnings (47 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[29/30][192.8s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmp326wn2ai.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/enc/brotli_bit_stream.c
[1mc/enc/brotli_bit_stream.c:40:56: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
   40 |       len >= _kBrotliPrefixCodeRanges[code + 1].offset) ++code;[0m
      | [0;1;32m                                                       ^       
[0m      | [0;32m                                                        {
[0m[1mc/enc/brotli_bit_stream.c:233:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  233 |         BrotliWriteBits(2, huffman_tree_extra_bits[i], storage_ix, storage);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  234 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mc/enc/brotli_bit_stream.c:236:9: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
  236 |         BrotliWriteBits(3, huffman_tree_extra_bits[i], storage_ix, storage);[0m
      | [0;1;32m        ^
[0m      | [0;32m        {
[0m  237 |         break;[0m
      | [0;1;32m             
[0m      | [0;32m             ;} 
[0m[1mc/enc/brotli_bit_stream.c:387:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  387 |   memset(depth, 0, histogram_length * sizeof(depth[0]));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:387:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  387 |   memset(depth, 0, histogram_length * sizeof(depth[0]));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:433:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  433 |   memset(depth, 0, length * sizeof(depth[0]));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:433:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  433 |   memset(depth, 0, length * sizeof(depth[0]));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:438:50: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  438 |     if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(tree)) return;[0m
      | [0;1;32m                                                 ^       
[0m      | [0;32m                                                  {
[0m[1mc/enc/brotli_bit_stream.c:581:23: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  581 |     if (v[i] == value) return i;[0m
      | [0;1;32m                      ^         
[0m      | [0;32m                       {
[0m[1mc/enc/brotli_bit_stream.c:606:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  606 |     if (v_in[i] > max_value) max_value = v_in[i];[0m
      | [0;1;32m                            ^                    
[0m      | [0;32m                             {
[0m[1mc/enc/brotli_bit_stream.c:637:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  637 |     for (; i < in_size && v[i] != 0; ++i) ;[0m
      | [0;1;32m                                         ^ 
[0m      | [0;32m                                          {
[0m[1mc/enc/brotli_bit_stream.c:702:55: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  702 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(rle_symbols)) return;[0m
      | [0;1;32m                                                      ^       
[0m      | [0;32m                                                       {
[0m[1mc/enc/brotli_bit_stream.c:706:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  706 |   memset(histogram, 0, sizeof(histogram));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:706:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  706 |   memset(histogram, 0, sizeof(histogram));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:744:5: [0m[0;1;35mwarning: [0m[1m1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage][0m
  744 |     BrotliWriteBits(code->type_depths[typecode], code->type_bits[typecode],[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:957:10: [0m[0;1;36mnote: [0m'?' condition is true[0m
  957 |   tree = BROTLI_ALLOC(m, HuffmanTree, MAX_HUFFMAN_TREE_SIZE);[0m
      | [0;1;32m         ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/brotli_bit_stream.c:958:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  958 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(tree)) return;[0m
      | [0;1;32m      ^
[0m[1mc/enc/././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/brotli_bit_stream.c:958:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  958 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(tree)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:962:3: [0m[0;1;36mnote: [0mCalling 'InitBlockEncoder'[0m
  962 |   InitBlockEncoder(&command_enc, BROTLI_NUM_COMMAND_SYMBOLS,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  963 |       mb->command_split.num_types, mb->command_split.types,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  964 |       mb->command_split.lengths, mb->command_split.num_blocks);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:852:22: [0m[0;1;36mnote: [0mAssuming 'num_blocks' is not equal to 0[0m
  852 |   self->block_len_ = num_blocks == 0 ? 0 : block_lengths[0];[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:852:22: [0m[0;1;36mnote: [0m'?' condition is false[0m
[1mc/enc/brotli_bit_stream.c:962:3: [0m[0;1;36mnote: [0mReturning from 'InitBlockEncoder'[0m
  962 |   InitBlockEncoder(&command_enc, BROTLI_NUM_COMMAND_SYMBOLS,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  963 |       mb->command_split.num_types, mb->command_split.types,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  964 |       mb->command_split.lengths, mb->command_split.num_blocks);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:970:3: [0m[0;1;36mnote: [0mCalling 'BuildAndStoreBlockSwitchEntropyCodes'[0m
  970 |   BuildAndStoreBlockSwitchEntropyCodes(&command_enc, tree, storage_ix, storage);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:867:3: [0m[0;1;36mnote: [0mCalling 'BuildAndStoreBlockSplitCode'[0m
  867 |   BuildAndStoreBlockSplitCode(self->block_types_, self->block_lengths_,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  868 |       self->num_blocks_, self->num_block_types_, tree, &self->block_split_code_,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  869 |       storage_ix, storage);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:771:15: [0m[0;1;36mnote: [0m'i' is < 'num_blocks'[0m
  771 |   for (i = 0; i < num_blocks; ++i) {[0m
      | [0;1;32m              ^
[0m[1mc/enc/brotli_bit_stream.c:771:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  771 |   for (i = 0; i < num_blocks; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:773:9: [0m[0;1;36mnote: [0m'i' is equal to 0[0m
  773 |     if (i != 0) ++type_histo[type_code];[0m
      | [0;1;32m        ^
[0m[1mc/enc/brotli_bit_stream.c:773:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  773 |     if (i != 0) ++type_histo[type_code];[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:771:15: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'num_blocks'[0m
  771 |   for (i = 0; i < num_blocks; ++i) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:771:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 776[0m
  771 |   for (i = 0; i < num_blocks; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:777:7: [0m[0;1;36mnote: [0mAssuming 'num_types' is <= 1[0m
  777 |   if (num_types > 1) {  /* TODO: else? could StoreBlockSwitch occur? */[0m
      | [0;1;32m      ^~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:777:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  777 |   if (num_types > 1) {  /* TODO: else? could StoreBlockSwitch occur? */[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:867:3: [0m[0;1;36mnote: [0mReturning from 'BuildAndStoreBlockSplitCode'[0m
  867 |   BuildAndStoreBlockSplitCode(self->block_types_, self->block_lengths_,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  868 |       self->num_blocks_, self->num_block_types_, tree, &self->block_split_code_,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  869 |       storage_ix, storage);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:970:3: [0m[0;1;36mnote: [0mReturning from 'BuildAndStoreBlockSwitchEntropyCodes'[0m
  970 |   BuildAndStoreBlockSwitchEntropyCodes(&command_enc, tree, storage_ix, storage);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:976:10: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is less than 32[0m
  976 |       4, dist->num_direct_distance_codes >> dist->distance_postfix_bits,[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:978:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 982[0m
  978 |   for (i = 0; i < mb->literal_split.num_types; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:982:7: [0m[0;1;36mnote: [0mAssuming field 'literal_context_map_size' is not equal to 0[0m
  982 |   if (mb->literal_context_map_size == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:982:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  982 |   if (mb->literal_context_map_size == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:989:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  989 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:992:7: [0m[0;1;36mnote: [0mAssuming field 'distance_context_map_size' is not equal to 0[0m
  992 |   if (mb->distance_context_map_size == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:992:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  992 |   if (mb->distance_context_map_size == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:999:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  999 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:1005:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1005 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:1006:3: [0m[0;1;36mnote: [0mCalling 'BuildAndStoreEntropyCodesCommand'[0m
 1006 |   BuildAndStoreEntropyCodesCommand(m, &command_enc, mb->command_histograms,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1007 |       mb->command_histograms_size, BROTLI_NUM_COMMAND_SYMBOLS, tree,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1008 |       storage_ix, storage);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_encoder_inc.h:19:19: [0m[0;1;36mnote: [0mAssuming 'table_size' is <= 0[0m
   19 |   self->depths_ = BROTLI_ALLOC(m, uint8_t, table_size);[0m
      | [0;1;32m                  ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/./block_encoder_inc.h:19:19: [0m[0;1;36mnote: [0m'?' condition is false[0m
   19 |   self->depths_ = BROTLI_ALLOC(m, uint8_t, table_size);[0m
      | [0;1;32m                  ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/./block_encoder_inc.h:20:17: [0m[0;1;36mnote: [0m'table_size' is <= 0[0m
   20 |   self->bits_ = BROTLI_ALLOC(m, uint16_t, table_size);[0m
      | [0;1;32m                ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~
[0m[1mc/enc/./block_encoder_inc.h:20:17: [0m[0;1;36mnote: [0m'?' condition is false[0m
   20 |   self->bits_ = BROTLI_ALLOC(m, uint16_t, table_size);[0m
      | [0;1;32m                ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/./block_encoder_inc.h:21:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   21 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/./block_encoder_inc.h:25:17: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'histograms_size'[0m
   25 |     for (i = 0; i < histograms_size; ++i) {[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_encoder_inc.h:25:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 1006[0m
   25 |     for (i = 0; i < histograms_size; ++i) {[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:1006:3: [0m[0;1;36mnote: [0mReturning from 'BuildAndStoreEntropyCodesCommand'[0m
 1006 |   BuildAndStoreEntropyCodesCommand(m, &command_enc, mb->command_histograms,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1007 |       mb->command_histograms_size, BROTLI_NUM_COMMAND_SYMBOLS, tree,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1008 |       storage_ix, storage);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:1009:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1009 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:1013:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1013 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:1016:15: [0m[0;1;36mnote: [0mAssuming 'i' is < 'n_commands'[0m
 1016 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:1016:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1016 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:1019:5: [0m[0;1;36mnote: [0mCalling 'StoreSymbol'[0m
 1019 |     StoreSymbol(&command_enc, cmd_code, storage_ix, storage);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:876:7: [0m[0;1;36mnote: [0mAssuming field 'block_len_' is equal to 0[0m
  876 |   if (self->block_len_ == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:876:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  876 |   if (self->block_len_ == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:882:5: [0m[0;1;36mnote: [0mCalling 'StoreBlockSwitch'[0m
  882 |     StoreBlockSwitch(&self->block_split_code_, block_len, block_type, 0,[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  883 |         storage_ix, storage);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:739:21: [0m[0;1;36mnote: [0mCalling 'NextBlockTypeCode'[0m
  739 |   size_t typecode = NextBlockTypeCode(&code->type_code_calculator, block_type);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:63:23: [0m[0;1;36mnote: [0mAssuming the condition is true[0m
   63 |   size_t type_code = (type == calculator->last_type + 1) ? 1u :[0m
      | [0;1;32m                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:63:22: [0m[0;1;36mnote: [0m'?' condition is true[0m
   63 |   size_t type_code = (type == calculator->last_type + 1) ? 1u :[0m
      | [0;1;32m                     ^
[0m[1mc/enc/brotli_bit_stream.c:63:3: [0m[0;1;36mnote: [0m'type_code' initialized to 1[0m
   63 |   size_t type_code = (type == calculator->last_type + 1) ? 1u :[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:67:3: [0m[0;1;36mnote: [0mReturning the value 1 (loaded from 'type_code')[0m
   67 |   return type_code;[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:739:21: [0m[0;1;36mnote: [0mReturning from 'NextBlockTypeCode'[0m
  739 |   size_t typecode = NextBlockTypeCode(&code->type_code_calculator, block_type);[0m
      | [0;1;32m                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:739:3: [0m[0;1;36mnote: [0m'typecode' initialized to 1[0m
  739 |   size_t typecode = NextBlockTypeCode(&code->type_code_calculator, block_type);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:743:8: [0m[0;1;36mnote: [0m'is_first_block' is 0[0m
  743 |   if (!is_first_block) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:743:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  743 |   if (!is_first_block) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:744:5: [0m[0;1;36mnote: [0m1st function call argument is an uninitialized value[0m
  744 |     BrotliWriteBits(code->type_depths[typecode], code->type_bits[typecode],[0m
      | [0;1;32m    ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:749:3: [0m[0;1;35mwarning: [0m[1m1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage][0m
  749 |   BrotliWriteBits(code->length_depths[lencode], code->length_bits[lencode],[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:957:10: [0m[0;1;36mnote: [0m'?' condition is true[0m
  957 |   tree = BROTLI_ALLOC(m, HuffmanTree, MAX_HUFFMAN_TREE_SIZE);[0m
      | [0;1;32m         ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/brotli_bit_stream.c:958:7: [0m[0;1;36mnote: [0mLeft side of '||' is false[0m
  958 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(tree)) return;[0m
      | [0;1;32m      ^
[0m[1mc/enc/././memory.h:54:26: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_IS_OOM'[0m
   54 | #define BROTLI_IS_OOM(M) (!!0)[0m
      | [0;1;32m                         ^
[0m[1mc/enc/brotli_bit_stream.c:958:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  958 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(tree)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:962:3: [0m[0;1;36mnote: [0mCalling 'InitBlockEncoder'[0m
  962 |   InitBlockEncoder(&command_enc, BROTLI_NUM_COMMAND_SYMBOLS,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  963 |       mb->command_split.num_types, mb->command_split.types,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  964 |       mb->command_split.lengths, mb->command_split.num_blocks);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:852:22: [0m[0;1;36mnote: [0mAssuming 'num_blocks' is not equal to 0[0m
  852 |   self->block_len_ = num_blocks == 0 ? 0 : block_lengths[0];[0m
      | [0;1;32m                     ^~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:852:22: [0m[0;1;36mnote: [0m'?' condition is false[0m
[1mc/enc/brotli_bit_stream.c:962:3: [0m[0;1;36mnote: [0mReturning from 'InitBlockEncoder'[0m
  962 |   InitBlockEncoder(&command_enc, BROTLI_NUM_COMMAND_SYMBOLS,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  963 |       mb->command_split.num_types, mb->command_split.types,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  964 |       mb->command_split.lengths, mb->command_split.num_blocks);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:970:3: [0m[0;1;36mnote: [0mCalling 'BuildAndStoreBlockSwitchEntropyCodes'[0m
  970 |   BuildAndStoreBlockSwitchEntropyCodes(&command_enc, tree, storage_ix, storage);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:867:3: [0m[0;1;36mnote: [0mCalling 'BuildAndStoreBlockSplitCode'[0m
  867 |   BuildAndStoreBlockSplitCode(self->block_types_, self->block_lengths_,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  868 |       self->num_blocks_, self->num_block_types_, tree, &self->block_split_code_,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  869 |       storage_ix, storage);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:771:15: [0m[0;1;36mnote: [0m'i' is < 'num_blocks'[0m
  771 |   for (i = 0; i < num_blocks; ++i) {[0m
      | [0;1;32m              ^
[0m[1mc/enc/brotli_bit_stream.c:771:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
  771 |   for (i = 0; i < num_blocks; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:773:9: [0m[0;1;36mnote: [0m'i' is equal to 0[0m
  773 |     if (i != 0) ++type_histo[type_code];[0m
      | [0;1;32m        ^
[0m[1mc/enc/brotli_bit_stream.c:773:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  773 |     if (i != 0) ++type_histo[type_code];[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:771:15: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'num_blocks'[0m
  771 |   for (i = 0; i < num_blocks; ++i) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:771:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 776[0m
  771 |   for (i = 0; i < num_blocks; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:777:7: [0m[0;1;36mnote: [0mAssuming 'num_types' is <= 1[0m
  777 |   if (num_types > 1) {  /* TODO: else? could StoreBlockSwitch occur? */[0m
      | [0;1;32m      ^~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:777:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  777 |   if (num_types > 1) {  /* TODO: else? could StoreBlockSwitch occur? */[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:867:3: [0m[0;1;36mnote: [0mReturning from 'BuildAndStoreBlockSplitCode'[0m
  867 |   BuildAndStoreBlockSplitCode(self->block_types_, self->block_lengths_,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  868 |       self->num_blocks_, self->num_block_types_, tree, &self->block_split_code_,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  869 |       storage_ix, storage);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:970:3: [0m[0;1;36mnote: [0mReturning from 'BuildAndStoreBlockSwitchEntropyCodes'[0m
  970 |   BuildAndStoreBlockSwitchEntropyCodes(&command_enc, tree, storage_ix, storage);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:976:10: [0m[0;1;36mnote: [0mAssuming right operand of bit shift is less than 32[0m
  976 |       4, dist->num_direct_distance_codes >> dist->distance_postfix_bits,[0m
      | [0;1;32m         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:978:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 982[0m
  978 |   for (i = 0; i < mb->literal_split.num_types; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:982:7: [0m[0;1;36mnote: [0mAssuming field 'literal_context_map_size' is not equal to 0[0m
  982 |   if (mb->literal_context_map_size == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:982:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  982 |   if (mb->literal_context_map_size == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:989:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  989 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:992:7: [0m[0;1;36mnote: [0mAssuming field 'distance_context_map_size' is not equal to 0[0m
  992 |   if (mb->distance_context_map_size == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:992:3: [0m[0;1;36mnote: [0mTaking false branch[0m
  992 |   if (mb->distance_context_map_size == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:999:5: [0m[0;1;36mnote: [0mTaking false branch[0m
  999 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:1005:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1005 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:1006:3: [0m[0;1;36mnote: [0mCalling 'BuildAndStoreEntropyCodesCommand'[0m
 1006 |   BuildAndStoreEntropyCodesCommand(m, &command_enc, mb->command_histograms,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1007 |       mb->command_histograms_size, BROTLI_NUM_COMMAND_SYMBOLS, tree,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1008 |       storage_ix, storage);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_encoder_inc.h:19:19: [0m[0;1;36mnote: [0mAssuming 'table_size' is <= 0[0m
   19 |   self->depths_ = BROTLI_ALLOC(m, uint8_t, table_size);[0m
      | [0;1;32m                  ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~~~~~
[0m[1mc/enc/./block_encoder_inc.h:19:19: [0m[0;1;36mnote: [0m'?' condition is false[0m
   19 |   self->depths_ = BROTLI_ALLOC(m, uint8_t, table_size);[0m
      | [0;1;32m                  ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/./block_encoder_inc.h:20:17: [0m[0;1;36mnote: [0m'table_size' is <= 0[0m
   20 |   self->bits_ = BROTLI_ALLOC(m, uint16_t, table_size);[0m
      | [0;1;32m                ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^~~
[0m[1mc/enc/./block_encoder_inc.h:20:17: [0m[0;1;36mnote: [0m'?' condition is false[0m
   20 |   self->bits_ = BROTLI_ALLOC(m, uint16_t, table_size);[0m
      | [0;1;32m                ^
[0m[1mc/enc/././memory.h:45:4: [0m[0;1;36mnote: [0mexpanded from macro 'BROTLI_ALLOC'[0m
   45 |   ((N) > 0 ? ((T*)BrotliAllocate((M), (N) * sizeof(T))) : NULL)[0m
      | [0;1;32m   ^
[0m[1mc/enc/./block_encoder_inc.h:21:3: [0m[0;1;36mnote: [0mTaking false branch[0m
   21 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/./block_encoder_inc.h:25:17: [0m[0;1;36mnote: [0mAssuming 'i' is >= 'histograms_size'[0m
   25 |     for (i = 0; i < histograms_size; ++i) {[0m
      | [0;1;32m                ^~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/./block_encoder_inc.h:25:5: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 1006[0m
   25 |     for (i = 0; i < histograms_size; ++i) {[0m
      | [0;1;32m    ^
[0m[1mc/enc/brotli_bit_stream.c:1006:3: [0m[0;1;36mnote: [0mReturning from 'BuildAndStoreEntropyCodesCommand'[0m
 1006 |   BuildAndStoreEntropyCodesCommand(m, &command_enc, mb->command_histograms,[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1007 |       mb->command_histograms_size, BROTLI_NUM_COMMAND_SYMBOLS, tree,[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m 1008 |       storage_ix, storage);[0m
      | [0;1;32m      ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:1009:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1009 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:1013:3: [0m[0;1;36mnote: [0mTaking false branch[0m
 1013 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:1016:15: [0m[0;1;36mnote: [0mAssuming 'i' is < 'n_commands'[0m
 1016 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m              ^~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:1016:3: [0m[0;1;36mnote: [0mLoop condition is true.  Entering loop body[0m
 1016 |   for (i = 0; i < n_commands; ++i) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:1019:5: [0m[0;1;36mnote: [0mCalling 'StoreSymbol'[0m
 1019 |     StoreSymbol(&command_enc, cmd_code, storage_ix, storage);[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:876:7: [0m[0;1;36mnote: [0mAssuming field 'block_len_' is equal to 0[0m
  876 |   if (self->block_len_ == 0) {[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:876:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  876 |   if (self->block_len_ == 0) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:882:5: [0m[0;1;36mnote: [0mCalling 'StoreBlockSwitch'[0m
  882 |     StoreBlockSwitch(&self->block_split_code_, block_len, block_type, 0,[0m
      | [0;1;32m    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m  883 |         storage_ix, storage);[0m
      | [0;1;32m        ~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:743:8: [0m[0;1;36mnote: [0m'is_first_block' is 0[0m
  743 |   if (!is_first_block) {[0m
      | [0;1;32m       ^~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:743:3: [0m[0;1;36mnote: [0mTaking true branch[0m
  743 |   if (!is_first_block) {[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:747:3: [0m[0;1;36mnote: [0mCalling 'GetBlockLengthPrefixCode'[0m
  747 |   GetBlockLengthPrefixCode(block_len, &lencode, &len_nextra, &len_extra);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:46:11: [0m[0;1;36mnote: [0mCalling 'BlockLengthPrefixCode'[0m
   46 |   *code = BlockLengthPrefixCode(len);[0m
      | [0;1;32m          ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:38:20: [0m[0;1;36mnote: [0mAssuming 'len' is < 177[0m
   38 |   uint32_t code = (len >= 177) ? (len >= 753 ? 20 : 14) : (len >= 41 ? 7 : 0);[0m
      | [0;1;32m                   ^~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:38:19: [0m[0;1;36mnote: [0m'?' condition is false[0m
   38 |   uint32_t code = (len >= 177) ? (len >= 753 ? 20 : 14) : (len >= 41 ? 7 : 0);[0m
      | [0;1;32m                  ^
[0m[1mc/enc/brotli_bit_stream.c:38:60: [0m[0;1;36mnote: [0mAssuming 'len' is >= 41[0m
   38 |   uint32_t code = (len >= 177) ? (len >= 753 ? 20 : 14) : (len >= 41 ? 7 : 0);[0m
      | [0;1;32m                                                           ^~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:38:60: [0m[0;1;36mnote: [0m'?' condition is true[0m
[1mc/enc/brotli_bit_stream.c:38:3: [0m[0;1;36mnote: [0m'code' initialized to 7[0m
   38 |   uint32_t code = (len >= 177) ? (len >= 753 ? 20 : 14) : (len >= 41 ? 7 : 0);[0m
      | [0;1;32m  ^~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:39:10: [0m[0;1;36mnote: [0mLeft side of '&&' is true[0m
   39 |   while (code < (BROTLI_NUM_BLOCK_LEN_SYMBOLS - 1) &&[0m
      | [0;1;32m         ^
[0m[1mc/enc/brotli_bit_stream.c:40:7: [0m[0;1;36mnote: [0mAssuming 'len' is < field 'offset'[0m
   40 |       len >= _kBrotliPrefixCodeRanges[code + 1].offset) ++code;[0m
      | [0;1;32m      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:39:3: [0m[0;1;36mnote: [0mLoop condition is false. Execution continues on line 41[0m
   39 |   while (code < (BROTLI_NUM_BLOCK_LEN_SYMBOLS - 1) &&[0m
      | [0;1;32m  ^
[0m[1mc/enc/brotli_bit_stream.c:41:3: [0m[0;1;36mnote: [0mReturning the value 7 (loaded from 'code')[0m
   41 |   return code;[0m
      | [0;1;32m  ^~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:46:11: [0m[0;1;36mnote: [0mReturning from 'BlockLengthPrefixCode'[0m
   46 |   *code = BlockLengthPrefixCode(len);[0m
      | [0;1;32m          ^~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:46:3: [0m[0;1;36mnote: [0mThe value 7 is assigned to 'lencode'[0m
   46 |   *code = BlockLengthPrefixCode(len);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:747:3: [0m[0;1;36mnote: [0mReturning from 'GetBlockLengthPrefixCode'[0m
  747 |   GetBlockLengthPrefixCode(block_len, &lencode, &len_nextra, &len_extra);[0m
      | [0;1;32m  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:749:3: [0m[0;1;36mnote: [0m1st function call argument is an uninitialized value[0m
  749 |   BrotliWriteBits(code->length_depths[lencode], code->length_bits[lencode],[0m
      | [0;1;32m  ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[1mc/enc/brotli_bit_stream.c:768:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  768 |   memset(type_histo, 0, (num_types + 2) * sizeof(type_histo[0]));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:768:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  768 |   memset(type_histo, 0, (num_types + 2) * sizeof(type_histo[0]));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:769:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  769 |   memset(length_histo, 0, sizeof(length_histo));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:769:3: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  769 |   memset(length_histo, 0, sizeof(length_histo));[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:773:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  773 |     if (i != 0) ++type_histo[type_code];[0m
      | [0;1;32m               ^                        
[0m      | [0;32m                {
[0m[1mc/enc/brotli_bit_stream.c:804:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  804 |     memset(histogram, 0, alphabet_size * sizeof(histogram[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:804:5: [0m[0;1;36mnote: [0mCall to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11[0m
  804 |     memset(histogram, 0, alphabet_size * sizeof(histogram[0]));[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:958:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  958 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(tree)) return;[0m
      | [0;1;32m                                               ^       
[0m      | [0;32m                                                {
[0m[1mc/enc/brotli_bit_stream.c:989:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  989 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/brotli_bit_stream.c:999:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  999 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/brotli_bit_stream.c:1005:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1005 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/brotli_bit_stream.c:1009:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1009 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/brotli_bit_stream.c:1013:24: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1013 |   if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                       ^       
[0m      | [0;32m                        {
[0m[1mc/enc/brotli_bit_stream.c:1163:48: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1163 |   if (BROTLI_IS_OOM(m) || BROTLI_IS_NULL(tree)) return;[0m
      | [0;1;32m                                               ^       
[0m      | [0;32m                                                {
[0m[1mc/enc/brotli_bit_stream.c:1221:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1221 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/brotli_bit_stream.c:1251:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1251 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/brotli_bit_stream.c:1257:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1257 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/brotli_bit_stream.c:1264:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1264 |     if (BROTLI_IS_OOM(m)) return;[0m
      | [0;1;32m                         ^       
[0m      | [0;32m                          {
[0m[1mc/enc/brotli_bit_stream.c:1291:5: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1291 |     memcpy(&storage[*storage_ix >> 3], &input[masked_pos], len1);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:1291:5: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1291 |     memcpy(&storage[*storage_ix >> 3], &input[masked_pos], len1);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:1296:3: [0m[0;1;35mwarning: [0m[1mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1296 |   memcpy(&storage[*storage_ix >> 3], &input[masked_pos], len);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/enc/brotli_bit_stream.c:1296:3: [0m[0;1;36mnote: [0mCall to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11[0m
 1296 |   memcpy(&storage[*storage_ix >> 3], &input[masked_pos], len);[0m
      | [0;1;32m  ^~~~~~
[0m44 warnings generated.
Suppressed 14 warnings (14 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

[30/30][198.1s] /home/C00536225/dev/tcc/build/bin/clang-tidy --use-color -checks=readability-braces-around-statements -export-fixes /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/tidy-fixes/tmpt2yecag1.yaml -p=/itch/common/crepos/cu-to-rtu/c/brotli-1.0.9 /itch/common/crepos/cu-to-rtu/c/brotli-1.0.9/c/tools/brotli.c
[1mc/tools/brotli.c:143:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  143 |     if (c == 0) break;[0m
      | [0;1;32m               ^      
[0m      | [0;32m                {
[0m[1mc/tools/brotli.c:144:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  144 |     if (s[i] < '0' || s[i] > '9') return BROTLI_FALSE;[0m
      | [0;1;32m                                 ^                    
[0m      | [0;32m                                  {
[0m[1mc/tools/brotli.c:147:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  147 |   if (i == 0) return BROTLI_FALSE;[0m
      | [0;1;32m             ^                    
[0m      | [0;32m              {
[0m[1mc/tools/brotli.c:148:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  148 |   if (i > 1 && s[0] == '0') return BROTLI_FALSE;[0m
      | [0;1;32m                           ^                    
[0m      | [0;32m                            {
[0m[1mc/tools/brotli.c:149:17: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  149 |   if (s[i] != 0) return BROTLI_FALSE;[0m
      | [0;1;32m                ^                    
[0m      | [0;32m                 {
[0m[1mc/tools/brotli.c:150:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  150 |   if (value < low || value > high) return BROTLI_FALSE;[0m
      | [0;1;32m                                  ^                    
[0m      | [0;32m                                   {
[0m[1mc/tools/brotli.c:158:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  158 |   if (separator_position) path = separator_position + 1;[0m
      | [0;1;32m                         ^                              
[0m      | [0;32m                          {
[0m[1mc/tools/brotli.c:160:26: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  160 |   if (separator_position) path = separator_position + 1;[0m
      | [0;1;32m                         ^                              
[0m      | [0;32m                          {
[0m[1mc/tools/brotli.c:173:46: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  173 |     if (terminator == 0 || terminator == '.') return COMMAND_DECOMPRESS;[0m
      | [0;1;32m                                             ^                          
[0m      | [0;32m                                              {
[0m[1mc/tools/brotli.c:210:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  210 |       fprintf(stderr, "too many options passed\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:210:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  210 |       fprintf(stderr, "too many options passed\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:217:38: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  217 |       if (longest_path_len < arg_len) longest_path_len = arg_len;[0m
      | [0;1;32m                                     ^                           
[0m      | [0;32m                                      {
[0m[1mc/tools/brotli.c:237:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  237 |             fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:237:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  237 |             fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:245:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  245 |             fprintf(stderr, "write to standard output already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:245:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  245 |             fprintf(stderr, "write to standard output already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:253:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  253 |             fprintf(stderr, "command already set when parsing -d\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:253:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  253 |             fprintf(stderr, "command already set when parsing -d\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:261:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  261 |             fprintf(stderr, "force output overwrite already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:261:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  261 |             fprintf(stderr, "force output overwrite already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:271:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  271 |             fprintf(stderr, "argument --rm / -j or --keep / -k already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:271:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  271 |             fprintf(stderr, "argument --rm / -j or --keep / -k already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:279:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  279 |             fprintf(stderr, "argument --no-copy-stat / -n already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:279:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  279 |             fprintf(stderr, "argument --no-copy-stat / -n already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:286:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  286 |             fprintf(stderr, "command already set when parsing -t\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:286:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  286 |             fprintf(stderr, "command already set when parsing -t\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:294:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  294 |             fprintf(stderr, "argument --verbose / -v already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:294:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  294 |             fprintf(stderr, "argument --verbose / -v already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:304:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  304 |             fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:304:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  304 |             fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:313:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  313 |           fprintf(stderr, "invalid argument -%c\n", c);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:313:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  313 |           fprintf(stderr, "invalid argument -%c\n", c);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:317:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  317 |           fprintf(stderr, "expected parameter for argument -%c\n", c);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:317:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  317 |           fprintf(stderr, "expected parameter for argument -%c\n", c);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:322:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  322 |           fprintf(stderr, "expected parameter for argument -%c\n", c);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:322:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  322 |           fprintf(stderr, "expected parameter for argument -%c\n", c);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:328:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  328 |             fprintf(stderr, "write to standard output already set (-o)\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:328:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  328 |             fprintf(stderr, "write to standard output already set (-o)\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:334:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  334 |             fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:334:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  334 |             fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:340:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  340 |             fprintf(stderr, "error parsing quality value [%s]\n", argv[i]);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:340:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  340 |             fprintf(stderr, "error parsing quality value [%s]\n", argv[i]);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:345:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  345 |             fprintf(stderr, "lgwin parameter already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:345:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  345 |             fprintf(stderr, "lgwin parameter already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:351:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  351 |             fprintf(stderr, "error parsing lgwin value [%s]\n", argv[i]);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:351:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  351 |             fprintf(stderr, "error parsing lgwin value [%s]\n", argv[i]);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:355:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  355 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:355:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  355 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:362:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  362 |             fprintf(stderr, "suffix already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:362:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  362 |             fprintf(stderr, "suffix already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:373:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  373 |           fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:373:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  373 |           fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:380:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  380 |           fprintf(stderr, "command already set when parsing --decompress\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:380:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  380 |           fprintf(stderr, "command already set when parsing --decompress\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:387:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  387 |           fprintf(stderr, "force output overwrite already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:387:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  387 |           fprintf(stderr, "force output overwrite already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:396:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  396 |           fprintf(stderr, "argument --rm / -j or --keep / -k already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:396:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  396 |           fprintf(stderr, "argument --rm / -j or --keep / -k already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:403:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  403 |           fprintf(stderr, "argument --no-copy-stat / -n already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:403:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  403 |           fprintf(stderr, "argument --no-copy-stat / -n already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:409:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  409 |           fprintf(stderr, "argument --rm / -j or --keep / -k already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:409:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  409 |           fprintf(stderr, "argument --rm / -j or --keep / -k already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:416:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  416 |           fprintf(stderr, "write to standard output already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:416:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  416 |           fprintf(stderr, "write to standard output already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:423:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  423 |           fprintf(stderr, "command already set when parsing --test\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:423:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  423 |           fprintf(stderr, "command already set when parsing --test\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:430:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  430 |           fprintf(stderr, "argument --verbose / -v already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:430:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  430 |           fprintf(stderr, "argument --verbose / -v already set\n");[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:442:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  442 |           fprintf(stderr, "must pass the parameter as --%s=value\n", arg);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:442:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  442 |           fprintf(stderr, "must pass the parameter as --%s=value\n", arg);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:449:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  449 |             fprintf(stderr, "lgwin parameter already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:449:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  449 |             fprintf(stderr, "lgwin parameter already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:455:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  455 |             fprintf(stderr, "error parsing lgwin value [%s]\n", value);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:455:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  455 |             fprintf(stderr, "error parsing lgwin value [%s]\n", value);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:459:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  459 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:459:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  459 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:467:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  467 |             fprintf(stderr, "lgwin parameter already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:467:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  467 |             fprintf(stderr, "lgwin parameter already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:473:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  473 |             fprintf(stderr, "error parsing lgwin value [%s]\n", value);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:473:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  473 |             fprintf(stderr, "error parsing lgwin value [%s]\n", value);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:477:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  477 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:477:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  477 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:484:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  484 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:484:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  484 |             fprintf(stderr,[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:491:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  491 |             fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:491:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  491 |             fprintf(stderr, "quality already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:497:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  497 |             fprintf(stderr, "error parsing quality value [%s]\n", value);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:497:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  497 |             fprintf(stderr, "error parsing quality value [%s]\n", value);[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:502:13: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  502 |             fprintf(stderr, "suffix already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:502:13: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  502 |             fprintf(stderr, "suffix already set\n");[0m
      | [0;1;32m            ^~~~~~~
[0m[1mc/tools/brotli.c:508:11: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  508 |           fprintf(stderr, "invalid parameter: [%s]\n", arg);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:508:11: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  508 |           fprintf(stderr, "invalid parameter: [%s]\n", arg);[0m
      | [0;1;32m          ^~~~~~~
[0m[1mc/tools/brotli.c:520:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  520 |   if (input_count > 1 && output_set) return COMMAND_INVALID;[0m
      | [0;1;32m                                    ^                       
[0m      | [0;32m                                     {
[0m[1mc/tools/brotli.c:522:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  522 |     if (params->output_path) return COMMAND_INVALID;[0m
      | [0;1;32m                            ^                       
[0m      | [0;32m                             {
[0m[1mc/tools/brotli.c:523:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  523 |     if (params->write_to_stdout) return COMMAND_INVALID;[0m
      | [0;1;32m                                ^                       
[0m      | [0;32m                                 {
[0m[1mc/tools/brotli.c:536:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  536 |   fprintf(stdout, "brotli %d.%d.%d\n", major, minor, patch);[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:536:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  536 |   fprintf(stdout, "brotli %d.%d.%d\n", major, minor, patch);[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:542:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  542 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:542:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  542 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:545:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  545 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:545:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  545 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:552:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  552 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:552:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  552 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:557:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  557 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:557:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  557 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:560:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  560 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:560:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  560 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:563:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  563 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:563:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  563 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:568:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  568 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:568:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  568 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:575:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  575 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:575:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  575 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:578:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  578 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:578:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  578 |   fprintf(media,[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:598:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  598 |     fprintf(stderr, "failed to open input file [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:598:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  598 |     fprintf(stderr, "failed to open input file [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:616:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  616 |     fprintf(stderr, "failed to open output file [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:616:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  616 |     fprintf(stderr, "failed to open output file [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:622:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  622 |     fprintf(stderr, "failed to open output file [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:622:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  622 |     fprintf(stderr, "failed to open output file [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:664:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  664 |     fprintf(stderr, "setting access bits failed for [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:664:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  664 |     fprintf(stderr, "setting access bits failed for [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:669:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  669 |     fprintf(stderr, "setting group failed for [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:669:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  669 |     fprintf(stderr, "setting group failed for [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:674:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  674 |     fprintf(stderr, "setting user failed for [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:674:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  674 |     fprintf(stderr, "setting user failed for [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:690:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  690 |     if (context->iterator > 1) return BROTLI_FALSE;[0m
      | [0;1;32m                              ^                    
[0m      | [0;32m                               {
[0m[1mc/tools/brotli.c:704:42: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  704 |   if (context->iterator >= context->argc) return BROTLI_FALSE;[0m
      | [0;1;32m                                         ^                    
[0m      | [0;32m                                          {
[0m[1mc/tools/brotli.c:720:28: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  720 |   if (context->output_path) return BROTLI_TRUE;[0m
      | [0;1;32m                           ^                   
[0m      | [0;32m                            {
[0m[1mc/tools/brotli.c:721:32: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  721 |   if (context->write_to_stdout) return BROTLI_TRUE;[0m
      | [0;1;32m                               ^                   
[0m      | [0;32m                                {
[0m[1mc/tools/brotli.c:723:3: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  723 |   strcpy(context->modified_path, arg);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/tools/brotli.c:723:3: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  723 |   strcpy(context->modified_path, arg);[0m
      | [0;1;32m  ^~~~~~
[0m[1mc/tools/brotli.c:732:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  732 |       fprintf(stderr, "empty output file name for [%s] input file\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:732:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  732 |       fprintf(stderr, "empty output file name for [%s] input file\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:739:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  739 |       fprintf(stderr, "input file [%s] suffix mismatch\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:739:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  739 |       fprintf(stderr, "input file [%s] suffix mismatch\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:747:5: [0m[0;1;35mwarning: [0m[1mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy][0m
  747 |     strcpy(context->modified_path + arg_len, context->suffix);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/tools/brotli.c:747:5: [0m[0;1;36mnote: [0mCall to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119[0m
  747 |     strcpy(context->modified_path + arg_len, context->suffix);[0m
      | [0;1;32m    ^~~~~~
[0m[1mc/tools/brotli.c:769:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  769 |         fprintf(stderr, "fclose failed [%s]: %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:769:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  769 |         fprintf(stderr, "fclose failed [%s]: %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:784:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  784 |         fprintf(stderr, "fclose failed [%s]: %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:784:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  784 |         fprintf(stderr, "fclose failed [%s]: %s\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:823:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  823 |     fprintf(stderr, "failed to read input [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:823:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  823 |     fprintf(stderr, "failed to read input [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:834:21: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  834 |   if (out_size == 0) return BROTLI_TRUE;[0m
      | [0;1;32m                    ^                   
[0m      | [0;32m                     {
[0m[1mc/tools/brotli.c:835:31: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  835 |   if (context->test_integrity) return BROTLI_TRUE;[0m
      | [0;1;32m                              ^                   
[0m      | [0;32m                               {
[0m[1mc/tools/brotli.c:839:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  839 |     fprintf(stderr, "failed to write output [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:839:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  839 |     fprintf(stderr, "failed to write output [%s]: %s\n",[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:847:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  847 |   if (!WriteOutput(context)) return BROTLI_FALSE;[0m
      | [0;1;32m                            ^                    
[0m      | [0;32m                             {
[0m[1mc/tools/brotli.c:854:29: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  854 |   if (!WriteOutput(context)) return BROTLI_FALSE;[0m
      | [0;1;32m                            ^                    
[0m      | [0;32m                             {
[0m[1mc/tools/brotli.c:861:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  861 |     fprintf(stderr, "%d B", (int)value);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:861:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  861 |     fprintf(stderr, "%d B", (int)value);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:863:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  863 |     fprintf(stderr, "%0.3f KiB", (double)value / 1024.0);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:863:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  863 |     fprintf(stderr, "%0.3f KiB", (double)value / 1024.0);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:865:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  865 |     fprintf(stderr, "%0.3f MiB", (double)value / 1048576.0);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:865:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  865 |     fprintf(stderr, "%0.3f MiB", (double)value / 1048576.0);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:867:5: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  867 |     fprintf(stderr, "%0.3f GiB", (double)value / 1073741824.0);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:867:5: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  867 |     fprintf(stderr, "%0.3f GiB", (double)value / 1073741824.0);[0m
      | [0;1;32m    ^~~~~~~
[0m[1mc/tools/brotli.c:872:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  872 |   fprintf(stderr, "[%s]: ", PrintablePath(context->current_input_path));[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:872:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  872 |   fprintf(stderr, "[%s]: ", PrintablePath(context->current_input_path));[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:874:3: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  874 |   fprintf(stderr, " -> ");[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:874:3: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  874 |   fprintf(stderr, " -> ");[0m
      | [0;1;32m  ^~~~~~~
[0m[1mc/tools/brotli.c:884:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  884 |         fprintf(stderr, "corrupt input [%s]\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:884:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  884 |         fprintf(stderr, "corrupt input [%s]\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:888:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  888 |       if (!ProvideInput(context)) return BROTLI_FALSE;[0m
      | [0;1;32m                                 ^                    
[0m      | [0;32m                                  {
[0m[1mc/tools/brotli.c:890:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  890 |       if (!ProvideOutput(context)) return BROTLI_FALSE;[0m
      | [0;1;32m                                  ^                    
[0m      | [0;32m                                   {
[0m[1mc/tools/brotli.c:892:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  892 |       if (!FlushOutput(context)) return BROTLI_FALSE;[0m
      | [0;1;32m                                ^                    
[0m      | [0;32m                                 {
[0m[1mc/tools/brotli.c:896:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  896 |         fprintf(stderr, "corrupt input [%s]\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:896:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  896 |         fprintf(stderr, "corrupt input [%s]\n",[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:901:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  901 |         fprintf(stderr, "Decompressed ");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:901:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  901 |         fprintf(stderr, "Decompressed ");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:903:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  903 |         fprintf(stderr, "\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:903:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  903 |         fprintf(stderr, "\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:907:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  907 |       fprintf(stderr, "corrupt input [%s]\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:907:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  907 |       fprintf(stderr, "corrupt input [%s]\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:922:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  922 |       fprintf(stderr, "out of memory\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:922:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  922 |       fprintf(stderr, "out of memory\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:932:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  932 |       fprintf(stderr, "Use -h help. Use -f to force input from a terminal.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:932:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  932 |       fprintf(stderr, "Use -h help. Use -f to force input from a terminal.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:935:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  935 |     if (is_ok) is_ok = DecompressFile(context, s);[0m
      | [0;1;32m              ^                                   
[0m      | [0;32m               {
[0m[1mc/tools/brotli.c:937:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  937 |     if (!CloseFiles(context, is_ok)) is_ok = BROTLI_FALSE;[0m
      | [0;1;32m                                    ^                     
[0m      | [0;32m                                     {
[0m[1mc/tools/brotli.c:938:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  938 |     if (!is_ok) return BROTLI_FALSE;[0m
      | [0;1;32m               ^                    
[0m      | [0;32m                {
[0m[1mc/tools/brotli.c:948:34: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  948 |       if (!ProvideInput(context)) return BROTLI_FALSE;[0m
      | [0;1;32m                                 ^                    
[0m      | [0;32m                                  {
[0m[1mc/tools/brotli.c:957:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  957 |       fprintf(stderr, "failed to compress data [%s]\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:957:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  957 |       fprintf(stderr, "failed to compress data [%s]\n",[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:963:35: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  963 |       if (!ProvideOutput(context)) return BROTLI_FALSE;[0m
      | [0;1;32m                                  ^                    
[0m      | [0;32m                                   {
[0m[1mc/tools/brotli.c:967:33: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
  967 |       if (!FlushOutput(context)) return BROTLI_FALSE;[0m
      | [0;1;32m                                ^                    
[0m      | [0;32m                                 {
[0m[1mc/tools/brotli.c:969:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  969 |         fprintf(stderr, "Compressed ");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:969:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  969 |         fprintf(stderr, "Compressed ");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:971:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  971 |         fprintf(stderr, "\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:971:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  971 |         fprintf(stderr, "\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:983:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
  983 |       fprintf(stderr, "out of memory\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:983:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
  983 |       fprintf(stderr, "out of memory\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:1005:47: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1005 |           if (lgwin == BROTLI_MAX_WINDOW_BITS) break;[0m
      | [0;1;32m                                              ^      
[0m      | [0;32m                                               {
[0m[1mc/tools/brotli.c:1018:7: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1018 |       fprintf(stderr, "Use -h help. Use -f to force output to a terminal.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:1018:7: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1018 |       fprintf(stderr, "Use -h help. Use -f to force output to a terminal.\n");[0m
      | [0;1;32m      ^~~~~~~
[0m[1mc/tools/brotli.c:1021:15: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1021 |     if (is_ok) is_ok = CompressFile(context, s);[0m
      | [0;1;32m              ^                                 
[0m      | [0;32m               {
[0m[1mc/tools/brotli.c:1023:37: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1023 |     if (!CloseFiles(context, is_ok)) is_ok = BROTLI_FALSE;[0m
      | [0;1;32m                                    ^                     
[0m      | [0;32m                                     {
[0m[1mc/tools/brotli.c:1024:16: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1024 |     if (!is_ok) return BROTLI_FALSE;[0m
      | [0;1;32m               ^                    
[0m      | [0;32m                {
[0m[1mc/tools/brotli.c:1047:36: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1047 |   for (i = 0; i < MAX_OPTIONS; ++i) context.not_input_indices[i] = 0;[0m
      | [0;1;32m                                   ^                                 
[0m      | [0;32m                                    {
[0m[1mc/tools/brotli.c:1073:9: [0m[0;1;35mwarning: [0m[1mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling][0m
 1073 |         fprintf(stderr, "out of memory\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:1073:9: [0m[0;1;36mnote: [0mCall to function 'fprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fprintf_s' in case of C11[0m
 1073 |         fprintf(stderr, "out of memory\n");[0m
      | [0;1;32m        ^~~~~~~
[0m[1mc/tools/brotli.c:1082:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1082 |   if (!is_ok) command = COMMAND_NOOP;[0m
      | [0;1;32m             ^                       
[0m      | [0;32m              {
[0m[1mc/tools/brotli.c:1086:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1086 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1mc/tools/brotli.c:1089:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1089 |       PrintVersion();[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1090 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mc/tools/brotli.c:1093:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1093 |       is_ok = CompressFiles(&context);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1094 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mc/tools/brotli.c:1099:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1099 |       break;[0m
      | [0;1;32m      ^    
[0m      | [0;32m      {    ;} 
[0m[1mc/tools/brotli.c:1105:7: [0m[0;1;35mwarning: [0m[1mcase statement body should be in braces [readability-braces-around-statements][0m
 1105 |       PrintHelp(FileName(argv[0]), is_ok);[0m
      | [0;1;32m      ^
[0m      | [0;32m      {
[0m 1106 |       break;[0m
      | [0;1;32m           
[0m      | [0;32m           ;} 
[0m[1mc/tools/brotli.c:1109:30: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1109 |   if (context.iterator_error) is_ok = BROTLI_FALSE;[0m
      | [0;1;32m                             ^                     
[0m      | [0;32m                              {
[0m[1mc/tools/brotli.c:1114:14: [0m[0;1;35mwarning: [0m[1mstatement should be inside braces [readability-braces-around-statements][0m
 1114 |   if (!is_ok) exit(1);[0m
      | [0;1;32m             ^        
[0m      | [0;32m              {
[0m129 warnings generated.
Suppressed 2 warnings (2 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.



Process exited with return code 0
